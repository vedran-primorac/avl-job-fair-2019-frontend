/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 512);
/******/ })
/************************************************************************/
/******/ ({

/***/ 168:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1104);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 1104:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(1105),
	        __webpack_require__(1106),
	        __webpack_require__(1107),
	        __webpack_require__(1108),
	        __webpack_require__(1109)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "drawing",
	        name: "Drawing API",
	        category: "framework",
	        description: "The Kendo UI low-level drawing API",
	        depends: [ "core", "color", "popup" ]
	    };

	}, __webpack_require__(3));

/***/ }),

/***/ 1105:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(467);

/***/ }),

/***/ 1106:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(169);

/***/ }),

/***/ 1107:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(468);

/***/ }),

/***/ 1108:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(517);

/***/ }),

/***/ 1109:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(518);

/***/ })

/******/ });

/***/ }),

/***/ 169:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(911);
	module.exports = __webpack_require__(911);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 911:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(912), __webpack_require__(913), __webpack_require__(914) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	/* jshint eqnull:true */
	/* jshint -W069 */
	/* jshint latedef: nofunc */

	window.kendo = window.kendo || {};
	var kendoDrawing = kendo.drawing;
	var kendoDrawingUtil = kendoDrawing.util;
	var Class = kendo.Class;
	var kendoUtil = kendo.util;
	var support = kendo.support;
	var supportBrowser = support.browser;

	var createPromise = kendoDrawingUtil.createPromise;
	var promiseAll = kendoDrawingUtil.promiseAll;

	var ObserversMixin = {
	    extend: function(proto) {
	        var this$1 = this;

	        for (var method in this) {
	            if (method !== "extend") {
	                proto[method] = this$1[method];
	            }
	        }
	    },

	    observers: function() {
	        this._observers = this._observers || [];
	        return this._observers;
	    },

	    addObserver: function(element) {
	        if (!this._observers) {
	            this._observers = [ element ];
	        } else {
	            this._observers.push(element);
	        }
	        return this;
	    },

	    removeObserver: function(element) {
	        var observers = this.observers();
	        var index = observers.indexOf(element);
	        if (index !== -1) {
	            observers.splice(index, 1);
	        }
	        return this;
	    },

	    trigger: function(methodName, event) {
	        var observers = this._observers;

	        if (observers && !this._suspended) {
	            for (var idx = 0; idx < observers.length; idx++) {
	                var observer = observers[idx];
	                if (observer[methodName]) {
	                    observer[methodName](event);
	                }
	            }
	        }
	        return this;
	    },

	    optionsChange: function(e) {
	        if (e === void 0) { e = {}; }

	        e.element = this;
	        this.trigger("optionsChange", e);
	    },

	    geometryChange: function() {
	        this.trigger("geometryChange", {
	            element: this
	        });
	    },

	    suspend: function() {
	        this._suspended = (this._suspended || 0) + 1;
	        return this;
	    },

	    resume: function() {
	        this._suspended = Math.max((this._suspended || 0) - 1, 0);
	        return this;
	    },

	    _observerField: function(field, value) {
	        if (this[field]) {
	            this[field].removeObserver(this);
	        }
	        this[field] = value;
	        value.addObserver(this);
	    }
	};

	function append(first, second) {
	    first.push.apply(first, second);
	    return first;
	}

	/* eslint-disable key-spacing,no-multi-spaces,no-param-reassign */

	var literals = {
	    1    : "i",       10   : "x",       100  : "c",
	    2    : "ii",      20   : "xx",      200  : "cc",
	    3    : "iii",     30   : "xxx",     300  : "ccc",
	    4    : "iv",      40   : "xl",      400  : "cd",
	    5    : "v",       50   : "l",       500  : "d",
	    6    : "vi",      60   : "lx",      600  : "dc",
	    7    : "vii",     70   : "lxx",     700  : "dcc",
	    8    : "viii",    80   : "lxxx",    800  : "dccc",
	    9    : "ix",      90   : "xc",      900  : "cm",
	    1000 : "m"
	};

	function arabicToRoman(n) {
	    var values = [ 1000,
	                   900 , 800, 700, 600, 500, 400, 300, 200, 100,
	                   90  , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ,
	                   9   , 8  , 7  , 6  , 5  , 4  , 3  , 2  , 1 ];

	    var roman = "";
	    while (n > 0) {
	        if (n < values[0]) {
	            values.shift();
	        } else {
	            roman += literals[values[0]];
	            n -= values[0];
	        }
	    }
	    return roman;
	}

	var UNDEFINED = "undefined";

	function defined(value) {
	    return typeof value !== UNDEFINED;
	}

	var defId = 1;

	function definitionId() {
	    return "kdef" + defId++;
	}

	var DEG_TO_RAD = Math.PI / 180;
	var MAX_NUM = Number.MAX_VALUE;
	var MIN_NUM = -Number.MAX_VALUE;

	function deg(radians) {
	    return radians / DEG_TO_RAD;
	}

	var KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	var fromCharCode = String.fromCharCode;

	function encodeUTF8(input) {
	    var output = "";

	    for (var i = 0; i < input.length; i++) {
	        var c = input.charCodeAt(i);

	        if (c < 0x80) {
	            // One byte
	            output += fromCharCode(c);
	        } else if (c < 0x800) {
	            // Two bytes
	            output += fromCharCode(0xC0 | (c >>> 6));
	            output += fromCharCode(0x80 | (c & 0x3f));
	        } else if (c < 0x10000) {
	            // Three bytes
	            output += fromCharCode(0xE0 | (c >>> 12));
	            output += fromCharCode(0x80 | (c >>> 6 & 0x3f));
	            output += fromCharCode(0x80 | (c & 0x3f));
	        }
	    }

	    return output;
	}

	function encodeBase64(input) {
	    var output = "";
	    var i = 0;

	    var utfInput = encodeUTF8(input);

	    while (i < utfInput.length) {
	        var chr1 = utfInput.charCodeAt(i++);
	        var chr2 = utfInput.charCodeAt(i++);
	        var chr3 = utfInput.charCodeAt(i++);

	        var enc1 = chr1 >> 2;
	        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	        var enc4 = chr3 & 63;

	        if (isNaN(chr2)) {
	            enc3 = enc4 = 64;
	        } else if (isNaN(chr3)) {
	            enc4 = 64;
	        }

	        output = output +
	            KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +
	            KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
	    }

	    return output;
	}

	function eventCoordinates(e) {
	    if (defined((e.x || {}).location)) {
	        return {
	            x: e.x.location,
	            y: e.y.location
	        };
	    }

	    return {
	        x: e.pageX || e.clientX || 0,
	        y: e.pageY || e.clientY || 0
	    };
	}

	function eventElement(e) {
	    if (e === void 0) { e = {}; }

	    return e.touch ? e.touch.initialTouch : e.target;
	}

	function isTransparent(color) {
	    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
	}

	function last(array) {
	    if (array) {
	        return array[array.length - 1];
	    }
	}

	function limitValue(value, min, max) {
	    return Math.max(Math.min(value, max), min);
	}

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	// mergeSort is stable.
	function mergeSort(a, cmp) {
	    if (a.length < 2) {
	        return a.slice();
	    }
	    function merge(a, b) {
	        var r = [], ai = 0, bi = 0, i = 0;
	        while (ai < a.length && bi < b.length) {
	            if (cmp(a[ai], b[bi]) <= 0) {
	                r[i++] = a[ai++];
	            } else {
	                r[i++] = b[bi++];
	            }
	        }
	        if (ai < a.length) {
	            r.push.apply(r, a.slice(ai));
	        }
	        if (bi < b.length) {
	            r.push.apply(r, b.slice(bi));
	        }
	        return r;
	    }
	    return (function sort(a) {
	        if (a.length <= 1) {
	            return a;
	        }
	        var m = Math.floor(a.length / 2);
	        var left = a.slice(0, m);
	        var right = a.slice(m);
	        left = sort(left);
	        right = sort(right);
	        return merge(left, right);
	    })(a);
	}

	function rad(degrees) {
	    return degrees * DEG_TO_RAD;
	}

	function pow(p) {
	    if (p) {
	        return Math.pow(10, p);
	    }

	    return 1;
	}

	function round(value, precision) {
	    var power = pow(precision);
	    return Math.round(value * power) / power;
	}

	function valueOrDefault(value, defaultValue) {
	    return defined(value) ? value : defaultValue;
	}

	function bindEvents(element, events) {
	    for (var eventName in events) {
	        var eventNames = eventName.trim().split(" ");
	        for (var idx = 0; idx < eventNames.length; idx++) {
	            element.addEventListener(eventNames[idx], events[eventName], false);
	        }
	    }
	}

	function elementOffset(element) {
	    var box = element.getBoundingClientRect();

	    var documentElement = document.documentElement;

	    return {
	        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0),
	        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0)
	    };
	}

	function elementStyles(element, styles) {
	    var result = {};
	    var style = window.getComputedStyle(element);
	    var stylesArray = Array.isArray(styles) ? styles : [ styles ];

	    for (var idx = 0; idx < stylesArray.length; idx++) {
	        var field = stylesArray[idx];
	        result[field] = style[field];
	    }

	    return result;
	}

	function getPixels(value) {
	    if (isNaN(value)) {
	        return value;
	    }
	    return value + "px";
	}

	function elementSize(element, size) {
	    if (size) {
	        var width = size.width;
	        var height = size.height;

	        if (defined(width)) {
	            element.style.width = getPixels(width);
	        }

	        if (defined(height)) {
	            element.style.height = getPixels(height);
	        }

	    } else {
	        var size$1 = elementStyles(element, [ 'width', 'height' ]);

	        return {
	            width: parseInt(size$1.width, 10),
	            height: parseInt(size$1.height, 10)
	        };
	    }
	}

	function unbindEvents(element, events) {
	    if (events === void 0) { events = {}; }

	    for (var name in events) {
	        var eventNames = name.trim().split(" ");
	        for (var idx = 0; idx < eventNames.length; idx++) {
	            element.removeEventListener(eventNames[idx], events[name], false);
	        }
	    }
	}

	var util = {
		append: append,
		arabicToRoman: arabicToRoman,
		createPromise: createPromise,
		defined: defined,
		definitionId: definitionId,
		deg: deg,
		encodeBase64: encodeBase64,
		eventCoordinates: eventCoordinates,
		eventElement: eventElement,
		isTransparent: isTransparent,
		last: last,
		limitValue: limitValue,
		mergeSort: mergeSort,
		promiseAll: promiseAll,
		rad: rad,
		round: round,
		valueOrDefault: valueOrDefault,
		bindEvents: bindEvents,
		elementOffset: elementOffset,
		elementSize: elementSize,
		elementStyles: elementStyles,
		unbindEvents: unbindEvents,
		DEG_TO_RAD: DEG_TO_RAD,
		MAX_NUM: MAX_NUM,
		MIN_NUM: MIN_NUM
	};

	var toString = {}.toString;

	var OptionsStore = Class.extend({
	    init: function(options, prefix) {
	        var this$1 = this;
	        if (prefix === void 0) { prefix = ""; }

	        this.prefix = prefix;

	        for (var field in options) {
	            var member = options[field];
	            member = this$1._wrap(member, field);
	            this$1[field] = member;
	        }
	    },

	    get: function(field) {
	        var parts = field.split(".");
	        var result = this;

	        while (parts.length && result) {
	            var part = parts.shift();
	            result = result[part];
	        }

	        return result;
	    },

	    set: function(field, value) {
	        var current = this.get(field);

	        if (current !== value) {
	            this._set(field, this._wrap(value, field));
	            this.optionsChange({
	                field: this.prefix + field,
	                value: value
	            });
	        }
	    },

	    _set: function(field, value) {
	        var this$1 = this;

	        var composite = field.indexOf(".") >= 0;
	        var parentObj = this;
	        var fieldName = field;

	        if (composite) {
	            var parts = fieldName.split(".");
	            var prefix = this.prefix;

	            while (parts.length > 1) {
	                fieldName = parts.shift();
	                prefix += fieldName + ".";

	                var obj = parentObj[fieldName];

	                if (!obj) {
	                    obj = new OptionsStore({}, prefix);
	                    obj.addObserver(this$1);
	                    parentObj[fieldName] = obj;
	                }
	                parentObj = obj;
	            }
	            fieldName = parts[0];
	        }

	        parentObj._clear(fieldName);
	        parentObj[fieldName] = value;
	    },

	    _clear: function(field) {
	        var current = this[field];
	        if (current && current.removeObserver) {
	            current.removeObserver(this);
	        }
	    },

	    _wrap: function(object, field) {
	        var type = toString.call(object);
	        var wrapped = object;

	        if (wrapped !== null && defined(wrapped) && type === "[object Object]") {
	            if (!(object instanceof OptionsStore) && !(object instanceof Class)) {
	                wrapped = new OptionsStore(wrapped, this.prefix + field + ".");
	            }

	            wrapped.addObserver(this);
	        }

	        return wrapped;
	    }
	});

	ObserversMixin.extend(OptionsStore.prototype);

	function setAccessor(field) {
	    return function(value) {
	        if (this[field] !== value) {
	            this[field] = value;
	            this.geometryChange();
	        }

	        return this;
	    };
	}

	function getAccessor(field) {
	    return function() {
	        return this[field];
	    };
	}

	function defineAccessors(fn, fields) {
	    for (var i = 0; i < fields.length; i++) {
	        var name = fields[i];
	        var capitalized = name.charAt(0).toUpperCase() +
	                          name.substring(1, name.length);

	        fn["set" + capitalized] = setAccessor(name);
	        fn["get" + capitalized] = getAccessor(name);
	    }
	}

	var Matrix = Class.extend({
	    init: function(a, b, c, d, e, f) {
	        if (a === void 0) { a = 0; }
	        if (b === void 0) { b = 0; }
	        if (c === void 0) { c = 0; }
	        if (d === void 0) { d = 0; }
	        if (e === void 0) { e = 0; }
	        if (f === void 0) { f = 0; }

	        this.a = a;
	        this.b = b;
	        this.c = c;
	        this.d = d;
	        this.e = e;
	        this.f = f;
	    },

	    multiplyCopy: function(matrix) {
	        return new Matrix(
	            this.a * matrix.a + this.c * matrix.b,
	            this.b * matrix.a + this.d * matrix.b,
	            this.a * matrix.c + this.c * matrix.d,
	            this.b * matrix.c + this.d * matrix.d,
	            this.a * matrix.e + this.c * matrix.f + this.e,
	            this.b * matrix.e + this.d * matrix.f + this.f
	        );
	    },

	    invert: function() {
	        var ref = this;
	        var a = ref.a;
	        var b = ref.b;
	        var d = ref.c;
	        var e = ref.d;
	        var g = ref.e;
	        var h = ref.f;
	        var det = a * e - b * d;

	        if (det === 0) {
	            return null;
	        }

	        return new Matrix(e / det, -b / det, -d / det, a / det,
	                          (d * h - e * g) / det, (b * g - a * h) / det);
	    },

	    clone: function() {
	        return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
	    },

	    equals: function(other) {
	        if (!other) {
	            return false;
	        }

	        return this.a === other.a && this.b === other.b &&
	               this.c === other.c && this.d === other.d &&
	               this.e === other.e && this.f === other.f;
	    },

	    round: function(precision) {
	        this.a = round(this.a, precision);
	        this.b = round(this.b, precision);
	        this.c = round(this.c, precision);
	        this.d = round(this.d, precision);
	        this.e = round(this.e, precision);
	        this.f = round(this.f, precision);

	        return this;
	    },

	    toArray: function(precision) {
	        var result = [ this.a, this.b, this.c, this.d, this.e, this.f ];

	        if (defined(precision)) {
	            for (var i = 0; i < result.length; i++) {
	                result[i] = round(result[i], precision);
	            }
	        }

	        return result;
	    },

	    toString: function(precision, separator) {
	        if (separator === void 0) { separator = ","; }

	        return this.toArray(precision).join(separator);
	    }
	});

	Matrix.translate = function(x, y) {
	    return new Matrix(1, 0, 0, 1, x, y);
	};

	Matrix.unit = function() {
	    return new Matrix(1, 0, 0, 1, 0, 0);
	};

	Matrix.rotate = function(angle, x, y) {
	    var matrix = new Matrix();
	    matrix.a = Math.cos(rad(angle));
	    matrix.b = Math.sin(rad(angle));
	    matrix.c = -matrix.b;
	    matrix.d = matrix.a;
	    matrix.e = (x - x * matrix.a + y * matrix.b) || 0;
	    matrix.f = (y - y * matrix.a - x * matrix.b) || 0;

	    return matrix;
	};

	Matrix.scale = function(scaleX, scaleY) {
	    return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
	};

	Matrix.IDENTITY = Matrix.unit();

	function toMatrix(transformation) {
	    if (transformation && typeof transformation.matrix === "function") {
	        return transformation.matrix();
	    }

	    return transformation;
	}

	var Point = Class.extend({
	    init: function(x, y) {

	        this.x = x || 0;
	        this.y = y || 0;
	    },

	    equals: function(other) {
	        return other && other.x === this.x && other.y === this.y;
	    },

	    clone: function() {
	        return new Point(this.x, this.y);
	    },

	    rotate: function(angle, origin) {
	        var originPoint = Point.create(origin) || Point.ZERO;

	        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));
	    },

	    translate: function(x, y) {
	        this.x += x;
	        this.y += y;

	        this.geometryChange();

	        return this;
	    },

	    translateWith: function(point) {
	        return this.translate(point.x, point.y);
	    },

	    move: function(x, y) {
	        this.x = this.y = 0;
	        return this.translate(x, y);
	    },

	    scale: function(scaleX, scaleY) {
	        if (scaleY === void 0) { scaleY = scaleX; }

	        this.x *= scaleX;
	        this.y *= scaleY;

	        this.geometryChange();

	        return this;
	    },

	    scaleCopy: function(scaleX, scaleY) {
	        return this.clone().scale(scaleX, scaleY);
	    },

	    transform: function(transformation) {
	        var matrix = toMatrix(transformation);
	        var ref = this;
	        var x = ref.x;
	        var y = ref.y;

	        this.x = matrix.a * x + matrix.c * y + matrix.e;
	        this.y = matrix.b * x + matrix.d * y + matrix.f;

	        this.geometryChange();

	        return this;
	    },

	    transformCopy: function(transformation) {
	        var point = this.clone();

	        if (transformation) {
	            point.transform(transformation);
	        }

	        return point;
	    },

	    distanceTo: function(point) {
	        var dx = this.x - point.x;
	        var dy = this.y - point.y;

	        return Math.sqrt(dx * dx + dy * dy);
	    },

	    round: function(digits) {
	        this.x = round(this.x, digits);
	        this.y = round(this.y, digits);

	        this.geometryChange();

	        return this;
	    },

	    toArray: function(digits) {
	        var doRound = defined(digits);
	        var x = doRound ? round(this.x, digits) : this.x;
	        var y = doRound ? round(this.y, digits) : this.y;

	        return [ x, y ];
	    },

	    toString: function(digits, separator) {
	        if (separator === void 0) { separator = " "; }

	        var ref = this;
	        var x = ref.x;
	        var y = ref.y;

	        if (defined(digits)) {
	            x = round(x, digits);
	            y = round(y, digits);
	        }

	        return x + separator + y;
	    }
	});

	Point.create = function(arg0, arg1) {
	    if (defined(arg0)) {
	        if (arg0 instanceof Point) {
	            return arg0;
	        } else if (arguments.length === 1 && arg0.length === 2) {
	            return new Point(arg0[0], arg0[1]);
	        }

	        return new Point(arg0, arg1);
	    }
	};

	Point.min = function() {
	    var arguments$1 = arguments;

	    var minX = MAX_NUM;
	    var minY = MAX_NUM;

	    for (var i = 0; i < arguments.length; i++) {
	        var point = arguments$1[i];
	        minX = Math.min(point.x, minX);
	        minY = Math.min(point.y, minY);
	    }

	    return new Point(minX, minY);
	};

	Point.max = function() {
	    var arguments$1 = arguments;

	    var maxX = MIN_NUM;
	    var maxY = MIN_NUM;

	    for (var i = 0; i < arguments.length; i++) {
	        var point = arguments$1[i];
	        maxX = Math.max(point.x, maxX);
	        maxY = Math.max(point.y, maxY);
	    }

	    return new Point(maxX, maxY);
	};

	Point.minPoint = function() {
	    return new Point(MIN_NUM, MIN_NUM);
	};

	Point.maxPoint = function() {
	    return new Point(MAX_NUM, MAX_NUM);
	};

	if (Object.defineProperties) {
	    Object.defineProperties(Point, {
	        ZERO: {
	            get: function() {
	                return new Point(0, 0);
	            }
	        }
	    });
	}

	defineAccessors(Point.prototype, [ "x", "y" ]);
	ObserversMixin.extend(Point.prototype);

	var Size = Class.extend({
	    init: function(width, height) {

	        this.width = width || 0;
	        this.height = height || 0;
	    },

	    equals: function(other) {
	        return other && other.width === this.width && other.height === this.height;
	    },

	    clone: function() {
	        return new Size(this.width, this.height);
	    },

	    toArray: function(digits) {
	        var doRound = defined(digits);
	        var width = doRound ? round(this.width, digits) : this.width;
	        var height = doRound ? round(this.height, digits) : this.height;

	        return [ width, height ];
	    }
	});

	Size.create = function(arg0, arg1) {
	    if (defined(arg0)) {
	        if (arg0 instanceof Size) {
	            return arg0;
	        } else if (arguments.length === 1 && arg0.length === 2) {
	            return new Size(arg0[0], arg0[1]);
	        }

	        return new Size(arg0, arg1);
	    }
	};

	if (Object.defineProperties) {
	    Object.defineProperties(Size, {
	        ZERO: {
	            get: function() {
	                return new Size(0, 0);
	            }
	        }
	    });
	}

	defineAccessors(Size.prototype, [ "width", "height" ]);
	ObserversMixin.extend(Size.prototype);

	var Rect = Class.extend({
	    init: function(origin, size) {
	        if (origin === void 0) { origin = new Point(); }
	        if (size === void 0) { size = new Size(); }

	        this.setOrigin(origin);
	        this.setSize(size);
	    },

	    clone: function() {
	        return new Rect(
	            this.origin.clone(),
	            this.size.clone()
	        );
	    },

	    equals: function(other) {
	        return other &&
	               other.origin.equals(this.origin) &&
	               other.size.equals(this.size);
	    },

	    setOrigin: function(value) {
	        this._observerField("origin", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getOrigin: function() {
	        return this.origin;
	    },

	    setSize: function(value) {
	        this._observerField("size", Size.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getSize: function() {
	        return this.size;
	    },

	    width: function() {
	        return this.size.width;
	    },

	    height: function() {
	        return this.size.height;
	    },

	    topLeft: function() {
	        return this.origin.clone();
	    },

	    bottomRight: function() {
	        return this.origin.clone().translate(this.width(), this.height());
	    },

	    topRight: function() {
	        return this.origin.clone().translate(this.width(), 0);
	    },

	    bottomLeft: function() {
	        return this.origin.clone().translate(0, this.height());
	    },

	    center: function() {
	        return this.origin.clone().translate(this.width() / 2, this.height() / 2);
	    },

	    bbox: function(matrix) {
	        var tl = this.topLeft().transformCopy(matrix);
	        var tr = this.topRight().transformCopy(matrix);
	        var br = this.bottomRight().transformCopy(matrix);
	        var bl = this.bottomLeft().transformCopy(matrix);

	        return Rect.fromPoints(tl, tr, br, bl);
	    },

	    transformCopy: function(m) {
	        return Rect.fromPoints(
	            this.topLeft().transform(m),
	            this.bottomRight().transform(m)
	        );
	    },

	    expand: function(x, y) {
	        if (y === void 0) { y = x; }

	        this.size.width += 2 * x;
	        this.size.height += 2 * y;

	        this.origin.translate(-x, -y);

	        return this;
	    },

	    expandCopy: function(x, y) {
	        return this.clone().expand(x, y);
	    },

	    containsPoint: function(point) {
	        var origin = this.origin;
	        var bottomRight = this.bottomRight();
	        return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
	    },

	    _isOnPath: function(point, width) {
	        var rectOuter = this.expandCopy(width, width);
	        var rectInner = this.expandCopy(-width, -width);

	        return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
	    }
	});

	Rect.fromPoints = function() {
	    var topLeft = Point.min.apply(null, arguments);
	    var bottomRight = Point.max.apply(null, arguments);
	    var size = new Size(
	        bottomRight.x - topLeft.x,
	        bottomRight.y - topLeft.y
	    );

	    return new Rect(topLeft, size);
	};

	Rect.union = function(a, b) {
	    return Rect.fromPoints(
	        Point.min(a.topLeft(), b.topLeft()),
	        Point.max(a.bottomRight(), b.bottomRight())
	    );
	};

	Rect.intersect = function(a, b) {
	    var rect1 = {
	        left: a.topLeft().x,
	        top: a.topLeft().y,
	        right: a.bottomRight().x,
	        bottom: a.bottomRight().y
	    };

	    var rect2 = {
	        left: b.topLeft().x,
	        top: b.topLeft().y,
	        right: b.bottomRight().x,
	        bottom: b.bottomRight().y
	    };

	    if (rect1.left <= rect2.right &&
	        rect2.left <= rect1.right &&
	        rect1.top <= rect2.bottom &&
	        rect2.top <= rect1.bottom) {
	        return Rect.fromPoints(
	            new Point(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)),
	            new Point(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom))
	        );
	    }
	};

	ObserversMixin.extend(Rect.prototype);

	var Transformation = Class.extend({
	    init: function(matrix) {
	        if (matrix === void 0) { matrix = Matrix.unit(); }

	        this._matrix = matrix;
	    },

	    clone: function() {
	        return new Transformation(
	            this._matrix.clone()
	        );
	    },

	    equals: function(other) {
	        return other &&
	               other._matrix.equals(this._matrix);
	    },

	    translate: function(x, y) {
	        this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));

	        this._optionsChange();
	        return this;
	    },

	    scale: function(scaleX, scaleY, origin) {
	        if (scaleY === void 0) { scaleY = scaleX; }
	        if (origin === void 0) { origin = null; }

	        var originPoint = origin;

	        if (originPoint) {
	            originPoint = Point.create(originPoint);
	            this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));
	        }

	        this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));

	        if (originPoint) {
	            this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));
	        }

	        this._optionsChange();
	        return this;
	    },

	    rotate: function(angle, origin) {
	        var originPoint = Point.create(origin) || Point.ZERO;

	        this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));

	        this._optionsChange();
	        return this;
	    },

	    multiply: function(transformation) {
	        var matrix = toMatrix(transformation);

	        this._matrix = this._matrix.multiplyCopy(matrix);

	        this._optionsChange();
	        return this;
	    },

	    matrix: function(value) {
	        if (value) {
	            this._matrix = value;
	            this._optionsChange();
	            return this;
	        }

	        return this._matrix;
	    },

	    _optionsChange: function() {
	        this.optionsChange({
	            field: "transform",
	            value: this
	        });
	    }
	});

	ObserversMixin.extend(Transformation.prototype);

	function transform(matrix) {
	    if (matrix === null) {
	        return null;
	    }

	    if (matrix instanceof Transformation) {
	        return matrix;
	    }

	    return new Transformation(matrix);
	}

	var Element$1 = Class.extend({
	    init: function(options) {

	        this._initOptions(options);
	    },

	    _initOptions: function(options) {
	        if (options === void 0) { options = {}; }

	        var clip = options.clip;
	        var transform$$1 = options.transform;

	        if (transform$$1) {
	            options.transform = transform(transform$$1);
	        }

	        if (clip && !clip.id) {
	            clip.id = definitionId();
	        }

	        this.options = new OptionsStore(options);
	        this.options.addObserver(this);
	    },

	    transform: function(value) {
	        if (defined(value)) {
	            this.options.set("transform", transform(value));
	        } else {
	            return this.options.get("transform");
	        }
	    },

	    parentTransform: function() {
	        var element = this;
	        var parentMatrix;

	        while (element.parent) {
	            element = element.parent;
	            var transformation = element.transform();
	            if (transformation) {
	                parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());
	            }
	        }

	        if (parentMatrix) {
	            return transform(parentMatrix);
	        }
	    },

	    currentTransform: function(parentTransform) {
	        if (parentTransform === void 0) { parentTransform = this.parentTransform(); }

	        var elementTransform = this.transform();
	        var elementMatrix = toMatrix(elementTransform);

	        var parentMatrix = toMatrix(parentTransform);
	        var combinedMatrix;

	        if (elementMatrix && parentMatrix) {
	            combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);
	        } else {
	            combinedMatrix = elementMatrix || parentMatrix;
	        }

	        if (combinedMatrix) {
	            return transform(combinedMatrix);
	        }
	    },

	    visible: function(value) {
	        if (defined(value)) {
	            this.options.set("visible", value);
	            return this;
	        }

	        return this.options.get("visible") !== false;
	    },

	    clip: function(value) {
	        var options = this.options;
	        if (defined(value)) {
	            if (value && !value.id) {
	                value.id = definitionId();
	            }
	            options.set("clip", value);
	            return this;
	        }

	        return options.get("clip");
	    },

	    opacity: function(value) {
	        if (defined(value)) {
	            this.options.set("opacity", value);
	            return this;
	        }

	        return valueOrDefault(this.options.get("opacity"), 1);
	    },

	    clippedBBox: function(transformation) {
	        var bbox = this._clippedBBox(transformation);
	        if (bbox) {
	            var clip = this.clip();
	            return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;
	        }
	    },

	    containsPoint: function(point, parentTransform) {
	        if (this.visible()) {
	            var transform$$1 = this.currentTransform(parentTransform);
	            var transformedPoint = point;
	            if (transform$$1) {
	                transformedPoint = point.transformCopy(transform$$1.matrix().invert());
	            }
	            return (this._hasFill() && this._containsPoint(transformedPoint)) || (this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint));
	        }
	        return false;
	    },

	    _hasFill: function() {
	        var fill = this.options.fill;
	        return fill && !isTransparent(fill.color);
	    },

	    _hasStroke: function() {
	        var stroke = this.options.stroke;
	        return stroke && stroke.width > 0 && !isTransparent(stroke.color);
	    },

	    _clippedBBox: function(transformation) {
	        return this.bbox(transformation);
	    }
	});

	Element$1.prototype.nodeType = "Element";

	ObserversMixin.extend(Element$1.prototype);

	function ellipseExtremeAngles(center, rx, ry, matrix) {
	    var extremeX = 0;
	    var extremeY = 0;

	    if (matrix) {
	        extremeX = Math.atan2(matrix.c * ry, matrix.a * rx);
	        if (matrix.b !== 0) {
	            extremeY = Math.atan2(matrix.d * ry, matrix.b * rx);
	        }
	    }

	    return {
	        x: extremeX,
	        y: extremeY
	    };
	}

	var PI_DIV_2 = Math.PI / 2;

	var Circle$2 = Class.extend({
	    init: function(center, radius) {
	        if (center === void 0) { center = new Point(); }
	        if (radius === void 0) { radius = 0; }

	        this.setCenter(center);
	        this.setRadius(radius);
	    },

	    setCenter: function(value) {
	        this._observerField("center", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getCenter: function() {
	        return this.center;
	    },

	    equals: function(other) {
	        return other &&
	               other.center.equals(this.center) &&
	               other.radius === this.radius;
	    },

	    clone: function() {
	        return new Circle$2(this.center.clone(), this.radius);
	    },

	    pointAt: function(angle) {
	        return this._pointAt(rad(angle));
	    },

	    bbox: function(matrix) {
	        var this$1 = this;

	        var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);
	        var minPoint = Point.maxPoint();
	        var maxPoint = Point.minPoint();

	        for (var i = 0; i < 4; i++) {
	            var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);
	            var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);
	            var currentPoint = new Point(currentPointX.x, currentPointY.y);

	            minPoint = Point.min(minPoint, currentPoint);
	            maxPoint = Point.max(maxPoint, currentPoint);
	        }

	        return Rect.fromPoints(minPoint, maxPoint);
	    },

	    _pointAt: function(angle) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;

	        return new Point(
	            center.x + radius * Math.cos(angle),
	            center.y + radius * Math.sin(angle)
	        );
	    },

	    containsPoint: function(point) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;
	        var inCircle = Math.pow(point.x - center.x, 2) +
	            Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);
	        return inCircle;
	    },

	    _isOnPath: function(point, width) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;
	        var pointDistance = center.distanceTo(point);

	        return radius - width <= pointDistance && pointDistance <= radius + width;
	    }
	});

	defineAccessors(Circle$2.prototype, [ "radius" ]);
	ObserversMixin.extend(Circle$2.prototype);

	var GRADIENT = "Gradient";

	var Paintable = {
	    extend: function(proto) {
	        proto.fill = this.fill;
	        proto.stroke = this.stroke;
	    },

	    fill: function(color, opacity) {
	        var options = this.options;

	        if (defined(color)) {
	            if (color && color.nodeType !== GRADIENT) {
	                var newFill = {
	                    color: color
	                };
	                if (defined(opacity)) {
	                    newFill.opacity = opacity;
	                }
	                options.set("fill", newFill);
	            } else {
	                options.set("fill", color);
	            }

	            return this;
	        }

	        return options.get("fill");
	    },

	    stroke: function(color, width, opacity) {
	        if (defined(color)) {
	            this.options.set("stroke.color", color);

	            if (defined(width)) {
	                this.options.set("stroke.width", width);
	            }

	            if (defined(opacity)) {
	                this.options.set("stroke.opacity", opacity);
	            }

	            return this;
	        }

	        return this.options.get("stroke");
	    }
	};

	var IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();

	var Measurable = {
	    extend: function(proto) {
	        proto.bbox = this.bbox;
	        proto.geometryChange = this.geometryChange;
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;
	        var bbox;

	        if (this._bboxCache && this._matrixHash === matrixHash) {
	            bbox = this._bboxCache.clone();
	        } else {
	            bbox = this._bbox(combinedMatrix);
	            this._bboxCache = bbox ? bbox.clone() : null;
	            this._matrixHash = matrixHash;
	        }

	        var strokeWidth = this.options.get("stroke.width");
	        if (strokeWidth && bbox) {
	            bbox.expand(strokeWidth / 2);
	        }

	        return bbox;
	    },

	    geometryChange: function() {
	        delete this._bboxCache;
	        this.trigger("geometryChange", {
	            element: this
	        });
	    }
	};

	function geometryAccessor(name) {
	    var fieldName = "_" + name;
	    return function(value) {
	        if (defined(value)) {
	            this._observerField(fieldName, value);
	            this.geometryChange();
	            return this;
	        }

	        return this[fieldName];
	    };
	}

	function defineGeometryAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = geometryAccessor(names[i]);
	    }
	}

	var DEFAULT_STROKE = "#000";

	var Circle = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Circle$2(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);
	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke(DEFAULT_STROKE);
	        }
	    },

	    rawBBox: function() {
	        return this._geometry.bbox();
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    _containsPoint: function(point) {
	        return this.geometry().containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Circle.prototype.nodeType = "Circle";

	Paintable.extend(Circle.prototype);
	Measurable.extend(Circle.prototype);
	defineGeometryAccessors(Circle.prototype, [ "geometry" ]);

	var PRECISION = 10;

	function close(a, b, tolerance) {
	    if (tolerance === void 0) { tolerance = PRECISION; }

	    return round(Math.abs(a - b), tolerance) === 0;
	}

	function closeOrLess(a, b, tolerance) {
	    return a < b || close(a, b, tolerance);
	}

	function lineIntersection(p0, p1, p2, p3) {
	    var s1x = p1.x - p0.x;
	    var s2x = p3.x - p2.x;
	    var s1y = p1.y - p0.y;
	    var s2y = p3.y - p2.y;
	    var nx = p0.x - p2.x;
	    var ny = p0.y - p2.y;
	    var d = s1x * s2y - s2x * s1y;
	    var s = (s1x * ny - s1y * nx) / d;
	    var t = (s2x * ny - s2y * nx) / d;

	    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
	        return new Point(p0.x + t * s1x, p0.y + t * s1y);
	    }
	}

	var MAX_INTERVAL = 45;
	var pow$1 = Math.pow;

	var Arc$2 = Class.extend({
	    init: function(center, options) {
	        if (center === void 0) { center = new Point(); }
	        if (options === void 0) { options = {}; }

	        this.setCenter(center);

	        this.radiusX = options.radiusX;
	        this.radiusY = options.radiusY || options.radiusX;
	        this.startAngle = options.startAngle;
	        this.endAngle = options.endAngle;
	        this.anticlockwise = options.anticlockwise || false;
	        this.xRotation = options.xRotation;
	    },

	    clone: function() {
	        return new Arc$2(this.center, {
	            radiusX: this.radiusX,
	            radiusY: this.radiusY,
	            startAngle: this.startAngle,
	            endAngle: this.endAngle,
	            anticlockwise: this.anticlockwise
	        });
	    },

	    setCenter: function(value) {
	        this._observerField("center", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getCenter: function() {
	        return this.center;
	    },

	    pointAt: function(angle) {
	        var center = this.center;
	        var radian = rad(angle);

	        return new Point(
	            center.x + this.radiusX * Math.cos(radian),
	            center.y + this.radiusY * Math.sin(radian)
	        );
	    },

	    curvePoints: function() {
	        var this$1 = this;

	        var startAngle = this.startAngle;
	        var dir = this.anticlockwise ? -1 : 1;
	        var curvePoints = [ this.pointAt(startAngle) ];
	        var interval = this._arcInterval();
	        var intervalAngle = interval.endAngle - interval.startAngle;
	        var subIntervalsCount = Math.ceil(intervalAngle / MAX_INTERVAL);
	        var subIntervalAngle = intervalAngle / subIntervalsCount;
	        var currentAngle = startAngle;
	        var transformation;
	        if (this.xRotation) {
	            transformation = transform().rotate(this.xRotation, this.center);
	        }

	        for (var i = 1; i <= subIntervalsCount; i++) {
	            var nextAngle = currentAngle + dir * subIntervalAngle;
	            var points = this$1._intervalCurvePoints(currentAngle, nextAngle, transformation);

	            curvePoints.push(points.cp1, points.cp2, points.p2);
	            currentAngle = nextAngle;
	        }

	        return curvePoints;
	    },

	    bbox: function(matrix) {
	        var this$1 = this;

	        var interval = this._arcInterval();
	        var startAngle = interval.startAngle;
	        var endAngle = interval.endAngle;
	        var extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);
	        var extremeX = deg(extremeAngles.x);
	        var extremeY = deg(extremeAngles.y);
	        var endPoint = this.pointAt(endAngle).transformCopy(matrix);
	        var currentAngleX = bboxStartAngle(extremeX, startAngle);
	        var currentAngleY = bboxStartAngle(extremeY, startAngle);
	        var currentPoint = this.pointAt(startAngle).transformCopy(matrix);
	        var minPoint = Point.min(currentPoint, endPoint);
	        var maxPoint = Point.max(currentPoint, endPoint);

	        while (currentAngleX < endAngle || currentAngleY < endAngle) {
	            var currentPointX = (void 0);
	            if (currentAngleX < endAngle) {
	                currentPointX = this$1.pointAt(currentAngleX).transformCopy(matrix);
	                currentAngleX += 90;
	            }

	            var currentPointY = (void 0);
	            if (currentAngleY < endAngle) {
	                currentPointY = this$1.pointAt(currentAngleY).transformCopy(matrix);
	                currentAngleY += 90;
	            }

	            currentPoint = new Point(currentPointX.x, currentPointY.y);
	            minPoint = Point.min(minPoint, currentPoint);
	            maxPoint = Point.max(maxPoint, currentPoint);
	        }

	        return Rect.fromPoints(minPoint, maxPoint);
	    },

	    _arcInterval: function() {
	        var ref = this;
	        var startAngle = ref.startAngle;
	        var endAngle = ref.endAngle;
	        var anticlockwise = ref.anticlockwise;

	        if (anticlockwise) {
	            var oldStart = startAngle;
	            startAngle = endAngle;
	            endAngle = oldStart;
	        }

	        if (startAngle > endAngle || (anticlockwise && startAngle === endAngle)) {
	            endAngle += 360;
	        }

	        return {
	            startAngle: startAngle,
	            endAngle: endAngle
	        };
	    },

	    _intervalCurvePoints: function(startAngle, endAngle, transformation) {
	        var p1 = this.pointAt(startAngle);
	        var p2 = this.pointAt(endAngle);
	        var p1Derivative = this._derivativeAt(startAngle);
	        var p2Derivative = this._derivativeAt(endAngle);
	        var t = (rad(endAngle) - rad(startAngle)) / 3;
	        var cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);
	        var cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);
	        if (transformation) {
	            p1.transform(transformation);
	            p2.transform(transformation);
	            cp1.transform(transformation);
	            cp2.transform(transformation);
	        }

	        return {
	            p1: p1,
	            cp1: cp1,
	            cp2: cp2,
	            p2: p2
	        };
	    },

	    _derivativeAt: function(angle) {
	        var radian = rad(angle);

	        return new Point(-this.radiusX * Math.sin(radian), this.radiusY * Math.cos(radian));
	    },

	    containsPoint: function(point) {
	        var interval = this._arcInterval();
	        var intervalAngle = interval.endAngle - interval.startAngle;
	        var ref = this;
	        var center = ref.center;
	        var radiusX = ref.radiusX;
	        var radiusY = ref.radiusY;
	        var distance = center.distanceTo(point);
	        var angleRad = Math.atan2(point.y - center.y, point.x - center.x);
	        var pointRadius = (radiusX * radiusY) /
	            Math.sqrt(pow$1(radiusX, 2) * pow$1(Math.sin(angleRad), 2) + pow$1(radiusY, 2) * pow$1(Math.cos(angleRad), 2));
	        var startPoint = this.pointAt(this.startAngle).round(PRECISION);
	        var endPoint = this.pointAt(this.endAngle).round(PRECISION);
	        var intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);
	        var containsPoint;

	        if (intervalAngle < 180) {
	            containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);
	        } else {
	            var angle = calculateAngle(center.x, center.y, radiusX, radiusY, point.x, point.y);
	            if (angle !== 360) {
	                angle = (360 + angle) % 360;
	            }

	            var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
	            containsPoint = (inAngleRange && closeOrLess(distance, pointRadius)) || (!inAngleRange && (!intersection || intersection.equals(point)));
	        }
	        return containsPoint;
	    },

	    _isOnPath: function(point, width) {
	        var interval = this._arcInterval();
	        var center = this.center;
	        var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
	        if (angle !== 360) {
	            angle = (360 + angle) % 360;
	        }

	        var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;

	        return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;
	    }
	});

	Arc$2.fromPoints = function(start, end, rx, ry, largeArc, swipe, rotation) {// eslint-disable-line max-params
	    var arcParameters = normalizeArcParameters({
	        x1: start.x,
	        y1: start.y,
	        x2: end.x,
	        y2: end.y,
	        rx: rx,
	        ry: ry,
	        largeArc: largeArc,
	        swipe: swipe,
	        rotation: rotation
	    });

	    return new Arc$2(arcParameters.center, {
	        startAngle: arcParameters.startAngle,
	        endAngle: arcParameters.endAngle,
	        radiusX: arcParameters.radiusX,
	        radiusY: arcParameters.radiusY,
	        xRotation: arcParameters.xRotation,
	        anticlockwise: swipe === 0
	    });
	};

	defineAccessors(Arc$2.prototype, [ "radiusX", "radiusY", "startAngle", "endAngle", "anticlockwise" ]);
	ObserversMixin.extend(Arc$2.prototype);

	function calculateAngle(cx, cy, rx, ry, x, y) {
	    var cos = round((x - cx) / rx, 3);
	    var sin = round((y - cy) / ry, 3);

	    return round(deg(Math.atan2(sin, cos)));
	}

	function normalizeArcParameters(parameters) {
	    var x1 = parameters.x1;
	    var y1 = parameters.y1;
	    var x2 = parameters.x2;
	    var y2 = parameters.y2;
	    var rx = parameters.rx;
	    var ry = parameters.ry;
	    var largeArc = parameters.largeArc;
	    var swipe = parameters.swipe;
	    var rotation = parameters.rotation; if (rotation === void 0) { rotation = 0; }

	    var radians = rad(rotation);
	    var cosine = Math.cos(radians);
	    var sine = Math.sin(radians);

	    var xT = cosine * (x1 - x2) / 2 + sine * (y1 - y2) / 2;
	    var yT = -sine * (x1 - x2) / 2 + cosine * (y1 - y2) / 2;

	    var sign = largeArc !== swipe ? 1 : -1;

	    var xt2 = Math.pow(xT, 2);
	    var yt2 = Math.pow(yT, 2);
	    var rx2 = Math.pow(rx, 2);
	    var ry2 = Math.pow(ry, 2);

	    var delta = xt2 / rx2 + yt2 / ry2;

	    if (delta > 1) {
	        delta = Math.sqrt(xt2 / rx2 + yt2 / ry2);
	        rx = delta * rx;
	        rx2 = Math.pow(rx, 2);

	        ry = delta * ry;
	        ry2 = Math.pow(ry, 2);
	    }

	    var constT = sign * Math.sqrt((rx2 * ry2 - rx2 * yt2 - ry2 * xt2) / (rx2 * yt2 + ry2 * xt2));
	    // due to rounding errors the value could become NaN even after radii correction
	    if (isNaN(constT)) {
	        constT = 0;
	    }

	    var cxT = constT * (rx * yT) / ry;
	    var cyT = - constT * (ry * xT) / rx;

	    var cx = cosine * cxT - sine * cyT + (x1 + x2) / 2;
	    var cy = sine * cxT + cosine * cyT + (y1 + y2) / 2;

	    var uX = (xT - cxT) / rx;
	    var uY = (yT - cyT) / ry;
	    var vX = -(xT + cxT) / rx;
	    var vY = -(yT + cyT) / ry;

	    var startAngle = (uY >= 0 ? 1 : -1) * deg(Math.acos(uX / Math.sqrt(uX * uX + uY * uY)));

	    var angleCosine = round((uX * vX + uY * vY) / (Math.sqrt(uX * uX + uY * uY) * Math.sqrt(vX * vX + vY * vY)), 10);
	    var angle = (uX * vY - uY * vX >= 0 ? 1 : -1) * deg(Math.acos(angleCosine));

	    if (!swipe && angle > 0) {
	        angle -= 360;
	    }

	    if (swipe && angle < 0) {
	        angle += 360;
	    }
	    var endAngle = startAngle + angle;
	    var signEndAngle = endAngle >= 0 ? 1 : -1;
	    endAngle = (Math.abs(endAngle) % 360) * signEndAngle;

	    return {
	        center: new Point(cx, cy),
	        startAngle: startAngle,
	        endAngle: endAngle,
	        radiusX: rx,
	        radiusY: ry,
	        xRotation: rotation
	    };
	}

	function bboxStartAngle(angle, start) {
	    var startAngle = angle;

	    while (startAngle < start) {
	        startAngle += 90;
	    }

	    return startAngle;
	}

	var push = [].push;
	var pop = [].pop;
	var splice = [].splice;
	var shift = [].shift;
	var slice = [].slice;
	var unshift = [].unshift;

	var ElementsArray = Class.extend({
	    init: function(array) {
	        if (array === void 0) { array = []; }

	        this.length = 0;
	        this._splice(0, array.length, array);
	    },

	    elements: function(value) {
	        if (value) {
	            this._splice(0, this.length, value);

	            this._change();
	            return this;
	        }

	        return this.slice(0);
	    },

	    push: function() {
	        var elements = arguments;
	        var result = push.apply(this, elements);

	        this._add(elements);

	        return result;
	    },

	    slice: function() {
	        return slice.call(this);
	    },

	    pop: function() {
	        var length = this.length;
	        var result = pop.apply(this);

	        if (length) {
	            this._remove([ result ]);
	        }

	        return result;
	    },

	    splice: function(index, howMany) {
	        var elements = slice.call(arguments, 2);
	        var result = this._splice(index, howMany, elements);

	        this._change();

	        return result;
	    },

	    shift: function() {
	        var length = this.length;
	        var result = shift.apply(this);

	        if (length) {
	            this._remove([ result ]);
	        }

	        return result;
	    },

	    unshift: function() {
	        var elements = arguments;
	        var result = unshift.apply(this, elements);

	        this._add(elements);

	        return result;
	    },

	    indexOf: function(element) {
	        var this$1 = this;

	        var length = this.length;

	        for (var idx = 0; idx < length; idx++) {
	            if (this$1[idx] === element) {
	                return idx;
	            }
	        }
	        return -1;
	    },

	    _splice: function(index, howMany, elements) {
	        var result = splice.apply(this, [ index, howMany ].concat(elements));

	        this._clearObserver(result);
	        this._setObserver(elements);

	        return result;
	    },

	    _add: function(elements) {
	        this._setObserver(elements);
	        this._change();
	    },

	    _remove: function(elements) {
	        this._clearObserver(elements);
	        this._change();
	    },

	    _setObserver: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            elements[idx].addObserver(this$1);
	        }
	    },

	    _clearObserver: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            elements[idx].removeObserver(this$1);
	        }
	    },

	    _change: function() {}
	});

	ObserversMixin.extend(ElementsArray.prototype);

	var GeometryElementsArray = ElementsArray.extend({
	    _change: function() {
	        this.geometryChange();
	    }
	});

	function pointAccessor(name) {
	    var fieldName = "_" + name;
	    return function(value) {
	        if (defined(value)) {
	            this._observerField(fieldName, Point.create(value));
	            this.geometryChange();
	            return this;
	        }

	        return this[fieldName];
	    };
	}

	function definePointAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = pointAccessor(names[i]);
	    }
	}

	function isOutOfEndPoint(endPoint, controlPoint, point) {
	    var angle = deg(Math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
	    var rotatedPoint = point.transformCopy(transform().rotate(-angle, endPoint));

	    return rotatedPoint.x < endPoint.x;
	}

	function calculateCurveAt(t, field, points) {
	    var t1 = 1 - t;
	    return Math.pow(t1, 3) * points[0][field] +
	        3 * Math.pow(t1, 2) * t * points[1][field] +
	        3 * Math.pow(t, 2) * t1 * points[2][field] +
	        Math.pow(t, 3) * points[3][field];
	}

	function toCubicPolynomial(points, field) {
	    return [ -points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field],
	        3 * (points[0][field] - 2 * points[1][field] + points[2][field]),
	        3 * (-points[0][field] + points[1][field]),
	        points[0][field]
	    ];
	}

	var ComplexNumber = Class.extend({
	    init: function(real, img) {
	        if (real === void 0) { real = 0; }
	        if (img === void 0) { img = 0; }

	        this.real = real;
	        this.img = img;
	    },

	    add: function(cNumber) {
	        return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));
	    },

	    addConstant: function(value) {
	        return new ComplexNumber(this.real + value, this.img);
	    },

	    negate: function() {
	        return new ComplexNumber(-this.real, -this.img);
	    },

	    multiply: function(cNumber) {
	        return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img,
	            this.real * cNumber.img + this.img * cNumber.real);
	    },

	    multiplyConstant: function(value) {
	        return new ComplexNumber(this.real * value, this.img * value);
	    },

	    nthRoot: function(n) {
	        var rad$$1 = Math.atan2(this.img, this.real);
	        var r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));
	        var nthR = Math.pow(r, 1 / n);

	        return new ComplexNumber(nthR * Math.cos(rad$$1 / n), nthR * Math.sin(rad$$1 / n)); //Moivre's formula
	    },

	    equals: function(cNumber) {
	        return this.real === cNumber.real && this.img === cNumber.img;
	    },

	    isReal: function() {
	        return this.img === 0;
	    }
	});

	function numberSign(x) {
	    return x < 0 ? -1 : 1;
	}

	function solveQuadraticEquation(a, b, c) {
	    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
	    return [
	        (-b + squareRoot) / (2 * a),
	        (-b - squareRoot) / (2 * a)
	    ];
	}

	//Cardano's formula
	function solveCubicEquation(a, b, c, d) {
	    if (a === 0) {
	        return solveQuadraticEquation(b, c, d);
	    }

	    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
	    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
	    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
	    var i = new ComplexNumber(0,1);
	    var b3a = -b / (3 * a);
	    var x1, x2, y1, y2, y3, z1, z2;

	    if (Q < 0) {
	        x1 = new ComplexNumber(-q / 2, Math.sqrt(-Q)).nthRoot(3);
	        x2 = new ComplexNumber(-q / 2, - Math.sqrt(-Q)).nthRoot(3);
	    } else {
	        x1 = -q / 2 + Math.sqrt(Q);
	        x1 = new ComplexNumber(numberSign(x1) * Math.pow(Math.abs(x1), 1 / 3));
	        x2 = -q / 2 - Math.sqrt(Q);
	        x2 = new ComplexNumber(numberSign(x2) * Math.pow(Math.abs(x2), 1 / 3));
	    }

	    y1 = x1.add(x2);

	    z1 = x1.add(x2).multiplyConstant(-1 / 2);
	    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

	    y2 = z1.add(i.multiply(z2));
	    y3 = z1.add(i.negate().multiply(z2));

	    var result = [];

	    if (y1.isReal()) {
	        result.push(round(y1.real + b3a, PRECISION));
	    }
	    if (y2.isReal()) {
	        result.push(round(y2.real + b3a, PRECISION));
	    }
	    if (y3.isReal()) {
	        result.push(round(y3.real + b3a, PRECISION));
	    }

	    return result;
	}

	function hasRootsInRange(points, point, field, rootField, range) {
	    var polynomial = toCubicPolynomial(points, rootField);
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
	    var intersection;

	    for (var idx = 0; idx < roots.length; idx++) {
	        if (0 <= roots[idx] && roots[idx] <= 1) {
	            intersection = calculateCurveAt(roots[idx], field, points);
	            if (Math.abs(intersection - point[field]) <= range) {
	                return true;
	            }
	        }
	    }
	}

	function curveIntersectionsCount(points, point, bbox) {
	    var polynomial = toCubicPolynomial(points, "x");
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
	    var rayIntersection, intersectsRay;
	    var count = 0;
	    for (var i = 0; i < roots.length; i++) {
	        rayIntersection = calculateCurveAt(roots[i], "y", points);
	        intersectsRay = close(rayIntersection, point.y) || rayIntersection > point.y;
	        if (intersectsRay && (((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x) || (0 < roots[i] && roots[i] < 1))) {
	            count++;
	        }
	    }

	    return count;
	}

	function lineIntersectionsCount(a, b, point) {
	    var intersects;
	    if (a.x !== b.x) {
	        var minX = Math.min(a.x, b.x);
	        var maxX = Math.max(a.x, b.x);
	        var minY = Math.min(a.y, b.y);
	        var maxY = Math.max(a.y, b.y);
	        var inRange = minX <= point.x && point.x < maxX;

	        if (minY === maxY) {
	            intersects = point.y <= minY && inRange;
	        } else {
	            intersects = inRange && (((maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x)) / (maxX - minX) + minY - point.y) >= 0;
	        }
	    }

	    return intersects ? 1 : 0;
	}

	var Segment = Class.extend({
	    init: function(anchor, controlIn, controlOut) {

	        this.anchor(anchor || new Point());
	        this.controlIn(controlIn);
	        this.controlOut(controlOut);
	    },

	    bboxTo: function(toSegment, matrix) {
	        var segmentAnchor = this.anchor().transformCopy(matrix);
	        var toSegmentAnchor = toSegment.anchor().transformCopy(matrix);
	        var rect;

	        if (this.controlOut() && toSegment.controlIn()) {
	            rect = this._curveBoundingBox(
	                segmentAnchor, this.controlOut().transformCopy(matrix),
	                toSegment.controlIn().transformCopy(matrix), toSegmentAnchor
	            );
	        } else {
	            rect = this._lineBoundingBox(segmentAnchor, toSegmentAnchor);
	        }

	        return rect;
	    },

	    _lineBoundingBox: function(p1, p2) {
	        return Rect.fromPoints(p1, p2);
	    },

	    _curveBoundingBox: function(p1, cp1, cp2, p2) {
	        var points = [ p1, cp1, cp2, p2 ];
	        var extremesX = this._curveExtremesFor(points, "x");
	        var extremesY = this._curveExtremesFor(points, "y");
	        var xLimits = arrayLimits([ extremesX.min, extremesX.max, p1.x, p2.x ]);
	        var yLimits = arrayLimits([ extremesY.min, extremesY.max, p1.y, p2.y ]);

	        return Rect.fromPoints(new Point(xLimits.min, yLimits.min), new Point(xLimits.max, yLimits.max));
	    },

	    _curveExtremesFor: function(points, field) {
	        var extremes = this._curveExtremes(
	            points[0][field], points[1][field],
	            points[2][field], points[3][field]
	        );

	        return {
	            min: calculateCurveAt(extremes.min, field, points),
	            max: calculateCurveAt(extremes.max, field, points)
	        };
	    },

	    _curveExtremes: function(x1, x2, x3, x4) {
	        var a = x1 - 3 * x2 + 3 * x3 - x4;
	        var b = - 2 * (x1 - 2 * x2 + x3);
	        var c = x1 - x2;
	        var sqrt = Math.sqrt(b * b - 4 * a * c);
	        var t1 = 0;
	        var t2 = 1;

	        if (a === 0) {
	            if (b !== 0) {
	                t1 = t2 = -c / b;
	            }
	        } else if (!isNaN(sqrt)) {
	            t1 = (- b + sqrt) / (2 * a);
	            t2 = (- b - sqrt) / (2 * a);
	        }

	        var min = Math.max(Math.min(t1, t2), 0);
	        if (min < 0 || min > 1) {
	            min = 0;
	        }

	        var max = Math.min(Math.max(t1, t2), 1);
	        if (max > 1 || max < 0) {
	            max = 1;
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    _intersectionsTo: function(segment, point) {
	        var intersectionsCount;
	        if (this.controlOut() && segment.controlIn()) {
	            intersectionsCount = curveIntersectionsCount([ this.anchor(), this.controlOut(), segment.controlIn(), segment.anchor() ], point, this.bboxTo(segment));
	        } else {
	            intersectionsCount = lineIntersectionsCount(this.anchor(), segment.anchor(), point);
	        }
	        return intersectionsCount;
	    },

	    _isOnCurveTo: function(segment, point, width, endSegment) {
	        var bbox = this.bboxTo(segment).expand(width, width);
	        if (bbox.containsPoint(point)) {
	            var p1 = this.anchor();
	            var p2 = this.controlOut();
	            var p3 = segment.controlIn();
	            var p4 = segment.anchor();

	            if (endSegment === "start" && p1.distanceTo(point) <= width) {
	                return !isOutOfEndPoint(p1, p2, point);
	            } else if (endSegment === "end" && p4.distanceTo(point) <= width) {
	                return !isOutOfEndPoint(p4, p3, point);
	            }

	            //the approach is not entirely correct but is close and the alternatives are solving a 6th degree polynomial or testing the segment points
	            var points = [ p1, p2, p3, p4 ];
	            if (hasRootsInRange(points, point, "x", "y", width) || hasRootsInRange(points, point, "y", "x", width)) {
	                return true;
	            }
	            var rotation = transform().rotate(45, point);
	            var rotatedPoints = [ p1.transformCopy(rotation), p2.transformCopy(rotation), p3.transformCopy(rotation), p4.transformCopy(rotation) ];
	            return hasRootsInRange(rotatedPoints, point, "x", "y", width) || hasRootsInRange(rotatedPoints, point, "y", "x", width);
	        }
	    },

	    _isOnLineTo: function(segment, point, width) {
	        var p1 = this.anchor();
	        var p2 = segment.anchor();
	        var angle = deg(Math.atan2(p2.y - p1.y, p2.x - p1.x));
	        var rect = new Rect([ p1.x, p1.y - width / 2 ], [ p1.distanceTo(p2), width ]);
	        return rect.containsPoint(point.transformCopy(transform().rotate(-angle, p1)));
	    },

	    _isOnPathTo: function(segment, point, width, endSegment) {
	        var isOnPath;
	        if (this.controlOut() && segment.controlIn()) {
	            isOnPath = this._isOnCurveTo(segment, point, width / 2, endSegment);
	        } else {
	            isOnPath = this._isOnLineTo(segment, point, width);
	        }
	        return isOnPath;
	    }
	});

	definePointAccessors(Segment.prototype, [ "anchor", "controlIn", "controlOut" ]);
	ObserversMixin.extend(Segment.prototype);

	function arrayLimits(arr) {
	    var length = arr.length;
	    var min = MAX_NUM;
	    var max = MIN_NUM;

	    for (var i = 0; i < length; i ++) {
	        max = Math.max(max, arr[i]);
	        min = Math.min(min, arr[i]);
	    }

	    return {
	        min: min,
	        max: max
	    };
	}

	var Path = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.segments = new GeometryElementsArray();
	        this.segments.addObserver(this);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");

	            if (!defined(this.options.stroke.lineJoin)) {
	                this.options.set("stroke.lineJoin", "miter");
	            }
	        }
	    },

	    moveTo: function(x, y) {
	        this.suspend();
	        this.segments.elements([]);
	        this.resume();

	        this.lineTo(x, y);

	        return this;
	    },

	    lineTo: function(x, y) {
	        var point = defined(y) ? new Point(x, y) : x;
	        var segment = new Segment(point);

	        this.segments.push(segment);

	        return this;
	    },

	    curveTo: function(controlOut, controlIn, point) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var segment = new Segment(point, controlIn);
	            this.suspend();
	            lastSegment.controlOut(controlOut);
	            this.resume();

	            this.segments.push(segment);
	        }

	        return this;
	    },

	    arc: function(startAngle, endAngle, radiusX, radiusY, anticlockwise) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var anchor = lastSegment.anchor();
	            var start = rad(startAngle);
	            var center = new Point(anchor.x - radiusX * Math.cos(start),
	                anchor.y - radiusY * Math.sin(start));
	            var arc = new Arc$2(center, {
	                startAngle: startAngle,
	                endAngle: endAngle,
	                radiusX: radiusX,
	                radiusY: radiusY,
	                anticlockwise: anticlockwise
	            });

	            this._addArcSegments(arc);
	        }

	        return this;
	    },

	    arcTo: function(end, rx, ry, largeArc, swipe, rotation) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var anchor = lastSegment.anchor();
	            var arc = Arc$2.fromPoints(anchor, end, rx, ry, largeArc, swipe, rotation);

	            this._addArcSegments(arc);
	        }
	        return this;
	    },

	    _addArcSegments: function(arc) {
	        var this$1 = this;

	        this.suspend();

	        var curvePoints = arc.curvePoints();

	        for (var i = 1; i < curvePoints.length; i += 3) {
	            this$1.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
	        }

	        this.resume();
	        this.geometryChange();
	    },

	    close: function() {
	        this.options.closed = true;
	        this.geometryChange();

	        return this;
	    },

	    rawBBox: function() {
	        return this._bbox();
	    },

	    _containsPoint: function(point) {
	        var segments = this.segments;
	        var length = segments.length;
	        var intersectionsCount = 0;
	        var previous, current;

	        for (var idx = 1; idx < length; idx++) {
	            previous = segments[idx - 1];
	            current = segments[idx];
	            intersectionsCount += previous._intersectionsTo(current, point);
	        }

	        if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
	            intersectionsCount += lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point);
	        }

	        return intersectionsCount % 2 !== 0;
	    },

	    _isOnPath: function(point, width) {
	        var segments = this.segments;
	        var length = segments.length;
	        var pathWidth = width || this.options.stroke.width;

	        if (length > 1) {
	            if (segments[0]._isOnPathTo(segments[1], point, pathWidth, "start")) {
	                return true;
	            }

	            for (var idx = 2; idx <= length - 2; idx++) {
	                if (segments[idx - 1]._isOnPathTo(segments[idx], point, pathWidth)) {
	                    return true;
	                }
	            }

	            if (segments[length - 2]._isOnPathTo(segments[length - 1], point, pathWidth, "end")) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _bbox: function(matrix) {
	        var segments = this.segments;
	        var length = segments.length;
	        var boundingBox;

	        if (length === 1) {
	            var anchor = segments[0].anchor().transformCopy(matrix);
	            boundingBox = new Rect(anchor, Size.ZERO);
	        } else if (length > 0) {
	            for (var i = 1; i < length; i++) {
	                var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, segmentBox);
	                } else {
	                    boundingBox = segmentBox;
	                }
	            }
	        }

	        return boundingBox;
	    }
	});

	Path.fromRect = function(rect, options) {
	    return new Path(options)
	        .moveTo(rect.topLeft())
	        .lineTo(rect.topRight())
	        .lineTo(rect.bottomRight())
	        .lineTo(rect.bottomLeft())
	        .close();
	};

	Path.fromPoints = function(points, options) {
	    if (points) {
	        var path = new Path(options);

	        for (var i = 0; i < points.length; i++) {
	            var point = Point.create(points[i]);
	            if (point) {
	                if (i === 0) {
	                    path.moveTo(point);
	                } else {
	                    path.lineTo(point);
	                }
	            }
	        }

	        return path;
	    }
	};

	Path.fromArc = function(arc, options) {
	    var path = new Path(options);
	    var startAngle = arc.startAngle;
	    var start = arc.pointAt(startAngle);
	    path.moveTo(start.x, start.y);
	    path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
	    return path;
	};

	Path.prototype.nodeType = "Path";

	Paintable.extend(Path.prototype);
	Measurable.extend(Path.prototype);

	var DEFAULT_STROKE$1 = "#000";

	var Arc = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Arc$2(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke(DEFAULT_STROKE$1);
	        }
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    rawBBox: function() {
	        return this.geometry().bbox();
	    },

	    toPath: function() {
	        var path = new Path();
	        var curvePoints = this.geometry().curvePoints();

	        if (curvePoints.length > 0) {
	            path.moveTo(curvePoints[0].x, curvePoints[0].y);

	            for (var i = 1; i < curvePoints.length; i += 3) {
	                path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
	            }
	        }

	        return path;
	    },

	    _containsPoint: function(point) {
	        return this.geometry().containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Arc.prototype.nodeType = "Arc";

	Paintable.extend(Arc.prototype);
	Measurable.extend(Arc.prototype);
	defineGeometryAccessors(Arc.prototype, [ "geometry" ]);

	function elementsBoundingBox(elements, applyTransform, transformation) {
	    var boundingBox;

	    for (var i = 0; i < elements.length; i++) {
	        var element = elements[i];
	        if (element.visible()) {
	            var elementBoundingBox = applyTransform ? element.bbox(transformation) : element.rawBBox();
	            if (elementBoundingBox) {
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
	                } else {
	                    boundingBox = elementBoundingBox;
	                }
	            }
	        }
	    }

	    return boundingBox;
	}

	function elementsClippedBoundingBox(elements, transformation) {
	    var boundingBox;

	    for (var i = 0; i < elements.length; i++) {
	        var element = elements[i];
	        if (element.visible()) {
	            var elementBoundingBox = element.clippedBBox(transformation);
	            if (elementBoundingBox) {
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
	                } else {
	                    boundingBox = elementBoundingBox;
	                }
	            }
	        }
	    }

	    return boundingBox;
	}

	var MultiPath = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.paths = new GeometryElementsArray();
	        this.paths.addObserver(this);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");
	        }
	    },

	    moveTo: function(x, y) {
	        var path = new Path();
	        path.moveTo(x, y);

	        this.paths.push(path);

	        return this;
	    },

	    lineTo: function(x, y) {
	        if (this.paths.length > 0) {
	            last(this.paths).lineTo(x, y);
	        }

	        return this;
	    },

	    curveTo: function(controlOut, controlIn, point) {
	        if (this.paths.length > 0) {
	            last(this.paths).curveTo(controlOut, controlIn, point);
	        }

	        return this;
	    },

	    arc: function(startAngle, endAngle, radiusX, radiusY, anticlockwise) {
	        if (this.paths.length > 0) {
	            last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);
	        }

	        return this;
	    },

	    arcTo: function(end, rx, ry, largeArc, swipe, rotation) {
	        if (this.paths.length > 0) {
	            last(this.paths).arcTo(end, rx, ry, largeArc, swipe, rotation);
	        }

	        return this;
	    },

	    close: function() {
	        if (this.paths.length > 0) {
	            last(this.paths).close();
	        }

	        return this;
	    },

	    _bbox: function(matrix) {
	        return elementsBoundingBox(this.paths, true, matrix);
	    },

	    rawBBox: function() {
	        return elementsBoundingBox(this.paths, false);
	    },

	    _containsPoint: function(point) {
	        var paths = this.paths;

	        for (var idx = 0; idx < paths.length; idx++) {
	            if (paths[idx]._containsPoint(point)) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _isOnPath: function(point) {
	        var paths = this.paths;
	        var width = this.options.stroke.width;

	        for (var idx = 0; idx < paths.length; idx++) {
	            if (paths[idx]._isOnPath(point, width)) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _clippedBBox: function(transformation) {
	        return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));
	    }
	});

	MultiPath.prototype.nodeType = "MultiPath";

	Paintable.extend(MultiPath.prototype);
	Measurable.extend(MultiPath.prototype);

	var DEFAULT_FONT = "12px sans-serif";
	var DEFAULT_FILL = "#000";

	var Text = Element$1.extend({
	    init: function(content, position, options) {
	        if (position === void 0) { position = new Point(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.content(content);
	        this.position(position);

	        if (!this.options.font) {
	            this.options.font = DEFAULT_FONT;
	        }

	        if (!defined(this.options.fill)) {
	            this.fill(DEFAULT_FILL);
	        }
	    },

	    content: function(value) {
	        if (defined(value)) {
	            this.options.set("content", value);
	            return this;
	        }

	        return this.options.get("content");
	    },

	    measure: function() {
	        var metrics = kendoUtil.measureText(this.content(), {
	            font: this.options.get("font")
	        });

	        return metrics;
	    },

	    rect: function() {
	        var size = this.measure();
	        var pos = this.position().clone();
	        return new Rect(pos, [ size.width, size.height ]);
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        return this.rect().bbox(combinedMatrix);
	    },

	    rawBBox: function() {
	        return this.rect().bbox();
	    },

	    _containsPoint: function(point) {
	        return this.rect().containsPoint(point);
	    }
	});

	Text.prototype.nodeType = "Text";

	Paintable.extend(Text.prototype);

	definePointAccessors(Text.prototype, [ "position" ]);

	var Image$1 = Element$1.extend({
	    init: function(src, rect, options) {
	        if (rect === void 0) { rect = new Rect(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.src(src);
	        this.rect(rect);
	    },

	    src: function(value) {
	        if (defined(value)) {
	            this.options.set("src", value);
	            return this;
	        }

	        return this.options.get("src");
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        return this._rect.bbox(combinedMatrix);
	    },

	    rawBBox: function() {
	        return this._rect.bbox();
	    },

	    _containsPoint: function(point) {
	        return this._rect.containsPoint(point);
	    },

	    _hasFill: function() {
	        return this.src();
	    }
	});

	Image$1.prototype.nodeType = "Image";

	defineGeometryAccessors(Image$1.prototype, [ "rect" ]);

	var Traversable = {
	    extend: function(proto, childrenField) {
	        proto.traverse = function(callback) {
	            var children = this[childrenField];

	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];

	                if (child.traverse) {
	                    child.traverse(callback);
	                } else {
	                    callback(child);
	                }
	            }

	            return this;
	        };
	    }
	};

	var Group = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.children = [];
	    },

	    childrenChange: function(action, items, index) {
	        this.trigger("childrenChange",{
	            action: action,
	            items: items,
	            index: index
	        });
	    },

	    append: function() {
	        append(this.children, arguments);
	        this._reparent(arguments, this);

	        this.childrenChange("add", arguments);

	        return this;
	    },

	    insert: function(index, element) {
	        this.children.splice(index, 0, element);
	        element.parent = this;

	        this.childrenChange("add", [ element ], index);

	        return this;
	    },

	    insertAt: function(element, index) {
	        return this.insert(index, element);
	    },

	    remove: function(element) {
	        var index = this.children.indexOf(element);
	        if (index >= 0) {
	            this.children.splice(index, 1);
	            element.parent = null;
	            this.childrenChange("remove", [ element ], index);
	        }

	        return this;
	    },

	    removeAt: function(index) {
	        if (0 <= index && index < this.children.length) {
	            var element = this.children[index];
	            this.children.splice(index, 1);
	            element.parent = null;
	            this.childrenChange("remove", [ element ], index);
	        }

	        return this;
	    },

	    clear: function() {
	        var items = this.children;
	        this.children = [];
	        this._reparent(items, null);

	        this.childrenChange("remove", items, 0);

	        return this;
	    },

	    bbox: function(transformation) {
	        return elementsBoundingBox(this.children, true, this.currentTransform(transformation));
	    },

	    rawBBox: function() {
	        return elementsBoundingBox(this.children, false);
	    },

	    _clippedBBox: function(transformation) {
	        return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));
	    },

	    currentTransform: function(transformation) {
	        return Element$1.prototype.currentTransform.call(this, transformation) || null;
	    },

	    containsPoint: function(point, parentTransform) {
	        if (this.visible()) {
	            var children = this.children;
	            var transform = this.currentTransform(parentTransform);
	            for (var idx = 0; idx < children.length; idx++) {
	                if (children[idx].containsPoint(point, transform)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },

	    _reparent: function(elements, newParent) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var child = elements[i];
	            var parent = child.parent;
	            if (parent && parent !== this$1 && parent.remove) {
	                parent.remove(child);
	            }

	            child.parent = newParent;
	        }
	    }
	});

	Group.prototype.nodeType = "Group";

	Traversable.extend(Group.prototype, "children");

	function translateToPoint(point, bbox, element) {
	    var transofrm = element.transform() || transform();
	    var matrix = transofrm.matrix();
	    matrix.e += point.x - bbox.origin.x;
	    matrix.f += point.y - bbox.origin.y;

	    transofrm.matrix(matrix);
	    element.transform(transofrm);
	}

	function alignStart(size, rect, align, axis, sizeField) {
	    var start;
	    if (align === "start") {
	        start = rect.origin[axis];
	    } else if (align === "end") {
	        start = rect.origin[axis] + rect.size[sizeField] - size;
	    } else {
	        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
	    }

	    return start;
	}

	function alignStartReverse(size, rect, align, axis, sizeField) {
	    var start;
	    if (align === "start") {
	        start = rect.origin[axis] + rect.size[sizeField] - size;
	    } else if (align === "end") {
	        start = rect.origin[axis];
	    } else {
	        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
	    }

	    return start;
	}

	var DEFAULT_OPTIONS = {
	    alignContent: "start",
	    justifyContent: "start",
	    alignItems: "start",
	    spacing: 0,
	    orientation: "horizontal",
	    lineSpacing: 0,
	    wrap: true,
	    revers: false
	};

	var forEach = function (elements, callback) {
	    elements.forEach(callback);
	};

	var forEachReverse = function (elements, callback) {
	    var length = elements.length;

	    for (var idx = length - 1; idx >= 0; idx--) {
	        callback(elements[idx], idx);
	    }
	};

	var Layout = Group.extend({
	    init: function(rect, options) {
	        Group.fn.init.call(this, $.extend({}, DEFAULT_OPTIONS, options));
	        this._rect = rect;
	        this._fieldMap = {};
	    },

	    rect: function(value) {
	        if (value) {
	            this._rect = value;
	            return this;
	        }

	        return this._rect;
	    },

	    _initMap: function() {
	        var options = this.options;
	        var fieldMap = this._fieldMap;
	        if (options.orientation === "horizontal") {
	            fieldMap.sizeField = "width";
	            fieldMap.groupsSizeField = "height";
	            fieldMap.groupAxis = "x";
	            fieldMap.groupsAxis = "y";
	        } else {
	            fieldMap.sizeField = "height";
	            fieldMap.groupsSizeField = "width";
	            fieldMap.groupAxis = "y";
	            fieldMap.groupsAxis = "x";
	        }

	        if (options.reverse) {
	            this.forEach = forEachReverse;
	            this.justifyAlign = alignStartReverse;
	        } else {
	            this.forEach = forEach;
	            this.justifyAlign = alignStart;
	        }
	    },

	    reflow: function() {
	        var this$1 = this;

	        if (!this._rect || this.children.length === 0) {
	            return;
	        }
	        this._initMap();

	        if (this.options.transform) {
	            this.transform(null);
	        }

	        var options = this.options;
	        var rect = this._rect;
	        var ref = this._initGroups();
	        var groups = ref.groups;
	        var groupsSize = ref.groupsSize;
	        var ref$1 = this._fieldMap;
	        var sizeField = ref$1.sizeField;
	        var groupsSizeField = ref$1.groupsSizeField;
	        var groupAxis = ref$1.groupAxis;
	        var groupsAxis = ref$1.groupsAxis;
	        var groupOrigin = new Point();
	        var elementOrigin = new Point();
	        var size = new Size();
	        var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);
	        var elementStart, group, groupBox;

	        var arrangeElements = function (bbox, idx) {
	            var element = group.elements[idx];

	            elementOrigin[groupAxis] = elementStart;
	            elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);
	            translateToPoint(elementOrigin, bbox, element);
	            elementStart += bbox.size[sizeField] + options.spacing;
	        };

	        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
	            group = groups[groupIdx];
	            groupOrigin[groupAxis] = elementStart = this$1.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);
	            groupOrigin[groupsAxis] = groupStart;
	            size[sizeField] = group.size;
	            size[groupsSizeField] = group.lineSize;
	            groupBox = new Rect(groupOrigin, size);
	            this$1.forEach(group.bboxes, arrangeElements);

	            groupStart += group.lineSize + options.lineSpacing;
	        }

	        if (!options.wrap && group.size > rect.size[sizeField]) {
	            var scale = rect.size[sizeField] / groupBox.size[sizeField];
	            var scaledStart = groupBox.topLeft().scale(scale, scale);
	            var scaledSize = groupBox.size[groupsSizeField] * scale;
	            var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);
	            var transform$$1 = transform();
	            if (groupAxis === "x") {
	                transform$$1.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);
	            } else {
	                transform$$1.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);
	            }
	            transform$$1.scale(scale, scale);

	            this.transform(transform$$1);
	        }
	    },

	    _initGroups: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var lineSpacing = options.lineSpacing;
	        var wrap = options.wrap;
	        var spacing = options.spacing;
	        var sizeField = this._fieldMap.sizeField;
	        var group = this._newGroup();
	        var groups = [];
	        var addGroup = function() {
	            groups.push(group);
	            groupsSize += group.lineSize + lineSpacing;
	        };
	        var groupsSize = -lineSpacing;

	        for (var idx = 0; idx < children.length; idx++) {
	            var element = children[idx];
	            var bbox = children[idx].clippedBBox();
	            if (element.visible() && bbox) {
	                if (wrap && group.size + bbox.size[sizeField] + spacing > this$1._rect.size[sizeField]) {
	                    if (group.bboxes.length === 0) {
	                        this$1._addToGroup(group, bbox, element);
	                        addGroup();
	                        group = this$1._newGroup();
	                    } else {
	                        addGroup();
	                        group = this$1._newGroup();
	                        this$1._addToGroup(group, bbox, element);
	                    }
	                } else {
	                    this$1._addToGroup(group, bbox, element);
	                }
	            }
	        }

	        if (group.bboxes.length) {
	            addGroup();
	        }

	        return {
	            groups: groups,
	            groupsSize: groupsSize
	        };
	    },

	    _addToGroup: function(group, bbox, element) {
	        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;
	        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);
	        group.bboxes.push(bbox);
	        group.elements.push(element);
	    },

	    _newGroup: function() {
	        return {
	            lineSize: 0,
	            size: -this.options.spacing,
	            bboxes: [],
	            elements: []
	        };
	    }
	});

	var Rect$2 = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Rect(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);
	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");
	        }
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    rawBBox: function() {
	        return this._geometry.bbox();
	    },

	    _containsPoint: function(point) {
	        return this._geometry.containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Rect$2.prototype.nodeType = "Rect";

	Paintable.extend(Rect$2.prototype);
	Measurable.extend(Rect$2.prototype);
	defineGeometryAccessors(Rect$2.prototype, [ "geometry" ]);

	function alignElements(elements, rect, alignment, axis, sizeField) {
	    for (var idx = 0; idx < elements.length; idx++) {
	        var bbox = elements[idx].clippedBBox();
	        if (bbox) {
	            var point = bbox.origin.clone();
	            point[axis] = alignStart(bbox.size[sizeField], rect, alignment || "start", axis, sizeField);
	            translateToPoint(point, bbox, elements[idx]);
	        }
	    }
	}

	function align(elements, rect, alignment) {
	    alignElements(elements, rect, alignment, "x", "width");
	}

	function vAlign(elements, rect, alignment) {
	    alignElements(elements, rect, alignment, "y", "height");
	}

	function stackElements(elements, stackAxis, otherAxis, sizeField) {
	    if (elements.length > 1) {
	        var origin = new Point();
	        var previousBBox = elements[0].bbox;

	        for (var idx = 1; idx < elements.length; idx++) {
	            var element = elements[idx].element;
	            var bbox = elements[idx].bbox;
	            origin[stackAxis] = previousBBox.origin[stackAxis] + previousBBox.size[sizeField];
	            origin[otherAxis] = bbox.origin[otherAxis];
	            translateToPoint(origin, bbox, element);
	            bbox.origin[stackAxis] = origin[stackAxis];
	            previousBBox = bbox;
	        }
	    }
	}

	function createStackElements(elements) {
	    var stackElements = [];

	    for (var idx = 0; idx < elements.length; idx++) {
	        var element = elements[idx];
	        var bbox = element.clippedBBox();
	        if (bbox) {
	            stackElements.push({
	                element: element,
	                bbox: bbox
	            });
	        }
	    }

	    return stackElements;
	}

	function stack(elements) {
	    stackElements(createStackElements(elements), "x", "y", "width");
	}

	function vStack(elements) {
	    stackElements(createStackElements(elements), "y", "x", "height");
	}

	function getStacks(elements, rect, sizeField) {
	    var maxSize = rect.size[sizeField];
	    var stacks = [];
	    var stack = [];
	    var stackSize = 0;
	    var element, bbox;

	    var addElementToStack = function() {
	        stack.push({
	            element: element,
	            bbox: bbox
	        });
	    };

	    for (var idx = 0; idx < elements.length; idx++) {
	        element = elements[idx];

	        bbox = element.clippedBBox();
	        if (bbox) {
	            var size = bbox.size[sizeField];
	            if (stackSize + size > maxSize) {
	                if (stack.length) {
	                    stacks.push(stack);
	                    stack = [];
	                    addElementToStack();
	                    stackSize = size;
	                } else {
	                    addElementToStack();
	                    stacks.push(stack);
	                    stack = [];
	                    stackSize = 0;
	                }
	            } else {
	                addElementToStack();
	                stackSize += size;
	            }
	        }
	    }

	    if (stack.length) {
	        stacks.push(stack);
	    }

	    return stacks;
	}

	function wrapElements(elements, rect, axis, otherAxis, sizeField) {
	    var stacks = getStacks(elements, rect, sizeField);
	    var origin = rect.origin.clone();
	    var result = [];

	    for (var idx = 0; idx < stacks.length; idx++) {
	        var stack = stacks[idx];
	        var startElement = stack[0];
	        origin[otherAxis] = startElement.bbox.origin[otherAxis];
	        translateToPoint(origin, startElement.bbox, startElement.element);
	        startElement.bbox.origin[axis] = origin[axis];
	        stackElements(stack, axis, otherAxis, sizeField);
	        result.push([]);
	        for (var elementIdx = 0; elementIdx < stack.length; elementIdx++) {
	            result[idx].push(stack[elementIdx].element);
	        }
	    }
	    return result;
	}

	function wrap(elements, rect) {
	    return wrapElements(elements, rect, "x", "y", "width");
	}

	function vWrap(elements, rect) {
	    return wrapElements(elements, rect, "y", "x", "height");
	}

	function fit(element, rect) {
	    var bbox = element.clippedBBox();
	    if (bbox) {
	        var elementSize = bbox.size;
	        var rectSize = rect.size;
	        if (rectSize.width < elementSize.width || rectSize.height < elementSize.height) {
	            var scale = Math.min(rectSize.width / elementSize.width, rectSize.height / elementSize.height);
	            var transform$$1 = element.transform() || transform();
	            transform$$1.scale(scale, scale);
	            element.transform(transform$$1);
	        }
	    }
	}

	var StopsArray = ElementsArray.extend({
	    _change: function() {
	        this.optionsChange({
	            field: "stops"
	        });
	    }
	});

	function optionsAccessor(name) {
	    return function(value) {
	        if (defined(value)) {
	            this.options.set(name, value);
	            return this;
	        }

	        return this.options.get(name);
	    };
	}

	function defineOptionsAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = optionsAccessor(names[i]);
	    }
	}

	var GradientStop = Class.extend({
	    init: function(offset, color, opacity) {

	        this.options = new OptionsStore({
	            offset: offset,
	            color: color,
	            opacity: defined(opacity) ? opacity : 1
	        });
	        this.options.addObserver(this);
	    }
	});

	GradientStop.create = function(arg) {
	    if (defined(arg)) {
	        var stop;
	        if (arg instanceof GradientStop) {
	            stop = arg;
	        } else if (arg.length > 1) {
	            stop = new GradientStop(arg[0], arg[1], arg[2]);
	        } else {
	            stop = new GradientStop(arg.offset, arg.color, arg.opacity);
	        }

	        return stop;
	    }
	};

	defineOptionsAccessors(GradientStop.prototype, [ "offset", "color", "opacity" ]);
	ObserversMixin.extend(GradientStop.prototype);

	var Gradient = Class.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        this.stops = new StopsArray(this._createStops(options.stops));
	        this.stops.addObserver(this);
	        this._userSpace = options.userSpace;
	        this.id = definitionId();
	    },

	    userSpace: function(value) {
	        if (defined(value)) {
	            this._userSpace = value;
	            this.optionsChange();
	            return this;
	        }

	        return this._userSpace;
	    },

	    _createStops: function(stops) {
	        if (stops === void 0) { stops = []; }

	        var result = [];
	        for (var idx = 0; idx < stops.length; idx++) {
	            result.push(GradientStop.create(stops[idx]));
	        }

	        return result;
	    },

	    addStop: function(offset, color, opacity) {
	        this.stops.push(new GradientStop(offset, color, opacity));
	    },

	    removeStop: function(stop) {
	        var index = this.stops.indexOf(stop);
	        if (index >= 0) {
	            this.stops.splice(index, 1);
	        }
	    }
	});

	Gradient.prototype.nodeType = "Gradient";

	ObserversMixin.extend(Gradient.prototype);

	$.extend(Gradient.prototype, {
	    optionsChange: function(e) {
	        this.trigger("optionsChange", {
	            field: "gradient" + (e ? "." + e.field : ""),
	            value: this
	        });
	    },

	    geometryChange: function() {
	        this.optionsChange();
	    }
	});

	var LinearGradient = Gradient.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        Gradient.fn.init.call(this, options);

	        this.start(options.start || new Point());

	        this.end(options.end || new Point(1, 0));
	    }
	});

	definePointAccessors(LinearGradient.prototype, [ "start", "end" ]);

	var RadialGradient = Gradient.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        Gradient.fn.init.call(this, options);

	        this.center(options.center || new Point());
	        this._radius = defined(options.radius) ? options.radius : 1;
	        this._fallbackFill = options.fallbackFill;
	    },

	    radius: function(value) {
	        if (defined(value)) {
	            this._radius = value;
	            this.geometryChange();
	            return this;
	        }

	        return this._radius;
	    },

	    fallbackFill: function(value) {
	        if (defined(value)) {
	            this._fallbackFill = value;
	            this.optionsChange();
	            return this;
	        }

	        return this._fallbackFill;
	    }
	});

	definePointAccessors(RadialGradient.prototype, [ "center" ]);

	function swing(position) {
	    return 0.5 - Math.cos(position * Math.PI) / 2;
	}

	function linear(position) {
	    return position;
	}

	function easeOutElastic(position, time, start, diff) {
	    var s = 1.70158,
	        p = 0,
	        a = diff;

	    if (position === 0) {
	        return start;
	    }

	    if (position === 1) {
	        return start + diff;
	    }

	    if (!p) {
	        p = 0.5;
	    }

	    if (a < Math.abs(diff)) {
	        a = diff;
	        s = p / 4;
	    } else {
	        s = p / (2 * Math.PI) * Math.asin(diff / a);
	    }

	    return a * Math.pow(2, -10 * position) *
	           Math.sin((Number(position) - s) * (1.1 * Math.PI) / p) + diff + start;
	}

	var easingFunctions = {
		swing: swing,
		linear: linear,
		easeOutElastic: easeOutElastic
	};

	var now = Date.now || function() {
	    return new Date().getTime();
	};

	var Animation = Class.extend({
	    init: function(element, options) {

	        this.options = $.extend({}, this.options, options);
	        this.element = element;
	    },

	    setup: function() {},

	    step: function() {},

	    play: function() {
	        var this$1 = this;

	        var options = this.options;
	        var duration = options.duration;
	        var delay = options.delay; if (delay === void 0) { delay = 0; }
	        var easing = easingFunctions[options.easing];
	        var start = now() + delay;
	        var finish = start + duration;

	        if (duration === 0) {
	            this.step(1);
	            this.abort();
	        } else {
	            setTimeout(function () {
	                var loop = function () {
	                    if (this$1._stopped) {
	                        return;
	                    }

	                    var wallTime = now();

	                    var time = limitValue(wallTime - start, 0, duration);
	                    var position = time / duration;
	                    var easingPosition = easing(position, time, 0, 1, duration);

	                    this$1.step(easingPosition);

	                    if (wallTime < finish) {
	                        kendo.animationFrame(loop);
	                    } else {
	                        this$1.abort();
	                    }
	                };

	                loop();
	            }, delay);
	        }
	    },

	    abort: function() {
	        this._stopped = true;
	    },

	    destroy: function() {
	        this.abort();
	    }
	});

	Animation.prototype.options = {
	    duration: 500,
	    easing: "swing"
	};

	var AnimationFactory = Class.extend({
	    init: function() {

	        this._items = [];
	    },

	    register: function(name, type) {
	        this._items.push({
	            name: name,
	            type: type
	        });
	    },

	    create: function(element, options) {
	        var items = this._items;
	        var match;

	        if (options && options.type) {
	            var type = options.type.toLowerCase();
	            for (var i = 0; i < items.length; i++) {
	                if (items[i].name.toLowerCase() === type) {
	                    match = items[i];
	                    break;
	                }
	            }
	        }

	        if (match) {
	            return new match.type(element, options);
	        }
	    }
	});

	AnimationFactory.current = new AnimationFactory();

	Animation.create = function(type, element, options) {
	    return AnimationFactory.current.create(type, element, options);
	};

	var ShapeMap = {
	    l: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 2) {
	            var point = new Point(parameters[i], parameters[i + 1]);

	            if (options.isRelative) {
	                point.translateWith(position);
	            }

	            path.lineTo(point.x, point.y);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    c: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 6) {
	            var controlOut = new Point(parameters[i], parameters[i + 1]);
	            var controlIn = new Point(parameters[i + 2], parameters[i + 3]);
	            var point = new Point(parameters[i + 4], parameters[i + 5]);
	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                controlOut.translateWith(position);
	                point.translateWith(position);
	            }

	            path.curveTo(controlOut, controlIn, point);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    v: function(path, options) {
	        var value = options.isRelative ? 0 : options.position.x;

	        toLineParamaters(options.parameters, true, value);
	        this.l(path, options);
	    },

	    h: function(path, options) {
	        var value = options.isRelative ? 0 : options.position.y;

	        toLineParamaters(options.parameters, false, value);
	        this.l(path, options);
	    },

	    a: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 7) {
	            var radiusX = parameters[i];
	            var radiusY = parameters[i + 1];
	            var rotation = parameters[i + 2];
	            var largeArc = parameters[i + 3];
	            var swipe = parameters[i + 4];
	            var endPoint = new Point(parameters[i + 5], parameters[i + 6]);

	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }
	            if (position.x !== endPoint.x || position.y !== endPoint.y) {
	                path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe, rotation);

	                position.x = endPoint.x;
	                position.y = endPoint.y;
	            }
	        }
	    },

	    s: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;
	        var lastControlIn;

	        if (previousCommand === "s" || previousCommand === "c") {
	            lastControlIn = last(last(path.paths).segments).controlIn();
	        }

	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlIn = new Point(parameters[i], parameters[i + 1]);
	            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);
	            var controlOut = (void 0);

	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            if (lastControlIn) {
	                controlOut = reflectionPoint(lastControlIn, position);
	            } else {
	                controlOut = position.clone();
	            }

	            lastControlIn = controlIn;

	            path.curveTo(controlOut, controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    q: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlPoint = new Point(parameters[i], parameters[i + 1]);
	            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);

	            if (options.isRelative) {
	                controlPoint.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    t: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;
	        var controlPoint;

	        if (previousCommand === "q" || previousCommand === "t") {
	            var lastSegment = last(last(path.paths).segments);
	            controlPoint = lastSegment.controlIn().clone()
	                .translateWith(position.scaleCopy(-1 / 3))
	                .scale(3 / 2);
	        }

	        for (var i = 0; i < parameters.length; i += 2) {
	            var endPoint = new Point(parameters[i], parameters[i + 1]);
	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }

	            if (controlPoint) {
	                controlPoint = reflectionPoint(controlPoint, position);
	            } else {
	                controlPoint = position.clone();
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    }
	};

	function toLineParamaters(parameters, isVertical, value) {
	    var insertPosition = isVertical ? 0 : 1;

	    for (var i = 0; i < parameters.length; i += 2) {
	        parameters.splice(i + insertPosition, 0, value);
	    }
	}

	function reflectionPoint(point, center) {
	    if (point && center) {
	        return center.scaleCopy(2).translate(-point.x, -point.y);
	    }
	}

	var third = 1 / 3;

	function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
	    var scaledPoint = controlPoint.clone().scale(2 / 3);
	    return {
	        controlOut: scaledPoint.clone().translateWith(position.scaleCopy(third)),
	        controlIn: scaledPoint.translateWith(endPoint.scaleCopy(third))
	    };
	}

	var SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;
	var SPLIT_REGEX = /[,\s]?([+\-]?(?:\d*\.\d+|\d+)(?:[eE][+\-]?\d+)?)/g;
	var MOVE = "m";
	var CLOSE = "z";

	function parseParameters(str) {
	    var parameters = [];
	    str.replace(SPLIT_REGEX, function(match, number) {
	        parameters.push(parseFloat(number));
	    });
	    return parameters;
	}

	var PathParser = Class.extend({
	    parse: function(str, options) {
	        var multiPath = new MultiPath(options);
	        var position = new Point();
	        var previousCommand;

	        str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {
	            var command = element.toLowerCase();
	            var isRelative = command === element;
	            var parameters = parseParameters(params.trim());

	            if (command === MOVE) {
	                if (isRelative) {
	                    position.x += parameters[0];
	                    position.y += parameters[1];
	                } else {
	                    position.x = parameters[0];
	                    position.y = parameters[1];
	                }

	                multiPath.moveTo(position.x, position.y);

	                if (parameters.length > 2) {
	                    command = "l";
	                    parameters.splice(0, 2);
	                }
	            }

	            if (ShapeMap[command]) {
	                ShapeMap[command](
	                    multiPath, {
	                        parameters: parameters,
	                        position: position,
	                        isRelative: isRelative,
	                        previousCommand: previousCommand
	                    }
	                );

	                if (closePath && closePath.toLowerCase() === CLOSE) {
	                    multiPath.close();
	                }
	            } else if (command !== MOVE) {
	                throw new Error("Error while parsing SVG path. Unsupported command: " + command);
	            }

	            previousCommand = command;
	        });

	        return multiPath;
	    }
	});

	PathParser.current = new PathParser();

	Path.parse = function(str, options) {
	    return PathParser.current.parse(str, options);
	};

	var SurfaceFactory = Class.extend({
	    init: function() {

	        this._items = [];
	    },

	    register: function(name, type, order) {
	        var items = this._items;
	        var first = items[0];
	        var entry = {
	            name: name,
	            type: type,
	            order: order
	        };

	        if (!first || order < first.order) {
	            items.unshift(entry);
	        } else {
	            items.push(entry);
	        }
	    },

	    create: function(element, options) {
	        var items = this._items;
	        var match = items[0];

	        if (options && options.type) {
	            var preferred = options.type.toLowerCase();
	            for (var i = 0; i < items.length; i++) {
	                if (items[i].name === preferred) {
	                    match = items[i];
	                    break;
	                }
	            }
	        }

	        if (match) {
	            return new match.type(element, options);
	        }

	        kendo.logToConsole(
	            "Warning: Unable to create Kendo UI Drawing Surface. Possible causes:\n" +
	            "- The browser does not support SVG and Canvas. User agent: " + (navigator.userAgent));
	    }
	});

	SurfaceFactory.current = new SurfaceFactory();

	var events = [
	    "click",
	    "mouseenter",
	    "mouseleave",
	    "mousemove",
	    "resize"
	];

	var Surface = kendo.Observable.extend({
	    init: function(element, options) {
	        kendo.Observable.fn.init.call(this);

	        this.options = $.extend({}, options);
	        this.element = element;
	        this.element._kendoExportVisual = this.exportVisual.bind(this);

	        this._click = this._handler("click");
	        this._mouseenter = this._handler("mouseenter");
	        this._mouseleave = this._handler("mouseleave");
	        this._mousemove = this._handler("mousemove");

	        this._visual = new Group();

	        elementSize(element, this.options);

	        this.bind(events, this.options);

	        this._enableTracking();
	    },

	    draw: function(element) {
	        this._visual.children.push(element);
	    },

	    clear: function() {
	        this._visual.children = [];
	    },

	    destroy: function() {
	        this._visual = null;
	        this.element._kendoExportVisual = null;
	        this.unbind();
	    },

	    eventTarget: function(e) {
	        var this$1 = this;

	        var domNode = eventElement(e);
	        var node;

	        while (!node && domNode) {
	            node = domNode._kendoNode;
	            if (domNode === this$1.element) {
	                break;
	            }

	            domNode = domNode.parentElement;
	        }

	        if (node) {
	            return node.srcElement;
	        }
	    },

	    exportVisual: function() {
	        return this._visual;
	    },

	    getSize: function() {
	        return elementSize(this.element);
	    },

	    currentSize: function(size) {
	        if (size) {
	            this._size = size;
	        } else {
	            return this._size;
	        }
	    },

	    setSize: function(size) {
	        elementSize(this.element, size);

	        this.currentSize(size);
	        this._resize();
	    },

	    resize: function(force) {
	        var size = this.getSize();
	        var currentSize = this.currentSize();

	        if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	            this.currentSize(size);
	            this._resize(size, force);
	            this.trigger("resize", size);
	        }
	    },

	    size: function(value) {
	        if (!value) {
	            return this.getSize();
	        }

	        this.setSize(value);
	    },

	    suspendTracking: function() {
	        this._suspendedTracking = true;
	    },

	    resumeTracking: function() {
	        this._suspendedTracking = false;
	    },

	    _enableTracking: function() {},

	    _resize: function() {},

	    _handler: function(eventName) {
	        var this$1 = this;

	        return function (e) {
	            var node = this$1.eventTarget(e);
	            if (node && !this$1._suspendedTracking) {
	                this$1.trigger(eventName, {
	                    element: node,
	                    originalEvent: e,
	                    type: eventName
	                });
	            }
	        };
	    },

	    _elementOffset: function() {
	        var element = this.element;
	        var ref = elementStyles(element, [ "paddingLeft", "paddingTop" ]);
	        var paddingLeft = ref.paddingLeft;
	        var paddingTop = ref.paddingTop;
	        var ref$1 = elementOffset(element);
	        var left = ref$1.left;
	        var top = ref$1.top;

	        return {
	            left: left + parseInt(paddingLeft, 10),
	            top: top + parseInt(paddingTop, 10)
	        };
	    },

	    _surfacePoint: function(e) {
	        var offset = this._elementOffset();
	        var coord = eventCoordinates(e);
	        var x = coord.x - offset.left;
	        var y = coord.y - offset.top;

	        return new Point(x, y);
	    }
	});

	Surface.create = function(element, options) {
	    return SurfaceFactory.current.create(element, options);
	};

	Surface.support = {};

	var BaseNode = Class.extend({
	    init: function(srcElement) {

	        this.childNodes = [];
	        this.parent = null;

	        if (srcElement) {
	            this.srcElement = srcElement;
	            this.observe();
	        }
	    },

	    destroy: function() {
	        var this$1 = this;

	        if (this.srcElement) {
	            this.srcElement.removeObserver(this);
	        }

	        var children = this.childNodes;
	        for (var i = 0; i < children.length; i++) {
	            this$1.childNodes[i].destroy();
	        }

	        this.parent = null;
	    },

	    load: function() {},

	    observe: function() {
	        if (this.srcElement) {
	            this.srcElement.addObserver(this);
	        }
	    },

	    append: function(node) {
	        this.childNodes.push(node);
	        node.parent = this;
	    },

	    insertAt: function(node, pos) {
	        this.childNodes.splice(pos, 0, node);
	        node.parent = this;
	    },

	    remove: function(index, count) {
	        var this$1 = this;

	        var end = index + count;
	        for (var i = index; i < end; i++) {
	            this$1.childNodes[i].removeSelf();
	        }
	        this.childNodes.splice(index, count);
	    },

	    removeSelf: function() {
	        this.clear();
	        this.destroy();
	    },

	    clear: function() {
	        this.remove(0, this.childNodes.length);
	    },

	    invalidate: function() {
	        if (this.parent) {
	            this.parent.invalidate();
	        }
	    },

	    geometryChange: function() {
	        this.invalidate();
	    },

	    optionsChange: function() {
	        this.invalidate();
	    },

	    childrenChange: function(e) {
	        if (e.action === "add") {
	            this.load(e.items, e.index);
	        } else if (e.action === "remove") {
	            this.remove(e.index, e.items.length);
	        }

	        this.invalidate();
	    }
	});

	function renderAttr(name, value) {
	    return (defined(value) && value !== null) ? (" " + name + "='" + value + "' ") : "";
	}

	function renderAllAttr(attrs) {
	    var output = "";
	    for (var i = 0; i < attrs.length; i++) {
	        output += renderAttr(attrs[i][0], attrs[i][1]);
	    }

	    return output;
	}

	function renderStyle(attrs) {
	    var output = "";
	    for (var i = 0; i < attrs.length; i++) {
	        var value = attrs[i][1];
	        if (defined(value)) {
	            output += attrs[i][0] + ":" + value + ";";
	        }
	    }

	    if (output !== "") {
	        return output;
	    }
	}

	var NODE_MAP = {};

	var SVG_NS = "http://www.w3.org/2000/svg";
	var NONE = "none";

	var renderSVG = function(container, svg) {
	    container.innerHTML = svg;
	};

	if (typeof document !== "undefined") {
	    var testFragment = "<svg xmlns='" + SVG_NS + "'></svg>";
	    var testContainer = document.createElement("div");
	    var hasParser = typeof DOMParser !== "undefined";

	    testContainer.innerHTML = testFragment;

	    if (hasParser && testContainer.firstChild.namespaceURI !== SVG_NS) {
	        renderSVG = function(container, svg) {
	            var parser = new DOMParser();
	            var chartDoc = parser.parseFromString(svg, "text/xml");
	            var importedDoc = document.adoptNode(chartDoc.documentElement);

	            container.innerHTML = "";
	            container.appendChild(importedDoc);
	        };
	    }
	}

	var renderSVG$1 = renderSVG;

	var TRANSFORM = "transform";
	var DefinitionMap = {
	    clip: "clip-path",
	    fill: "fill"
	};

	function isDefinition(type, value) {
	    return type === "clip" || (type === "fill" && (!value || value.nodeType === "Gradient"));
	}

	function baseUrl() {
	    var base = document.getElementsByTagName("base")[0];
	    var href = document.location.href;
	    var hashIndex = href.indexOf("#");
	    var url = "";

	    if (base && !supportBrowser.msie) {
	        if (hashIndex !== -1) {
	            href = href.substring(0, hashIndex);
	        }

	        url = href;
	    }

	    return url;
	}

	function refUrl(id, skipBaseHref) {
	    var base = skipBaseHref ? '' : baseUrl();
	    return ("url(" + base + "#" + id + ")");
	}

	var Node = BaseNode.extend({
	    init: function(srcElement, options) {
	        BaseNode.fn.init.call(this, srcElement);
	        this.definitions = {};

	        this.options = options;
	    },

	    destroy: function() {
	        if (this.element) {
	            this.element._kendoNode = null;
	            this.element = null;
	        }

	        this.clearDefinitions();
	        BaseNode.fn.destroy.call(this);
	    },

	    load: function(elements, pos) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var srcElement = elements[i];
	            var children = srcElement.children;

	            var childNode = new NODE_MAP[srcElement.nodeType](srcElement, this$1.options);

	            if (defined(pos)) {
	                this$1.insertAt(childNode, pos);
	            } else {
	                this$1.append(childNode);
	            }

	            childNode.createDefinitions();

	            if (children && children.length > 0) {
	                childNode.load(children);
	            }

	            var element = this$1.element;
	            if (element) {
	                childNode.attachTo(element, pos);
	            }
	        }
	    },

	    root: function() {
	        var root = this;

	        while (root.parent) {
	            root = root.parent;
	        }

	        return root;
	    },

	    attachTo: function(domElement, pos) {
	        var container = document.createElement("div");
	        renderSVG$1(container,
	            "<svg xmlns='" + SVG_NS + "' version='1.1'>" +
	                this.render() +
	            "</svg>"
	        );

	        var element = container.firstChild.firstChild;
	        if (element) {
	            if (defined(pos)) {
	                domElement.insertBefore(element, domElement.childNodes[pos] || null);
	            } else {
	                domElement.appendChild(element);
	            }
	            this.setElement(element);
	        }
	    },

	    setElement: function(element) {
	        if (this.element) {
	            this.element._kendoNode = null;
	        }

	        this.element = element;
	        this.element._kendoNode = this;

	        var nodes = this.childNodes;
	        for (var i = 0; i < nodes.length; i++) {
	            var childElement = element.childNodes[i];
	            nodes[i].setElement(childElement);
	        }
	    },

	    clear: function() {
	        this.clearDefinitions();

	        if (this.element) {
	            this.element.innerHTML = "";
	        }

	        var children = this.childNodes;
	        for (var i = 0; i < children.length; i++) {
	            children[i].destroy();
	        }

	        this.childNodes = [];
	    },

	    removeSelf: function() {
	        if (this.element) {
	            var parentNode = this.element.parentNode;
	            if (parentNode) {
	                parentNode.removeChild(this.element);
	            }
	            this.element = null;
	        }

	        BaseNode.fn.removeSelf.call(this);
	    },

	    template: function() {
	        return this.renderChildren();
	    },

	    render: function() {
	        return this.template();
	    },

	    renderChildren: function() {
	        var nodes = this.childNodes;
	        var output = "";

	        for (var i = 0; i < nodes.length; i++) {
	            output += nodes[i].render();
	        }

	        return output;
	    },

	    optionsChange: function(e) {
	        var field = e.field;
	        var value = e.value;

	        if (field === "visible") {
	            this.css("display", value ? "" : NONE);
	        } else if (DefinitionMap[field] && isDefinition(field, value)) {
	            this.updateDefinition(field, value);
	        } else if (field === "opacity") {
	            this.attr("opacity", value);
	        } else if (field === "cursor") {
	            this.css("cursor", value);
	        } else if (field === "id") {
	            if (value) {
	                this.attr("id", value);
	            } else {
	                this.removeAttr("id");
	            }
	        }

	        BaseNode.fn.optionsChange.call(this, e);
	    },

	    attr: function(name, value) {
	        if (this.element) {
	            this.element.setAttribute(name, value);
	        }
	    },

	    allAttr: function(attrs) {
	        var this$1 = this;

	        for (var i = 0; i < attrs.length; i++) {
	            this$1.attr(attrs[i][0], attrs[i][1]);
	        }
	    },

	    css: function(name, value) {
	        if (this.element) {
	            this.element.style[name] = value;
	        }
	    },

	    allCss: function(styles) {
	        var this$1 = this;

	        for (var i = 0; i < styles.length; i++) {
	            this$1.css(styles[i][0], styles[i][1]);
	        }
	    },

	    removeAttr: function(name) {
	        if (this.element) {
	            this.element.removeAttribute(name);
	        }
	    },

	    mapTransform: function(transform) {
	        var attrs = [];
	        if (transform) {
	            attrs.push([
	                TRANSFORM,
	                "matrix(" + transform.matrix().toString(6) + ")"
	            ]);
	        }

	        return attrs;
	    },

	    renderTransform: function() {
	        return renderAllAttr(
	            this.mapTransform(this.srcElement.transform())
	        );
	    },

	    transformChange: function(value) {
	        if (value) {
	            this.allAttr(this.mapTransform(value));
	        } else {
	            this.removeAttr(TRANSFORM);
	        }
	    },

	    mapStyle: function() {
	        var options = this.srcElement.options;
	        var style = [ [ "cursor", options.cursor ] ];

	        if (options.visible === false) {
	            style.push([ "display", NONE ]);
	        }

	        return style;
	    },

	    renderStyle: function() {
	        return renderAttr("style", renderStyle(this.mapStyle(true)));
	    },

	    renderOpacity: function() {
	        return renderAttr("opacity", this.srcElement.options.opacity);
	    },

	    renderId: function() {
	        return renderAttr("id", this.srcElement.options.id);
	    },

	    createDefinitions: function() {
	        var srcElement = this.srcElement;
	        var definitions = this.definitions;
	        if (srcElement) {
	            var options = srcElement.options;
	            var hasDefinitions;

	            for (var field in DefinitionMap) {
	                var definition = options.get(field);
	                if (definition && isDefinition(field, definition)) {
	                    definitions[field] = definition;
	                    hasDefinitions = true;
	                }
	            }
	            if (hasDefinitions) {
	                this.definitionChange({
	                    action: "add",
	                    definitions: definitions
	                });
	            }
	        }
	    },

	    definitionChange: function(e) {
	        if (this.parent) {
	            this.parent.definitionChange(e);
	        }
	    },

	    updateDefinition: function(type, value) {
	        var definitions = this.definitions;
	        var current = definitions[type];
	        var attr = DefinitionMap[type];
	        var definition = {};
	        if (current) {
	            definition[type] = current;
	            this.definitionChange({
	                action: "remove",
	                definitions: definition
	            });
	            delete definitions[type];
	        }

	        if (!value) {
	            if (current) {
	                this.removeAttr(attr);
	            }
	        } else {
	            definition[type] = value;
	            this.definitionChange({
	                action: "add",
	                definitions: definition
	            });
	            definitions[type] = value;
	            this.attr(attr, this.refUrl(value.id));
	        }
	    },

	    clearDefinitions: function() {
	        var definitions = this.definitions;

	        this.definitionChange({
	            action: "remove",
	            definitions: definitions
	        });
	        this.definitions = {};
	    },

	    renderDefinitions: function() {
	        return renderAllAttr(this.mapDefinitions());
	    },

	    mapDefinitions: function() {
	        var this$1 = this;

	        var definitions = this.definitions;
	        var attrs = [];

	        for (var field in definitions) {
	            attrs.push([ DefinitionMap[field], this$1.refUrl(definitions[field].id) ]);
	        }

	        return attrs;
	    },

	    refUrl: function(id) {
	        var skipBaseHref = (this.options || {}).skipBaseHref;
	        return refUrl(id, skipBaseHref);
	    }
	});

	var GradientStopNode = Node.extend({
	    template: function() {
	        return ("<stop " + (this.renderOffset()) + " " + (this.renderStyle()) + " />");
	    },

	    renderOffset: function() {
	        return renderAttr("offset", this.srcElement.offset());
	    },

	    mapStyle: function() {
	        var srcElement = this.srcElement;
	        return [
	            [ "stop-color", srcElement.color() ],
	            [ "stop-opacity", srcElement.opacity() ]
	        ];
	    },

	    optionsChange: function(e) {
	        if (e.field === "offset") {
	            this.attr(e.field, e.value);
	        } else if (e.field === "color" || e.field === "opacity") {
	            this.css("stop-" + e.field, e.value);
	        }
	    }
	});

	var GradientNode = Node.extend({
	    init: function(srcElement) {
	        Node.fn.init.call(this, srcElement);

	        this.id = srcElement.id;

	        this.loadStops();
	    },

	    loadStops: function() {
	        var this$1 = this;

	        var stops = this.srcElement.stops;
	        var element = this.element;

	        for (var idx = 0; idx < stops.length; idx++) {
	            var stopNode = new GradientStopNode(stops[idx]);
	            this$1.append(stopNode);
	            if (element) {
	                stopNode.attachTo(element);
	            }
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "gradient.stops") {
	            BaseNode.prototype.clear.call(this);
	            this.loadStops();
	        } else if (e.field === "gradient") {
	            this.allAttr(this.mapCoordinates());
	        }
	    },

	    renderCoordinates: function() {
	        return renderAllAttr(this.mapCoordinates());
	    },

	    mapSpace: function() {
	        return [ "gradientUnits", this.srcElement.userSpace() ? "userSpaceOnUse" : "objectBoundingBox" ];
	    }
	});

	var LinearGradientNode = GradientNode.extend({
	    template: function() {
	        return ("<linearGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</linearGradient>");
	    },

	    mapCoordinates: function() {
	        var srcElement = this.srcElement;
	        var start = srcElement.start();
	        var end = srcElement.end();
	        var attrs = [
	            [ "x1", start.x ],
	            [ "y1", start.y ],
	            [ "x2", end.x ],
	            [ "y2", end.y ],
	            this.mapSpace()
	        ];

	        return attrs;
	    }
	});

	var RadialGradientNode = GradientNode.extend({
	    template: function() {
	        return ("<radialGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</radialGradient>");
	    },

	    mapCoordinates: function() {
	        var srcElement = this.srcElement;
	        var center = srcElement.center();
	        var radius = srcElement.radius();
	        var attrs = [
	            [ "cx", center.x ],
	            [ "cy", center.y ],
	            [ "r", radius ],
	            this.mapSpace()
	        ];
	        return attrs;
	    }
	});

	var ClipNode = Node.extend({
	    init: function(srcElement) {
	        Node.fn.init.call(this);

	        this.srcElement = srcElement;
	        this.id = srcElement.id;

	        this.load([ srcElement ]);
	    },

	    template: function() {
	        return ("<clipPath id='" + (this.id) + "'>" + (this.renderChildren()) + "</clipPath>");
	    }
	});

	var DefinitionNode = Node.extend({
	    init: function() {
	        Node.fn.init.call(this);
	        this.definitionMap = {};
	    },

	    attachTo: function(domElement) {
	        this.element = domElement;
	    },

	    template: function() {
	        return ("<defs>" + (this.renderChildren()) + "</defs>");
	    },

	    definitionChange: function(e) {
	        var definitions = e.definitions;
	        var action = e.action;

	        if (action === "add") {
	            this.addDefinitions(definitions);
	        } else if (action === "remove") {
	            this.removeDefinitions(definitions);
	        }
	    },

	    createDefinition: function(type, item) {
	        var nodeType;
	        if (type === "clip") {
	            nodeType = ClipNode;
	        } else if (type === "fill") {
	            if (item instanceof LinearGradient) {
	                nodeType = LinearGradientNode;
	            } else if (item instanceof RadialGradient) {
	                nodeType = RadialGradientNode;
	            }
	        }
	        return new nodeType(item);
	    },

	    addDefinitions: function(definitions) {
	        var this$1 = this;

	        for (var field in definitions) {
	            this$1.addDefinition(field, definitions[field]);
	        }
	    },

	    addDefinition: function(type, srcElement) {
	        var ref = this;
	        var element = ref.element;
	        var definitionMap = ref.definitionMap;
	        var id = srcElement.id;
	        var mapItem = definitionMap[id];
	        if (!mapItem) {
	            var node = this.createDefinition(type, srcElement);
	            definitionMap[id] = {
	                element: node,
	                count: 1
	            };
	            this.append(node);
	            if (element) {
	                node.attachTo(this.element);
	            }
	        } else {
	            mapItem.count++;
	        }
	    },

	    removeDefinitions: function(definitions) {
	        var this$1 = this;

	        for (var field in definitions) {
	            this$1.removeDefinition(definitions[field]);
	        }
	    },

	    removeDefinition: function(srcElement) {
	        var definitionMap = this.definitionMap;
	        var id = srcElement.id;
	        var mapItem = definitionMap[id];

	        if (mapItem) {
	            mapItem.count--;
	            if (mapItem.count === 0) {
	                this.remove(this.childNodes.indexOf(mapItem.element), 1);
	                delete definitionMap[id];
	            }
	        }
	    }
	});

	var RootNode = Node.extend({
	    init: function(options) {
	        Node.fn.init.call(this);
	        this.options = options;
	        this.defs = new DefinitionNode();
	    },

	    attachTo: function(domElement) {
	        this.element = domElement;
	        this.defs.attachTo(domElement.firstElementChild);
	    },

	    clear: function() {
	        BaseNode.prototype.clear.call(this);
	    },

	    template: function() {
	        return this.defs.render() + this.renderChildren();
	    },

	    definitionChange: function(e) {
	        this.defs.definitionChange(e);
	    }
	});

	var RTL = 'rtl';

	function alignToScreen(element) {
	    var ctm;

	    try {
	        ctm = element.getScreenCTM ? element.getScreenCTM() : null;
	    } catch (e) { } // eslint-disable-line no-empty

	    if (ctm) {
	        var left = - ctm.e % 1;
	        var top = - ctm.f % 1;
	        var style = element.style;

	        if (left !== 0 || top !== 0) {
	            style.left = left + "px";
	            style.top = top + "px";
	        }
	    }
	}

	var Surface$1 = Surface.extend({
	    init: function(element, options) {
	        Surface.fn.init.call(this, element, options);

	        this._root = new RootNode($.extend({
	            rtl: elementStyles(element, 'direction').direction === RTL
	        }, this.options));

	        renderSVG$1(this.element, this._template());

	        this._rootElement = this.element.firstElementChild;

	        alignToScreen(this._rootElement);

	        this._root.attachTo(this._rootElement);

	        bindEvents(this.element, {
	            click: this._click,
	            mouseover: this._mouseenter,
	            mouseout: this._mouseleave,
	            mousemove: this._mousemove
	        });

	        this.resize();
	    },

	    destroy: function() {
	        if (this._root) {
	            this._root.destroy();
	            this._root = null;
	            this._rootElement = null;
	            unbindEvents(this.element, {
	                click: this._click,
	                mouseover: this._mouseenter,
	                mouseout: this._mouseleave,
	                mousemove: this._mousemove
	            });
	        }

	        Surface.fn.destroy.call(this);
	    },

	    translate: function(offset) {
	        var viewBox = (Math.round(offset.x)) + " " + (Math.round(offset.y)) + " " + (this._size.width) + " " + (this._size.height);

	        this._offset = offset;
	        this._rootElement.setAttribute("viewBox", viewBox);
	    },

	    draw: function(element) {
	        Surface.fn.draw.call(this, element);
	        this._root.load([ element ]);
	    },

	    clear: function() {
	        Surface.fn.clear.call(this);
	        this._root.clear();
	    },

	    svg: function() {
	        return "<?xml version='1.0' ?>" + this._template();
	    },

	    exportVisual: function() {
	        var ref = this;
	        var visual = ref._visual;
	        var offset = ref._offset;

	        if (offset) {
	            var wrap = new Group();
	            wrap.children.push(visual);

	            wrap.transform(
	                transform().translate(-offset.x, -offset.y)
	            );

	            visual = wrap;
	        }

	        return visual;
	    },

	    _resize: function() {
	        if (this._offset) {
	            this.translate(this._offset);
	        }
	    },

	    _template: function() {
	        return ("<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (this._root.render()) + "</svg>");
	    }
	});

	Surface$1.prototype.type = "svg";

	if (typeof document !== "undefined" && document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")) {
	    Surface.support.svg = true;
	    SurfaceFactory.current.register("svg", Surface$1, 10);
	}

	var GroupNode = Node.extend({
	    template: function() {
	        return ("<g" + (this.renderId() + this.renderTransform() + this.renderStyle() + this.renderOpacity() + this.renderDefinitions()) + ">" + (this.renderChildren()) + "</g>");
	    },

	    optionsChange: function(e) {
	        if (e.field === "transform") {
	            this.transformChange(e.value);
	        }

	        Node.fn.optionsChange.call(this, e);
	    }
	});

	NODE_MAP.Group = GroupNode;

	var DASH_ARRAYS = {
	    dot: [ 1.5, 3.5 ],
	    dash: [ 4, 3.5 ],
	    longdash: [ 8, 3.5 ],
	    dashdot: [ 3.5, 3.5, 1.5, 3.5 ],
	    longdashdot: [ 8, 3.5, 1.5, 3.5 ],
	    longdashdotdot: [ 8, 3.5, 1.5, 3.5, 1.5, 3.5 ]
	};

	var SOLID = "solid";
	var BUTT = "butt";

	var ATTRIBUTE_MAP = {
	    "fill.opacity": "fill-opacity",
	    "stroke.color": "stroke",
	    "stroke.width": "stroke-width",
	    "stroke.opacity": "stroke-opacity"
	};
	var SPACE = " ";

	var PathNode = Node.extend({
	    geometryChange: function() {
	        this.attr("d", this.renderData());
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        switch (e.field) {
	            case "fill":
	                if (e.value) {
	                    this.allAttr(this.mapFill(e.value));
	                } else {
	                    this.removeAttr("fill");
	                }
	                break;

	            case "fill.color":
	                this.allAttr(this.mapFill({ color: e.value }));
	                break;

	            case "stroke":
	                if (e.value) {
	                    this.allAttr(this.mapStroke(e.value));
	                } else {
	                    this.removeAttr("stroke");
	                }
	                break;

	            case "transform":
	                this.transformChange(e.value);
	                break;

	            default:
	                var name = ATTRIBUTE_MAP[e.field];
	                if (name) {
	                    this.attr(name, e.value);
	                }
	                break;
	        }

	        Node.fn.optionsChange.call(this, e);
	    },

	    content: function() {
	        if (this.element) {
	            this.element.textContent = this.srcElement.content();
	        }
	    },

	    renderData: function() {
	        return this.printPath(this.srcElement);
	    },

	    printPath: function(path) {
	        var this$1 = this;

	        var segments = path.segments;
	        var length = segments.length;
	        if (length > 0) {
	            var parts = [];
	            var output, currentType;

	            for (var i = 1; i < length; i++) {
	                var segmentType = this$1.segmentType(segments[i - 1], segments[i]);
	                if (segmentType !== currentType) {
	                    currentType = segmentType;
	                    parts.push(segmentType);
	                }

	                if (segmentType === "L") {
	                    parts.push(this$1.printPoints(segments[i].anchor()));
	                } else {
	                    parts.push(this$1.printPoints(segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()));
	                }
	            }

	            output = "M" + this.printPoints(segments[0].anchor()) + SPACE + parts.join(SPACE);
	            if (path.options.closed) {
	                output += "Z";
	            }

	            return output;
	        }
	    },

	    printPoints: function() {
	        var points = arguments;
	        var length = points.length;
	        var result = [];

	        for (var i = 0; i < length; i++) {
	            result.push(points[i].toString(3));
	        }

	        return result.join(" ");
	    },

	    segmentType: function(segmentStart, segmentEnd) {
	        return segmentStart.controlOut() && segmentEnd.controlIn() ? "C" : "L";
	    },

	    mapStroke: function(stroke) {
	        var attrs = [];

	        if (stroke && !isTransparent(stroke.color)) {
	            attrs.push([ "stroke", stroke.color ]);
	            attrs.push([ "stroke-width", stroke.width ]);
	            attrs.push([ "stroke-linecap", this.renderLinecap(stroke) ]);
	            attrs.push([ "stroke-linejoin", stroke.lineJoin ]);

	            if (defined(stroke.opacity)) {
	                attrs.push([ "stroke-opacity", stroke.opacity ]);
	            }

	            if (defined(stroke.dashType)) {
	                attrs.push([ "stroke-dasharray", this.renderDashType(stroke) ]);
	            }
	        } else {
	            attrs.push([ "stroke", NONE ]);
	        }

	        return attrs;
	    },

	    renderStroke: function() {
	        return renderAllAttr(
	            this.mapStroke(this.srcElement.options.stroke)
	        );
	    },

	    renderDashType: function(stroke) {
	        var dashType = stroke.dashType;
	        var width = stroke.width; if (width === void 0) { width = 1; }

	        if (dashType && dashType !== SOLID) {
	            var dashArray = DASH_ARRAYS[dashType.toLowerCase()];
	            var result = [];

	            for (var i = 0; i < dashArray.length; i++) {
	                result.push(dashArray[i] * width);
	            }

	            return result.join(" ");
	        }
	    },

	    renderLinecap: function(stroke) {
	        var dashType = stroke.dashType;
	        var lineCap = stroke.lineCap;

	        return (dashType && dashType !== "solid") ? BUTT : lineCap;
	    },

	    mapFill: function(fill) {
	        var attrs = [];
	        if (!(fill && fill.nodeType === "Gradient")) {
	            if (fill && !isTransparent(fill.color)) {
	                attrs.push([ "fill", fill.color ]);

	                if (defined(fill.opacity)) {
	                    attrs.push([ "fill-opacity", fill.opacity ]);
	                }
	            } else {
	                attrs.push([ "fill", NONE ]);
	            }
	        }

	        return attrs;
	    },

	    renderFill: function() {
	        return renderAllAttr(
	            this.mapFill(this.srcElement.options.fill)
	        );
	    },

	    template: function() {
	        return "<path " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " " + (renderAttr('d', this.renderData())) +
	                    "" + (this.renderStroke()) + (this.renderFill()) + (this.renderDefinitions()) + (this.renderTransform()) + "></path>";
	    }
	});

	NODE_MAP.Path = PathNode;

	var ArcNode = PathNode.extend({
	    renderData: function() {
	        return this.printPath(this.srcElement.toPath());
	    }
	});

	NODE_MAP.Arc = ArcNode;

	var CircleNode = PathNode.extend({
	    geometryChange: function() {
	        var center = this.center();
	        this.attr("cx", center.x);
	        this.attr("cy", center.y);
	        this.attr("r", this.radius());
	        this.invalidate();
	    },

	    center: function() {
	        return this.srcElement.geometry().center;
	    },

	    radius: function() {
	        return this.srcElement.geometry().radius;
	    },

	    template: function() {
	        return "<circle " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
	                    "cx='" + (this.center().x) + "' cy='" + (this.center().y) + "' r='" + (this.radius()) + "'" +
	                    (this.renderStroke()) + " " + (this.renderFill()) + " " + (this.renderDefinitions()) +
	                    (this.renderTransform()) + " ></circle>";
	    }
	});

	NODE_MAP.Circle = CircleNode;

	var RectNode = PathNode.extend({
	    geometryChange: function() {
	        var geometry = this.srcElement.geometry();
	        this.attr("x", geometry.origin.x);
	        this.attr("y", geometry.origin.y);
	        this.attr("width", geometry.size.width);
	        this.attr("height", geometry.size.height);
	        this.invalidate();
	    },

	    size: function() {
	        return this.srcElement.geometry().size;
	    },

	    origin: function() {
	        return this.srcElement.geometry().origin;
	    },

	    template: function() {
	        return "<rect " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " x='" + (this.origin().x) + "' y='" + (this.origin().y) + "' " +
	                    "width='" + (this.size().width) + "' height='" + (this.size().height) + "' " + (this.renderStroke()) + " " +
	                    (this.renderFill()) + " " + (this.renderDefinitions()) + " " + (this.renderTransform()) + " />";
	    }
	});

	NODE_MAP.Rect = RectNode;

	var ImageNode = PathNode.extend({
	    geometryChange: function() {
	        this.allAttr(this.mapPosition());
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        if (e.field === "src") {
	            this.allAttr(this.mapSource());
	        }

	        PathNode.fn.optionsChange.call(this, e);
	    },

	    mapPosition: function() {
	        var rect = this.srcElement.rect();
	        var tl = rect.topLeft();

	        return [
	            [ "x", tl.x ],
	            [ "y", tl.y ],
	            [ "width", rect.width() + "px" ],
	            [ "height", rect.height() + "px" ]
	        ];
	    },

	    renderPosition: function() {
	        return renderAllAttr(this.mapPosition());
	    },

	    mapSource: function(encode) {
	        var src = this.srcElement.src();

	        if (encode) {
	            src = kendo.htmlEncode(src);
	        }

	        return [ [ "xlink:href", src ] ];
	    },

	    renderSource: function() {
	        return renderAllAttr(this.mapSource(true));
	    },

	    template: function() {
	        return "<image preserveAspectRatio='none' " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderTransform()) + " " + (this.renderOpacity()) +
	               (this.renderPosition()) + " " + (this.renderSource()) + " " + (this.renderDefinitions()) + ">" +
	               "</image>";
	    }
	});

	NODE_MAP.Image = ImageNode;

	var ENTITY_REGEX = /&(?:[a-zA-Z]+|#\d+);/g;

	function decodeEntities(text) {
	    if (!text || typeof text !== "string" || !ENTITY_REGEX.test(text)) {
	        return text;
	    }

	    var element = decodeEntities._element;
	    ENTITY_REGEX.lastIndex = 0;

	    return text.replace(ENTITY_REGEX, function (match) {
	        element.innerHTML = match;

	        return element.textContent || element.innerText;
	    });
	}

	if (typeof document !== "undefined") {
	    decodeEntities._element = document.createElement("span");
	}

	var TextNode = PathNode.extend({
	    geometryChange: function() {
	        var pos = this.pos();
	        this.attr("x", pos.x);
	        this.attr("y", pos.y);
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        if (e.field === "font") {
	            this.attr("style", renderStyle(this.mapStyle()));
	            this.geometryChange();
	        } else if (e.field === "content") {
	            PathNode.fn.content.call(this, this.srcElement.content());
	        }

	        PathNode.fn.optionsChange.call(this, e);
	    },

	    mapStyle: function(encode) {
	        var style = PathNode.fn.mapStyle.call(this, encode);
	        var font = this.srcElement.options.font;

	        if (encode) {
	            font = kendo.htmlEncode(font);
	        }

	        style.push([ "font", font ], [ "white-space", "pre" ]);

	        return style;
	    },

	    pos: function() {
	        var pos = this.srcElement.position();
	        var size = this.srcElement.measure();
	        return pos.clone().setY(pos.y + size.baseline);
	    },

	    renderContent: function() {
	        var content = this.srcElement.content();
	        content = decodeEntities(content);
	        content = kendo.htmlEncode(content);

	        return kendoUtil.normalizeText(content);
	    },

	    renderTextAnchor: function() {
	        var anchor;

	        if ((this.options || {}).rtl && !(supportBrowser.msie || supportBrowser.edge)) {
	            anchor = 'end';
	        }

	        return renderAttr("text-anchor", anchor);
	    },

	    template: function() {
	        return "<text " + (this.renderId()) + " " + (this.renderTextAnchor()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
	                    "x='" + (this.pos().x) + "' y='" + (this.pos().y) + "' " + (this.renderStroke()) + " " + (this.renderTransform()) + " " + (this.renderDefinitions()) +
	                    (this.renderFill()) + ">" + (this.renderContent()) + "</text>";
	    }
	});

	NODE_MAP.Text = TextNode;

	var MultiPathNode = PathNode.extend({
	    renderData: function() {
	        var this$1 = this;

	        var paths = this.srcElement.paths;

	        if (paths.length > 0) {
	            var result = [];

	            for (var i = 0; i < paths.length; i++) {
	                result.push(this$1.printPath(paths[i]));
	            }

	            return result.join(" ");
	        }
	    }
	});

	NODE_MAP.MultiPath = MultiPathNode;

	var geometry = {
		Circle: Circle$2,
		Arc: Arc$2,
		Rect: Rect,
		Point: Point,
		Segment: Segment,
		Matrix: Matrix,
		Size: Size,
		toMatrix: toMatrix,
		Transformation: Transformation,
		transform: transform
	};

	function exportGroup(group) {
	    var root = new RootNode({
	        skipBaseHref: true
	    });
	    var bbox = group.clippedBBox();
	    var rootGroup = group;

	    if (bbox) {
	        var origin = bbox.getOrigin();
	        var exportRoot = new Group();
	        exportRoot.transform(transform().translate(-origin.x, -origin.y));
	        exportRoot.children.push(group);
	        rootGroup = exportRoot;
	    }

	    root.load([ rootGroup ]);

	    var svg = "<?xml version='1.0' ?><svg xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (root.render()) + "</svg>";

	    root.destroy();

	    return svg;
	}

	var svg = {
		Surface: Surface$1,
		RootNode: RootNode,
		Node: Node,
		GroupNode: GroupNode,
		ArcNode: ArcNode,
		CircleNode: CircleNode,
		RectNode: RectNode,
		ImageNode: ImageNode,
		TextNode: TextNode,
		PathNode: PathNode,
		MultiPathNode: MultiPathNode,
		DefinitionNode: DefinitionNode,
		ClipNode: ClipNode,
		GradientStopNode: GradientStopNode,
		LinearGradientNode: LinearGradientNode,
		RadialGradientNode: RadialGradientNode,
		exportGroup: exportGroup
	};

	var NODE_MAP$2 = {};

	function renderPath(ctx, path) {
	    var segments = path.segments;

	    if (segments.length === 0) {
	        return;
	    }

	    var segment = segments[0];
	    var anchor = segment.anchor();
	    ctx.moveTo(anchor.x, anchor.y);

	    for (var i = 1; i < segments.length; i++) {
	        segment = segments[i];
	        anchor = segment.anchor();

	        var prevSeg = segments[i - 1];
	        var prevOut = prevSeg.controlOut();
	        var controlIn = segment.controlIn();

	        if (prevOut && controlIn) {
	            ctx.bezierCurveTo(prevOut.x, prevOut.y,
	                              controlIn.x, controlIn.y,
	                              anchor.x, anchor.y);
	        } else {
	            ctx.lineTo(anchor.x, anchor.y);
	        }
	    }

	    if (path.options.closed) {
	        ctx.closePath();
	    }
	}

	var Node$2 = BaseNode.extend({
	    init: function(srcElement) {
	        BaseNode.fn.init.call(this, srcElement);
	        if (srcElement) {
	            this.initClip();
	        }
	    },

	    initClip: function() {
	        var clip = this.srcElement.clip();
	        if (clip) {
	            this.clip = clip;
	            clip.addObserver(this);
	        }
	    },

	    clear: function() {
	        if (this.srcElement) {
	            this.srcElement.removeObserver(this);
	        }

	        this.clearClip();

	        BaseNode.fn.clear.call(this);
	    },

	    clearClip: function() {
	        if (this.clip) {
	            this.clip.removeObserver(this);
	            delete this.clip;
	        }
	    },

	    setClip: function(ctx) {
	        if (this.clip) {
	            ctx.beginPath();
	            renderPath(ctx, this.clip);
	            ctx.clip();
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "clip") {
	            this.clearClip();
	            this.initClip();
	        }

	        BaseNode.fn.optionsChange.call(this, e);
	    },

	    setTransform: function(ctx) {
	        if (this.srcElement) {
	            var transform = this.srcElement.transform();
	            if (transform) {
	                ctx.transform.apply(ctx, transform.matrix().toArray(6));
	            }
	        }
	    },

	    loadElements: function(elements, pos, cors) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var srcElement = elements[i];
	            var children = srcElement.children;

	            var childNode = new NODE_MAP$2[srcElement.nodeType](srcElement, cors);

	            if (children && children.length > 0) {
	                childNode.load(children, pos, cors);
	            }

	            if (defined(pos)) {
	                this$1.insertAt(childNode, pos);
	            } else {
	                this$1.append(childNode);
	            }
	        }
	    },

	    load: function(elements, pos, cors) {
	        this.loadElements(elements, pos, cors);

	        this.invalidate();
	    },

	    setOpacity: function(ctx) {
	        if (this.srcElement) {
	            var opacity = this.srcElement.opacity();
	            if (defined(opacity)) {
	                this.globalAlpha(ctx, opacity);
	            }
	        }
	    },

	    globalAlpha: function(ctx, value) {
	        var opactity = value;
	        if (opactity && ctx.globalAlpha) {
	            opactity *= ctx.globalAlpha;
	        }
	        ctx.globalAlpha = opactity;
	    },

	    visible: function() {
	        var src = this.srcElement;
	        return !src || (src && src.options.visible !== false);
	    }
	});

	var GroupNode$2 = Node$2.extend({
	    renderTo: function(ctx) {
	        if (!this.visible()) {
	            return;
	        }

	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        var childNodes = this.childNodes;
	        for (var i = 0; i < childNodes.length; i++) {
	            var child = childNodes[i];
	            if (child.visible()) {
	                child.renderTo(ctx);
	            }
	        }

	        ctx.restore();
	    }
	});

	Traversable.extend(GroupNode$2.prototype, "childNodes");

	NODE_MAP$2.Group = GroupNode$2;

	var FRAME_DELAY = 1000 / 60;

	var RootNode$2 = GroupNode$2.extend({
	    init: function(canvas) {
	        GroupNode$2.fn.init.call(this);

	        this.canvas = canvas;
	        this.ctx = canvas.getContext("2d");

	        var invalidateHandler = this._invalidate.bind(this);
	        this.invalidate = kendo.throttle(function () {
	            kendo.animationFrame(invalidateHandler);
	        }, FRAME_DELAY);
	    },

	    destroy: function() {
	        GroupNode$2.fn.destroy.call(this);
	        this.canvas = null;
	        this.ctx = null;
	    },

	    load: function(elements, pos, cors) {
	        this.loadElements(elements, pos, cors);
	        this._invalidate();
	    },

	    _invalidate: function() {
	        if (!this.ctx) {
	            return;
	        }
	        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
	        this.renderTo(this.ctx);
	    }
	});

	Traversable.extend(RootNode$2.prototype, "childNodes");

	var QuadRoot = Class.extend({
	    init: function() {

	        this.shapes = [];
	    },

	    _add: function(shape, bbox) {
	        this.shapes.push({
	            bbox: bbox,
	            shape: shape
	        });
	        shape._quadNode = this;
	    },

	    pointShapes: function(point) {
	        var shapes = this.shapes;
	        var length = shapes.length;
	        var result = [];
	        for (var idx = 0; idx < length; idx++) {
	            if (shapes[idx].bbox.containsPoint(point)) {
	                result.push(shapes[idx].shape);
	            }
	        }
	        return result;
	    },

	    insert: function(shape, bbox) {
	        this._add(shape, bbox);
	    },

	    remove: function(shape) {
	        var shapes = this.shapes;
	        var length = shapes.length;

	        for (var idx = 0; idx < length; idx++) {
	            if (shapes[idx].shape === shape) {
	                shapes.splice(idx, 1);
	                break;
	            }
	        }
	    }
	});

	var QuadNode = QuadRoot.extend({
	    init: function(rect) {
	        QuadRoot.fn.init.call(this);
	        this.children = [];
	        this.rect = rect;
	    },

	    inBounds: function(rect) {
	        var nodeRect = this.rect;
	        var nodeBottomRight = nodeRect.bottomRight();
	        var bottomRight = rect.bottomRight();
	        var inBounds = nodeRect.origin.x <= rect.origin.x && nodeRect.origin.y <= rect.origin.y && bottomRight.x <= nodeBottomRight.x &&
	            bottomRight.y <= nodeBottomRight.y;
	        return inBounds;
	    },

	    pointShapes: function(point) {
	        var children = this.children;
	        var length = children.length;
	        var result = QuadRoot.fn.pointShapes.call(this, point);
	        for (var idx = 0; idx < length; idx++) {
	            append(result, children[idx].pointShapes(point));
	        }
	        return result;
	    },

	    insert: function(shape, bbox) {
	        var children = this.children;
	        var inserted = false;

	        if (this.inBounds(bbox)) {
	            if (this.shapes.length < 4) {
	                this._add(shape, bbox);
	            } else {
	                if (!children.length) {
	                    this._initChildren();
	                }

	                for (var idx = 0; idx < children.length; idx++) {
	                    if (children[idx].insert(shape, bbox)) {
	                        inserted = true;
	                        break;
	                    }
	                }

	                if (!inserted) {
	                    this._add(shape, bbox);
	                }
	            }
	            inserted = true;
	        }

	        return inserted;
	    },

	    _initChildren: function() {
	        var ref = this;
	        var rect = ref.rect;
	        var children = ref.children;
	        var center = rect.center();
	        var halfWidth = rect.width() / 2;
	        var halfHeight = rect.height() / 2;

	        children.push(
	            new QuadNode(new Rect([ rect.origin.x, rect.origin.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ center.x, rect.origin.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ rect.origin.x, center.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ center.x, center.y ], [ halfWidth, halfHeight ]))
	        );
	    }
	});

	var ROOT_SIZE = 3000;
	var LEVEL_STEP = 10000;
	var MAX_LEVEL = 75;

	var ShapesQuadTree = Class.extend({
	    init: function() {

	        this.initRoots();
	    },

	    initRoots: function() {
	        this.rootMap = {};
	        this.root = new QuadRoot();
	        this.rootElements = [];
	    },

	    clear: function() {
	        var this$1 = this;

	        var rootElements = this.rootElements;
	        for (var idx = 0; idx < rootElements.length; idx++) {
	            this$1.remove(rootElements[idx]);
	        }
	        this.initRoots();
	    },

	    pointShape: function(point) {
	        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];
	        var result = this.root.pointShapes(point);

	        if (sectorRoot) {
	            result = result.concat(sectorRoot.pointShapes(point));
	        }

	        this.assignZindex(result);

	        result.sort(zIndexComparer);
	        for (var idx = 0; idx < result.length; idx++) {
	            if (result[idx].containsPoint(point)) {
	                return result[idx];
	            }
	        }
	    },

	    assignZindex: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            var element = elements[idx];
	            var zIndex = 0;
	            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);
	            var parents = [];

	            while (element) {
	                parents.push(element);
	                element = element.parent;
	            }

	            while (parents.length) {
	                element = parents.pop();
	                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;
	                levelWeight /= LEVEL_STEP;
	            }

	            elements[idx]._zIndex = zIndex;
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "transform" || e.field === "stroke.width") {
	            this.bboxChange(e.element);
	        }
	    },

	    geometryChange: function(e) {
	        this.bboxChange(e.element);
	    },

	    bboxChange: function(element) {
	        var this$1 = this;

	        if (element.nodeType === "Group") {
	            for (var idx = 0; idx < element.children.length; idx++) {
	                this$1.bboxChange(element.children[idx]);
	            }
	        } else {
	            if (element._quadNode) {
	                element._quadNode.remove(element);
	            }
	            this._insertShape(element);
	        }
	    },

	    add: function(elements) {
	        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];

	        append(this.rootElements, elementsArray);
	        this._insert(elementsArray);
	    },

	    childrenChange: function(e) {
	        var this$1 = this;

	        if (e.action === "remove") {
	            for (var idx = 0; idx < e.items.length; idx++) {
	                this$1.remove(e.items[idx]);
	            }
	        } else {
	            this._insert(Array.prototype.slice.call(e.items, 0));
	        }
	    },

	    _insert: function(elements) {
	        var this$1 = this;

	        var element;

	        while (elements.length > 0) {
	            element = elements.pop();
	            element.addObserver(this$1);
	            if (element.nodeType === "Group") {
	                append(elements, element.children);
	            } else {
	                this$1._insertShape(element);
	            }
	        }
	    },

	    _insertShape: function(shape) {
	        var bbox = shape.bbox();
	        if (bbox) {
	            var sectors = this.getSectors(bbox);
	            var x = sectors[0][0];
	            var y = sectors[1][0];

	            if (this.inRoot(sectors)) {
	                this.root.insert(shape, bbox);
	            } else {
	                var rootMap = this.rootMap;
	                if (!rootMap[x]) {
	                    rootMap[x] = {};
	                }

	                if (!rootMap[x][y]) {
	                    rootMap[x][y] = new QuadNode(
	                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])
	                    );
	                }

	                rootMap[x][y].insert(shape, bbox);
	            }
	        }
	    },

	    remove: function(element) {
	        var this$1 = this;

	        element.removeObserver(this);

	        if (element.nodeType === "Group") {
	            var children = element.children;
	            for (var idx = 0; idx < children.length; idx++) {
	                this$1.remove(children[idx]);
	            }
	        } else if (element._quadNode) {
	            element._quadNode.remove(element);
	            delete element._quadNode;
	        }
	    },

	    inRoot: function(sectors) {
	        return sectors[0].length > 1 || sectors[1].length > 1;
	    },

	    getSectors: function(rect) {
	        var bottomRight = rect.bottomRight();
	        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);
	        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);
	        var sectors = [ [], [] ];
	        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {
	            sectors[0].push(x);
	        }
	        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {
	            sectors[1].push(y);
	        }
	        return sectors;
	    }
	});

	function zIndexComparer(x1, x2) {
	    if (x1._zIndex < x2._zIndex) {
	        return 1;
	    }
	    if (x1._zIndex > x2._zIndex) {
	        return -1;
	    }

	    return 0;
	}

	var SurfaceCursor = Class.extend({
	    init: function(surface) {
	        surface.bind("mouseenter", this._mouseenter.bind(this));
	        surface.bind("mouseleave", this._mouseleave.bind(this));

	        this.element = surface.element;
	    },

	    clear: function() {
	        this._resetCursor();
	    },

	    destroy: function() {
	        this._resetCursor();
	        delete this.element;
	    },

	    _mouseenter: function(e) {
	        var cursor = this._shapeCursor(e);

	        if (!cursor) {
	            this._resetCursor();
	        } else {
	            if (!this._current) {
	                this._defaultCursor = this._getCursor();
	            }

	            this._setCursor(cursor);
	        }
	    },

	    _mouseleave: function() {
	        this._resetCursor();
	    },

	    _shapeCursor: function(e) {
	        var shape = e.element;

	        while (shape && !defined(shape.options.cursor)) {
	            shape = shape.parent;
	        }

	        if (shape) {
	            return shape.options.cursor;
	        }
	    },

	    _getCursor: function() {
	        if (this.element) {
	            return this.element.style.cursor;
	        }
	    },

	    _setCursor: function(cursor) {
	        if (this.element) {
	            this.element.style.cursor = cursor;
	            this._current = cursor;
	        }
	    },

	    _resetCursor: function() {
	        if (this._current) {
	            this._setCursor(this._defaultCursor || "");
	            delete this._current;
	        }
	    }
	});

	var Surface$3 = Surface.extend({
	    init: function(element, options) {
	        Surface.fn.init.call(this, element, options);

	        this.element.innerHTML = this._template(this);

	        var canvas = this.element.firstElementChild;
	        var size = elementSize(element);

	        canvas.width = size.width;
	        canvas.height = size.height;

	        this._rootElement = canvas;

	        this._root = new RootNode$2(canvas);

	        this._mouseTrackHandler = this._trackMouse.bind(this);

	        bindEvents(this.element, {
	            click: this._mouseTrackHandler,
	            mousemove: this._mouseTrackHandler
	        });
	    },

	    destroy: function() {
	        Surface.fn.destroy.call(this);

	        if (this._root) {
	            this._root.destroy();
	            this._root = null;
	        }

	        if (this._searchTree) {
	            this._searchTree.clear();
	            delete this._searchTree;
	        }

	        if (this._cursor) {
	            this._cursor.destroy();
	            delete this._cursor;
	        }

	        unbindEvents(this.element, {
	            click: this._mouseTrackHandler,
	            mousemove: this._mouseTrackHandler
	        });
	    },

	    draw: function(element) {
	        Surface.fn.draw.call(this, element);
	        this._root.load([ element ], undefined, this.options.cors);

	        if (this._searchTree) {
	            this._searchTree.add([ element ]);
	        }
	    },

	    clear: function() {
	        Surface.fn.clear.call(this);
	        this._root.clear();

	        if (this._searchTree) {
	            this._searchTree.clear();
	        }

	        if (this._cursor) {
	            this._cursor.clear();
	        }
	    },

	    eventTarget: function(e) {
	        if (this._searchTree) {
	            var point = this._surfacePoint(e);
	            var shape = this._searchTree.pointShape(point);
	            return shape;
	        }
	    },

	    image: function() {
	        var ref = this;
	        var root = ref._root;
	        var rootElement = ref._rootElement;
	        var loadingStates = [];

	        root.traverse(function (childNode) {
	            if (childNode.loading) {
	                loadingStates.push(childNode.loading);
	            }
	        });

	        var promise = createPromise();
	        var resolveDataURL = function () {
	            root._invalidate();

	            try {
	                var data = rootElement.toDataURL();
	                promise.resolve(data);
	            } catch (e) {
	                promise.reject(e);
	            }
	        };

	        promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);

	        return promise;
	    },

	    suspendTracking: function() {
	        Surface.fn.suspendTracking.call(this);
	        if (this._searchTree) {
	            this._searchTree.clear();
	            delete this._searchTree;
	        }
	    },

	    resumeTracking: function() {
	        Surface.fn.resumeTracking.call(this);
	        if (!this._searchTree) {
	            this._searchTree = new ShapesQuadTree();

	            var childNodes = this._root.childNodes;
	            var rootElements = [];
	            for (var idx = 0; idx < childNodes.length; idx++) {
	                rootElements.push(childNodes[idx].srcElement);
	            }
	            this._searchTree.add(rootElements);
	        }
	    },

	    _resize: function() {
	        this._rootElement.width = this._size.width;
	        this._rootElement.height = this._size.height;

	        this._root.invalidate();
	    },

	    _template: function() {
	        return "<canvas style='width: 100%; height: 100%;'></canvas>";
	    },

	    _enableTracking: function() {
	        this._searchTree = new ShapesQuadTree();
	        this._cursor = new SurfaceCursor(this);

	        Surface.fn._enableTracking.call(this);
	    },

	    _trackMouse: function(e) {
	        if (this._suspendedTracking) {
	            return;
	        }

	        var shape = this.eventTarget(e);

	        if (e.type !== "click") {
	            var currentShape = this._currentShape;
	            if (currentShape && currentShape !== shape) {
	                this.trigger("mouseleave", {
	                    element: currentShape,
	                    originalEvent: e,
	                    type: "mouseleave"
	                });
	            }

	            if (shape && currentShape !== shape) {
	                this.trigger("mouseenter", {
	                    element: shape,
	                    originalEvent: e,
	                    type: "mouseenter"
	                });
	            }

	            this.trigger("mousemove", {
	                element: shape,
	                originalEvent: e,
	                type: "mousemove"
	            });

	            this._currentShape = shape;
	        } else if (shape) {
	            this.trigger("click", {
	                element: shape,
	                originalEvent: e,
	                type: "click"
	            });
	        }
	    }
	});

	Surface$3.prototype.type = "canvas";

	if (typeof document !== "undefined" && document.createElement("canvas").getContext) {
	    Surface.support.canvas = true;
	    SurfaceFactory.current.register("canvas", Surface$3, 20);
	}

	function addGradientStops(gradient, stops) {
	    for (var idx = 0; idx < stops.length; idx++) {
	        var stop = stops[idx];
	        var color = kendo.parseColor(stop.color());

	        color.a *= stop.opacity();

	        gradient.addColorStop(stop.offset(), color.toCssRgba());
	    }
	}

	var PathNode$2 = Node$2.extend({
	    renderTo: function(ctx) {
	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        ctx.beginPath();

	        this.renderPoints(ctx, this.srcElement);

	        this.setLineDash(ctx);
	        this.setLineCap(ctx);
	        this.setLineJoin(ctx);

	        this.setFill(ctx);
	        this.setStroke(ctx);

	        ctx.restore();
	    },

	    setFill: function(ctx) {
	        var fill = this.srcElement.options.fill;
	        var hasFill = false;

	        if (fill) {
	            if (fill.nodeType === "Gradient") {
	                this.setGradientFill(ctx, fill);
	                hasFill = true;
	            } else if (!isTransparent(fill.color)) {
	                ctx.fillStyle = fill.color;

	                ctx.save();
	                this.globalAlpha(ctx, fill.opacity);
	                ctx.fill();
	                ctx.restore();

	                hasFill = true;
	            }
	        }

	        return hasFill;
	    },

	    setGradientFill: function(ctx, fill) {
	        var bbox = this.srcElement.rawBBox();
	        var gradient;

	        if (fill instanceof LinearGradient) {
	            var start = fill.start();
	            var end = fill.end();
	            gradient = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
	        } else if (fill instanceof RadialGradient) {
	            var center = fill.center();
	            gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, fill.radius());
	        }

	        addGradientStops(gradient, fill.stops);

	        ctx.save();

	        if (!fill.userSpace()) {
	            ctx.transform(bbox.width(), 0, 0, bbox.height(), bbox.origin.x, bbox.origin.y);
	        }
	        ctx.fillStyle = gradient;
	        ctx.fill();

	        ctx.restore();
	    },

	    setStroke: function(ctx) {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && !isTransparent(stroke.color) && stroke.width > 0) {
	            ctx.strokeStyle = stroke.color;
	            ctx.lineWidth = valueOrDefault(stroke.width, 1);

	            ctx.save();
	            this.globalAlpha(ctx, stroke.opacity);
	            ctx.stroke();
	            ctx.restore();

	            return true;
	        }
	    },

	    dashType: function() {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && stroke.dashType) {
	            return stroke.dashType.toLowerCase();
	        }
	    },

	    setLineDash: function(ctx) {
	        var dashType = this.dashType();
	        if (dashType && dashType !== SOLID) {
	            var dashArray = DASH_ARRAYS[dashType];
	            if (ctx.setLineDash) {
	                ctx.setLineDash(dashArray);
	            } else {
	                ctx.mozDash = dashArray;
	                ctx.webkitLineDash = dashArray;
	            }
	        }
	    },

	    setLineCap: function(ctx) {
	        var dashType = this.dashType();
	        var stroke = this.srcElement.options.stroke;
	        if (dashType && dashType !== SOLID) {
	            ctx.lineCap = BUTT;
	        } else if (stroke && stroke.lineCap) {
	            ctx.lineCap = stroke.lineCap;
	        }
	    },

	    setLineJoin: function(ctx) {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && stroke.lineJoin) {
	            ctx.lineJoin = stroke.lineJoin;
	        }
	    },

	    renderPoints: function(ctx, path) {
	        renderPath(ctx, path);
	    }
	});

	NODE_MAP$2.Path = PathNode$2;

	var ArcNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var path = this.srcElement.toPath();
	        renderPath(ctx, path);
	    }
	});

	NODE_MAP$2.Arc = ArcNode$2;

	var CircleNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var ref = this.srcElement.geometry();
	        var center = ref.center;
	        var radius = ref.radius;

	        ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);
	    }
	});

	NODE_MAP$2.Circle = CircleNode$2;

	var RectNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var ref = this.srcElement.geometry();
	        var origin = ref.origin;
	        var size = ref.size;

	        ctx.rect(origin.x, origin.y, size.width, size.height);
	    }
	});

	NODE_MAP$2.Rect = RectNode$2;

	var ImageNode$2 = PathNode$2.extend({
	    init: function(srcElement, cors) {
	        PathNode$2.fn.init.call(this, srcElement);

	        this.onLoad = this.onLoad.bind(this);
	        this.onError = this.onError.bind(this);

	        this.loading = createPromise();

	        var img = this.img = new Image();

	        if (cors && !(/^data:/i.test(srcElement.src()))) {
	            img.crossOrigin = cors;
	        }

	        img.src = srcElement.src();

	        if (img.complete) {
	            this.onLoad();
	        } else {
	            img.onload = this.onLoad;
	            img.onerror = this.onError;
	        }
	    },

	    renderTo: function(ctx) {
	        if (this.loading.state() === "resolved") {
	            ctx.save();

	            this.setTransform(ctx);
	            this.setClip(ctx);

	            this.drawImage(ctx);

	            ctx.restore();
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "src") {
	            this.loading = createPromise();
	            this.img.src = this.srcElement.src();
	        } else {
	            PathNode$2.fn.optionsChange.call(this, e);
	        }
	    },

	    onLoad: function() {
	        this.loading.resolve();
	        this.invalidate();
	    },

	    onError: function() {
	        this.loading.reject(new Error(
	            "Unable to load image '" + this.img.src +
	            "'. Check for connectivity and verify CORS headers."
	        ));
	    },

	    drawImage: function(ctx) {
	        var rect = this.srcElement.rect();
	        var topLeft = rect.topLeft();

	        ctx.drawImage(
	            this.img, topLeft.x, topLeft.y, rect.width(), rect.height()
	        );
	    }
	});

	NODE_MAP$2.Image = ImageNode$2;

	var TextNode$2 = PathNode$2.extend({
	    renderTo: function(ctx) {
	        var text = this.srcElement;
	        var pos = text.position();
	        var size = text.measure();

	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        ctx.beginPath();

	        ctx.font = text.options.font;
	        ctx.textAlign = 'left';

	        if (this.setFill(ctx)) {
	            ctx.fillText(text.content(), pos.x, pos.y + size.baseline);
	        }

	        if (this.setStroke(ctx)) {
	            this.setLineDash(ctx);
	            ctx.strokeText(text.content(), pos.x, pos.y + size.baseline);
	        }

	        ctx.restore();
	    }
	});

	NODE_MAP$2.Text = TextNode$2;

	var MultiPathNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var paths = this.srcElement.paths;
	        for (var i = 0; i < paths.length; i++) {
	            renderPath(ctx, paths[i]);
	        }
	    }
	});

	NODE_MAP$2.MultiPath = MultiPathNode$2;

	var canvas = {
		Surface: Surface$3,
		RootNode: RootNode$2,
		Node: Node$2,
		GroupNode: GroupNode$2,
		ArcNode: ArcNode$2,
		CircleNode: CircleNode$2,
		RectNode: RectNode$2,
		ImageNode: ImageNode$2,
		TextNode: TextNode$2,
		PathNode: PathNode$2,
		MultiPathNode: MultiPathNode$2
	};

	function exportImage(group, options) {
	    var defaults = {
	        width: "800px", height: "600px",
	        cors: "Anonymous"
	    };

	    var exportRoot = group;
	    var bbox = group.clippedBBox();

	    if (bbox) {
	        var origin = bbox.getOrigin();
	        exportRoot = new Group();
	        exportRoot.transform(transform().translate(-origin.x, -origin.y));
	        exportRoot.children.push(group);

	        var size = bbox.getSize();
	        defaults.width = size.width + "px";
	        defaults.height = size.height + "px";
	    }

	    var surfaceOptions = $.extend(defaults, options);

	    var container = document.createElement("div");
	    var style = container.style;

	    style.display = "none";
	    style.width = surfaceOptions.width;
	    style.height = surfaceOptions.height;
	    document.body.appendChild(container);

	    var surface = new Surface$3(container, surfaceOptions);
	    surface.suspendTracking();
	    surface.draw(exportRoot);

	    var promise = surface.image();
	    var destroy = function () {
	        surface.destroy();
	        document.body.removeChild(container);
	    };
	    promise.then(destroy, destroy);

	    return promise;
	}

	function exportSVG(group, options) {
	    var svg = exportGroup(group);

	    if (!options || !options.raw) {
	        svg = "data:image/svg+xml;base64," + encodeBase64(svg);
	    }

	    return createPromise().resolve(svg);
	}

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty, yoda */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	var browser = supportBrowser;
	/*

	  XXX: to test:

	  - cloneNodes function:
	    - drawing document containing canvas with page breaking
	    - drawing document with named radio <input>-s (should not clear selection)
	    - IE9/IE10 don't support el.dataset; do they copy user data?

	  - repeating table headers/footers on page breaking

	  - forceBreak, keepTogether

	  - avoidLinks

	 */

	/* -----[ local vars ]----- */

	function slice$1(thing) {
	    return Array.prototype.slice.call(thing);
	}

	var KENDO_PSEUDO_ELEMENT = "KENDO-PSEUDO-ELEMENT";

	var IMAGE_CACHE = {};

	var nodeInfo = {};
	nodeInfo._root = nodeInfo;

	/* -----[ Custom Text node to speed up rendering in kendo.pdf ]----- */

	var TextRect = Text.extend({
	    init: function(str, rect, options) {
	        Text.fn.init.call(this, str, rect.getOrigin(), options);
	        this._pdfRect = rect;
	    },

	    rect: function() {
	        // this is the crux of it: we can avoid a call to
	        // measure(), which is what the base class does, since we
	        // already know the rect.  measure() is s-l-o-w.
	        return this._pdfRect;
	    },

	    rawBBox: function() {
	        // also let's avoid creating a new rectangle.
	        return this._pdfRect;
	    }
	});

	function addClass(el, cls) {
	    if (el.classList) {
	        el.classList.add(cls);
	    } else {
	        el.className += " " + cls;
	    }
	}

	function removeClass(el, cls) {
	    if (el.classList) {
	        el.classList.remove(cls);
	    } else {
	        el.className = el.className.split(/\s+/).reduce(function(a, word){
	            if (word != cls) {
	                a.push(word);
	            }
	            return a;
	        }, []).join(" ");
	    }
	}

	function setCSS(el, styles) {
	    Object.keys(styles).forEach(function(key){
	        el.style[key] = styles[key];
	    });
	}

	var matches = typeof Element !== "undefined" && Element.prototype && (function(p){
	    if (p.matches) {
	        return function(el, selector) { return el.matches(selector); };
	    }
	    if (p.webkitMatchesSelector) {
	        return function(el, selector) { return el.webkitMatchesSelector(selector); };
	    }
	    if (p.mozMatchesSelector) {
	        return function(el, selector) { return el.mozMatchesSelector(selector); };
	    }
	    if (p.msMatchesSelector) {
	        return function(el, selector) { return el.msMatchesSelector(selector); };
	    }
	    return function(s) {
		return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
	    };
	})(Element.prototype);

	function closest(el, selector) {
	    if (el.closest) {
	        return el.closest(selector);
	    }
	    // IE: stringifying rather than simply comparing with `document`,
	    // which is not iframe-proof and fails in editor export —
	    // https://github.com/telerik/kendo/issues/6721
	    while (el && !/^\[object (?:HTML)?Document\]$/.test(String(el))) {
	        if (matches(el, selector)) {
	            return el;
	        }
	        el = el.parentNode;
	    }
	}

	// clone nodes ourselves, so that we redraw <canvas> (DOM or
	// jQuery clone will not)
	var cloneNodes = (function($){
	    if ($) {
	        // if we have Kendo and jQuery, use this version as it will
	        // maintain proper links between cloned element and Kendo
	        // widgets (i.e. it clones jQuery data(), which isn't the same
	        // as element's data attributes).
	        // https://github.com/telerik/kendo-ui-core/issues/2750
	        return function cloneNodes(el) {
	            var clone = el.cloneNode(false);
	            if (el.nodeType == 1 /* Element */) {
	                var $el = $(el), $clone = $(clone), i;
	                var data = $el.data();
	                for (i in data) {
	                    $clone.data(i, data[i]);
	                }
	                if (/^canvas$/i.test(el.tagName)) {
	                    clone.getContext("2d").drawImage(el, 0, 0);
	                } else if (/^(?:input|select|textarea|option)$/i.test(el.tagName)) {
	                    // drop the name attributes so that we don't affect the selection of the
	                    // original nodes (i.e. checked status of radio buttons) when we insert our copy
	                    // into the DOM.  https://github.com/telerik/kendo/issues/5409
	                    clone.removeAttribute("id");
	                    clone.removeAttribute("name");
	                    clone.value = el.value;
	                    clone.checked = el.checked;
	                    clone.selected = el.selected;
	                }
	                for (i = el.firstChild; i; i = i.nextSibling) {
	                    clone.appendChild(cloneNodes(i));
	                }
	            }
	            return clone;
	        };
	    } else {
	        // the no-jQuery version
	        return function cloneNodes(el) {
	            var clone = (function dive(node){
	                var clone = node.cloneNode(false);
	                if (node._kendoExportVisual) {
	                    clone._kendoExportVisual = node._kendoExportVisual;
	                }
	                for (var i = node.firstChild; i; i = i.nextSibling) {
	                    clone.appendChild(dive(i));
	                }
	                return clone;
	            })(el);

	            // re-draw canvases - https://github.com/telerik/kendo/issues/4872
	            var canvases = el.querySelectorAll("canvas");
	            if (canvases.length) {
	                slice$1(clone.querySelectorAll("canvas")).forEach(function (canvas$$1, i) {
	                    canvas$$1.getContext("2d").drawImage(canvases[i], 0, 0);
	                });
	            }

	            // remove "name" attributes from <input> elements -
	            // https://github.com/telerik/kendo/issues/5409
	            var orig = el.querySelectorAll("input, select, textarea, option");
	            slice$1(clone.querySelectorAll("input, select, textarea, option")).forEach(function (el, i) {
	                el.removeAttribute("id");
	                el.removeAttribute("name");
	                el.value = orig[i].value;
	                el.checked = orig[i].checked;
	                el.selected = orig[i].selected;
	            });

	            return clone;
	        };
	    }
	})(typeof window !== "undefined" && window.kendo && window.kendo.jQuery);

	function getXY(thing) {
	    if (typeof thing == "number") {
	        return { x: thing, y: thing };
	    }
	    if (Array.isArray(thing)) {
	        return { x: thing[0], y: thing[1] };
	    }
	    return { x: thing.x, y: thing.y };
	}

	function drawDOM(element, options) {
	    if (!options) {
	        options = {};
	    }
	    var promise = createPromise();

	    if (!element) {
	        return promise.reject("No element to export");
	    }

	    if (typeof window.getComputedStyle != "function") {
	        throw new Error("window.getComputedStyle is missing.  You are using an unsupported browser, or running in IE8 compatibility mode.  Drawing HTML is supported in Chrome, Firefox, Safari and IE9+.");
	    }

	    kendo.pdf.defineFont(getFontFaces(element.ownerDocument));

	    var scale = getXY(options.scale || 1);

	    function doOne(element) {
	        var group = new Group();

	        // translate to start of page
	        var pos = element.getBoundingClientRect();
	        setTransform(group, [
	            scale.x,
	            0,
	            0,
	            scale.y,
	            (-pos.left * scale.x),
	            (-pos.top * scale.y)
	        ]);

	        nodeInfo._clipbox = false;
	        nodeInfo._matrix = Matrix.unit();
	        nodeInfo._stackingContext = {
	            element: element,
	            group: group
	        };

	        if (options.avoidLinks === true) {
	            nodeInfo._avoidLinks = "a";
	        } else {
	            nodeInfo._avoidLinks = options.avoidLinks;
	        }

	        addClass(element, "k-pdf-export");
	        renderElement(element, group);
	        removeClass(element, "k-pdf-export");

	        return group;
	    }

	    cacheImages(element, function(){
	        var forceBreak = options && options.forcePageBreak;
	        var hasPaperSize = options && options.paperSize && options.paperSize != "auto";
	        var paperOptions = kendo.pdf.getPaperOptions(function(key, def){
	            if (key == "paperSize") {
	                // PDF.getPaperOptions croaks on "auto", just pass dummy A4 as we might
	                // still be interested in margins.
	                return hasPaperSize ? options[key] : "A4";
	            }
	            return key in options ? options[key] : def;
	        });
	        var pageWidth = hasPaperSize && paperOptions.paperSize[0];
	        var pageHeight = hasPaperSize && paperOptions.paperSize[1];
	        var margin = options.margin && paperOptions.margin;
	        var hasMargin = Boolean(margin);
	        if (forceBreak || pageHeight) {
	            if (!margin) {
	                margin = { left: 0, top: 0, right: 0, bottom: 0 };
	            }

	            // we want paper size and margin to be unaffected by
	            // scaling in the output, so we have to reverse-scale
	            // before our calculations begin.
	            if (pageWidth)  { pageWidth  /= scale.x; }
	            if (pageHeight) { pageHeight /= scale.y; }
	            margin.left   /= scale.x;
	            margin.right  /= scale.x;
	            margin.top    /= scale.y;
	            margin.bottom /= scale.y;

	            var group = new Group({
	                pdf: {
	                    multiPage     : true,
	                    paperSize     : hasPaperSize ? paperOptions.paperSize : "auto",
	                    _ignoreMargin : hasMargin // HACK!  see exportPDF in pdf/drawing.js
	                }
	            });
	            handlePageBreaks(
	                function(x) {
	                    if (options.progress) {
	                        var canceled = false, pageNum = 0;
	                        (function next(){
	                            if (pageNum < x.pages.length) {
	                                var page = doOne(x.pages[pageNum]);
	                                group.append(page);
	                                options.progress({
	                                    page: page,
	                                    pageNum: ++pageNum,
	                                    totalPages: x.pages.length,
	                                    cancel: function() {
	                                        canceled = true;
	                                    }
	                                });
	                                if (!canceled) {
	                                    setTimeout(next);
	                                } else {
	                                    // XXX: should we also fail() the deferred object?
	                                    x.container.parentNode.removeChild(x.container);
	                                }
	                            } else {
	                                x.container.parentNode.removeChild(x.container);
	                                promise.resolve(group);
	                            }
	                        })();
	                    } else {
	                        x.pages.forEach(function(page){
	                            group.append(doOne(page));
	                        });
	                        x.container.parentNode.removeChild(x.container);
	                        promise.resolve(group);
	                    }
	                },
	                element,
	                forceBreak,
	                pageWidth ? pageWidth - margin.left - margin.right : null,
	                pageHeight ? pageHeight - margin.top - margin.bottom : null,
	                margin,
	                options
	            );
	        } else {
	            promise.resolve(doOne(element));
	        }
	    });

	    function makeTemplate(template$$1) {
	        if (template$$1 != null) {
	            if (typeof template$$1 == "string") {
	                template$$1 = kendo.template(template$$1.replace(/^\s+|\s+$/g, ""));
	            }
	            if (typeof template$$1 == "function") {
	                return function(data) {
	                    var el = template$$1(data);
	                    if (el && typeof el == "string") {
	                        var div = document.createElement("div");
	                        div.innerHTML = el;
	                        el = div.firstElementChild;
	                    }
	                    return el;
	                };
	            }
	            // assumed DOM element
	            return function() {
	                return template$$1.cloneNode(true);
	            };
	        }
	    }

	    function handlePageBreaks(callback, element, forceBreak, pageWidth, pageHeight, margin, options) {
	        var template$$1 = makeTemplate(options.template);
	        var doc = element.ownerDocument;
	        var pages = [];
	        var copy = options._destructive ? element : cloneNodes(element);
	        var container = doc.createElement("KENDO-PDF-DOCUMENT");
	        var adjust = 0;

	        // make sure <tfoot> elements are at the end (Grid widget
	        // places TFOOT before TBODY, tricking our algorithm to
	        // insert a page break right after the header).
	        // https://github.com/telerik/kendo/issues/4699
	        slice$1(copy.querySelectorAll("tfoot")).forEach(function(tfoot){
	            tfoot.parentNode.appendChild(tfoot);
	        });

	        // remember the index of each LI from an ordered list.
	        // we'll use it to reconstruct the proper numbering.
	        slice$1(copy.querySelectorAll("ol")).forEach(function(ol){
	            slice$1(ol.children).forEach(function(li, index){
	                li.setAttribute("kendo-split-index", index);
	            });
	        });

	        setCSS(container, {
	            display   : "block",
	            position  : "absolute",
	            boxSizing : "content-box",
	            left      : "-10000px",
	            top       : "-10000px"
	        });

	        if (pageWidth) {
	            // subtle: if we don't set the width *and* margins here, the layout in this
	            // container will be different from the one in our final page elements, and we'll
	            // split at the wrong places.
	            setCSS(container, {
	                width        : pageWidth + "px",
	                paddingLeft  : margin.left + "px",
	                paddingRight : margin.right + "px"
	            });

	            // when the first element has a margin-top (i.e. a <h1>) the page will be
	            // inadvertently enlarged by that number (the browser will report the container's
	            // bounding box top to start at the element's top, rather than including its
	            // margin).  Adding overflow: hidden seems to fix it.
	            //
	            // to understand the difference, try the following snippets in your browser:
	            //
	            // 1. <div style="background: yellow">
	            //      <h1 style="margin: 3em">Foo</h1>
	            //    </div>
	            //
	            // 2. <div style="background: yellow; overflow: hidden">
	            //      <h1 style="margin: 3em">Foo</h1>
	            //    </div>
	            //
	            // this detail is not important when automatic page breaking is not requested, hence
	            // doing it only if pageWidth is defined.
	            setCSS(copy, { overflow: "hidden" });
	        }

	        element.parentNode.insertBefore(container, element);
	        container.appendChild(copy);

	        // we need the timeouts here, so that images dimensions are
	        // properly computed in DOM when we start our thing.
	        if (options.beforePageBreak) {
	            setTimeout(function(){
	                options.beforePageBreak(container, doPageBreak);
	            }, 15);
	        } else {
	            setTimeout(doPageBreak, 15);
	        }

	        function doPageBreak() {
	            if (forceBreak != "-" || pageHeight) {
	                splitElement(copy);
	            }

	            {
	                var page = makePage();
	                copy.parentNode.insertBefore(page, copy);
	                page.appendChild(copy);
	            }

	            if (template$$1) {
	                pages.forEach(function(page, i){
	                    var el = template$$1({
	                        element    : page,
	                        pageNum    : i + 1,
	                        totalPages : pages.length
	                    });
	                    if (el) {
	                        page.appendChild(el);
	                    }
	                });
	            }

	            cacheImages(pages, function() {
	                // Even though we already cached images, they simply won't be available
	                // immediately in the newly created DOM.  Previously we'd allow a 10ms timeout,
	                // but that's arbitrary and clearly not working in all cases
	                // (https://github.com/telerik/kendo/issues/5399), so this function will wait
	                // for their .complete attribute.
	                whenImagesAreActuallyLoaded(pages, function(){
	                    callback({ pages: pages, container: container });
	                });
	            });
	        }

	        function keepTogether(el) {
	            if (options.keepTogether && matches(el, options.keepTogether) && el.offsetHeight <= pageHeight - adjust) {
	                return true;
	            }

	            var tag = el.tagName;
	            if (/^h[1-6]$/i.test(tag) && el.offsetHeight >= pageHeight - adjust) {
	                return false;
	            }

	            return (el.getAttribute("data-kendo-chart") ||
	                    /^(?:img|tr|thead|th|tfoot|iframe|svg|object|canvas|input|textarea|select|video|h[1-6])/i.test(el.tagName));
	        }

	        function splitElement(element) {
	            if (element.tagName == "TABLE") {
	                setCSS(element, { tableLayout: "fixed" });
	            }
	            var style = getComputedStyle(element);
	            var bottomPadding = parseFloat(getPropertyValue(style, "padding-bottom"));
	            var bottomBorder = parseFloat(getPropertyValue(style, "border-bottom-width"));
	            var saveAdjust = adjust;
	            adjust += bottomPadding + bottomBorder;
	            var isFirst = true;
	            for (var el = element.firstChild; el; el = el.nextSibling) {
	                if (el.nodeType == 1 /* Element */) {
	                    isFirst = false;
	                    if (matches(el, forceBreak)) {
	                        breakAtElement(el);
	                        continue;
	                    }
	                    if (!pageHeight) {
	                        // we're in "manual breaks mode"
	                        splitElement(el);
	                        continue;
	                    }
	                    if (!/^(?:static|relative)$/.test(getPropertyValue(getComputedStyle(el), "position"))) {
	                        continue;
	                    }
	                    var fall = fallsOnMargin(el);
	                    if (fall == 1) {
	                        // element starts on next page, break before anyway.
	                        breakAtElement(el);
	                    }
	                    else if (fall) {
	                        // elements ends up on next page, or possibly doesn't fit on a page at
	                        // all.  break before it anyway if it's an <img> or <tr>, otherwise
	                        // attempt to split.
	                        if (keepTogether(el)) {
	                            breakAtElement(el);
	                        } else {
	                            splitElement(el);
	                        }
	                    }
	                    else {
	                        splitElement(el);
	                    }
	                }
	                else if (el.nodeType == 3 /* Text */ && pageHeight) {
	                    splitText(el, isFirst);
	                    isFirst = false;
	                }
	            }
	            adjust = saveAdjust;
	        }

	        function firstInParent(el) {
	            var p = el.parentNode, first = p.firstChild;
	            if (el === first) {
	                return true;
	            }
	            if (el === p.children[0]) {
	                if (first.nodeType == 7 /* comment */ ||
	                    first.nodeType == 8 /* processing instruction */) {
	                    return true;
	                }
	                if (first.nodeType == 3 /* text */) {
	                    // if whitespace only we can probably consider it's first
	                    return !/\S/.test(first.data);
	                }
	            }
	            return false;
	        }

	        function breakAtElement(el) {
	            if (el.nodeType == 1 && el !== copy && firstInParent(el)) {
	                return breakAtElement(el.parentNode);
	            }
	            var table, colgroup, thead, grid, gridHead;
	            table = closest(el, "table");
	            colgroup = table && table.querySelector("colgroup");
	            if (options.repeatHeaders) {
	                thead = table && table.querySelector("thead");

	                // If we break page in a Kendo Grid, repeat its header.  This ugly hack is
	                // necessary because a scrollable grid will keep the header in a separate
	                // <table> element from its content.
	                //
	                // XXX: This is likely to break as soon as the widget HTML is modified.
	                grid = closest(el, ".k-grid.k-widget");
	                if (grid && grid.querySelector(".k-auto-scrollable")) {
	                    gridHead = grid.querySelector(".k-grid-header");
	                }
	            }
	            var page = makePage();
	            var range = doc.createRange();
	            range.setStartBefore(copy);
	            range.setEndBefore(el);
	            page.appendChild(range.extractContents());
	            copy.parentNode.insertBefore(page, copy);
	            preventBulletOnListItem(el.parentNode);
	            if (table) {
	                table = closest(el, "table"); // that's the <table> on next page!
	                if (options.repeatHeaders && thead) {
	                    table.insertBefore(thead.cloneNode(true), table.firstChild);
	                }
	                if (colgroup) {
	                    table.insertBefore(colgroup.cloneNode(true), table.firstChild);
	                }
	            }
	            if (options.repeatHeaders && gridHead) {
	                grid = closest(el, ".k-grid.k-widget");
	                grid.insertBefore(gridHead.cloneNode(true), grid.firstChild);
	            }
	        }

	        function makePage() {
	            var page = doc.createElement("KENDO-PDF-PAGE");
	            setCSS(page, {
	                display  : "block",
	                boxSizing: "content-box",
	                width    : pageWidth ? (pageWidth + "px") : "auto",
	                padding  : (margin.top + "px " +
	                            margin.right + "px " +
	                            margin.bottom + "px " +
	                            margin.left + "px"),

	                // allow absolutely positioned elements to be relative to current page
	                position : "relative",

	                // without the following we might affect layout of subsequent pages
	                height   : pageHeight ? (pageHeight + "px") : "auto",
	                overflow : pageHeight || pageWidth ? "hidden" : "visible",
	                clear    : "both"
	            });

	            // debug
	            // $("<div>").css({
	            //     position  : "absolute",
	            //     left      : margin.left,
	            //     top       : margin.top,
	            //     width     : pageWidth,
	            //     height    : pageHeight,
	            //     boxSizing : "border-box",
	            //     background: "rgba(255, 255, 0, 0.5)"
	            //     //border    : "1px solid red"
	            // }).appendTo(page);

	            if (options && options.pageClassName) {
	                page.className = options.pageClassName;
	            }
	            pages.push(page);
	            return page;
	        }

	        function fallsOnMargin(thing) {
	            var box = thing.getBoundingClientRect();
	            if (box.width === 0 || box.height === 0) {
	                // I'd say an element with dimensions zero fits on current page.
	                return 0;
	            }
	            var top = copy.getBoundingClientRect().top;
	            var available = pageHeight - adjust;
	            return (box.height > available) ? 3
	                : (box.top - top > available) ? 1
	                : (box.bottom - top > available) ? 2
	                : 0;
	        }

	        function splitText(node, isFirst) {
	            if (!/\S/.test(node.data)) {
	                return;
	            }

	            var len = node.data.length;
	            var range = doc.createRange();
	            range.selectNodeContents(node);
	            var fall = fallsOnMargin(range);
	            if (!fall) {
	                return;     // the whole text fits on current page
	            }

	            var nextnode = node;
	            if (fall == 1) {
	                // starts on next page, break before anyway.
	                if (isFirst) {
	                    // avoid leaving an empty <p>, <li>, etc. on previous page.
	                    breakAtElement(node.parentNode);
	                } else {
	                    breakAtElement(node);
	                }
	            }
	            else {
	                (function findEOP(min, pos, max) {
	                    range.setEnd(node, pos);
	                    if (min == pos || pos == max) {
	                        return pos;
	                    }
	                    if (fallsOnMargin(range)) {
	                        return findEOP(min, (min + pos) >> 1, pos);
	                    } else {
	                        return findEOP(pos, (pos + max) >> 1, max);
	                    }
	                })(0, len >> 1, len);

	                if (!/\S/.test(range.toString()) && isFirst) {
	                    // avoid leaving an empty <p>, <li>, etc. on previous page.
	                    breakAtElement(node.parentNode);
	                } else {
	                    // This is only needed for IE, but it feels cleaner to do it anyway.  Without
	                    // it, IE will truncate a very long text (playground/pdf-long-text-2.html).
	                    nextnode = node.splitText(range.endOffset);

	                    var page = makePage();
	                    range.setStartBefore(copy);
	                    page.appendChild(range.extractContents());
	                    copy.parentNode.insertBefore(page, copy);
	                    preventBulletOnListItem(nextnode.parentNode);
	                }
	            }

	            splitText(nextnode);
	        }

	        function preventBulletOnListItem(el) {
	            // set a hint on continued LI elements, to tell the
	            // renderer not to draw the bullet again.
	            // https://github.com/telerik/kendo-ui-core/issues/2732
	            var li = closest(el, "li");
	            if (li) {
	                li.setAttribute("kendo-no-bullet", "1");
	                preventBulletOnListItem(li.parentNode);
	            }
	        }
	    }

	    return promise;
	}

	drawDOM.getFontFaces = getFontFaces;

	// This is needed for the Spreadsheet print functionality.  Since
	// there we only need to draw text, this cuts through the ceremony
	// of drawDOM/renderElement and renders the text node directly.
	drawDOM.drawText = function(element) {
	    var group = new Group();
	    nodeInfo._clipbox = false;
	    nodeInfo._matrix = Matrix.unit();
	    nodeInfo._stackingContext = {
	        element: element,
	        group: group
	    };
	    pushNodeInfo(element, getComputedStyle(element), group);
	    if (element.firstChild.nodeType == 3 /* Text */) {
	        // avoid the penalty of renderElement
	        renderText(element, element.firstChild, group);
	    } else {
	        _renderElement(element, group);
	    }
	    popNodeInfo();
	    return group;
	};

	var parseBackgroundImage = (function(){
	    var tok_linear_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?linear-gradient\s*)\(/;
	    //var tok_radial_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?radial-gradient\s*)\(/;
	    var tok_percent          = /^([-0-9.]+%)/;
	    var tok_length           = /^([-0-9.]+px)/;
	    var tok_keyword          = /^(left|right|top|bottom|to|center)\W/;
	    var tok_angle            = /^([-0-9.]+(deg|grad|rad|turn))/;
	    var tok_whitespace       = /^(\s+)/;
	    var tok_popen            = /^(\()/;
	    var tok_pclose           = /^(\))/;
	    var tok_comma            = /^(,)/;
	    var tok_url              = /^(url)\(/;
	    var tok_content          = /^(.*?)\)/;

	    var cache1 = {}, cache2 = {};

	    function parse(input) {
	        var orig = input;
	        if (hasOwnProperty(cache1, orig)) {
	            return cache1[orig];
	        }
	        function skip_ws() {
	            var m = tok_whitespace.exec(input);
	            if (m) {
	                input = input.substr(m[1].length);
	            }
	        }
	        function read(token) {
	            skip_ws();
	            var m = token.exec(input);
	            if (m) {
	                input = input.substr(m[1].length);
	                return m[1];
	            }
	        }

	        function read_stop() {
	            var color = kendo.parseColor(input, true);
	            var length, percent;
	            if (color) {
	                var match =
	                    /^#[0-9a-f]+/i.exec(input) ||
	                    /^rgba?\(.*?\)/i.exec(input) ||
	                    /^..*?\b/.exec(input); // maybe named color
	                input = input.substr(match[0].length);
	                color = color.toRGB();
	                if (!(length = read(tok_length))) {
	                    percent = read(tok_percent);
	                }
	                return { color: color, length: length, percent: percent };
	            }
	        }

	        function read_linear_gradient(propName) {
	            var angle;
	            var to1, to2;
	            var stops = [];
	            var reverse = false;

	            if (read(tok_popen)) {
	                // 1. [ <angle> || to <side-or-corner>, ]?
	                angle = read(tok_angle);
	                if (angle) {
	                    angle = parseAngle(angle);
	                    read(tok_comma);
	                }
	                else {
	                    to1 = read(tok_keyword);
	                    if (to1 == "to") {
	                        to1 = read(tok_keyword);
	                    } else if (to1 && /^-/.test(propName)) {
	                        reverse = true;
	                    }
	                    to2 = read(tok_keyword);
	                    read(tok_comma);
	                }

	                if (/-moz-/.test(propName) && angle == null && to1 == null) {
	                    var x = read(tok_percent), y = read(tok_percent);
	                    reverse = true;
	                    if (x == "0%") {
	                        to1 = "left";
	                    } else if (x == "100%") {
	                        to1 = "right";
	                    }
	                    if (y == "0%") {
	                        to2 = "top";
	                    } else if (y == "100%") {
	                        to2 = "bottom";
	                    }
	                    read(tok_comma);
	                }

	                // 2. color stops
	                while (input && !read(tok_pclose)) {
	                    var stop = read_stop();
	                    if (!stop) {
	                        break;
	                    }
	                    stops.push(stop);
	                    read(tok_comma);
	                }

	                return {
	                    type    : "linear",
	                    angle   : angle,
	                    to      : to1 && to2 ? to1 + " " + to2 : to1 ? to1 : to2 ? to2 : null,
	                    stops   : stops,
	                    reverse : reverse
	                };
	            }
	        }

	        function read_url() {
	            if (read(tok_popen)) {
	                var url = read(tok_content);
	                url = url.replace(/^['"]+|["']+$/g, "");
	                read(tok_pclose);
	                return { type: "url", url: url };
	            }
	        }

	        var tok;

	        if ((tok = read(tok_linear_gradient))) {
	            tok = read_linear_gradient(tok);
	        }
	        else if ((tok = read(tok_url))) {
	            tok = read_url();
	        }

	        return (cache1[orig] = tok || { type: "none" });
	    }

	    return function(input) {
	        if (hasOwnProperty(cache2, input)) {
	            return cache2[input];
	        }
	        return (cache2[input] = splitProperty(input).map(parse));
	    };
	})();

	var splitProperty = (function(){
	    var cache = {};
	    return function(input, separator) {
	        if (!separator) {
	            separator = /^\s*,\s*/;
	        }

	        var cacheKey = input + separator;

	        if (hasOwnProperty(cache, cacheKey)) {
	            return cache[cacheKey];
	        }

	        var ret = [];
	        var last$$1 = 0, pos = 0;
	        var in_paren = 0;
	        var in_string = false;
	        var m;

	        function looking_at(rx) {
	            return (m = rx.exec(input.substr(pos)));
	        }

	        function trim(str) {
	            return str.replace(/^\s+|\s+$/g, "");
	        }

	        while (pos < input.length) {
	            if (!in_string && looking_at(/^[\(\[\{]/)) {
	                in_paren++;
	                pos++;
	            }
	            else if (!in_string && looking_at(/^[\)\]\}]/)) {
	                in_paren--;
	                pos++;
	            }
	            else if (!in_string && looking_at(/^[\"\']/)) {
	                in_string = m[0];
	                pos++;
	            }
	            else if (in_string == "'" && looking_at(/^\\\'/)) {
	                pos += 2;
	            }
	            else if (in_string == '"' && looking_at(/^\\\"/)) {
	                pos += 2;
	            }
	            else if (in_string == "'" && looking_at(/^\'/)) {
	                in_string = false;
	                pos++;
	            }
	            else if (in_string == '"' && looking_at(/^\"/)) {
	                in_string = false;
	                pos++;
	            }
	            else if (looking_at(separator)) {
	                if (!in_string && !in_paren && pos > last$$1) {
	                    ret.push(trim(input.substring(last$$1, pos)));
	                    last$$1 = pos + m[0].length;
	                }
	                pos += m[0].length;
	            }
	            else {
	                pos++;
	            }
	        }
	        if (last$$1 < pos) {
	            ret.push(trim(input.substring(last$$1, pos)));
	        }
	        return (cache[cacheKey] = ret);
	    };
	})();

	var getFontURL = (function(cache){
	    return function(el){
	        // XXX: for IE we get here the whole cssText of the rule,
	        // because the computedStyle.src is empty.  Next time we need
	        // to fix these regexps we better write a CSS parser. :-\
	        var url = cache[el];
	        if (!url) {
	            var m;
	            if ((m = /url\((['"]?)([^'")]*?)\1\)\s+format\((['"]?)truetype\3\)/.exec(el))) {
	                url = cache[el] = m[2];
	            } else if ((m = /url\((['"]?)([^'")]*?\.ttf)\1\)/.exec(el))) {
	                url = cache[el] = m[2];
	            }
	        }
	        return url;
	    };
	})(Object.create ? Object.create(null) : {});

	var getFontHeight = (function(cache){
	    return function(font) {
	        var height = cache[font];
	        if (height == null) {
	            height = cache[font] = kendoUtil.measureText("Mapq", { font: font }).height;
	        }
	        return height;
	    };
	})(Object.create ? Object.create(null) : {});

	function getFontFaces(doc) {
	    if (doc == null) {
	        doc = document;
	    }
	    var result = {};
	    for (var i = 0; i < doc.styleSheets.length; ++i) {
	        doStylesheet(doc.styleSheets[i]);
	    }
	    return result;
	    function doStylesheet(ss) {
	        if (ss) {
	            var rules = null;
	            try {
	                rules = ss.cssRules;
	            } catch (ex) {}
	            if (rules) {
	                addRules(ss, rules);
	            }
	        }
	    }
	    function findFonts(rule) {
	        var src = getPropertyValue(rule.style, "src");
	        if (src) {
	            return splitProperty(src).reduce(function(a, el){
	                var font = getFontURL(el);
	                if (font) {
	                    a.push(font);
	                }
	                return a;
	            }, []);
	        } else {
	            // Internet Explorer
	            // XXX: this is gross.  should work though for valid CSS.
	            var font = getFontURL(rule.cssText);
	            return font ? [ font ] : [];
	        }
	    }
	    function addRules(styleSheet, rules) {
	        for (var i = 0; i < rules.length; ++i) {
	            var r = rules[i];
	            switch (r.type) {
	              case 3:       // CSSImportRule
	                doStylesheet(r.styleSheet);
	                break;
	              case 5:       // CSSFontFaceRule
	                var style  = r.style;
	                var family = splitProperty(getPropertyValue(style, "font-family"));
	                var bold   = /^([56789]00|bold)$/i.test(getPropertyValue(style, "font-weight"));
	                var italic = "italic" == getPropertyValue(style, "font-style");
	                var src    = findFonts(r);
	                if (src.length > 0) {
	                    addRule(styleSheet, family, bold, italic, src[0]);
	                }
	            }
	        }
	    }
	    function addRule(styleSheet, names, bold, italic, url) {
	        // We get full resolved absolute URLs in Chrome, but sadly
	        // not in Firefox.
	        if (!(/^data:/i.test(url))) {
	            if (!(/^[^\/:]+:\/\//.test(url) || /^\//.test(url))) {
	                url = String(styleSheet.href).replace(/[^\/]*$/, "") + url;
	            }
	        }
	        names.forEach(function(name){
	            name = name.replace(/^(['"]?)(.*?)\1$/, "$2"); // it's quoted
	            if (bold) {
	                name += "|bold";
	            }
	            if (italic) {
	                name += "|italic";
	            }
	            result[name] = url;
	        });
	    }
	}

	function hasOwnProperty(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function getCounter(name) {
	    name = "_counter_" + name;
	    return nodeInfo[name];
	}

	function getAllCounters(name) {
	    var values = [], p = nodeInfo;
	    name = "_counter_" + name;
	    while (p) {
	        if (hasOwnProperty(p, name)) {
	            values.push(p[name]);
	        }
	        p = Object.getPrototypeOf(p);
	    }
	    return values.reverse();
	}

	function incCounter(name, inc) {
	    var p = nodeInfo;
	    name = "_counter_" + name;
	    while (p && !hasOwnProperty(p, name)) {
	        p = Object.getPrototypeOf(p);
	    }
	    if (!p) {
	        p = nodeInfo._root;
	    }
	    p[name] = (p[name] || 0) + (inc == null ? 1 : inc);
	}

	function resetCounter(name, val) {
	    name = "_counter_" + name;
	    nodeInfo[name] = val == null ? 0 : val;
	}

	function doCounters(a, f, def) {
	    for (var i = 0; i < a.length;) {
	        var name = a[i++];
	        var val = parseFloat(a[i]);
	        if (isNaN(val)) {
	            f(name, def);
	        } else {
	            f(name, val);
	            ++i;
	        }
	    }
	}

	function updateCounters(style) {
	    var counterReset = getPropertyValue(style, "counter-reset");
	    if (counterReset) {
	        doCounters(splitProperty(counterReset, /^\s+/), resetCounter, 0);
	    }
	    var counterIncrement = getPropertyValue(style, "counter-increment");
	    if (counterIncrement) {
	        doCounters(splitProperty(counterIncrement, /^\s+/), incCounter, 1);
	    }
	}

	function parseColor$1(str, css) {
	    var color = kendo.parseColor(str, true);
	    if (color) {
	        color = color.toRGB();
	        if (css) {
	            color = color.toCssRgba();
	        } else if (color.a === 0) {
	            color = null;
	        }
	    }
	    return color;
	}

	function whenImagesAreActuallyLoaded(elements, callback) {
	    var pending = 0;
	    elements.forEach(function(el){
	        var images = el.querySelectorAll("img");
	        for (var i = 0; i < images.length; ++i) {
	            var img = images[i];
	            if (!img.complete) {
	                pending++;
	                img.onload = img.onerror = next;
	            }
	        }
	    });
	    if (!pending) {
	        next();
	    }
	    function next() {
	        if (--pending <= 0) {
	            callback();
	        }
	    }
	}

	function cacheImages(element, callback) {
	    var urls = [];
	    function add(url) {
	        if (!IMAGE_CACHE[url]) {
	            IMAGE_CACHE[url] = true;
	            urls.push(url);
	        }
	    }
	    function dive(element){
	        if (/^img$/i.test(element.tagName)) {
	            add(element.src);
	        }
	        parseBackgroundImage(
	            getPropertyValue(
	                getComputedStyle(element), "background-image"
	            )
	        ).forEach(function(bg){
	            if (bg.type == "url") {
	                add(bg.url);
	            }
	        });

	        if (element.children) {
	            slice$1(element.children).forEach(dive);
	        }
	    }

	    if (Array.isArray(element)) {
	        element.forEach(dive);
	    } else {
	        dive(element);
	    }

	    var count = urls.length;
	    function next() {
	        if (--count <= 0) {
	            callback();
	        }
	    }
	    if (count === 0) {
	        next();
	    }
	    urls.forEach(function(url){
	        var img = IMAGE_CACHE[url] = new window.Image();
	        if (!(/^data:/i.test(url))) {
	            img.crossOrigin = "Anonymous";
	        }
	        img.src = url;
	        if (img.complete) {
	            next();
	        } else {
	            img.onload = next;
	            img.onerror = function() {
	                IMAGE_CACHE[url] = null;
	                next();
	            };
	        }
	    });
	}

	function alphaNumeral(n) {
	    var result = "";
	    do {
	        var r = n % 26;
	        result = String.fromCharCode(97 + r) + result;
	        n = Math.floor(n / 26);
	    } while (n > 0);
	    return result;
	}

	function pushNodeInfo(element, style, group) {
	    nodeInfo = Object.create(nodeInfo);
	    nodeInfo[element.tagName.toLowerCase()] = {
	        element: element,
	        style: style
	    };
	    var decoration = getPropertyValue(style, "text-decoration");
	    if (decoration && decoration != "none") {
	        var color = getPropertyValue(style, "color");
	        decoration.split(/\s+/g).forEach(function(name){
	            if (!nodeInfo[name]) {
	                nodeInfo[name] = color;
	            }
	        });
	    }

	    if (createsStackingContext(style)) {
	        nodeInfo._stackingContext = {
	            element: element,
	            group: group
	        };
	    }
	}

	function popNodeInfo() {
	    nodeInfo = Object.getPrototypeOf(nodeInfo);
	}

	function updateClipbox(path) {
	    if (nodeInfo._clipbox != null) {
	        var box = path.bbox(nodeInfo._matrix);
	        if (nodeInfo._clipbox) {
	            nodeInfo._clipbox = Rect.intersect(nodeInfo._clipbox, box);
	        } else {
	            nodeInfo._clipbox = box;
	        }
	    }
	}

	function emptyClipbox() {
	    var cb = nodeInfo._clipbox;
	    if (cb == null) {
	        return true;
	    }
	    if (cb) {
	        return cb.width() === 0 || cb.height() === 0;
	    }
	}

	function createsStackingContext(style) {
	    function prop(name) { return getPropertyValue(style, name); }
	    if (prop("transform") != "none" ||
	        prop("position") != "static" ||
	        prop("z-index") != "auto" ||
	        prop("opacity") < 1) {
	        return true;
	    }
	}

	function getComputedStyle(element, pseudoElt) {
	    return window.getComputedStyle(element, pseudoElt || null);
	}

	function getPropertyValue(style, prop, defa) {
	    var val = style.getPropertyValue(prop);
	    if (val == null || val === "") {
	        if (browser.webkit) {
	            val = style.getPropertyValue("-webkit-" + prop );
	        } else if (browser.mozilla) {
	            val = style.getPropertyValue("-moz-" + prop );
	        } else if (browser.opera) {
	            val = style.getPropertyValue("-o-" + prop);
	        } else if (browser.msie || browser.edge) {
	            val = style.getPropertyValue("-ms-" + prop);
	        }
	    }
	    if (arguments.length > 2 && (val == null || val === "")) {
	        return defa;
	    } else {
	        return val;
	    }
	}

	function pleaseSetPropertyValue(style, prop, value, important) {
	    style.setProperty(prop, value, important);
	    if (browser.webkit) {
	        style.setProperty("-webkit-" + prop, value, important);
	    } else if (browser.mozilla) {
	        style.setProperty("-moz-" + prop, value, important);
	    } else if (browser.opera) {
	        style.setProperty("-o-" + prop, value, important);
	    } else if (browser.msie || browser.edge) {
	        style.setProperty("-ms-" + prop, value, important);
	        prop = "ms" + prop.replace(/(^|-)([a-z])/g, function(s, p1, p2){
	            return p1 + p2.toUpperCase();
	        });
	        style[prop] = value;
	    }
	}

	function getBorder(style, side) {
	    side = "border-" + side;
	    return {
	        width: parseFloat(getPropertyValue(style, side + "-width")),
	        style: getPropertyValue(style, side + "-style"),
	        color: parseColor$1(getPropertyValue(style, side + "-color"), true)
	    };
	}

	function saveStyle(element, func) {
	    var prev = element.style.cssText;
	    var result = func();
	    element.style.cssText = prev;
	    return result;
	}

	function getBorderRadius(style, side) {
	    var r = getPropertyValue(style, "border-" + side + "-radius").split(/\s+/g).map(parseFloat);
	    if (r.length == 1) {
	        r.push(r[0]);
	    }
	    return sanitizeRadius({ x: r[0], y: r[1] });
	}

	function getContentBox(element) {
	    var box = element.getBoundingClientRect();
	    box = innerBox(box, "border-*-width", element);
	    box = innerBox(box, "padding-*", element);
	    return box;
	}

	function innerBox(box, prop, element) {
	    var style, wt, wr, wb, wl;
	    if (typeof prop == "string") {
	        style = getComputedStyle(element);
	        wt = parseFloat(getPropertyValue(style, prop.replace("*", "top")));
	        wr = parseFloat(getPropertyValue(style, prop.replace("*", "right")));
	        wb = parseFloat(getPropertyValue(style, prop.replace("*", "bottom")));
	        wl = parseFloat(getPropertyValue(style, prop.replace("*", "left")));
	    }
	    else if (typeof prop == "number") {
	        wt = wr = wb = wl = prop;
	    }
	    return {
	        top    : box.top + wt,
	        right  : box.right - wr,
	        bottom : box.bottom - wb,
	        left   : box.left + wl,
	        width  : box.right - box.left - wr - wl,
	        height : box.bottom - box.top - wb - wt
	    };
	}

	function getTransform(style) {
	    var transform$$1 = getPropertyValue(style, "transform");
	    if (transform$$1 == "none") {
	        return null;
	    }
	    var matrix = /^\s*matrix\(\s*(.*?)\s*\)\s*$/.exec(transform$$1);
	    if (matrix) {
	        var origin = getPropertyValue(style, "transform-origin");
	        matrix = matrix[1].split(/\s*,\s*/g).map(parseFloat);
	        origin = origin.split(/\s+/g).map(parseFloat);
	        return {
	            matrix: matrix,
	            origin: origin
	        };
	    }
	}

	function radiansToDegrees(radians) {
	    return ((180 * radians) / Math.PI) % 360;
	}

	function parseAngle(angle) {
	    var num = parseFloat(angle);
	    if (/grad$/.test(angle)) {
	        return Math.PI * num / 200;
	    }
	    else if (/rad$/.test(angle)) {
	        return num;
	    }
	    else if (/turn$/.test(angle)) {
	        return Math.PI * num * 2;
	    }
	    else if (/deg$/.test(angle)) {
	        return Math.PI * num / 180;
	    }
	}

	function setTransform(shape, m) {
	    m = new Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
	    shape.transform(m);
	    return m;
	}

	function setClipping(shape, clipPath) {
	    shape.clip(clipPath);
	}

	function addArcToPath(path, x, y, options) {
	    var points = new Arc$2([ x, y ], options).curvePoints(), i = 1;
	    while (i < points.length) {
	        path.curveTo(points[i++], points[i++], points[i++]);
	    }
	}

	function sanitizeRadius(r) {
	    if (r.x <= 0 || r.y <= 0) {
	        r.x = r.y = 0;
	    }
	    return r;
	}

	function adjustBorderRadiusForBox(box, rTL, rTR, rBR, rBL) {
	    // adjust border radiuses such that the sum of adjacent
	    // radiuses is not bigger than the length of the side.
	    // seems the correct algorithm is variant (3) from here:
	    // http://www.w3.org/Style/CSS/Tracker/issues/29?changelog
	    var tl_x = Math.max(0, rTL.x), tl_y = Math.max(0, rTL.y);
	    var tr_x = Math.max(0, rTR.x), tr_y = Math.max(0, rTR.y);
	    var br_x = Math.max(0, rBR.x), br_y = Math.max(0, rBR.y);
	    var bl_x = Math.max(0, rBL.x), bl_y = Math.max(0, rBL.y);

	    var f = Math.min(
	        box.width / (tl_x + tr_x),
	        box.height / (tr_y + br_y),
	        box.width / (br_x + bl_x),
	        box.height / (bl_y + tl_y)
	    );

	    if (f < 1) {
	        tl_x *= f; tl_y *= f;
	        tr_x *= f; tr_y *= f;
	        br_x *= f; br_y *= f;
	        bl_x *= f; bl_y *= f;
	    }

	    return {
	        tl: { x: tl_x, y: tl_y },
	        tr: { x: tr_x, y: tr_y },
	        br: { x: br_x, y: br_y },
	        bl: { x: bl_x, y: bl_y }
	    };
	}

	function elementRoundBox(element, box, type) {
	    var style = getComputedStyle(element);

	    var rTL = getBorderRadius(style, "top-left");
	    var rTR = getBorderRadius(style, "top-right");
	    var rBL = getBorderRadius(style, "bottom-left");
	    var rBR = getBorderRadius(style, "bottom-right");

	    if (type == "padding" || type == "content") {
	        var bt = getBorder(style, "top");
	        var br = getBorder(style, "right");
	        var bb = getBorder(style, "bottom");
	        var bl = getBorder(style, "left");
	        rTL.x -= bl.width; rTL.y -= bt.width;
	        rTR.x -= br.width; rTR.y -= bt.width;
	        rBR.x -= br.width; rBR.y -= bb.width;
	        rBL.x -= bl.width; rBL.y -= bb.width;
	        if (type == "content") {
	            var pt = parseFloat(getPropertyValue(style, "padding-top"));
	            var pr = parseFloat(getPropertyValue(style, "padding-right"));
	            var pb = parseFloat(getPropertyValue(style, "padding-bottom"));
	            var pl = parseFloat(getPropertyValue(style, "padding-left"));
	            rTL.x -= pl; rTL.y -= pt;
	            rTR.x -= pr; rTR.y -= pt;
	            rBR.x -= pr; rBR.y -= pb;
	            rBL.x -= pl; rBL.y -= pb;
	        }
	    }

	    if (typeof type == "number") {
	        rTL.x -= type; rTL.y -= type;
	        rTR.x -= type; rTR.y -= type;
	        rBR.x -= type; rBR.y -= type;
	        rBL.x -= type; rBL.y -= type;
	    }

	    return roundBox(box, rTL, rTR, rBR, rBL);
	}

	// Create a drawing.Path for a rounded rectangle.  Receives the
	// bounding box and the border-radiuses in CSS order (top-left,
	// top-right, bottom-right, bottom-left).  The radiuses must be
	// objects containing x (horiz. radius) and y (vertical radius).
	function roundBox(box, rTL0, rTR0, rBR0, rBL0) {
	    var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
	    var rTL = tmp.tl;
	    var rTR = tmp.tr;
	    var rBR = tmp.br;
	    var rBL = tmp.bl;
	    var path = new Path({ fill: null, stroke: null });
	    path.moveTo(box.left, box.top + rTL.y);
	    if (rTL.x) {
	        addArcToPath(path, box.left + rTL.x, box.top + rTL.y, {
	            startAngle: -180,
	            endAngle: -90,
	            radiusX: rTL.x,
	            radiusY: rTL.y
	        });
	    }
	    path.lineTo(box.right - rTR.x, box.top);
	    if (rTR.x) {
	        addArcToPath(path, box.right - rTR.x, box.top + rTR.y, {
	            startAngle: -90,
	            endAngle: 0,
	            radiusX: rTR.x,
	            radiusY: rTR.y
	        });
	    }
	    path.lineTo(box.right, box.bottom - rBR.y);
	    if (rBR.x) {
	        addArcToPath(path, box.right - rBR.x, box.bottom - rBR.y, {
	            startAngle: 0,
	            endAngle: 90,
	            radiusX: rBR.x,
	            radiusY: rBR.y
	        });
	    }
	    path.lineTo(box.left + rBL.x, box.bottom);
	    if (rBL.x) {
	        addArcToPath(path, box.left + rBL.x, box.bottom - rBL.y, {
	            startAngle: 90,
	            endAngle: 180,
	            radiusX: rBL.x,
	            radiusY: rBL.y
	        });
	    }
	    return path.close();
	}

	function formatCounter(val, style) {
	    var str = String(parseFloat(val));
	    switch (style) {
	      case "decimal-leading-zero":
	        if (str.length < 2) {
	            str = "0" + str;
	        }
	        return str;
	      case "lower-roman":
	        return arabicToRoman(val).toLowerCase();
	      case "upper-roman":
	        return arabicToRoman(val).toUpperCase();
	      case "lower-latin":
	      case "lower-alpha":
	        return alphaNumeral(val - 1);
	      case "upper-latin":
	      case "upper-alpha":
	        return alphaNumeral(val - 1).toUpperCase();
	      default:
	        return str;
	    }
	}

	function evalPseudoElementContent(element, content) {
	    function displayCounter(name, style, separator) {
	        if (!separator) {
	            return formatCounter(getCounter(name) || 0, style);
	        }
	        separator = separator.replace(/^\s*(["'])(.*)\1\s*$/, "$2");
	        return getAllCounters(name).map(function(val){
	            return formatCounter(val, style);
	        }).join(separator);
	    }
	    var a = splitProperty(content, /^\s+/);
	    var result = [], m;
	    a.forEach(function(el){
	        var tmp;
	        if ((m = /^\s*(["'])(.*)\1\s*$/.exec(el))) {
	            result.push(m[2].replace(/\\([0-9a-f]{4})/gi, function(s, p){
	                return String.fromCharCode(parseInt(p, 16));
	            }));
	        }
	        else if ((m = /^\s*counter\((.*?)\)\s*$/.exec(el))) {
	            tmp = splitProperty(m[1]);
	            result.push(displayCounter(tmp[0], tmp[1]));
	        }
	        else if ((m = /^\s*counters\((.*?)\)\s*$/.exec(el))) {
	            tmp = splitProperty(m[1]);
	            result.push(displayCounter(tmp[0], tmp[2], tmp[1]));
	        }
	        else if ((m = /^\s*attr\((.*?)\)\s*$/.exec(el))) {
	            result.push(element.getAttribute(m[1]) || "");
	        }
	        else {
	            result.push(el);
	        }
	    });
	    return result.join("");
	}

	function getCssText(style) {
	    if (style.cssText) {
	        return style.cssText;
	    }
	    // Status: NEW.  Report year: 2002.  Current year: 2014.
	    // Nice played, Mozillians.
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687
	    var result = [];
	    for (var i = 0; i < style.length; ++i) {
	        result.push(style[i] + ": " + getPropertyValue(style, style[i]));
	    }
	    return result.join(";\n");
	}

	function _renderWithPseudoElements(element, group) {
	    if (element.tagName == KENDO_PSEUDO_ELEMENT) {
	        _renderElement(element, group);
	        return;
	    }
	    var fake = [];
	    function pseudo(kind, place) {
	        var style = getComputedStyle(element, kind);
	        updateCounters(style);
	        if (style.content && style.content != "normal" && style.content != "none" && style.width != "0px") {
	            var psel = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
	            psel.style.cssText = getCssText(style);
	            psel.textContent = evalPseudoElementContent(element, style.content);
	            element.insertBefore(psel, place);
	            fake.push(psel);
	        }
	    }
	    pseudo(":before", element.firstChild);
	    pseudo(":after", null);
	    var saveClass = element.className;
	    element.className += " kendo-pdf-hide-pseudo-elements";
	    _renderElement(element, group);
	    element.className = saveClass;
	    fake.forEach(function(el){ element.removeChild(el); });
	}

	function _renderElement(element, group) {
	    var style = getComputedStyle(element);

	    var top = getBorder(style, "top");
	    var right = getBorder(style, "right");
	    var bottom = getBorder(style, "bottom");
	    var left = getBorder(style, "left");

	    var rTL0 = getBorderRadius(style, "top-left");
	    var rTR0 = getBorderRadius(style, "top-right");
	    var rBL0 = getBorderRadius(style, "bottom-left");
	    var rBR0 = getBorderRadius(style, "bottom-right");

	    var dir = getPropertyValue(style, "direction");

	    var backgroundColor = getPropertyValue(style, "background-color");
	    backgroundColor = parseColor$1(backgroundColor);

	    var backgroundImage = parseBackgroundImage( getPropertyValue(style, "background-image") );
	    var backgroundRepeat = splitProperty( getPropertyValue(style, "background-repeat") );
	    var backgroundPosition = splitProperty( getPropertyValue(style, "background-position") );
	    var backgroundOrigin = splitProperty( getPropertyValue(style, "background-origin") );
	    var backgroundSize = splitProperty( getPropertyValue(style, "background-size") );

	    if (browser.msie && browser.version < 10) {
	        // IE9 hacks.  getPropertyValue won't return the correct
	        // value.  Sucks that we have to do it here, I'd prefer to
	        // move it in getPropertyValue, but we don't have the
	        // element.
	        backgroundPosition = splitProperty(element.currentStyle.backgroundPosition);
	    }

	    var innerbox = innerBox(element.getBoundingClientRect(), "border-*-width", element);

	    // CSS "clip" property - if present, replace the group with a
	    // new one which is clipped.  This must happen before drawing
	    // the borders and background.
	    (function(){
	        var clip = getPropertyValue(style, "clip");
	        var m = /^\s*rect\((.*)\)\s*$/.exec(clip);
	        if (m) {
	            var a = m[1].split(/[ ,]+/g);
	            var top = a[0] == "auto" ? innerbox.top : parseFloat(a[0]) + innerbox.top;
	            var right = a[1] == "auto" ? innerbox.right : parseFloat(a[1]) + innerbox.left;
	            var bottom = a[2] == "auto" ? innerbox.bottom : parseFloat(a[2]) + innerbox.top;
	            var left = a[3] == "auto" ? innerbox.left : parseFloat(a[3]) + innerbox.left;
	            var tmp = new Group();
	            var clipPath = new Path()
	                .moveTo(left, top)
	                .lineTo(right, top)
	                .lineTo(right, bottom)
	                .lineTo(left, bottom)
	                .close();
	            setClipping(tmp, clipPath);
	            group.append(tmp);
	            group = tmp;
	            updateClipbox(clipPath);
	        }
	    })();

	    var boxes, i, cells;
	    var display = getPropertyValue(style, "display");

	    if (display == "table-row") {
	        // because of rowspan/colspan, we shouldn't draw background of table row elements on the
	        // box given by its getBoundingClientRect, because if we do we risk overwritting a
	        // previously rendered cell.  https://github.com/telerik/kendo/issues/4881
	        boxes = [];
	        for (i = 0, cells = element.children; i < cells.length; ++i) {
	            boxes.push(cells[i].getBoundingClientRect());
	        }
	    } else {
	        boxes = element.getClientRects();
	        if (boxes.length == 1) {
	            // Workaround the missing borders in Chrome!  getClientRects() boxes contains values
	            // rounded to integer.  getBoundingClientRect() appears to work fine.  We still need
	            // getClientRects() to support cases where there are more boxes (continued inline
	            // elements that might have border/background).
	            boxes = [ element.getBoundingClientRect() ];
	        }
	    }

	    // This function workarounds another Chrome bug, where boxes returned for a table with
	    // border-collapse: collapse will overlap the table border.  Our rendering is not perfect in
	    // such case anyway, but with this is better than without it.
	    boxes = adjustBoxes(boxes);

	    for (i = 0; i < boxes.length; ++i) {
	        drawOneBox(boxes[i], i === 0, i == boxes.length - 1);
	    }

	    // Render links as separate groups.  We can't use boxes returned by element's getClientRects
	    // because if display type is "inline" (default for <a>), boxes will not include the height of
	    // images inside.  https://github.com/telerik/kendo-ui-core/issues/3359
	    if (element.tagName == "A" && element.href && !/^#?$/.test(element.getAttribute("href"))) {
	        if (!nodeInfo._avoidLinks || !matches(element, nodeInfo._avoidLinks)) {
	            var r = document.createRange();
	            r.selectNodeContents(element);
	            slice$1(r.getClientRects()).forEach(function(box){
	                var g = new Group();
	                g._pdfLink = {
	                    url    : element.href,
	                    top    : box.top,
	                    right  : box.right,
	                    bottom : box.bottom,
	                    left   : box.left
	                };
	                group.append(g);
	            });
	        }
	    }

	    if (boxes.length > 0 && display == "list-item" && !element.getAttribute("kendo-no-bullet")) {
	        drawBullet(boxes[0]);
	    }

	    // overflow: hidden/auto - if present, replace the group with
	    // a new one clipped by the inner box.
	    (function(){
	        function clipit() {
	            var clipPath = elementRoundBox(element, innerbox, "padding");
	            var tmp = new Group();
	            setClipping(tmp, clipPath);
	            group.append(tmp);
	            group = tmp;
	            updateClipbox(clipPath);
	        }
	        if (isFormField(element)) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow"))) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-x"))) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-y"))) {
	            clipit();
	        }
	    })();

	    if (!maybeRenderWidget(element, group)) {
	        renderContents(element, group);
	    }

	    return group; // only utility functions after this line.

	    function adjustBoxes(boxes) {
	        if (/^td$/i.test(element.tagName)) {
	            var table = nodeInfo.table;
	            if (table && getPropertyValue(table.style, "border-collapse") == "collapse") {
	                var tableBorderLeft = getBorder(table.style, "left").width;
	                var tableBorderTop = getBorder(table.style, "top").width;
	                // check if we need to adjust
	                if (tableBorderLeft === 0 && tableBorderTop === 0) {
	                    return boxes; // nope
	                }
	                var tableBox = table.element.getBoundingClientRect();
	                var firstCell = table.element.rows[0].cells[0];
	                var firstCellBox = firstCell.getBoundingClientRect();
	                if (firstCellBox.top == tableBox.top || firstCellBox.left == tableBox.left) {
	                    return slice$1(boxes).map(function(box){
	                        return {
	                            left   : box.left + tableBorderLeft,
	                            top    : box.top + tableBorderTop,
	                            right  : box.right + tableBorderLeft,
	                            bottom : box.bottom + tableBorderTop,
	                            height : box.height,
	                            width  : box.width
	                        };
	                    });
	                }
	            }
	        }
	        return boxes;
	    }

	    // this function will be called to draw each border.  it
	    // draws starting at origin and the resulted path must be
	    // translated/rotated to be placed in the proper position.
	    //
	    // arguments are named as if it draws the top border:
	    //
	    //    - `len` the length of the edge
	    //    - `Wtop` the width of the edge (i.e. border-top-width)
	    //    - `Wleft` the width of the left edge (border-left-width)
	    //    - `Wright` the width of the right edge
	    //    - `rl` and `rl` -- the border radius on the left and right
	    //      (objects containing x and y, for horiz/vertical radius)
	    //    - `transform` -- transformation to apply
	    //
	    function drawEdge(color, len, Wtop, Wleft, Wright, rl, rr, transform$$1) {
	        if (Wtop <= 0) {
	            return;
	        }

	        var path, edge = new Group();
	        setTransform(edge, transform$$1);
	        group.append(edge);

	        sanitizeRadius(rl);
	        sanitizeRadius(rr);

	        // draw main border.  this is the area without the rounded corners
	        path = new Path({
	            fill: { color: color },
	            stroke: null
	        });
	        edge.append(path);
	        path.moveTo(rl.x ? Math.max(rl.x, Wleft) : 0, 0)
	            .lineTo(len - (rr.x ? Math.max(rr.x, Wright) : 0), 0)
	            .lineTo(len - Math.max(rr.x, Wright), Wtop)
	            .lineTo(Math.max(rl.x, Wleft), Wtop)
	            .close();

	        if (rl.x) {
	            drawRoundCorner(Wleft, rl, [ -1, 0, 0, 1, rl.x, 0 ]);
	        }

	        if (rr.x) {
	            drawRoundCorner(Wright, rr, [ 1, 0, 0, 1, len - rr.x, 0 ]);
	        }

	        // draws one round corner, starting at origin (needs to be
	        // translated/rotated to be placed properly).
	        function drawRoundCorner(Wright, r, transform$$1) {
	            var angle = Math.PI/2 * Wright / (Wright + Wtop);

	            // not sanitizing this one, because negative values
	            // are useful to fill the box correctly.
	            var ri = {
	                x: r.x - Wright,
	                y: r.y - Wtop
	            };

	            var path = new Path({
	                fill: { color: color },
	                stroke: null
	            }).moveTo(0, 0);

	            setTransform(path, transform$$1);

	            addArcToPath(path, 0, r.y, {
	                startAngle: -90,
	                endAngle: -radiansToDegrees(angle),
	                radiusX: r.x,
	                radiusY: r.y
	            });

	            if (ri.x > 0 && ri.y > 0) {
	                path.lineTo(ri.x * Math.cos(angle), r.y - ri.y * Math.sin(angle));
	                addArcToPath(path, 0, r.y, {
	                    startAngle: -radiansToDegrees(angle),
	                    endAngle: -90,
	                    radiusX: ri.x,
	                    radiusY: ri.y,
	                    anticlockwise: true
	                });
	            }
	            else if (ri.x > 0) {
	                path.lineTo(ri.x, Wtop)
	                    .lineTo(0, Wtop);
	            }
	            else {
	                path.lineTo(ri.x, Wtop)
	                    .lineTo(ri.x, 0);
	            }

	            edge.append(path.close());
	        }
	    }

	    function drawBackground(box) {
	        var background = new Group();
	        setClipping(background, roundBox(box, rTL0, rTR0, rBR0, rBL0));
	        group.append(background);

	        if (backgroundColor) {
	            var path = new Path({
	                fill: { color: backgroundColor.toCssRgba() },
	                stroke: null
	            });
	            path.moveTo(box.left, box.top)
	                .lineTo(box.right, box.top)
	                .lineTo(box.right, box.bottom)
	                .lineTo(box.left, box.bottom)
	                .close();
	            background.append(path);
	        }

	        for (var i = backgroundImage.length; --i >= 0;) {
	            drawOneBackground(
	                background, box,
	                backgroundImage[i],
	                backgroundRepeat[i % backgroundRepeat.length],
	                backgroundPosition[i % backgroundPosition.length],
	                backgroundOrigin[i % backgroundOrigin.length],
	                backgroundSize[i % backgroundSize.length]
	            );
	        }
	    }

	    function drawOneBackground(group, box, background, backgroundRepeat, backgroundPosition, backgroundOrigin, backgroundSize) {
	        if (!background || (background == "none")) {
	            return;
	        }

	        if (background.type == "url") {
	            // SVG taints the canvas, can't draw it.
	            if (/^url\(\"data:image\/svg/i.test(background.url)) {
	                return;
	            }
	            var img = IMAGE_CACHE[background.url];
	            if (img && img.width > 0 && img.height > 0) {
	                drawBackgroundImage(group, box, img.width, img.height, function(group, rect){
	                    group.append(new Image$1(background.url, rect));
	                });
	            }
	        } else if (background.type == "linear") {
	            drawBackgroundImage(group, box, box.width, box.height, gradientRenderer(background));
	        } else {
	            return;
	        }

	        function drawBackgroundImage(group, box, img_width, img_height, renderBG) {
	            var aspect_ratio = img_width / img_height, f;

	            // for background-origin: border-box the box is already appropriate
	            var orgBox = box;
	            if (backgroundOrigin == "content-box") {
	                orgBox = innerBox(orgBox, "border-*-width", element);
	                orgBox = innerBox(orgBox, "padding-*", element);
	            } else if (backgroundOrigin == "padding-box") {
	                orgBox = innerBox(orgBox, "border-*-width", element);
	            }

	            if (!/^\s*auto(\s+auto)?\s*$/.test(backgroundSize)) {
	                if (backgroundSize == "contain") {
	                    f = Math.min(orgBox.width / img_width,
	                                 orgBox.height / img_height);
	                    img_width *= f;
	                    img_height *= f;
	                }
	                else if (backgroundSize == "cover") {
	                    f = Math.max(orgBox.width / img_width,
	                                 orgBox.height / img_height);
	                    img_width *= f;
	                    img_height *= f;
	                }
	                else {
	                    var size = backgroundSize.split(/\s+/g);
	                    // compute width
	                    if (/%$/.test(size[0])) {
	                        img_width = orgBox.width * parseFloat(size[0]) / 100;
	                    } else {
	                        img_width = parseFloat(size[0]);
	                    }
	                    // compute height
	                    if (size.length == 1 || size[1] == "auto") {
	                        img_height = img_width / aspect_ratio;
	                    } else if (/%$/.test(size[1])) {
	                        img_height = orgBox.height * parseFloat(size[1]) / 100;
	                    } else {
	                        img_height = parseFloat(size[1]);
	                    }
	                }
	            }

	            var pos = String(backgroundPosition);

	            // IE sometimes reports single-word positions
	            // https://github.com/telerik/kendo-ui-core/issues/2786
	            //
	            // it seems to switch to percentages when the horizontal
	            // position is not "center", therefore we don't handle
	            // multi-word cases here.  All other browsers return
	            // percentages or pixels instead of keywords.  At least
	            // for now...
	            switch (pos) {
	              case "bottom" : pos = "50% 100%"; break;
	              case "top"    : pos = "50% 0"; break;
	              case "left"   : pos = "0 50%"; break;
	              case "right"  : pos = "100% 50%"; break;
	              case "center" : pos = "50% 50%"; break;
	            }

	            pos = pos.split(/\s+/);
	            if (pos.length == 1) {
	                pos[1] = "50%";
	            }

	            if (/%$/.test(pos[0])) {
	                pos[0] = parseFloat(pos[0]) / 100 * (orgBox.width - img_width);
	            } else {
	                pos[0] = parseFloat(pos[0]);
	            }
	            if (/%$/.test(pos[1])) {
	                pos[1] = parseFloat(pos[1]) / 100 * (orgBox.height - img_height);
	            } else {
	                pos[1] = parseFloat(pos[1]);
	            }

	            var rect = new Rect([ orgBox.left + pos[0], orgBox.top + pos[1] ], [ img_width, img_height ]);

	            // XXX: background-repeat could be implemented more
	            //      efficiently as a fill pattern (at least for PDF
	            //      output, probably SVG too).

	            function rewX() {
	                while (rect.origin.x > box.left) {
	                    rect.origin.x -= img_width;
	                }
	            }

	            function rewY() {
	                while (rect.origin.y > box.top) {
	                    rect.origin.y -= img_height;
	                }
	            }

	            function repeatX() {
	                while (rect.origin.x < box.right) {
	                    renderBG(group, rect.clone());
	                    rect.origin.x += img_width;
	                }
	            }

	            if (backgroundRepeat == "no-repeat") {
	                renderBG(group, rect);
	            }
	            else if (backgroundRepeat == "repeat-x") {
	                rewX();
	                repeatX();
	            }
	            else if (backgroundRepeat == "repeat-y") {
	                rewY();
	                while (rect.origin.y < box.bottom) {
	                    renderBG(group, rect.clone());
	                    rect.origin.y += img_height;
	                }
	            }
	            else if (backgroundRepeat == "repeat") {
	                rewX();
	                rewY();
	                var origin = rect.origin.clone();
	                while (rect.origin.y < box.bottom) {
	                    rect.origin.x = origin.x;
	                    repeatX();
	                    rect.origin.y += img_height;
	                }
	            }
	        }
	    }

	    function drawBullet() {
	        var listStyleType = getPropertyValue(style, "list-style-type");
	        if (listStyleType == "none") {
	            return;
	        }
	        var listStylePosition = getPropertyValue(style, "list-style-position");

	        function _drawBullet(f) {
	            saveStyle(element, function(){
	                element.style.position = "relative";
	                var bullet = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
	                bullet.style.position = "absolute";
	                bullet.style.boxSizing = "border-box";
	                if (listStylePosition == "outside") {
	                    bullet.style.width = "6em";
	                    bullet.style.left = "-6.8em";
	                    bullet.style.textAlign = "right";
	                } else {
	                    bullet.style.left = "0px";
	                }
	                f(bullet);
	                element.insertBefore(bullet, element.firstChild);
	                renderElement(bullet, group);
	                element.removeChild(bullet);
	            });
	        }

	        function elementIndex(f) {
	            var a = element.parentNode.children;
	            var k = element.getAttribute("kendo-split-index");
	            if (k != null) {
	                return f(k|0, a.length);
	            }
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] === element) {
	                    return f(i, a.length);
	                }
	            }
	        }

	        switch (listStyleType) {
	          case "circle":
	          case "disc":
	          case "square":
	            _drawBullet(function(bullet){
	                // XXX: the science behind these values is called "trial and error".
	                bullet.style.fontSize = "60%";
	                bullet.style.lineHeight = "200%";
	                bullet.style.paddingRight = "0.5em";
	                bullet.style.fontFamily = "DejaVu Serif";
	                bullet.innerHTML = {
	                    "disc"   : "\u25cf",
	                    "circle" : "\u25ef",
	                    "square" : "\u25a0"
	                }[listStyleType];
	            });
	            break;

	          case "decimal":
	          case "decimal-leading-zero":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    ++idx;
	                    if (listStyleType == "decimal-leading-zero" && idx < 10) {
	                        idx = "0" + idx;
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;

	          case "lower-roman":
	          case "upper-roman":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    idx = arabicToRoman(idx + 1);
	                    if (listStyleType == "upper-roman") {
	                        idx = idx.toUpperCase();
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;

	          case "lower-latin":
	          case "lower-alpha":
	          case "upper-latin":
	          case "upper-alpha":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    idx = alphaNumeral(idx);
	                    if (/^upper/i.test(listStyleType)) {
	                        idx = idx.toUpperCase();
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;
	        }
	    }

	    // draws a single border box
	    function drawOneBox(box, isFirst, isLast) {
	        if (box.width === 0 || box.height === 0) {
	            return;
	        }

	        drawBackground(box);

	        var shouldDrawLeft = (left.width > 0 && ((isFirst && dir == "ltr") || (isLast && dir == "rtl")));
	        var shouldDrawRight = (right.width > 0 && ((isLast && dir == "ltr") || (isFirst && dir == "rtl")));

	        // The most general case is that the 4 borders have different widths and border
	        // radiuses.  The way that is handled is by drawing 3 Paths for each border: the
	        // straight line, and two round corners which represent half of the entire rounded
	        // corner.  To simplify code those shapes are drawed at origin (by the drawEdge
	        // function), then translated/rotated into the right position.
	        //
	        // However, this leads to poor results due to rounding in the simpler cases where
	        // borders are straight lines.  Therefore we handle a few such cases separately with
	        // straight lines. C^wC^wC^w -- nope, scratch that.  poor rendering was because of a bug
	        // in Chrome (getClientRects() returns rounded integer values rather than exact floats.
	        // web dev is still a ghetto.)

	        // first, just in case there is no border...
	        if (top.width === 0 && left.width === 0 && right.width === 0 && bottom.width === 0) {
	            return;
	        }

	        // START paint borders
	        // if all borders have equal colors...
	        if (top.color == right.color && top.color == bottom.color && top.color == left.color) {

	            // if same widths too, we can draw the whole border by stroking a single path.
	            if (top.width == right.width && top.width == bottom.width && top.width == left.width)
	            {
	                if (shouldDrawLeft && shouldDrawRight) {
	                    // reduce box by half the border width, so we can draw it by stroking.
	                    box = innerBox(box, top.width/2);

	                    // adjust the border radiuses, again by top.width/2, and make the path element.
	                    var path = elementRoundBox(element, box, top.width/2);
	                    path.options.stroke = {
	                        color: top.color,
	                        width: top.width
	                    };
	                    group.append(path);
	                    return;
	                }
	            }
	        }

	        // if border radiuses are zero and widths are at most one pixel, we can again use simple
	        // paths.
	        if (rTL0.x === 0 && rTR0.x === 0 && rBR0.x === 0 && rBL0.x === 0) {
	            // alright, 1.9px will do as well.  the difference in color blending should not be
	            // noticeable.
	            if (top.width < 2 && left.width < 2 && right.width < 2 && bottom.width < 2) {
	                // top border
	                if (top.width > 0) {
	                    group.append(
	                        new Path({
	                            stroke: { width: top.width, color: top.color }
	                        })
	                            .moveTo(box.left, box.top + top.width/2)
	                            .lineTo(box.right, box.top + top.width/2)
	                    );
	                }

	                // bottom border
	                if (bottom.width > 0) {
	                    group.append(
	                        new Path({
	                            stroke: { width: bottom.width, color: bottom.color }
	                        })
	                            .moveTo(box.left, box.bottom - bottom.width/2)
	                            .lineTo(box.right, box.bottom - bottom.width/2)
	                    );
	                }

	                // left border
	                if (shouldDrawLeft) {
	                    group.append(
	                        new Path({
	                            stroke: { width: left.width, color: left.color }
	                        })
	                            .moveTo(box.left + left.width/2, box.top)
	                            .lineTo(box.left + left.width/2, box.bottom)
	                    );
	                }

	                // right border
	                if (shouldDrawRight) {
	                    group.append(
	                        new Path({
	                            stroke: { width: right.width, color: right.color }
	                        })
	                            .moveTo(box.right - right.width/2, box.top)
	                            .lineTo(box.right - right.width/2, box.bottom)
	                    );
	                }

	                return;
	            }
	        }
	        // END paint borders

	        var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
	        var rTL = tmp.tl;
	        var rTR = tmp.tr;
	        var rBR = tmp.br;
	        var rBL = tmp.bl;

	        // top border
	        drawEdge(top.color,
	                 box.width, top.width, left.width, right.width,
	                 rTL, rTR,
	                 [ 1, 0, 0, 1, box.left, box.top ]);

	        // bottom border
	        drawEdge(bottom.color,
	                 box.width, bottom.width, right.width, left.width,
	                 rBR, rBL,
	                 [ -1, 0, 0, -1, box.right, box.bottom ]);

	        // for left/right borders we need to invert the border-radiuses
	        function inv(p) {
	            return { x: p.y, y: p.x };
	        }

	        // left border
	        drawEdge(left.color,
	                 box.height, left.width, bottom.width, top.width,
	                 inv(rBL), inv(rTL),
	                 [ 0, -1, 1, 0, box.left, box.bottom ]);

	        // right border
	        drawEdge(right.color,
	                 box.height, right.width, top.width, bottom.width,
	                 inv(rTR), inv(rBR),
	                 [ 0, 1, -1, 0, box.right, box.top ]);
	    }
	}

	function gradientRenderer(gradient) {
	    return function(group, rect) {
	        var width = rect.width(), height = rect.height();

	        switch (gradient.type) {
	          case "linear":

	            // figure out the angle.
	            var angle = gradient.angle != null ? gradient.angle : Math.PI;
	            switch (gradient.to) {
	              case "top":
	                angle = 0;
	                break;
	              case "left":
	                angle = -Math.PI / 2;
	                break;
	              case "bottom":
	                angle = Math.PI;
	                break;
	              case "right":
	                angle = Math.PI / 2;
	                break;
	              case "top left": case "left top":
	                angle = -Math.atan2(height, width);
	                break;
	              case "top right": case "right top":
	                angle = Math.atan2(height, width);
	                break;
	              case "bottom left": case "left bottom":
	                angle = Math.PI + Math.atan2(height, width);
	                break;
	              case "bottom right": case "right bottom":
	                angle = Math.PI - Math.atan2(height, width);
	                break;
	            }

	            if (gradient.reverse) {
	                angle -= Math.PI;
	            }

	            // limit the angle between 0..2PI
	            angle %= 2 * Math.PI;
	            if (angle < 0) {
	                angle += 2 * Math.PI;
	            }

	            // compute gradient's start/end points.  here len is the length of the gradient line
	            // and x,y is the end point relative to the center of the rectangle in conventional
	            // (math) axis direction.

	            // this is the original (unscaled) length of the gradient line.  needed to deal with
	            // absolutely positioned color stops.  formula from the CSS spec:
	            // http://dev.w3.org/csswg/css-images-3/#linear-gradient-syntax
	            var pxlen = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));

	            // The math below is pretty simple, but it took a while to figure out.  We compute x
	            // and y, the *end* of the gradient line.  However, we want to transform them into
	            // element-based coordinates (SVG's gradientUnits="objectBoundingBox").  That means,
	            // x=0 is the left edge, x=1 is the right edge, y=0 is the top edge and y=1 is the
	            // bottom edge.
	            //
	            // A naive approach would use the original angle for these calculations.  Say we'd
	            // like to draw a gradient angled at 45deg in a 100x400 box.  When we use
	            // objectBoundingBox, the renderer will draw it in a 1x1 *square* box, and then
	            // scale that to the desired dimensions.  The 45deg angle will look more like 70deg
	            // after scaling.  SVG (http://www.w3.org/TR/SVG/pservers.html#LinearGradients) says
	            // the following:
	            //
	            //     When gradientUnits="objectBoundingBox" and 'gradientTransform' is the
	            //     identity matrix, the normal of the linear gradient is perpendicular to the
	            //     gradient vector in object bounding box space (i.e., the abstract coordinate
	            //     system where (0,0) is at the top/left of the object bounding box and (1,1) is
	            //     at the bottom/right of the object bounding box). When the object's bounding
	            //     box is not square, the gradient normal which is initially perpendicular to
	            //     the gradient vector within object bounding box space may render
	            //     non-perpendicular relative to the gradient vector in user space. If the
	            //     gradient vector is parallel to one of the axes of the bounding box, the
	            //     gradient normal will remain perpendicular. This transformation is due to
	            //     application of the non-uniform scaling transformation from bounding box space
	            //     to user space.
	            //
	            // which is an extremely long and confusing way to tell what I just said above.
	            //
	            // For this reason we need to apply the reverse scaling to the original angle, so
	            // that when it'll finally be rendered it'll actually be at the desired slope.  Now
	            // I'll let you figure out the math yourself.

	            var scaledAngle = Math.atan(width * Math.tan(angle) / height);
	            var sin = Math.sin(scaledAngle), cos = Math.cos(scaledAngle);
	            var len = Math.abs(sin) + Math.abs(cos);
	            var x = len/2 * sin;
	            var y = len/2 * cos;

	            // Because of the arctangent, our scaledAngle ends up between -PI/2..PI/2, possibly
	            // losing the intended direction of the gradient.  The following fixes it.
	            if (angle > Math.PI/2 && angle <= 3*Math.PI/2) {
	                x = -x;
	                y = -y;
	            }

	            // compute the color stops.
	            var implicit = [], right = 0;
	            var stops = gradient.stops.map(function(s, i){
	                var offset = s.percent;
	                if (offset) {
	                    offset = parseFloat(offset) / 100;
	                } else if (s.length) {
	                    offset = parseFloat(s.length) / pxlen;
	                } else if (i === 0) {
	                    offset = 0;
	                } else if (i == gradient.stops.length - 1) {
	                    offset = 1;
	                }
	                var stop = {
	                    color: s.color.toCssRgba(),
	                    offset: offset
	                };
	                if (offset != null) {
	                    right = offset;
	                    // fix implicit offsets
	                    implicit.forEach(function(s, i){
	                        var stop = s.stop;
	                        stop.offset = s.left + (right - s.left) * (i + 1) / (implicit.length + 1);
	                    });
	                    implicit = [];
	                } else {
	                    implicit.push({ left: right, stop: stop });
	                }
	                return stop;
	            });

	            var start = [ 0.5 - x, 0.5 + y ];
	            var end = [ 0.5 + x, 0.5 - y ];

	            // finally, draw it.
	            group.append(
	                Path.fromRect(rect)
	                    .stroke(null)
	                    .fill(new LinearGradient({
	                        start     : start,
	                        end       : end,
	                        stops     : stops,
	                        userSpace : false
	                    }))
	            );
	            break;
	          case "radial":
	            // XXX:
	            if (window.console && window.console.log) {
	                window.console.log("Radial gradients are not yet supported in HTML renderer");
	            }
	            break;
	        }
	    };
	}

	function maybeRenderWidget(element, group) {
	    var visual;

	    if (element._kendoExportVisual) {
	        visual = element._kendoExportVisual();
	    } else if (window.kendo && window.kendo.jQuery && element.getAttribute(window.kendo.attr("role"))) {
	        var widget = window.kendo.widgetInstance(window.kendo.jQuery(element));
	        if (widget && (widget.exportDOMVisual || widget.exportVisual)) {
	            if (widget.exportDOMVisual) {
	                visual = widget.exportDOMVisual();
	            } else {
	                visual = widget.exportVisual();
	            }
	        }
	    }

	    if (!visual) {
	        return false;
	    }

	    var wrap$$1 = new Group();
	    wrap$$1.children.push(visual);

	    var bbox = element.getBoundingClientRect();
	    wrap$$1.transform(transform().translate(bbox.left, bbox.top));

	    group.append(wrap$$1);

	    return true;
	}

	function renderImage(element, url, group) {
	    var box = getContentBox(element);
	    var rect = new Rect([ box.left, box.top ], [ box.width, box.height ]);
	    var image = new Image$1(url, rect);
	    setClipping(image, elementRoundBox(element, box, "content"));
	    group.append(image);
	}

	function zIndexSort(a, b) {
	    var sa = getComputedStyle(a);
	    var sb = getComputedStyle(b);
	    var za = parseFloat(getPropertyValue(sa, "z-index"));
	    var zb = parseFloat(getPropertyValue(sb, "z-index"));
	    var pa = getPropertyValue(sa, "position");
	    var pb = getPropertyValue(sb, "position");
	    if (isNaN(za) && isNaN(zb)) {
	        if ((/static|absolute/.test(pa)) && (/static|absolute/.test(pb))) {
	            return 0;
	        }
	        if (pa == "static") {
	            return -1;
	        }
	        if (pb == "static") {
	            return 1;
	        }
	        return 0;
	    }
	    if (isNaN(za)) {
	        return zb === 0 ? 0 : zb > 0 ? -1 : 1;
	    }
	    if (isNaN(zb)) {
	        return za === 0 ? 0 : za > 0 ? 1 : -1;
	    }
	    return parseFloat(za) - parseFloat(zb);
	}

	function isFormField(element) {
	    return /^(?:textarea|select|input)$/i.test(element.tagName);
	}

	function getSelectedOption(element) {
	    if (element.selectedOptions && element.selectedOptions.length > 0) {
	        return element.selectedOptions[0];
	    }
	    return element.options[element.selectedIndex];
	}

	function renderCheckbox(element, group) {
	    var style = getComputedStyle(element);
	    var color = getPropertyValue(style, "color");
	    var box = element.getBoundingClientRect();
	    if (element.type == "checkbox") {
	        group.append(
	            Path.fromRect(
	                new Rect([ box.left+1, box.top+1 ],
	                             [ box.width-2, box.height-2 ])
	            ).stroke(color, 1)
	        );
	        if (element.checked) {
	            // fill a rectangle inside?  looks kinda ugly.
	            // group.append(
	            //     Path.fromRect(
	            //         new geo.Rect([ box.left+4, box.top+4 ],
	            //                      [ box.width-8, box.height-8])
	            //     ).fill(color).stroke(null)
	            // );

	            // let's draw a checkmark instead.  artistic, eh?
	            group.append(
	                new Path()
	                    .stroke(color, 1.2)
	                    .moveTo(box.left + 0.22 * box.width,
	                            box.top + 0.55 * box.height)
	                    .lineTo(box.left + 0.45 * box.width,
	                            box.top + 0.75 * box.height)
	                    .lineTo(box.left + 0.78 * box.width,
	                            box.top + 0.22 * box.width)
	            );
	        }
	    } else {
	        group.append(
	            new Circle(
	                new Circle$2([
	                    (box.left + box.right) / 2,
	                    (box.top + box.bottom) / 2
	                ], Math.min(box.width-2, box.height-2) / 2)
	            ).stroke(color, 1)
	        );
	        if (element.checked) {
	            group.append(
	                new Circle(
	                    new Circle$2([
	                        (box.left + box.right) / 2,
	                        (box.top + box.bottom) / 2
	                    ], Math.min(box.width-8, box.height-8) / 2)
	                ).fill(color).stroke(null)
	            );
	        }
	    }
	}

	function renderFormField(element, group) {
	    var tag = element.tagName.toLowerCase();
	    if (tag == "input" && (element.type == "checkbox" || element.type == "radio")) {
	        return renderCheckbox(element, group);
	    }
	    var p = element.parentNode;
	    var doc = element.ownerDocument;
	    var el = doc.createElement(KENDO_PSEUDO_ELEMENT);
	    var option;
	    el.style.cssText = getCssText(getComputedStyle(element));
	    if (tag == "input") {
	        el.style.whiteSpace = "pre";
	    }
	    if (tag == "select" || tag == "textarea") {
	        el.style.overflow = "auto";
	    }
	    if (tag == "select") {
	        if (element.multiple) {
	            for (var i = 0; i < element.options.length; ++i) {
	                option = doc.createElement(KENDO_PSEUDO_ELEMENT);
	                option.style.cssText = getCssText(getComputedStyle(element.options[i]));
	                option.style.display = "block"; // IE9 messes up without this
	                option.textContent = element.options[i].textContent;
	                el.appendChild(option);
	            }
	        } else {
	            option = getSelectedOption(element);
	            if (option) {
	                el.textContent = option.textContent;
	            }
	        }
	    } else {
	        el.textContent = element.value;
	    }
	    p.insertBefore(el, element);
	    el.scrollLeft = element.scrollLeft;
	    el.scrollTop = element.scrollTop;

	    // must temporarily hide the original element, otherwise it
	    // may affect layout of the fake element we want to render.
	    element.style.display = "none";

	    renderContents(el, group);
	    element.style.display = "";
	    p.removeChild(el);
	}

	function renderContents(element, group) {
	    if (nodeInfo._stackingContext.element === element) {
	        // the group that was set in pushNodeInfo might have
	        // changed due to clipping/transforms, update it here.
	        nodeInfo._stackingContext.group = group;
	    }
	    switch (element.tagName.toLowerCase()) {
	      case "img":
	        renderImage(element, element.src, group);
	        break;

	      case "canvas":
	        try {
	            renderImage(element, element.toDataURL("image/png"), group);
	        } catch (ex) {
	            // tainted; can't draw it, ignore.
	        }
	        break;

	      case "textarea":
	      case "input":
	      case "select":
	        renderFormField(element, group);
	        break;

	      default:
	        var children = [], floats = [], positioned = [];
	        for (var i = element.firstChild; i; i = i.nextSibling) {
	            switch (i.nodeType) {
	              case 3:         // Text
	                if (/\S/.test(i.data)) {
	                    renderText(element, i, group);
	                }
	                break;
	              case 1:         // Element
	                var style = getComputedStyle(i);
	                var floating = getPropertyValue(style, "float");
	                var position = getPropertyValue(style, "position");
	                if (position != "static") {
	                    positioned.push(i);
	                }
	                else if (floating != "none") {
	                    floats.push(i);
	                } else {
	                    children.push(i);
	                }
	                break;
	            }
	        }

	        mergeSort(children, zIndexSort).forEach(function(el){ renderElement(el, group); });
	        mergeSort(floats, zIndexSort).forEach(function(el){ renderElement(el, group); });
	        mergeSort(positioned, zIndexSort).forEach(function(el){ renderElement(el, group); });
	    }
	}

	function renderText(element, node, group) {
	    if (emptyClipbox()) {
	        return;
	    }
	    var style = getComputedStyle(element);

	    if (parseFloat(getPropertyValue(style, "text-indent")) < -500) {
	        // assume it should not be displayed.  the slider's
	        // draggable handle displays a Drag text for some reason,
	        // having text-indent: -3333px.
	        return;
	    }

	    var text = node.data;
	    var start = 0;
	    var end = text.search(/\S\s*$/) + 1;

	    if (!end) {
	        return; // whitespace-only node
	    }

	    var fontSize = getPropertyValue(style, "font-size");
	    var lineHeight = getPropertyValue(style, "line-height");

	    // simply getPropertyValue("font") doesn't work in Firefox :-\
	    var font = [
	        getPropertyValue(style, "font-style"),
	        getPropertyValue(style, "font-variant"),
	        getPropertyValue(style, "font-weight"),
	        fontSize, // no need for line height here; it breaks layout in FF
	        getPropertyValue(style, "font-family")
	    ].join(" ");

	    fontSize = parseFloat(fontSize);
	    lineHeight = parseFloat(lineHeight);

	    if (fontSize === 0) {
	        return;
	    }

	    var color = getPropertyValue(style, "color");
	    var range = element.ownerDocument.createRange();
	    var align$$1 = getPropertyValue(style, "text-align");
	    var isJustified = align$$1 == "justify";
	    var columnCount = getPropertyValue(style, "column-count", 1);
	    var whiteSpace = getPropertyValue(style, "white-space");
	    var textTransform = getPropertyValue(style, "text-transform");

	    // IE shrinks the text with text-overflow: ellipsis,
	    // apparently because the returned bounding box for the range
	    // is limited to the visible area minus space for the dots,
	    // instead of being the full width of the text.
	    //
	    // https://github.com/telerik/kendo/issues/5232
	    var textOverflow, saveTextOverflow;
	    if (browser.msie || browser.edge) {
	        textOverflow = style.textOverflow;             // computed style
	        if (textOverflow == "ellipsis") {
	            saveTextOverflow = element.style.textOverflow; // own style.
	            element.style.textOverflow = "clip";
	        }
	    }

	    // A line of 500px, with a font of 12px, contains an average of 80 characters, but since we
	    // err, we'd like to guess a bigger number rather than a smaller one.  Multiplying by 5
	    // seems to be a good option.
	    var estimateLineLength = element.getBoundingClientRect().width / fontSize * 5;
	    if (estimateLineLength === 0) {
	        estimateLineLength = 500;
	    }

	    // we'll maintain this so we can workaround bugs in Chrome's Range.getClientRects
	    // https://github.com/telerik/kendo/issues/5740
	    var prevLineBottom = null;

	    var underline = nodeInfo["underline"];
	    var lineThrough = nodeInfo["line-through"];
	    var overline = nodeInfo["overline"];
	    var hasDecoration = underline || lineThrough || overline;

	    // doChunk returns true when all text has been rendered
	    while (!doChunk()) {}

	    if ((browser.msie || browser.edge) && textOverflow == "ellipsis") {
	        element.style.textOverflow = saveTextOverflow;
	    }

	    if (hasDecoration) {
	        range.selectNode(node);
	        slice$1(range.getClientRects()).forEach(decorate);
	    }

	    return;                 // only function declarations after this line

	    function actuallyGetRangeBoundingRect(range) {
	        // XXX: to be revised when this Chrome bug is fixed:
	        // https://bugs.chromium.org/p/chromium/issues/detail?id=612459
	        if (browser.msie || browser.edge || browser.chrome) {
	            // Workaround browser bugs: IE and Chrome would sometimes
	            // return 0 or 1-width rectangles before or after the main
	            // one.  https://github.com/telerik/kendo/issues/4674

	            // Actually Chrome 50 got worse, since the rectangles can now have the width of a
	            // full character, making it hard to tell whether it's a bogus rectangle or valid
	            // selection location.  The workaround is to ignore rectangles that fall on the
	            // previous line.  https://github.com/telerik/kendo/issues/5740
	            var rectangles = range.getClientRects(), box = {
	                top    :  Infinity,
	                right  : -Infinity,
	                bottom : -Infinity,
	                left   :  Infinity
	            };
	            for (var i = 0; i < rectangles.length; ++i) {
	                var b = rectangles[i];
	                if (b.width <= 1 || b.bottom === prevLineBottom) {
	                    continue;   // bogus rectangle
	                }
	                box.left   = Math.min(b.left   , box.left);
	                box.top    = Math.min(b.top    , box.top);
	                box.right  = Math.max(b.right  , box.right);
	                box.bottom = Math.max(b.bottom , box.bottom);
	            }
	            box.width = box.right - box.left;
	            box.height = box.bottom - box.top;
	            return box;
	        }
	        return range.getBoundingClientRect();
	    }

	    // Render a chunk of text, typically one line (but for justified text we render each word as
	    // a separate Text object, because spacing is variable).  Returns true when it finished the
	    // current node.  After each chunk it updates `start` to just after the last rendered
	    // character.
	    function doChunk() {
	        var origStart = start;
	        var box, pos = text.substr(start).search(/\S/);
	        start += pos;
	        if (pos < 0 || start >= end) {
	            return true;
	        }

	        // Select a single character to determine the height of a line of text.  The box.bottom
	        // will be essential for us to figure out where the next line begins.
	        range.setStart(node, start);
	        range.setEnd(node, start + 1);
	        box = actuallyGetRangeBoundingRect(range);

	        // for justified text we must split at each space, because space has variable width.
	        var found = false;
	        if (isJustified || columnCount > 1) {
	            pos = text.substr(start).search(/\s/);
	            if (pos >= 0) {
	                // we can only split there if it's on the same line, otherwise we'll fall back
	                // to the default mechanism (see findEOL below).
	                range.setEnd(node, start + pos);
	                var r = actuallyGetRangeBoundingRect(range);
	                if (r.bottom == box.bottom) {
	                    box = r;
	                    found = true;
	                    start += pos;
	                }
	            }
	        }

	        if (!found) {
	            // This code does three things: (1) it selects one line of text in `range`, (2) it
	            // leaves the bounding rect of that line in `box` and (3) it returns the position
	            // just after the EOL.  We know where the line starts (`start`) but we don't know
	            // where it ends.  To figure this out, we select a piece of text and look at the
	            // bottom of the bounding box.  If it changes, we have more than one line selected
	            // and should retry with a smaller selection.
	            //
	            // To speed things up, we first try to select all text in the node (`start` ->
	            // `end`).  If there's more than one line there, then select only half of it.  And
	            // so on.  When we find a value for `end` that fits in one line, we try increasing
	            // it (also in halves) until we get to the next line.  The algorithm stops when the
	            // right side of the bounding box does not change.
	            //
	            // One more thing to note is that everything happens in a single Text DOM node.
	            // There's no other tags inside it, therefore the left/top coordinates of the
	            // bounding box will not change.
	            pos = (function findEOL(min, eol, max){
	                range.setEnd(node, eol);
	                var r = actuallyGetRangeBoundingRect(range);
	                if (r.bottom != box.bottom && min < eol) {
	                    return findEOL(min, (min + eol) >> 1, eol);
	                } else if (r.right != box.right) {
	                    box = r;
	                    if (eol < max) {
	                        return findEOL(eol, (eol + max) >> 1, max);
	                    } else {
	                        return eol;
	                    }
	                } else {
	                    return eol;
	                }
	            })(start, Math.min(end, start + estimateLineLength), end);

	            if (pos == start) {
	                // if EOL is at the start, then no more text fits on this line.  Skip the
	                // remainder of this node entirely to avoid a stack overflow.
	                return true;
	            }
	            start = pos;

	            pos = range.toString().search(/\s+$/);
	            if (pos === 0) {
	                return false; // whitespace only; we should not get here.
	            }
	            if (pos > 0) {
	                // eliminate trailing whitespace
	                range.setEnd(node, range.startOffset + pos);
	                box = actuallyGetRangeBoundingRect(range);
	            }
	        }

	        // another workaround for IE: if we rely on getBoundingClientRect() we'll overlap with the bullet for LI
	        // elements.  Calling getClientRects() and using the *first* rect appears to give us the correct location.
	        // Note: not to be used in Chrome as it randomly returns a zero-width rectangle from the previous line.
	        if (browser.msie || browser.edge) {
	            box = range.getClientRects()[0];
	        }

	        var str = range.toString();
	        if (!/^(?:pre|pre-wrap)$/i.test(whiteSpace)) {
	            // node with non-significant space -- collapse whitespace.
	            str = str.replace(/\s+/g, " ");
	        }
	        else if (/\t/.test(str)) {
	            // with significant whitespace we need to do something about literal TAB characters.
	            // There's no TAB glyph in a font so they would be rendered in PDF as an empty box,
	            // and the whole text will stretch to fill the original width.  The core PDF lib
	            // does not have sufficient context to deal with it.

	            // calculate the starting column here, since we initially discarded any whitespace.
	            var cc = 0;
	            for (pos = origStart; pos < range.startOffset; ++pos) {
	                var code = text.charCodeAt(pos);
	                if (code == 9) {
	                    // when we meet a TAB we must round up to the next tab stop.
	                    // in all browsers TABs seem to be 8 characters.
	                    cc += 8 - cc % 8;
	                } else if (code == 10 || code == 13) {
	                    // just in case we meet a newline we must restart.
	                    cc = 0;
	                } else {
	                    // ordinary character --> advance one column
	                    cc++;
	                }
	            }

	            // based on starting column, replace any TAB characters in the string we actually
	            // have to display with spaces so that they align to columns multiple of 8.
	            while ((pos = str.search("\t")) >= 0) {
	                var indent = "        ".substr(0, 8 - (cc + pos) % 8);
	                str = str.substr(0, pos) + indent + str.substr(pos + 1);
	            }
	        }

	        if (!found) {
	            prevLineBottom = box.bottom;
	        }
	        drawText(str, box);
	    }

	    function drawText(str, box) {
	        // In IE the box height will be approximately lineHeight, while in
	        // other browsers it'll (correctly) be the height of the bounding
	        // box for the current text/font.  Which is to say, IE sucks again.
	        // The only good solution I can think of is to measure the text
	        // ourselves and center the bounding box.
	        if ((browser.msie || browser.edge) && !isNaN(lineHeight)) {
	            var height = getFontHeight(font);
	            var top = (box.top + box.bottom - height) / 2;
	            box = {
	                top    : top,
	                right  : box.right,
	                bottom : top + height,
	                left   : box.left,
	                height : height,
	                width  : box.right - box.left
	            };
	        }

	        // var path = new Path({ stroke: { color: "red" }});
	        // path.moveTo(box.left, box.top)
	        //     .lineTo(box.right, box.top)
	        //     .lineTo(box.right, box.bottom)
	        //     .lineTo(box.left, box.bottom)
	        //     .close();
	        // group.append(path);

	        switch (textTransform) {
	          case "uppercase":
	            str = str.toUpperCase();
	            break;
	          case "lowercase":
	            str = str.toLowerCase();
	            break;
	          case "capitalize":
	            str = str.replace(/(?:^|\s)\S/g, function (l) { return l.toUpperCase(); });
	            break;
	        }

	        var text = new TextRect(
	            str, new Rect([ box.left, box.top ],
	                              [ box.width, box.height ]),
	            {
	                font: font,
	                fill: { color: color }
	            }
	        );
	        group.append(text);
	    }

	    function decorate(box) {
	        line(underline, box.bottom);
	        line(lineThrough, box.bottom - box.height / 2.7);
	        line(overline, box.top);
	        function line(color, ypos) {
	            if (color) {
	                var width = fontSize / 12;
	                var path = new Path({ stroke: {
	                    width: width,
	                    color: color
	                }});

	                ypos -= width;
	                path.moveTo(box.left, ypos)
	                    .lineTo(box.right, ypos);
	                group.append(path);
	            }
	        }
	    }
	}

	function groupInStackingContext(element, group, zIndex) {
	    var main;
	    if (zIndex != "auto") {
	        // use the current stacking context
	        main = nodeInfo._stackingContext.group;
	        zIndex = parseFloat(zIndex);
	    } else {
	        // normal flow — use given container.  we still have to
	        // figure out where should we insert this element with the
	        // assumption that its z-index is zero, as the group might
	        // already contain elements with higher z-index.
	        main = group;
	        zIndex = 0;
	    }
	    var a = main.children;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i]._dom_zIndex != null && a[i]._dom_zIndex > zIndex) {
	            break;
	        }
	    }

	    var tmp = new Group();
	    main.insert(i, tmp);
	    tmp._dom_zIndex = zIndex;

	    if (main !== group) {
	        // console.log("Placing", element, "in", nodeInfo._stackingContext.element, "at position", i, " / ", a.length);
	        // console.log(a.slice(i+1));

	        // if (nodeInfo._matrix) {
	        //     tmp.transform(nodeInfo._matrix);
	        // }
	        if (nodeInfo._clipbox) {
	            var m = nodeInfo._matrix.invert();
	            var r = nodeInfo._clipbox.transformCopy(m);
	            setClipping(tmp, Path.fromRect(r));
	            // console.log(r);
	            // tmp.append(Path.fromRect(r));
	            // tmp.append(new Text(element.className || element.id, r.topLeft()));
	        }
	    }

	    return tmp;
	}

	function renderElement(element, container) {
	    var style = getComputedStyle(element);

	    updateCounters(style);

	    if (/^(style|script|link|meta|iframe|svg|col|colgroup)$/i.test(element.tagName)) {
	        return;
	    }

	    if (nodeInfo._clipbox == null) {
	        return;
	    }

	    var opacity = parseFloat(getPropertyValue(style, "opacity"));
	    var visibility = getPropertyValue(style, "visibility");
	    var display = getPropertyValue(style, "display");

	    if (opacity === 0 || visibility == "hidden" || display == "none") {
	        return;
	    }

	    var tr = getTransform(style);
	    var group;

	    var zIndex = getPropertyValue(style, "z-index");
	    if ((tr || opacity < 1) && zIndex == "auto") {
	        zIndex = 0;
	    }
	    group = groupInStackingContext(element, container, zIndex);

	    // XXX: remove at some point
	    // group._pdfElement = element;
	    // group.options._pdfDebug = "";
	    // if (element.id) {
	    //     group.options._pdfDebug = "#" + element.id;
	    // }
	    // if (element.className) {
	    //     group.options._pdfDebug += "." + element.className.split(" ").join(".");
	    // }

	    if (opacity < 1) {
	        group.opacity(opacity * group.opacity());
	    }

	    pushNodeInfo(element, style, group);

	    if (!tr) {
	        _renderWithPseudoElements(element, group);
	    }
	    else {
	        saveStyle(element, function(){
	            // must clear transform, so getBoundingClientRect returns correct values.
	            pleaseSetPropertyValue(element.style, "transform", "none", "important");

	            // must also clear transitions, so correct values are returned *immediately*
	            pleaseSetPropertyValue(element.style, "transition", "none", "important");

	            // the presence of any transform makes it behave like it had position: relative,
	            // because why not.
	            // http://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/
	            if (getPropertyValue(style, "position") == "static") {
	                // but only if it's not already positioned. :-/
	                pleaseSetPropertyValue(element.style, "position", "relative", "important");
	            }

	            // must translate to origin before applying the CSS
	            // transformation, then translate back.
	            var bbox = element.getBoundingClientRect();
	            var x = bbox.left + tr.origin[0];
	            var y = bbox.top + tr.origin[1];
	            var m = [ 1, 0, 0, 1, -x, -y ];
	            m = mmul(m, tr.matrix);
	            m = mmul(m, [ 1, 0, 0, 1, x, y ]);
	            m = setTransform(group, m);

	            nodeInfo._matrix = nodeInfo._matrix.multiplyCopy(m);

	            _renderWithPseudoElements(element, group);
	        });
	    }

	    popNodeInfo();

	    //drawDebugBox(element.getBoundingClientRect(), container);
	}

	// function drawDebugBox(box, group, color) {
	//     var path = Path.fromRect(new geo.Rect([ box.left, box.top ], [ box.width, box.height ]));
	//     if (color) {
	//         path.stroke(color);
	//     }
	//     group.append(path);
	// }

	// function dumpTextNode(node) {
	//     var txt = node.data.replace(/^\s+/, "");
	//     if (txt.length < 100) {
	//         console.log(node.data.length + ": |" + txt);
	//     } else {
	//         console.log(node.data.length + ": |" + txt.substr(0, 50) + "|...|" + txt.substr(-50));
	//     }
	// }

	function mmul(a, b) {
	    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
	    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
	    return [
	        a1*a2 + b1*c2,          a1*b2 + b1*d2,
	        c1*a2 + d1*c2,          c1*b2 + d1*d2,
	        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
	    ];
	}

	var drawing = {
		svg: svg,
		canvas: canvas,
		util: util,
		PathParser: PathParser,
		Surface: Surface,
		BaseNode: BaseNode,
		SurfaceFactory: SurfaceFactory,
		OptionsStore: OptionsStore,
		exportImage: exportImage,
		exportSVG: exportSVG,
		QuadNode: QuadNode,
		ShapesQuadTree: ShapesQuadTree,
		ObserversMixin: ObserversMixin,
		Element: Element$1,
		Circle: Circle,
		Arc: Arc,
		Path: Path,
		MultiPath: MultiPath,
		Text: Text,
		Image: Image$1,
		Group: Group,
		Layout: Layout,
		Rect: Rect$2,
		align: align,
		vAlign: vAlign,
		stack: stack,
		vStack: vStack,
		wrap: wrap,
		vWrap: vWrap,
		fit: fit,
		LinearGradient: LinearGradient,
		RadialGradient: RadialGradient,
		GradientStop: GradientStop,
		Gradient: Gradient,
		Animation: Animation,
		AnimationFactory: AnimationFactory,
		drawDOM: drawDOM
	};

	kendo.deepExtend(kendo, {
	    drawing: drawing,
	    geometry: geometry
	});

	kendo.drawing.Segment = kendo.geometry.Segment;
	kendo.dataviz.drawing = kendo.drawing;
	kendo.dataviz.geometry = kendo.geometry;
	kendo.drawing.util.measureText = kendo.util.measureText;
	kendo.drawing.util.objectKey = kendo.util.objectKey;
	kendo.drawing.Color = kendo.Color;
	kendo.util.encodeBase64 = kendo.drawing.util.encodeBase64;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }),

/***/ 912:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(467);

/***/ }),

/***/ 913:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(170);

/***/ }),

/***/ 914:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(516);

/***/ })

/******/ });

/***/ }),

/***/ 170:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1014);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1014:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "color",
	        name: "Color utils",
	        category: "framework",
	        advanced: true,
	        description: "Color utilities used across components",
	        depends: [ "core" ]
	    };

	/*jshint eqnull:true  */

	window.kendo = window.kendo || {};

	var Class = kendo.Class;
	var support = kendo.support;

	var namedColors = {
	    aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
	    aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
	    bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
	    blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
	    burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
	    chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
	    cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
	    darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
	    darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
	    darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
	    darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
	    darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
	    darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
	    dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
	    firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
	    fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
	    gold: "ffd700", goldenrod: "daa520", gray: "808080",
	    grey: "808080", green: "008000", greenyellow: "adff2f",
	    honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
	    indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
	    lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
	    lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
	    lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
	    lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
	    lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
	    lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
	    linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
	    mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
	    mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
	    midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
	    moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
	    oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
	    orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
	    palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
	    palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
	    peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
	    powderblue: "b0e0e6", purple: "800080", red: "ff0000",
	    rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
	    salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
	    seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
	    skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
	    slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
	    steelblue: "4682b4", tan: "d2b48c", teal: "008080",
	    thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
	    violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
	    whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
	};

	var browser = support.browser;

	var matchNamedColor = function (color) {
	    var colorNames = Object.keys(namedColors);
	    colorNames.push("transparent");

	    var regexp = new RegExp("^(" + colorNames.join("|") + ")(\\W|$)", "i");
	    matchNamedColor = function (color) { return regexp.exec(color); };

	    return regexp.exec(color);
	};

	var BaseColor = Class.extend({
	    init: function() {  },

	    toHSV: function() { return this; },

	    toRGB: function() { return this; },

	    toHex: function() { return this.toBytes().toHex(); },

	    toBytes: function() { return this; },

	    toCss: function() { return "#" + this.toHex(); },

	    toCssRgba: function() {
	        var rgb = this.toBytes();
	        return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
	    },

	    toDisplay: function() {
	        if (browser.msie && browser.version < 9) {
	            return this.toCss(); // no RGBA support; does it support any opacity in colors?
	        }
	        return this.toCssRgba();
	    },

	    equals: function(c) {
	        return c === this || c !== null && this.toCssRgba() === parseColor(c).toCssRgba();
	    },

	    diff: function(other) {
	        if (other === null) {
	            return NaN;
	        }

	        var c1 = this.toBytes();
	        var c2 = other.toBytes();

	        return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
	                         Math.pow((c1.g - c2.g) * 0.59, 2) +
	                         Math.pow((c1.b - c2.b) * 0.11, 2));
	    },

	    clone: function() {
	        var c = this.toBytes();
	        if (c === this) {
	            c = new Bytes(c.r, c.g, c.b, c.a);
	        }

	        return c;
	    }
	});

	var RGB = BaseColor.extend({
	    init: function(r, g, b, a) {
	        BaseColor.fn.init.call(this);

	        this.r = r;
	        this.g = g;
	        this.b = b;
	        this.a = a;
	    },

	    toHSV: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var min = Math.min(r, g, b);
	        var max = Math.max(r, g, b);
	        var delta = max - min;
	        var v = max;
	        var h, s;

	        if (delta === 0) {
	            return new HSV(0, 0, v, this.a);
	        }

	        if (max !== 0) {
	            s = delta / max;
	            if (r === max) {
	                h = (g - b) / delta;
	            } else if (g === max) {
	                h = 2 + (b - r) / delta;
	            } else {
	                h = 4 + (r - g) / delta;
	            }

	            h *= 60;
	            if (h < 0) {
	                h += 360;
	            }
	        } else {
	            s = 0;
	            h = -1;
	        }

	        return new HSV(h, s, v, this.a);
	    },

	    toHSL: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var max = Math.max(r, g, b);
	        var min = Math.min(r, g, b);
	        var h, s, l = (max + min) / 2;

	        if (max === min) {
	            h = s = 0;
	        } else {
	            var d = max - min;
	            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	            switch (max) {
	                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	                case g: h = (b - r) / d + 2; break;
	                case b: h = (r - g) / d + 4; break;
	                default: break;
	            }

	            h *= 60;
	            s *= 100;
	            l *= 100;
	        }

	        return new HSL(h, s, l, this.a);
	    },

	    toBytes: function() {
	        return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
	    }
	});

	var Bytes = RGB.extend({
	    init: function(r, g, b, a) {
	        RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);
	    },

	    toRGB: function() {
	        return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toHex: function() {
	        return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);
	    },

	    toBytes: function() {
	        return this;
	    }
	});

	function hex(n, width, pad) {
	    if (pad === void 0) { pad = "0"; }

	    var result = n.toString(16);
	    while (width > result.length) {
	        result = pad + result;
	    }

	    return result;
	}

	var HSV = BaseColor.extend({
	    init: function(h, s, v, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.v = v;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var v = ref.v;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = v;
	        } else {
	            h /= 60;

	            var i = Math.floor(h);
	            var f = h - i;
	            var p = v * (1 - s);
	            var q = v * (1 - s * f);
	            var t = v * (1 - s * (1 - f));

	            switch (i) {
	                case 0: r = v; g = t; b = p; break;
	                case 1: r = q; g = v; b = p; break;
	                case 2: r = p; g = v; b = t; break;
	                case 3: r = p; g = q; b = v; break;
	                case 4: r = t; g = p; b = v; break;
	                default: r = v; g = p; b = q; break;
	            }
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	var HSL = BaseColor.extend({
	    init: function(h, s, l, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.l = l;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var l = ref.l;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = l; // achromatic
	        } else {
	            h /= 360;
	            s /= 100;
	            l /= 100;

	            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	            var p = 2 * l - q;
	            r = hue2rgb(p, q, h + 1 / 3);
	            g = hue2rgb(p, q, h);
	            b = hue2rgb(p, q, h - 1 / 3);
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	function hue2rgb(p, q, s) {
	    var t = s;

	    if (t < 0) {
	        t += 1;
	    }

	    if (t > 1) {
	        t -= 1;
	    }

	    if (t < 1 / 6) {
	        return p + (q - p) * 6 * t;
	    }

	    if (t < 1 / 2) {
	        return q;
	    }

	    if (t < 2 / 3) {
	        return p + (q - p) * (2 / 3 - t) * 6;
	    }

	    return p;
	}

	function parseColor(value, safe) {
	    var m, ret;

	    if (value == null || value === "none") {
	        return null;
	    }

	    if (value instanceof BaseColor) {
	        return value;
	    }

	    var color = value.toLowerCase();
	    if ((m = matchNamedColor(color))) {
	        if (m[1] === "transparent") {
	            color = new RGB(1, 1, 1, 0);
	        } else {
	            color = parseColor(namedColors[m[1]], safe);
	        }
	        color.match = [ m[1] ];
	        return color;
	    }
	    if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 16),
	                        parseInt(m[2], 16),
	                        parseInt(m[3], 16), 1);
	    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1] + m[1], 16),
	                        parseInt(m[2] + m[2], 16),
	                        parseInt(m[3] + m[3], 16), 1);
	    } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), 1);
	    } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), parseFloat(m[4]));
	    } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, 1);
	    } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, parseFloat(m[4]));
	    }

	    if (ret) {
	        ret.match = m;
	    } else if (!safe) {
	        throw new Error("Cannot parse color: " + color);
	    }

	    return ret;
	}

	var Color = Class.extend({
	    init: function(value) {
	        var this$1 = this;

	        if (arguments.length === 1) {
	            var formats = Color.formats;
	            var resolvedColor = this.resolveColor(value);

	            for (var idx = 0; idx < formats.length; idx++) {
	                var formatRegex = formats[idx].re;
	                var processor = formats[idx].process;
	                var parts = formatRegex.exec(resolvedColor);

	                if (parts) {
	                    var channels = processor(parts);
	                    this$1.r = channels[0];
	                    this$1.g = channels[1];
	                    this$1.b = channels[2];
	                }
	            }
	        } else {
	            this.r = arguments[0];
	            this.g = arguments[1];
	            this.b = arguments[2];
	        }

	        this.r = this.normalizeByte(this.r);
	        this.g = this.normalizeByte(this.g);
	        this.b = this.normalizeByte(this.b);
	    },

	    toHex: function() {
	        var pad = this.padDigit;
	        var r = this.r.toString(16);
	        var g = this.g.toString(16);
	        var b = this.b.toString(16);

	        return "#" + pad(r) + pad(g) + pad(b);
	    },

	    resolveColor: function(value) {
	        var color = value || "black";

	        if (color.charAt(0) === "#") {
	            color = color.substr(1, 6);
	        }

	        color = color.replace(/ /g, "");
	        color = color.toLowerCase();
	        color = Color.namedColors[color] || color;

	        return color;
	    },

	    normalizeByte: function(value) {
	        if (value < 0 || isNaN(value)) {
	            return 0;
	        }

	        return value > 255 ? 255 : value;
	    },

	    padDigit: function(value) {
	        return (value.length === 1) ? "0" + value : value;
	    },

	    brightness: function(value) {
	        var round = Math.round;

	        this.r = round(this.normalizeByte(this.r * value));
	        this.g = round(this.normalizeByte(this.g * value));
	        this.b = round(this.normalizeByte(this.b * value));

	        return this;
	    },

	    percBrightness: function() {
	        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
	    }
	});

	Color.fromBytes = function(r, g, b, a) {
	    return new Bytes(r, g, b, a != null ? a : 1);
	};

	Color.fromRGB = function(r, g, b, a) {
	    return new RGB(r, g, b, a != null ? a : 1);
	};

	Color.fromHSV = function(h, s, v, a) {
	    return new HSV(h, s, v, a != null ? a : 1);
	};

	Color.fromHSL = function(h, s, l, a) {
	    return new HSL(h, s, l, a != null ? a : 1);
	};

	Color.formats = [ {
	    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
	        ];
	    }
	}, {
	    re: /^(\w{2})(\w{2})(\w{2})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
	        ];
	    }
	}, {
	    re: /^(\w{1})(\w{1})(\w{1})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1] + parts[1], 16),
	            parseInt(parts[2] + parts[2], 16),
	            parseInt(parts[3] + parts[3], 16)
	        ];
	    }
	} ];

	Color.namedColors = namedColors;

	kendo.deepExtend(kendo, {
	    parseColor: parseColor,
	    Color: Color
	});

	}, __webpack_require__(3));

/***/ })

/******/ });

/***/ }),

/***/ 24:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1026);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 992:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(463);

/***/ }),

/***/ 1026:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(992)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "core",
	    name: "Core",
	    category: "framework",
	    description: "The core of the Kendo framework."
	};

	/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/
	(function($, window, undefined) {
	    var kendo = window.kendo = window.kendo || { cultures: {} },
	        extend = $.extend,
	        each = $.each,
	        isArray = $.isArray,
	        proxy = $.proxy,
	        noop = $.noop,
	        math = Math,
	        Template,
	        JSON = window.JSON || {},
	        support = {},
	        percentRegExp = /%/,
	        formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
	        boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
	        numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
	        FUNCTION = "function",
	        STRING = "string",
	        NUMBER = "number",
	        OBJECT = "object",
	        NULL = "null",
	        BOOLEAN = "boolean",
	        UNDEFINED = "undefined",
	        getterCache = {},
	        setterCache = {},
	        slice = [].slice;

	    kendo.version = "2017.3.1116".replace(/^\s+|\s+$/g, '');

	    function Class() {}

	    Class.extend = function(proto) {
	        var base = function() {},
	            member,
	            that = this,
	            subclass = proto && proto.init ? proto.init : function () {
	                that.apply(this, arguments);
	            },
	            fn;

	        base.prototype = that.prototype;
	        fn = subclass.fn = subclass.prototype = new base();

	        for (member in proto) {
	            if (proto[member] != null && proto[member].constructor === Object) {
	                // Merge object members
	                fn[member] = extend(true, {}, base.prototype[member], proto[member]);
	            } else {
	                fn[member] = proto[member];
	            }
	        }

	        fn.constructor = subclass;
	        subclass.extend = that.extend;

	        return subclass;
	    };

	    Class.prototype._initOptions = function(options) {
	        this.options = deepExtend({}, this.options, options);
	    };

	    var isFunction = kendo.isFunction = function(fn) {
	        return typeof fn === "function";
	    };

	    var preventDefault = function() {
	        this._defaultPrevented = true;
	    };

	    var isDefaultPrevented = function() {
	        return this._defaultPrevented === true;
	    };

	    var Observable = Class.extend({
	        init: function() {
	            this._events = {};
	        },

	        bind: function(eventName, handlers, one) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                original,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            if (handlers === undefined) {
	                for (idx in eventName) {
	                    that.bind(idx, eventName[idx]);
	                }
	                return that;
	            }

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    if (one) {
	                        original = handler;
	                        handler = function() {
	                            that.unbind(eventName, handler);
	                            original.apply(that, arguments);
	                        };
	                        handler.original = original;
	                    }
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.push(handler);
	                }
	            }

	            return that;
	        },

	        one: function(eventNames, handlers) {
	            return this.bind(eventNames, handlers, true);
	        },

	        first: function(eventName, handlers) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.unshift(handler);
	                }
	            }

	            return that;
	        },

	        trigger: function(eventName, e) {
	            var that = this,
	                events = that._events[eventName],
	                idx,
	                length;

	            if (events) {
	                e = e || {};

	                e.sender = that;

	                e._defaultPrevented = false;

	                e.preventDefault = preventDefault;

	                e.isDefaultPrevented = isDefaultPrevented;

	                events = events.slice();

	                for (idx = 0, length = events.length; idx < length; idx++) {
	                    events[idx].call(that, e);
	                }

	                return e._defaultPrevented === true;
	            }

	            return false;
	        },

	        unbind: function(eventName, handler) {
	            var that = this,
	                events = that._events[eventName],
	                idx;

	            if (eventName === undefined) {
	                that._events = {};
	            } else if (events) {
	                if (handler) {
	                    for (idx = events.length - 1; idx >= 0; idx--) {
	                        if (events[idx] === handler || events[idx].original === handler) {
	                            events.splice(idx, 1);
	                        }
	                    }
	                } else {
	                    that._events[eventName] = [];
	                }
	            }

	            return that;
	        }
	    });


	     function compilePart(part, stringPart) {
	         if (stringPart) {
	             return "'" +
	                 part.split("'").join("\\'")
	                     .split('\\"').join('\\\\\\"')
	                     .replace(/\n/g, "\\n")
	                     .replace(/\r/g, "\\r")
	                     .replace(/\t/g, "\\t") + "'";
	         } else {
	             var first = part.charAt(0),
	                 rest = part.substring(1);

	             if (first === "=") {
	                 return "+(" + rest + ")+";
	             } else if (first === ":") {
	                 return "+$kendoHtmlEncode(" + rest + ")+";
	             } else {
	                 return ";" + part + ";$kendoOutput+=";
	             }
	         }
	     }

	    var argumentNameRegExp = /^\w+/,
	        encodeRegExp = /\$\{([^}]*)\}/g,
	        escapedCurlyRegExp = /\\\}/g,
	        curlyRegExp = /__CURLY__/g,
	        escapedSharpRegExp = /\\#/g,
	        sharpRegExp = /__SHARP__/g,
	        zeros = ["", "0", "00", "000", "0000"];

	    Template = {
	        paramName: "data", // name of the parameter of the generated template
	        useWithBlock: true, // whether to wrap the template in a with() block
	        render: function(template, data) {
	            var idx,
	                length,
	                html = "";

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                html += template(data[idx]);
	            }

	            return html;
	        },
	        compile: function(template, options) {
	            var settings = extend({}, this, options),
	                paramName = settings.paramName,
	                argumentName = paramName.match(argumentNameRegExp)[0],
	                useWithBlock = settings.useWithBlock,
	                functionBody = "var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;",
	                fn,
	                parts,
	                idx;

	            if (isFunction(template)) {
	                return template;
	            }

	            functionBody += useWithBlock ? "with(" + paramName + "){" : "";

	            functionBody += "$kendoOutput=";

	            parts = template
	                .replace(escapedCurlyRegExp, "__CURLY__")
	                .replace(encodeRegExp, "#=$kendoHtmlEncode($1)#")
	                .replace(curlyRegExp, "}")
	                .replace(escapedSharpRegExp, "__SHARP__")
	                .split("#");

	            for (idx = 0; idx < parts.length; idx ++) {
	                functionBody += compilePart(parts[idx], idx % 2 === 0);
	            }

	            functionBody += useWithBlock ? ";}" : ";";

	            functionBody += "return $kendoOutput;";

	            functionBody = functionBody.replace(sharpRegExp, "#");

	            try {
	                fn = new Function(argumentName, functionBody);
	                fn._slotCount = Math.floor(parts.length / 2);
	                return fn;
	            } catch(e) {
	                throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
	            }
	        }
	    };

	function pad(number, digits, end) {
	    number = number + "";
	    digits = digits || 2;
	    end = digits - number.length;

	    if (end) {
	        return zeros[digits].substring(0, end) + number;
	    }

	    return number;
	}

	    //JSON stringify
	(function() {
	    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = {
	            "\b": "\\b",
	            "\t": "\\t",
	            "\n": "\\n",
	            "\f": "\\f",
	            "\r": "\\r",
	            "\"" : '\\"',
	            "\\": "\\\\"
	        },
	        rep,
	        toString = {}.toString;


	    if (typeof Date.prototype.toJSON !== FUNCTION) {

	        Date.prototype.toJSON = function () {
	            var that = this;

	            return isFinite(that.valueOf()) ?
	                pad(that.getUTCFullYear(), 4) + "-" +
	                pad(that.getUTCMonth() + 1)   + "-" +
	                pad(that.getUTCDate())        + "T" +
	                pad(that.getUTCHours())       + ":" +
	                pad(that.getUTCMinutes())     + ":" +
	                pad(that.getUTCSeconds())     + "Z" : null;
	        };

	        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
	            return this.valueOf();
	        };
	    }

	    function quote(string) {
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === STRING ? c :
	                "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + "\"" : "\"" + string + "\"";
	    }

	    function str(key, holder) {
	        var i,
	            k,
	            v,
	            length,
	            mind = gap,
	            partial,
	            value = holder[key],
	            type;

	        if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
	            value = value.toJSON(key);
	        }

	        if (typeof rep === FUNCTION) {
	            value = rep.call(holder, key, value);
	        }

	        type = typeof value;
	        if (type === STRING) {
	            return quote(value);
	        } else if (type === NUMBER) {
	            return isFinite(value) ? String(value) : NULL;
	        } else if (type === BOOLEAN || type === NULL) {
	            return String(value);
	        } else if (type === OBJECT) {
	            if (!value) {
	                return NULL;
	            }
	            gap += indent;
	            partial = [];
	            if (toString.apply(value) === "[object Array]") {
	                length = value.length;
	                for (i = 0; i < length; i++) {
	                    partial[i] = str(i, value) || NULL;
	                }
	                v = partial.length === 0 ? "[]" : gap ?
	                    "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
	                    "[" + partial.join(",") + "]";
	                gap = mind;
	                return v;
	            }
	            if (rep && typeof rep === OBJECT) {
	                length = rep.length;
	                for (i = 0; i < length; i++) {
	                    if (typeof rep[i] === STRING) {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            } else {
	                for (k in value) {
	                    if (Object.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            }

	            v = partial.length === 0 ? "{}" : gap ?
	                "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
	                "{" + partial.join(",") + "}";
	            gap = mind;
	            return v;
	        }
	    }

	    if (typeof JSON.stringify !== FUNCTION) {
	        JSON.stringify = function (value, replacer, space) {
	            var i;
	            gap = "";
	            indent = "";

	            if (typeof space === NUMBER) {
	                for (i = 0; i < space; i += 1) {
	                    indent += " ";
	                }

	            } else if (typeof space === STRING) {
	                indent = space;
	            }

	            rep = replacer;
	            if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
	                throw new Error("JSON.stringify");
	            }

	            return str("", {"": value});
	        };
	    }
	})();

	// Date and Number formatting
	(function() {
	    var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g,
	        standardFormatRegExp =  /^(n|c|p|e)(\d*)$/i,
	        literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
	        commaRegExp = /\,/g,
	        EMPTY = "",
	        POINT = ".",
	        COMMA = ",",
	        SHARP = "#",
	        ZERO = "0",
	        PLACEHOLDER = "??",
	        EN = "en-US",
	        objectToString = {}.toString;

	    //cultures
	    kendo.cultures["en-US"] = {
	        name: EN,
	        numberFormat: {
	            pattern: ["-n"],
	            decimals: 2,
	            ",": ",",
	            ".": ".",
	            groupSize: [3],
	            percent: {
	                pattern: ["-n %", "n %"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "%"
	            },
	            currency: {
	                name: "US Dollar",
	                abbr: "USD",
	                pattern: ["($n)", "$n"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "$"
	            }
	        },
	        calendars: {
	            standard: {
	                days: {
	                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	                    namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
	                },
	                months: {
	                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	                },
	                AM: [ "AM", "am", "AM" ],
	                PM: [ "PM", "pm", "PM" ],
	                patterns: {
	                    d: "M/d/yyyy",
	                    D: "dddd, MMMM dd, yyyy",
	                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
	                    g: "M/d/yyyy h:mm tt",
	                    G: "M/d/yyyy h:mm:ss tt",
	                    m: "MMMM dd",
	                    M: "MMMM dd",
	                    s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
	                    t: "h:mm tt",
	                    T: "h:mm:ss tt",
	                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
	                    y: "MMMM, yyyy",
	                    Y: "MMMM, yyyy"
	                },
	                "/": "/",
	                ":": ":",
	                firstDay: 0,
	                twoDigitYearMax: 2029
	            }
	        }
	    };


	     function findCulture(culture) {
	        if (culture) {
	            if (culture.numberFormat) {
	                return culture;
	            }

	            if (typeof culture === STRING) {
	                var cultures = kendo.cultures;
	                return cultures[culture] || cultures[culture.split("-")[0]] || null;
	            }

	            return null;
	        }

	        return null;
	    }

	    function getCulture(culture) {
	        if (culture) {
	            culture = findCulture(culture);
	        }

	        return culture || kendo.cultures.current;
	    }

	    kendo.culture = function(cultureName) {
	        var cultures = kendo.cultures, culture;

	        if (cultureName !== undefined) {
	            culture = findCulture(cultureName) || cultures[EN];
	            culture.calendar = culture.calendars.standard;
	            cultures.current = culture;
	        } else {
	            return cultures.current;
	        }
	    };

	    kendo.findCulture = findCulture;
	    kendo.getCulture = getCulture;

	    //set current culture to en-US.
	    kendo.culture(EN);

	    function formatDate(date, format, culture) {
	        culture = getCulture(culture);

	        var calendar = culture.calendars.standard,
	            days = calendar.days,
	            months = calendar.months;

	        format = calendar.patterns[format] || format;

	        return format.replace(dateFormatRegExp, function (match) {
	            var minutes;
	            var result;
	            var sign;

	            if (match === "d") {
	                result = date.getDate();
	            } else if (match === "dd") {
	                result = pad(date.getDate());
	            } else if (match === "ddd") {
	                result = days.namesAbbr[date.getDay()];
	            } else if (match === "dddd") {
	                result = days.names[date.getDay()];
	            } else if (match === "M") {
	                result = date.getMonth() + 1;
	            } else if (match === "MM") {
	                result = pad(date.getMonth() + 1);
	            } else if (match === "MMM") {
	                result = months.namesAbbr[date.getMonth()];
	            } else if (match === "MMMM") {
	                result = months.names[date.getMonth()];
	            } else if (match === "yy") {
	                result = pad(date.getFullYear() % 100);
	            } else if (match === "yyyy") {
	                result = pad(date.getFullYear(), 4);
	            } else if (match === "h" ) {
	                result = date.getHours() % 12 || 12;
	            } else if (match === "hh") {
	                result = pad(date.getHours() % 12 || 12);
	            } else if (match === "H") {
	                result = date.getHours();
	            } else if (match === "HH") {
	                result = pad(date.getHours());
	            } else if (match === "m") {
	                result = date.getMinutes();
	            } else if (match === "mm") {
	                result = pad(date.getMinutes());
	            } else if (match === "s") {
	                result = date.getSeconds();
	            } else if (match === "ss") {
	                result = pad(date.getSeconds());
	            } else if (match === "f") {
	                result = math.floor(date.getMilliseconds() / 100);
	            } else if (match === "ff") {
	                result = date.getMilliseconds();
	                if (result > 99) {
	                    result = math.floor(result / 10);
	                }
	                result = pad(result);
	            } else if (match === "fff") {
	                result = pad(date.getMilliseconds(), 3);
	            } else if (match === "tt") {
	                result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
	            } else if (match === "zzz") {
	                minutes = date.getTimezoneOffset();
	                sign = minutes < 0;

	                result = math.abs(minutes / 60).toString().split(".")[0];
	                minutes = math.abs(minutes) - (result * 60);

	                result = (sign ? "+" : "-") + pad(result);
	                result += ":" + pad(minutes);
	            } else if (match === "zz" || match === "z") {
	                result = date.getTimezoneOffset() / 60;
	                sign = result < 0;

	                result = math.abs(result).toString().split(".")[0];
	                result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
	            }

	            return result !== undefined ? result : match.slice(1, match.length - 1);
	        });
	    }

	    //number formatting
	    function formatNumber(number, format, culture) {
	        culture = getCulture(culture);

	        var numberFormat = culture.numberFormat,
	            decimal = numberFormat[POINT],
	            precision = numberFormat.decimals,
	            pattern = numberFormat.pattern[0],
	            literals = [],
	            symbol,
	            isCurrency, isPercent,
	            customPrecision,
	            formatAndPrecision,
	            negative = number < 0,
	            integer,
	            fraction,
	            integerLength,
	            fractionLength,
	            replacement = EMPTY,
	            value = EMPTY,
	            idx,
	            length,
	            ch,
	            hasGroup,
	            hasNegativeFormat,
	            decimalIndex,
	            sharpIndex,
	            zeroIndex,
	            hasZero, hasSharp,
	            percentIndex,
	            currencyIndex,
	            startZeroIndex,
	            start = -1,
	            end;

	        //return empty string if no number
	        if (number === undefined) {
	            return EMPTY;
	        }

	        if (!isFinite(number)) {
	            return number;
	        }

	        //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
	        if (!format) {
	            return culture.name.length ? number.toLocaleString() : number.toString();
	        }

	        formatAndPrecision = standardFormatRegExp.exec(format);

	        // standard formatting
	        if (formatAndPrecision) {
	            format = formatAndPrecision[1].toLowerCase();

	            isCurrency = format === "c";
	            isPercent = format === "p";

	            if (isCurrency || isPercent) {
	                //get specific number format information if format is currency or percent
	                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	                decimal = numberFormat[POINT];
	                precision = numberFormat.decimals;
	                symbol = numberFormat.symbol;
	                pattern = numberFormat.pattern[negative ? 0 : 1];
	            }

	            customPrecision = formatAndPrecision[2];

	            if (customPrecision) {
	                precision = +customPrecision;
	            }

	            //return number in exponential format
	            if (format === "e") {
	                return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
	            }

	            // multiply if format is percent
	            if (isPercent) {
	                number *= 100;
	            }

	            number = round(number, precision);
	            negative = number < 0;
	            number = number.split(POINT);

	            integer = number[0];
	            fraction = number[1];

	            //exclude "-" if number is negative.
	            if (negative) {
	                integer = integer.substring(1);
	            }

	            value = groupInteger(integer, 0, integer.length, numberFormat);

	            if (fraction) {
	                value += decimal + fraction;
	            }

	            if (format === "n" && !negative) {
	                return value;
	            }

	            number = EMPTY;

	            for (idx = 0, length = pattern.length; idx < length; idx++) {
	                ch = pattern.charAt(idx);

	                if (ch === "n") {
	                    number += value;
	                } else if (ch === "$" || ch === "%") {
	                    number += symbol;
	                } else {
	                    number += ch;
	                }
	            }

	            return number;
	        }

	        //custom formatting
	        //
	        //separate format by sections.

	        //make number positive
	        if (negative) {
	            number = -number;
	        }

	        if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
	            format = format.replace(literalRegExp, function (match) {
	                var quoteChar = match.charAt(0).replace("\\", ""),
	                    literal = match.slice(1).replace(quoteChar, "");

	                literals.push(literal);

	                return PLACEHOLDER;
	            });
	        }

	        format = format.split(";");
	        if (negative && format[1]) {
	            //get negative format
	            format = format[1];
	            hasNegativeFormat = true;
	        } else if (number === 0) {
	            //format for zeros
	            format = format[2] || format[0];
	            if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
	                //return format if it is string constant.
	                return format;
	            }
	        } else {
	            format = format[0];
	        }

	        percentIndex = format.indexOf("%");
	        currencyIndex = format.indexOf("$");

	        isPercent = percentIndex != -1;
	        isCurrency = currencyIndex != -1;

	        //multiply number if the format has percent
	        if (isPercent) {
	            number *= 100;
	        }

	        if (isCurrency && format[currencyIndex - 1] === "\\") {
	            format = format.split("\\").join("");
	            isCurrency = false;
	        }

	        if (isCurrency || isPercent) {
	            //get specific number format information if format is currency or percent
	            numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	            decimal = numberFormat[POINT];
	            precision = numberFormat.decimals;
	            symbol = numberFormat.symbol;
	        }

	        hasGroup = format.indexOf(COMMA) > -1;
	        if (hasGroup) {
	            format = format.replace(commaRegExp, EMPTY);
	        }

	        decimalIndex = format.indexOf(POINT);
	        length = format.length;

	        if (decimalIndex != -1) {
	            fraction = number.toString().split("e");
	            if (fraction[1]) {
	                fraction = round(number, Math.abs(fraction[1]));
	            } else {
	                fraction = fraction[0];
	            }
	            fraction = fraction.split(POINT)[1] || EMPTY;
	            zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
	            sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
	            hasZero = zeroIndex > -1;
	            hasSharp = sharpIndex > -1;
	            idx = fraction.length;

	            if (!hasZero && !hasSharp) {
	                format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
	                length = format.length;
	                decimalIndex = -1;
	                idx = 0;
	            } if (hasZero && zeroIndex > sharpIndex) {
	                idx = zeroIndex;
	            } else if (sharpIndex > zeroIndex) {
	                if (hasSharp && idx > sharpIndex) {
	                    idx = sharpIndex;
	                } else if (hasZero && idx < zeroIndex) {
	                    idx = zeroIndex;
	                }
	            }

	            if (idx > -1) {
	                number = round(number, idx);
	            }
	        } else {
	            number = round(number);
	        }

	        sharpIndex = format.indexOf(SHARP);
	        startZeroIndex = zeroIndex = format.indexOf(ZERO);

	        //define the index of the first digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            start = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            start = sharpIndex;
	        } else {
	            start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
	        }

	        sharpIndex = format.lastIndexOf(SHARP);
	        zeroIndex = format.lastIndexOf(ZERO);

	        //define the index of the last digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            end = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            end = sharpIndex;
	        } else {
	            end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
	        }

	        if (start == length) {
	            end = start;
	        }

	        if (start != -1) {
	            value = number.toString().split(POINT);
	            integer = value[0];
	            fraction = value[1] || EMPTY;

	            integerLength = integer.length;
	            fractionLength = fraction.length;

	            if (negative && (number * -1) >= 0) {
	                negative = false;
	            }

	            number = format.substring(0, start);

	            if (negative && !hasNegativeFormat) {
	                number += "-";
	            }

	            for (idx = start; idx < length; idx++) {
	                ch = format.charAt(idx);

	                if (decimalIndex == -1) {
	                    if (end - idx < integerLength) {
	                        number += integer;
	                        break;
	                    }
	                } else {
	                    if (zeroIndex != -1 && zeroIndex < idx) {
	                        replacement = EMPTY;
	                    }

	                    if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
	                        number += integer;
	                        idx = decimalIndex;
	                    }

	                    if (decimalIndex === idx) {
	                        number += (fraction ? decimal : EMPTY) + fraction;
	                        idx += end - decimalIndex + 1;
	                        continue;
	                    }
	                }

	                if (ch === ZERO) {
	                    number += ch;
	                    replacement = ch;
	                } else if (ch === SHARP) {
	                    number += replacement;
	                }
	            }

	            if (hasGroup) {
	                number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, (integerLength + start)), numberFormat);
	            }

	            if (end >= start) {
	                number += format.substring(end + 1);
	            }

	            //replace symbol placeholders
	            if (isCurrency || isPercent) {
	                value = EMPTY;
	                for (idx = 0, length = number.length; idx < length; idx++) {
	                    ch = number.charAt(idx);
	                    value += (ch === "$" || ch === "%") ? symbol : ch;
	                }
	                number = value;
	            }

	            length = literals.length;

	            if (length) {
	                for (idx = 0; idx < length; idx++) {
	                    number = number.replace(PLACEHOLDER, literals[idx]);
	                }
	            }
	        }

	        return number;
	    }

	    var groupInteger = function(number, start, end, numberFormat) {
	        var decimalIndex = number.indexOf(numberFormat[POINT]);
	        var groupSizes = numberFormat.groupSize.slice();
	        var groupSize = groupSizes.shift();
	        var integer, integerLength;
	        var idx, parts, value;
	        var newGroupSize;

	        end = decimalIndex !== -1 ? decimalIndex : end + 1;

	        integer = number.substring(start, end);
	        integerLength = integer.length;

	        if (integerLength >= groupSize) {
	            idx = integerLength;
	            parts = [];

	            while (idx > -1) {
	                value = integer.substring(idx - groupSize, idx);
	                if (value) {
	                    parts.push(value);
	                }
	                idx -= groupSize;
	                newGroupSize = groupSizes.shift();
	                groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;

	                if (groupSize === 0) {
	                    if (idx > 0) {
	                        parts.push(integer.substring(0, idx));
	                    }
	                    break;
	                }
	            }

	            integer = parts.reverse().join(numberFormat[COMMA]);
	            number = number.substring(0, start) + integer + number.substring(end);
	        }

	        return number;
	    };

	    var round = function(value, precision) {
	        precision = precision || 0;

	        value = value.toString().split('e');
	        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));

	        value = value.toString().split('e');
	        value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));

	        return value.toFixed(Math.min(precision, 20));
	    };

	    var toString = function(value, fmt, culture) {
	        if (fmt) {
	            if (objectToString.call(value) === "[object Date]") {
	                return formatDate(value, fmt, culture);
	            } else if (typeof value === NUMBER) {
	                return formatNumber(value, fmt, culture);
	            }
	        }

	        return value !== undefined ? value : "";
	    };

	    kendo.format = function(fmt) {
	        var values = arguments;

	        return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {
	            var value = values[parseInt(index, 10) + 1];

	            return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
	        });
	    };

	    kendo._extractFormat = function (format) {
	        if (format.slice(0,3) === "{0:") {
	            format = format.slice(3, format.length - 1);
	        }

	        return format;
	    };

	    kendo._activeElement = function() {
	        try {
	            return document.activeElement;
	        } catch(e) {
	            return document.documentElement.activeElement;
	        }
	    };

	    kendo._round = round;
	    kendo._outerWidth = function (element, includeMargin) { return $(element).outerWidth(includeMargin || false) || 0; };
	    kendo._outerHeight = function (element, includeMargin) { return $(element).outerHeight(includeMargin || false) || 0; };
	    kendo.toString = toString;
	})();


	(function() {
	    var nonBreakingSpaceRegExp = /\u00A0/g,
	        exponentRegExp = /[eE][\-+]?[0-9]+/,
	        shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
	        longTimeZoneRegExp = /[+|\-]\d{1,2}:?\d{2}/,
	        dateRegExp = /^\/Date\((.*?)\)\/$/,
	        offsetRegExp = /[+-]\d*/,
	        FORMATS_SEQUENCE = [ [], [ "G", "g", "F" ], [ "D", "d", "y", "m", "T", "t" ] ],
	        STANDARD_FORMATS = [
	            [
	            "yyyy-MM-ddTHH:mm:ss.fffffffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fffffff",
	            "yyyy-MM-ddTHH:mm:ss.fffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fff",
	            "ddd MMM dd yyyy HH:mm:ss",
	            "yyyy-MM-ddTHH:mm:sszzz",
	            "yyyy-MM-ddTHH:mmzzz",
	            "yyyy-MM-ddTHH:mmzz",
	            "yyyy-MM-ddTHH:mm:ss",
	            "yyyy-MM-dd HH:mm:ss",
	            "yyyy/MM/dd HH:mm:ss"
	            ], [
	            "yyyy-MM-ddTHH:mm",
	            "yyyy-MM-dd HH:mm",
	            "yyyy/MM/dd HH:mm"
	            ], [
	            "yyyy/MM/dd",
	            "yyyy-MM-dd",
	            "HH:mm:ss",
	            "HH:mm"
	            ]
	        ],
	        numberRegExp = {
	            2: /^\d{1,2}/,
	            3: /^\d{1,3}/,
	            4: /^\d{4}/
	        },
	        objectToString = {}.toString;

	    function outOfRange(value, start, end) {
	        return !(value >= start && value <= end);
	    }

	    function designatorPredicate(designator) {
	        return designator.charAt(0);
	    }

	    function mapDesignators(designators) {
	        return $.map(designators, designatorPredicate);
	    }

	    //if date's day is different than the typed one - adjust
	    function adjustDST(date, hours) {
	        if (!hours && date.getHours() === 23) {
	            date.setHours(date.getHours() + 2);
	        }
	    }

	    function lowerArray(data) {
	        var idx = 0,
	            length = data.length,
	            array = [];

	        for (; idx < length; idx++) {
	            array[idx] = (data[idx] + "").toLowerCase();
	        }

	        return array;
	    }

	    function lowerLocalInfo(localInfo) {
	        var newLocalInfo = {}, property;

	        for (property in localInfo) {
	            newLocalInfo[property] = lowerArray(localInfo[property]);
	        }

	        return newLocalInfo;
	    }

	    function parseExact(value, format, culture, strict) {
	        if (!value) {
	            return null;
	        }

	        var lookAhead = function (match) {
	                var i = 0;
	                while (format[idx] === match) {
	                    i++;
	                    idx++;
	                }
	                if (i > 0) {
	                    idx -= 1;
	                }
	                return i;
	            },
	            getNumber = function(size) {
	                var rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}'),
	                    match = value.substr(valueIdx, size).match(rg);

	                if (match) {
	                    match = match[0];
	                    valueIdx += match.length;
	                    return parseInt(match, 10);
	                }
	                return null;
	            },
	            getIndexByName = function (names, lower) {
	                var i = 0,
	                    length = names.length,
	                    name, nameLength,
	                    matchLength = 0,
	                    matchIdx = 0,
	                    subValue;

	                for (; i < length; i++) {
	                    name = names[i];
	                    nameLength = name.length;
	                    subValue = value.substr(valueIdx, nameLength);

	                    if (lower) {
	                        subValue = subValue.toLowerCase();
	                    }

	                    if (subValue == name && nameLength > matchLength) {
	                        matchLength = nameLength;
	                        matchIdx = i;
	                    }
	                }

	                if (matchLength) {
	                    valueIdx += matchLength;
	                    return matchIdx + 1;
	                }

	                return null;
	            },
	            checkLiteral = function() {
	                var result = false;
	                if (value.charAt(valueIdx) === format[idx]) {
	                    valueIdx++;
	                    result = true;
	                }
	                return result;
	            },
	            calendar = culture.calendars.standard,
	            year = null,
	            month = null,
	            day = null,
	            hours = null,
	            minutes = null,
	            seconds = null,
	            milliseconds = null,
	            idx = 0,
	            valueIdx = 0,
	            literal = false,
	            date = new Date(),
	            twoDigitYearMax = calendar.twoDigitYearMax || 2029,
	            defaultYear = date.getFullYear(),
	            ch, count, length, pattern,
	            pmHour, UTC, matches,
	            amDesignators, pmDesignators,
	            hoursOffset, minutesOffset,
	            hasTime, match;

	        if (!format) {
	            format = "d"; //shord date format
	        }

	        //if format is part of the patterns get real format
	        pattern = calendar.patterns[format];
	        if (pattern) {
	            format = pattern;
	        }

	        format = format.split("");
	        length = format.length;

	        for (; idx < length; idx++) {
	            ch = format[idx];

	            if (literal) {
	                if (ch === "'") {
	                    literal = false;
	                } else {
	                    checkLiteral();
	                }
	            } else {
	                if (ch === "d") {
	                    count = lookAhead("d");
	                    if (!calendar._lowerDays) {
	                        calendar._lowerDays = lowerLocalInfo(calendar.days);
	                    }

	                    if (day !== null && count > 2) {
	                        continue;
	                    }

	                    day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);

	                    if (day === null || outOfRange(day, 1, 31)) {
	                        return null;
	                    }
	                } else if (ch === "M") {
	                    count = lookAhead("M");
	                    if (!calendar._lowerMonths) {
	                        calendar._lowerMonths = lowerLocalInfo(calendar.months);
	                    }
	                    month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);

	                    if (month === null || outOfRange(month, 1, 12)) {
	                        return null;
	                    }
	                    month -= 1; //because month is zero based
	                } else if (ch === "y") {
	                    count = lookAhead("y");
	                    year = getNumber(count);

	                    if (year === null) {
	                        return null;
	                    }

	                    if (count == 2) {
	                        if (typeof twoDigitYearMax === "string") {
	                            twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
	                        }

	                        year = (defaultYear - defaultYear % 100) + year;
	                        if (year > twoDigitYearMax) {
	                            year -= 100;
	                        }
	                    }
	                } else if (ch === "h" ) {
	                    lookAhead("h");
	                    hours = getNumber(2);
	                    if (hours == 12) {
	                        hours = 0;
	                    }
	                    if (hours === null || outOfRange(hours, 0, 11)) {
	                        return null;
	                    }
	                } else if (ch === "H") {
	                    lookAhead("H");
	                    hours = getNumber(2);
	                    if (hours === null || outOfRange(hours, 0, 23)) {
	                        return null;
	                    }
	                } else if (ch === "m") {
	                    lookAhead("m");
	                    minutes = getNumber(2);
	                    if (minutes === null || outOfRange(minutes, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "s") {
	                    lookAhead("s");
	                    seconds = getNumber(2);
	                    if (seconds === null || outOfRange(seconds, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "f") {
	                    count = lookAhead("f");

	                    match = value.substr(valueIdx, count).match(numberRegExp[3]);
	                    milliseconds = getNumber(count); //move value index position

	                    if (milliseconds !== null) {
	                        milliseconds = parseFloat("0." + match[0], 10);
	                        milliseconds = kendo._round(milliseconds, 3);
	                        milliseconds *= 1000;
	                    }

	                    if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
	                        return null;
	                    }

	                } else if (ch === "t") {
	                    count = lookAhead("t");
	                    amDesignators = calendar.AM;
	                    pmDesignators = calendar.PM;

	                    if (count === 1) {
	                        amDesignators = mapDesignators(amDesignators);
	                        pmDesignators = mapDesignators(pmDesignators);
	                    }

	                    pmHour = getIndexByName(pmDesignators);
	                    if (!pmHour && !getIndexByName(amDesignators)) {
	                        return null;
	                    }
	                }
	                else if (ch === "z") {
	                    UTC = true;
	                    count = lookAhead("z");

	                    if (value.substr(valueIdx, 1) === "Z") {
	                        checkLiteral();
	                        continue;
	                    }

	                    matches = value.substr(valueIdx, 6)
	                                   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

	                    if (!matches) {
	                        return null;
	                    }

	                    matches = matches[0].split(":");

	                    hoursOffset = matches[0];
	                    minutesOffset = matches[1];

	                    if (!minutesOffset && hoursOffset.length > 3) { //(+|-)[hh][mm] format is used
	                        valueIdx = hoursOffset.length - 2;
	                        minutesOffset = hoursOffset.substring(valueIdx);
	                        hoursOffset = hoursOffset.substring(0, valueIdx);
	                    }

	                    hoursOffset = parseInt(hoursOffset, 10);
	                    if (outOfRange(hoursOffset, -12, 13)) {
	                        return null;
	                    }

	                    if (count > 2) {
	                        minutesOffset = parseInt(minutesOffset, 10);
	                        if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
	                            return null;
	                        }
	                    }
	                } else if (ch === "'") {
	                    literal = true;
	                    checkLiteral();
	                } else if (!checkLiteral()) {
	                    return null;
	                }
	            }
	        }

	        // if more characters follow, assume wrong format
	        // https://github.com/telerik/kendo-ui-core/issues/3476
	        if (strict && !/^\s*$/.test(value.substr(valueIdx))) {
	            return null;
	        }

	        hasTime = hours !== null || minutes !== null || seconds || null;

	        if (year === null && month === null && day === null && hasTime) {
	            year = defaultYear;
	            month = date.getMonth();
	            day = date.getDate();
	        } else {
	            if (year === null) {
	                year = defaultYear;
	            }

	            if (day === null) {
	                day = 1;
	            }
	        }

	        if (pmHour && hours < 12) {
	            hours += 12;
	        }

	        if (UTC) {
	            if (hoursOffset) {
	                hours += -hoursOffset;
	            }

	            if (minutesOffset) {
	                minutes += -minutesOffset;
	            }

	            value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
	        } else {
	            value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
	            adjustDST(value, hours);
	        }

	        if (year < 100) {
	            value.setFullYear(year);
	        }

	        if (value.getDate() !== day && UTC === undefined) {
	            return null;
	        }

	        return value;
	    }

	    function parseMicrosoftFormatOffset(offset) {
	        var sign = offset.substr(0, 1) === "-" ? -1 : 1;

	        offset = offset.substring(1);
	        offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);

	        return sign * offset;
	    }

	    function getDefaultFormats(culture) {
	        var length = math.max(FORMATS_SEQUENCE.length, STANDARD_FORMATS.length);
	        var patterns = culture.calendar.patterns;
	        var cultureFormats, formatIdx, idx;
	        var formats = [];

	        for (idx = 0; idx < length; idx++) {
	            cultureFormats = FORMATS_SEQUENCE[idx];
	            for (formatIdx = 0; formatIdx < cultureFormats.length; formatIdx++) {
	                formats.push(patterns[cultureFormats[formatIdx]]);
	            }
	            formats = formats.concat(STANDARD_FORMATS[idx]);
	        }

	        return formats;
	    }

	    function internalParseDate(value, formats, culture, strict) {
	        if (objectToString.call(value) === "[object Date]") {
	            return value;
	        }

	        var idx = 0;
	        var date = null;
	        var length;
	        var tzoffset;

	        if (value && value.indexOf("/D") === 0) {
	            date = dateRegExp.exec(value);
	            if (date) {
	                date = date[1];
	                tzoffset = offsetRegExp.exec(date.substring(1));

	                date = new Date(parseInt(date, 10));

	                if (tzoffset) {
	                    tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);
	                    date = kendo.timezone.apply(date, 0);
	                    date = kendo.timezone.convert(date, 0, -1 * tzoffset);
	                }

	                return date;
	            }
	        }

	        culture = kendo.getCulture(culture);

	        if (!formats) {
	            formats = getDefaultFormats(culture);
	        }

	        formats = isArray(formats) ? formats: [formats];
	        length = formats.length;

	        for (; idx < length; idx++) {
	            date = parseExact(value, formats[idx], culture, strict);
	            if (date) {
	                return date;
	            }
	        }

	        return date;
	    }

	    kendo.parseDate = function(value, formats, culture) {
	        return internalParseDate(value, formats, culture, false);
	    };

	    kendo.parseExactDate = function(value, formats, culture) {
	        return internalParseDate(value, formats, culture, true);
	    };

	    kendo.parseInt = function(value, culture) {
	        var result = kendo.parseFloat(value, culture);
	        if (result) {
	            result = result | 0;
	        }
	        return result;
	    };

	    kendo.parseFloat = function(value, culture, format) {
	        if (!value && value !== 0) {
	           return null;
	        }

	        if (typeof value === NUMBER) {
	           return value;
	        }

	        value = value.toString();
	        culture = kendo.getCulture(culture);

	        var number = culture.numberFormat,
	            percent = number.percent,
	            currency = number.currency,
	            symbol = currency.symbol,
	            percentSymbol = percent.symbol,
	            negative = value.indexOf("-"),
	            parts, isPercent;

	        //handle exponential number
	        if (exponentRegExp.test(value)) {
	            value = parseFloat(value.replace(number["."], "."));
	            if (isNaN(value)) {
	                value = null;
	            }
	            return value;
	        }

	        if (negative > 0) {
	            return null;
	        } else {
	            negative = negative > -1;
	        }

	        if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
	            number = currency;
	            parts = number.pattern[0].replace("$", symbol).split("n");
	            if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
	                value = value.replace(parts[0], "").replace(parts[1], "");
	                negative = true;
	            }
	        } else if (value.indexOf(percentSymbol) > -1) {
	            isPercent = true;
	            number = percent;
	            symbol = percentSymbol;
	        }

	        value = value.replace("-", "")
	                     .replace(symbol, "")
	                     .replace(nonBreakingSpaceRegExp, " ")
	                     .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
	                     .replace(number["."], ".");

	        value = parseFloat(value);

	        if (isNaN(value)) {
	            value = null;
	        } else if (negative) {
	            value *= -1;
	        }

	        if (value && isPercent) {
	            value /= 100;
	        }

	        return value;
	    };
	})();

	    function getShadows(element) {
	        var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
	            radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],
	            blur = math.max((+radius[3]), +(radius[4] || 0));

	        return {
	            left: (-radius[1]) + blur,
	            right: (+radius[1]) + blur,
	            bottom: (+radius[2]) + blur
	        };
	    }

	    function wrap(element, autosize) {
	        var browser = support.browser,
	            percentage,
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight;

	        if (!element.parent().hasClass("k-animation-container")) {
	            var width = element[0].style.width,
	                height = element[0].style.height,
	                percentWidth = percentRegExp.test(width),
	                percentHeight = percentRegExp.test(height);

	            percentage = percentWidth || percentHeight;

	            if (!percentWidth && (!autosize || (autosize && width))) { width = autosize ? outerWidth(element) + 1 : outerWidth(element); }
	            if (!percentHeight && (!autosize || (autosize && height))) { height = outerHeight(element); }

	            element.wrap(
	                         $("<div/>")
	                         .addClass("k-animation-container")
	                         .css({
	                             width: width,
	                             height: height
	                         }));

	            if (percentage) {
	                element.css({
	                    width: "100%",
	                    height: "100%",
	                    boxSizing: "border-box",
	                    mozBoxSizing: "border-box",
	                    webkitBoxSizing: "border-box"
	                });
	            }
	        } else {
	            var wrapper = element.parent(".k-animation-container"),
	                wrapperStyle = wrapper[0].style;

	            if (wrapper.is(":hidden")) {
	                wrapper.css({
	                    display: "",
	                    position: ""
	                });
	            }

	            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

	            if (!percentage) {
	                wrapper.css({
	                    width: autosize ? outerWidth(element) + 1 : outerWidth(element),
	                    height: outerHeight(element),
	                    boxSizing: "content-box",
	                    mozBoxSizing: "content-box",
	                    webkitBoxSizing: "content-box"
	                });
	            }
	        }

	        if (browser.msie && math.floor(browser.version) <= 7) {
	            element.css({ zoom: 1 });
	            element.children(".k-menu").width(element.width());
	        }

	        return element.parent();
	    }

	    function deepExtend(destination) {
	        var i = 1,
	            length = arguments.length;

	        for (i = 1; i < length; i++) {
	            deepExtendOne(destination, arguments[i]);
	        }

	        return destination;
	    }

	    function deepExtendOne(destination, source) {
	        var ObservableArray = kendo.data.ObservableArray,
	            LazyObservableArray = kendo.data.LazyObservableArray,
	            DataSource = kendo.data.DataSource,
	            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
	            property,
	            propValue,
	            propType,
	            propInit,
	            destProp;

	        for (property in source) {
	            propValue = source[property];
	            propType = typeof propValue;

	            if (propType === OBJECT && propValue !== null) {
	                propInit = propValue.constructor;
	            } else {
	                propInit = null;
	            }

	            if (propInit &&
	                propInit !== Array && propInit !== ObservableArray && propInit !== LazyObservableArray &&
	                propInit !== DataSource && propInit !== HierarchicalDataSource && propInit !== RegExp) {

	                if (propValue instanceof Date) {
	                    destination[property] = new Date(propValue.getTime());
	                } else if (isFunction(propValue.clone)) {
	                    destination[property] = propValue.clone();
	                } else {
	                    destProp = destination[property];
	                    if (typeof (destProp) === OBJECT) {
	                        destination[property] = destProp || {};
	                    } else {
	                        destination[property] = {};
	                    }
	                    deepExtendOne(destination[property], propValue);
	                }
	            } else if (propType !== UNDEFINED) {
	                destination[property] = propValue;
	            }
	        }

	        return destination;
	    }

	    function testRx(agent, rxs, dflt) {
	        for (var rx in rxs) {
	            if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
	                return rx;
	            }
	        }
	        return dflt !== undefined ? dflt : agent;
	    }

	    function toHyphens(str) {
	        return str.replace(/([a-z][A-Z])/g, function (g) {
	            return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
	        });
	    }

	    function toCamelCase(str) {
	        return str.replace(/\-(\w)/g, function (strMatch, g1) {
	            return g1.toUpperCase();
	        });
	    }

	    function getComputedStyles(element, properties) {
	        var styles = {}, computedStyle;

	        if (document.defaultView && document.defaultView.getComputedStyle) {
	            computedStyle = document.defaultView.getComputedStyle(element, "");

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle.getPropertyValue(value);
	                });
	            }
	        } else {
	            computedStyle = element.currentStyle;

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle[toCamelCase(value)];
	                });
	            }
	        }

	        if (!kendo.size(styles)) {
	            styles = computedStyle;
	        }

	        return styles;
	    }

	    function isScrollable(element) {
	        if (element && element.className && typeof(element.className) === "string" && element.className.indexOf("k-auto-scrollable") > -1) {
	            return true;
	        }

	        var overflow = getComputedStyles(element, ["overflow"]).overflow;
	        return overflow == "auto" || overflow == "scroll";
	    }

	    function scrollLeft(element, value) {
	        var webkit = support.browser.webkit;
	        var mozila = support.browser.mozilla;
	        var el = element instanceof $ ? element[0] : element;
	        var isRtl;

	        if (!element) {
	            return;
	        }

	        isRtl = support.isRtl(element);

	        if (value !== undefined) {
	            if (isRtl && webkit) {
	                el.scrollLeft = el.scrollWidth - el.clientWidth - value;
	            } else if (isRtl && mozila) {
	                el.scrollLeft = -value;
	            } else {
	                el.scrollLeft = value;
	            }
	        } else {
	            if (isRtl && webkit) {
	                return el.scrollWidth - el.clientWidth - el.scrollLeft;
	            } else {
	                return Math.abs(el.scrollLeft);
	            }
	        }
	    }

	    (function () {
	        support._scrollbar = undefined;

	        support.scrollbar = function (refresh) {
	            if (!isNaN(support._scrollbar) && !refresh) {
	                return support._scrollbar;
	            } else {
	                var div = document.createElement("div"),
	                    result;

	                div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
	                div.innerHTML = "&nbsp;";
	                document.body.appendChild(div);

	                support._scrollbar = result = div.offsetWidth - div.scrollWidth;

	                document.body.removeChild(div);

	                return result;
	            }
	        };

	        support.isRtl = function(element) {
	            return $(element).closest(".k-rtl").length > 0;
	        };

	        var table = document.createElement("table");

	        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
	        try {
	            table.innerHTML = "<tr><td></td></tr>";

	            support.tbodyInnerHtml = true;
	        } catch (e) {
	            support.tbodyInnerHtml = false;
	        }

	        support.touch = "ontouchstart" in window;

	        var docStyle = document.documentElement.style;
	        var transitions = support.transitions = false,
	            transforms = support.transforms = false,
	            elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];

	        support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in docStyle || "msPerspective" in docStyle;
	        support.cssFlexbox = ("flexWrap" in docStyle) || ("WebkitFlexWrap" in docStyle) || ("msFlexWrap" in docStyle);

	        each([ "Moz", "webkit", "O", "ms" ], function () {
	            var prefix = this.toString(),
	                hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

	            if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
	                var lowPrefix = prefix.toLowerCase();

	                transforms = {
	                    css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
	                    prefix: prefix,
	                    event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
	                };

	                if (hasTransitions) {
	                    transitions = transforms;
	                    transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
	                }

	                return false;
	            }
	        });

	        table = null;

	        support.transforms = transforms;
	        support.transitions = transitions;

	        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;

	        try {
	            support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
	            support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
	        } catch(e) {
	            //window.outerWidth throws error when in IE showModalDialog.
	            support.screenWidth = window.screen.availWidth;
	            support.screenHeight = window.screen.availHeight;
	        }

	        support.detectOS = function (ua) {
	            var os = false, minorVersion, match = [],
	                notAndroidPhone = !/mobile safari/i.test(ua),
	                agentRxs = {
	                    wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
	                    fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
	                    android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
	                    iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
	                    ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
	                    meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
	                    webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
	                    blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
	                    playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
	                    windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
	                    tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
	                    sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
	                    ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
	                },
	                osRxs = {
	                    ios: /^i(phone|pad|pod)$/i,
	                    android: /^android|fire$/i,
	                    blackberry: /^blackberry|playbook/i,
	                    windows: /windows/,
	                    wp: /wp/,
	                    flat: /sailfish|ffos|tizen/i,
	                    meego: /meego/
	                },
	                formFactorRxs = {
	                    tablet: /playbook|ipad|fire/i
	                },
	                browserRxs = {
	                    omini: /Opera\sMini/i,
	                    omobile: /Opera\sMobi/i,
	                    firefox: /Firefox|Fennec/i,
	                    mobilesafari: /version\/.*safari/i,
	                    ie: /MSIE|Windows\sPhone/i,
	                    chrome: /chrome|crios/i,
	                    webkit: /webkit/i
	                };

	            for (var agent in agentRxs) {
	                if (agentRxs.hasOwnProperty(agent)) {
	                    match = ua.match(agentRxs[agent]);
	                    if (match) {
	                        if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

	                        os = {};
	                        os.device = agent;
	                        os.tablet = testRx(agent, formFactorRxs, false);
	                        os.browser = testRx(ua, browserRxs, "default");
	                        os.name = testRx(agent, osRxs);
	                        os[os.name] = true;
	                        os.majorVersion = match[2];
	                        os.minorVersion = match[3].replace("_", ".");
	                        minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
	                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
	                        os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
	                        os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.

	                        if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
	                            os.tablet = agent;
	                        }

	                        break;
	                    }
	                }
	            }
	            return os;
	        };

	        var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);

	        support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;

	        support.hasNativeScrolling = false;

	        if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
	            support.hasNativeScrolling = mobileOS;
	        }

	        support.delayedClick = function() {

	            // only the mobile devices with touch events do this.
	            if (support.touch) {
	                // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),
	                // delay their click events.
	                if (mobileOS.ios) {
	                    return true;
	                }

	                if (mobileOS.android) {

	                    if (!support.browser.chrome) { // older webkits and webviews delay the click
	                        return true;
	                    }

	                    // from here on, we deal with Chrome on Android.
	                    if (support.browser.version < 32) {
	                        return false;
	                    }

	                    // Chrome 32+ does conditional fast clicks if the view port is not user scalable.
	                    return !($("meta[name=viewport]").attr("content") || "").match(/user-scalable=no/i);
	                }
	            }

	            return false;
	        };

	        support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);

	        support.detectBrowser = function(ua) {
	            var browser = false, match = [],
	                browserRxs = {
	                    edge: /(edge)[ \/]([\w.]+)/i,
	                    webkit: /(chrome)[ \/]([\w.]+)/i,
	                    safari: /(webkit)[ \/]([\w.]+)/i,
	                    opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
	                    msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
	                    mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
	                };

	            for (var agent in browserRxs) {
	                if (browserRxs.hasOwnProperty(agent)) {
	                    match = ua.match(browserRxs[agent]);
	                    if (match) {
	                        browser = {};
	                        browser[agent] = true;
	                        browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
	                        browser.version = parseInt(document.documentMode || match[2], 10);

	                        break;
	                    }
	                }
	            }

	            return browser;
	        };

	        support.browser = support.detectBrowser(navigator.userAgent);

	        support.detectClipboardAccess = function() {
	            var commands = {
	                copy: document.queryCommandSupported ? document.queryCommandSupported("copy") : false,
	                cut: document.queryCommandSupported ? document.queryCommandSupported("cut") : false,
	                paste : document.queryCommandSupported ? document.queryCommandSupported("paste") : false
	            };

	            if (support.browser.chrome) {
	                //not using queryCommandSupported due to chromium issues 476508 and 542948
	                commands.paste = false;
	                if(support.browser.version >= 43) {
	                    commands.copy = true;
	                    commands.cut = true;
	                }
	            }

	            return commands;
	        };

	        support.clipboard = support.detectClipboardAccess();

	        support.zoomLevel = function() {
	            try {
	                var browser = support.browser;
	                var ie11WidthCorrection = 0;
	                var docEl = document.documentElement;

	                if (browser.msie && browser.version == 11 && docEl.scrollHeight > docEl.clientHeight && !support.touch) {
	                    ie11WidthCorrection = support.scrollbar();
	                }

	                return support.touch ? (docEl.clientWidth / window.innerWidth) :
	                       browser.msie && browser.version >= 10 ? (((top || window).document.documentElement.offsetWidth + ie11WidthCorrection) / (top || window).innerWidth) : 1;
	            } catch(e) {
	                return 1;
	            }
	        };

	        support.cssBorderSpacing = typeof docStyle.borderSpacing != "undefined" && !(support.browser.msie && support.browser.version < 8);

	        (function(browser) {
	            // add browser-specific CSS class
	            var cssClass = "",
	                docElement = $(document.documentElement),
	                majorVersion = parseInt(browser.version, 10);

	            if (browser.msie) {
	                cssClass = "ie";
	            } else if (browser.mozilla) {
	                cssClass = "ff";
	            } else if (browser.safari) {
	                cssClass = "safari";
	            } else if (browser.webkit) {
	                cssClass = "webkit";
	            } else if (browser.opera) {
	                cssClass = "opera";
	            } else if (browser.edge) {
	                cssClass = "edge";
	            }

	            if (cssClass) {
	                cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
	            }
	            if (support.mobileOS) {
	                cssClass += " k-mobile";
	            }

	            if (!support.cssFlexbox) {
	                cssClass += " k-no-flexbox";
	            }

	            docElement.addClass(cssClass);
	        })(support.browser);

	        support.eventCapture = document.documentElement.addEventListener;

	        var input = document.createElement("input");

	        support.placeholder = "placeholder" in input;
	        support.propertyChangeEvent = "onpropertychange" in input;

	        support.input = (function() {
	            var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
	            var length = types.length;
	            var value = "test";
	            var result = {};
	            var idx = 0;
	            var type;

	            for (;idx < length; idx++) {
	                type = types[idx];
	                input.setAttribute("type", type);
	                input.value = value;

	                result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
	            }

	            return result;
	        })();

	        input.style.cssText = "float:left;";

	        support.cssFloat = !!input.style.cssFloat;

	        input = null;

	        support.stableSort = (function() {
	            // Chrome sort is not stable for more than *10* items
	            // IE9+ sort is not stable for than *512* items
	            var threshold = 513;

	            var sorted = [{
	                index: 0,
	                field: "b"
	            }];

	            for (var i = 1; i < threshold; i++) {
	                sorted.push({
	                    index: i,
	                    field: "a"
	                });
	            }

	            sorted.sort(function(a, b) {
	                return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
	            });

	            return sorted[0].index === 1;
	        })();

	        support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
	                                  elementProto.msMatchesSelector || elementProto.oMatchesSelector ||
	                                  elementProto.matchesSelector || elementProto.matches ||
	          function( selector ) {
	              var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),
	                  i = nodeList.length;

	              while (i--) {
	                  if (nodeList[i] == this) {
	                      return true;
	                  }
	              }

	              return false;
	          };

	        support.pushState = window.history && window.history.pushState;

	        var documentMode = document.documentMode;

	        support.hashChange = ("onhashchange" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection

	        support.customElements = ("registerElement" in window.document);

	        var chrome = support.browser.chrome;
	        support.msPointers = !chrome && window.MSPointerEvent;
	        support.pointers = !chrome && window.PointerEvent;
	        support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);
	    })();


	    function size(obj) {
	        var result = 0, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
	                result++;
	            }
	        }

	        return result;
	    }

	    function getOffset(element, type, positioned) {
	        if (!type) {
	            type = "offset";
	        }

	        var offset = element[type]();
	        // clone ClientRect object to JS object (jQuery3)
	        var result = {
	            top: offset.top,
	            right: offset.right,
	            bottom: offset.bottom,
	            left: offset.left
	        };

	        // IE10 touch zoom is living in a separate viewport
	        if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
	            var sign = support.isRtl(element) ? 1 : -1;

	            result.top -= (window.pageYOffset - (document.documentElement.scrollTop));
	            result.left -= (window.pageXOffset + (sign * document.documentElement.scrollLeft));
	        }

	        return result;
	    }

	    var directions = {
	        left: { reverse: "right" },
	        right: { reverse: "left" },
	        down: { reverse: "up" },
	        up: { reverse: "down" },
	        top: { reverse: "bottom" },
	        bottom: { reverse: "top" },
	        "in": { reverse: "out" },
	        out: { reverse: "in" }
	    };

	    function parseEffects(input) {
	        var effects = {};

	        each((typeof input === "string" ? input.split(" ") : input), function(idx) {
	            effects[idx] = this;
	        });

	        return effects;
	    }

	    function fx(element) {
	        return new kendo.effects.Element(element);
	    }

	    var effects = {};

	    $.extend(effects, {
	        enabled: true,
	        Element: function(element) {
	            this.element = $(element);
	        },

	        promise: function(element, options) {
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }

	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            if (options.init) {
	                options.init();
	            }

	            if (options.completeCallback) {
	                options.completeCallback(element); // call the external complete callback with the element
	            }

	            element.dequeue();
	        },

	        disable: function() {
	            this.enabled = false;
	            this.promise = this.promiseShim;
	        },

	        enable: function() {
	            this.enabled = true;
	            this.promise = this.animatedPromise;
	        }
	    });

	    effects.promiseShim = effects.promise;

	    function prepareAnimationOptions(options, duration, reverse, complete) {
	        if (typeof options === STRING) {
	            // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

	            // only callback is provided e.g. animate(element, options, function() {});
	            if (isFunction(duration)) {
	                complete = duration;
	                duration = 400;
	                reverse = false;
	            }

	            if (isFunction(reverse)) {
	                complete = reverse;
	                reverse = false;
	            }

	            if (typeof duration === BOOLEAN){
	                reverse = duration;
	                duration = 400;
	            }

	            options = {
	                effects: options,
	                duration: duration,
	                reverse: reverse,
	                complete: complete
	            };
	        }

	        return extend({
	            //default options
	            effects: {},
	            duration: 400, //jQuery default duration
	            reverse: false,
	            init: noop,
	            teardown: noop,
	            hide: false
	        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

	    }

	    function animate(element, options, duration, reverse, complete) {
	        var idx = 0,
	            length = element.length,
	            instance;

	        for (; idx < length; idx ++) {
	            instance = $(element[idx]);
	            instance.queue(function() {
	                effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
	            });
	        }

	        return element;
	    }

	    function toggleClass(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");

	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }

	        return element;
	    }

	    if (!("kendoAnimate" in $.fn)) {
	        extend($.fn, {
	            kendoStop: function(clearQueue, gotoEnd) {
	                return this.stop(clearQueue, gotoEnd);
	            },

	            kendoAnimate: function(options, duration, reverse, complete) {
	                return animate(this, options, duration, reverse, complete);
	            },

	            kendoAddClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, true);
	            },

	            kendoRemoveClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, false);
	            },
	            kendoToggleClass: function(classes, options, toggle){
	                return kendo.toggleClass(this, classes, options, toggle);
	            }
	        });
	    }

	    var ampRegExp = /&/g,
	        ltRegExp = /</g,
	        quoteRegExp = /"/g,
	        aposRegExp = /'/g,
	        gtRegExp = />/g;
	    function htmlEncode(value) {
	        return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
	    }

	    var eventTarget = function (e) {
	        return e.target;
	    };

	    if (support.touch) {

	        eventTarget = function(e) {
	            var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

	            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
	        };

	        each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function(m, value) {
	            $.fn[value] = function(callback) {
	                return this.bind(value, callback);
	            };
	        });
	    }

	    if (support.touch) {
	        if (!support.mobileOS) {
	            support.mousedown = "mousedown touchstart";
	            support.mouseup = "mouseup touchend";
	            support.mousemove = "mousemove touchmove";
	            support.mousecancel = "mouseleave touchcancel";
	            support.click = "click";
	            support.resize = "resize";
	        } else {
	            support.mousedown = "touchstart";
	            support.mouseup = "touchend";
	            support.mousemove = "touchmove";
	            support.mousecancel = "touchcancel";
	            support.click = "touchend";
	            support.resize = "orientationchange";
	        }
	    } else if (support.pointers) {
	        support.mousemove = "pointermove";
	        support.mousedown = "pointerdown";
	        support.mouseup = "pointerup";
	        support.mousecancel = "pointercancel";
	        support.click = "pointerup";
	        support.resize = "orientationchange resize";
	    } else if (support.msPointers) {
	        support.mousemove = "MSPointerMove";
	        support.mousedown = "MSPointerDown";
	        support.mouseup = "MSPointerUp";
	        support.mousecancel = "MSPointerCancel";
	        support.click = "MSPointerUp";
	        support.resize = "orientationchange resize";
	    } else {
	        support.mousemove = "mousemove";
	        support.mousedown = "mousedown";
	        support.mouseup = "mouseup";
	        support.mousecancel = "mouseleave";
	        support.click = "click";
	        support.resize = "resize";
	    }

	    var wrapExpression = function(members, paramName) {
	        var result = paramName || "d",
	            index,
	            idx,
	            length,
	            member,
	            count = 1;

	        for (idx = 0, length = members.length; idx < length; idx++) {
	            member = members[idx];
	            if (member !== "") {
	                index = member.indexOf("[");

	                if (index !== 0) {
	                    if (index == -1) {
	                        member = "." + member;
	                    } else {
	                        count++;
	                        member = "." + member.substring(0, index) + " || {})" + member.substring(index);
	                    }
	                }

	                count++;
	                result += member + ((idx < length - 1) ? " || {})" : ")");
	            }
	        }
	        return new Array(count).join("(") + result;
	    },
	    localUrlRe = /^([a-z]+:)?\/\//i;

	    extend(kendo, {
	        widgets: [],
	        _widgetRegisteredCallbacks: [],
	        ui: kendo.ui || {},
	        fx: kendo.fx || fx,
	        effects: kendo.effects || effects,
	        mobile: kendo.mobile || { },
	        data: kendo.data || {},
	        dataviz: kendo.dataviz || {},
	        drawing: kendo.drawing || {},
	        spreadsheet: { messages: {} },
	        keys: {
	            INSERT: 45,
	            DELETE: 46,
	            BACKSPACE: 8,
	            TAB: 9,
	            ENTER: 13,
	            ESC: 27,
	            LEFT: 37,
	            UP: 38,
	            RIGHT: 39,
	            DOWN: 40,
	            END: 35,
	            HOME: 36,
	            SPACEBAR: 32,
	            PAGEUP: 33,
	            PAGEDOWN: 34,
	            F2: 113,
	            F10: 121,
	            F12: 123,
	            NUMPAD_PLUS: 107,
	            NUMPAD_MINUS: 109,
	            NUMPAD_DOT: 110
	        },
	        support: kendo.support || support,
	        animate: kendo.animate || animate,
	        ns: "",
	        attr: function(value) {
	            return "data-" + kendo.ns + value;
	        },
	        getShadows: getShadows,
	        wrap: wrap,
	        deepExtend: deepExtend,
	        getComputedStyles: getComputedStyles,
	        webComponents: kendo.webComponents || [],
	        isScrollable: isScrollable,
	        scrollLeft: scrollLeft,
	        size: size,
	        toCamelCase: toCamelCase,
	        toHyphens: toHyphens,
	        getOffset: kendo.getOffset || getOffset,
	        parseEffects: kendo.parseEffects || parseEffects,
	        toggleClass: kendo.toggleClass || toggleClass,
	        directions: kendo.directions || directions,
	        Observable: Observable,
	        Class: Class,
	        Template: Template,
	        template: proxy(Template.compile, Template),
	        render: proxy(Template.render, Template),
	        stringify: proxy(JSON.stringify, JSON),
	        eventTarget: eventTarget,
	        htmlEncode: htmlEncode,
	        isLocalUrl: function(url) {
	            return url && !localUrlRe.test(url);
	        },

	        expr: function(expression, safe, paramName) {
	            expression = expression || "";

	            if (typeof safe == STRING) {
	                paramName = safe;
	                safe = false;
	            }

	            paramName = paramName || "d";

	            if (expression && expression.charAt(0) !== "[") {
	                expression = "." + expression;
	            }

	            if (safe) {
	                expression = expression.replace(/"([^.]*)\.([^"]*)"/g,'"$1_$DOT$_$2"');
	                expression = expression.replace(/'([^.]*)\.([^']*)'/g,"'$1_$DOT$_$2'");
	                expression = wrapExpression(expression.split("."), paramName);
	                expression = expression.replace(/_\$DOT\$_/g, ".");
	            } else {
	                expression = paramName + expression;
	            }

	            return expression;
	        },

	        getter: function(expression, safe) {
	            var key = expression + safe;
	            return getterCache[key] = getterCache[key] || new Function("d", "return " + kendo.expr(expression, safe));
	        },

	        setter: function(expression) {
	            return setterCache[expression] = setterCache[expression] || new Function("d,value", kendo.expr(expression) + "=value");
	        },

	        accessor: function(expression) {
	            return {
	                get: kendo.getter(expression),
	                set: kendo.setter(expression)
	            };
	        },

	        guid: function() {
	            var id = "", i, random;

	            for (i = 0; i < 32; i++) {
	                random = math.random() * 16 | 0;

	                if (i == 8 || i == 12 || i == 16 || i == 20) {
	                    id += "-";
	                }
	                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
	            }

	            return id;
	        },

	        roleSelector: function(role) {
	            return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
	        },

	        directiveSelector: function(directives) {
	            var selectors = directives.split(" ");

	            if (selectors) {
	                for (var i = 0; i < selectors.length; i++) {
	                    if (selectors[i] != "view") {
	                        selectors[i] = selectors[i].replace(/(\w*)(view|bar|strip|over)$/, "$1-$2");
	                    }
	                }
	            }

	            return selectors.join(" ").replace(/(\S+)/g, "kendo-mobile-$1,").slice(0, -1);
	        },

	        triggeredByInput: function(e) {
	            return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
	        },

	        onWidgetRegistered: function(callback) {
	            for (var i = 0, len = kendo.widgets.length; i < len; i++) {
	                callback(kendo.widgets[i]);
	            }

	            kendo._widgetRegisteredCallbacks.push(callback);
	        },

	        logToConsole: function(message, type) {
	            var console = window.console;

	            if (!kendo.suppressLog && typeof(console) != "undefined" && console.log) {
	                console[type || "log"](message);
	            }
	        }
	    });

	    var Widget = Observable.extend( {
	        init: function(element, options) {
	            var that = this;

	            that.element = kendo.jQuery(element).handler(that);

	            that.angular("init", options);

	            Observable.fn.init.call(that);

	            var dataSource = options ? options.dataSource : null;

	            if (dataSource) {
	                // avoid deep cloning the data source
	                options = extend({}, options, { dataSource: {} });
	            }

	            options = that.options = extend(true, {}, that.options, options);

	            if (dataSource) {
	                options.dataSource = dataSource;
	            }

	            if (!that.element.attr(kendo.attr("role"))) {
	                that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
	            }

	            that.element.data("kendo" + options.prefix + options.name, that);

	            that.bind(that.events, options);
	        },

	        events: [],

	        options: {
	            prefix: ""
	        },

	        _hasBindingTarget: function() {
	            return !!this.element[0].kendoBindingTarget;
	        },

	        _tabindex: function(target) {
	            target = target || this.wrapper;

	            var element = this.element,
	                TABINDEX = "tabindex",
	                tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);

	            element.removeAttr(TABINDEX);

	            target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
	        },

	        setOptions: function(options) {
	            this._setEvents(options);
	            $.extend(this.options, options);
	        },

	        _setEvents: function(options) {
	            var that = this,
	                idx = 0,
	                length = that.events.length,
	                e;

	            for (; idx < length; idx ++) {
	                e = that.events[idx];
	                if (that.options[e] && options[e]) {
	                    that.unbind(e, that.options[e]);
	                }
	            }

	            that.bind(that.events, options);
	        },

	        resize: function(force) {
	            var size = this.getSize(),
	                currentSize = this._size;

	            if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	                this._size = size;
	                this._resize(size, force);
	                this.trigger("resize", size);
	            }
	        },

	        getSize: function() {
	            return kendo.dimensions(this.element);
	        },

	        size: function(size) {
	            if (!size) {
	                return this.getSize();
	            } else {
	                this.setSize(size);
	            }
	        },

	        setSize: $.noop,
	        _resize: $.noop,

	        destroy: function() {
	            var that = this;

	            that.element.removeData("kendo" + that.options.prefix + that.options.name);
	            that.element.removeData("handler");
	            that.unbind();
	        },
	        _destroy: function() {
	            this.destroy();
	        },
	        angular: function(){},

	        _muteAngularRebind: function(callback) {
	            this._muteRebind = true;

	            callback.call(this);

	            this._muteRebind = false;
	        }
	    });

	    var DataBoundWidget = Widget.extend({
	        // Angular consumes these.
	        dataItems: function() {
	            return this.dataSource.flatView();
	        },

	        _angularItems: function(cmd) {
	            var that = this;
	            that.angular(cmd, function(){
	                return {
	                    elements: that.items(),
	                    data: $.map(that.dataItems(), function(dataItem){
	                        return { dataItem: dataItem };
	                    })
	                };
	            });
	        }
	    });

	    kendo.dimensions = function(element, dimensions) {
	        var domElement = element[0];

	        if (dimensions) {
	            element.css(dimensions);
	        }

	        return { width: domElement.offsetWidth, height: domElement.offsetHeight };
	    };

	    kendo.notify = noop;

	    var templateRegExp = /template$/i,
	        jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
	        jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]+\]$/,
	        dashRegExp = /([A-Z])/g;

	    function parseOption(element, option) {
	        var value;

	        if (option.indexOf("data") === 0) {
	            option = option.substring(4);
	            option = option.charAt(0).toLowerCase() + option.substring(1);
	        }

	        option = option.replace(dashRegExp, "-$1");
	        value = element.getAttribute("data-" + kendo.ns + option);

	        if (value === null) {
	            value = undefined;
	        } else if (value === "null") {
	            value = null;
	        } else if (value === "true") {
	            value = true;
	        } else if (value === "false") {
	            value = false;
	        } else if (numberRegExp.test(value)) {
	            value = parseFloat(value);
	        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
	            value = new Function("return (" + value + ")")();
	        }

	        return value;
	    }

	    function parseOptions(element, options) {
	        var result = {},
	            option,
	            value;

	        for (option in options) {
	            value = parseOption(element, option);

	            if (value !== undefined) {

	                if (templateRegExp.test(option)) {
	                    if(typeof value === "string") {
	                        value = kendo.template($("#" + value).html());
	                    } else {
	                        value = element.getAttribute(option);
	                    }
	                }

	                result[option] = value;
	            }
	        }

	        return result;
	    }

	    kendo.initWidget = function(element, options, roles) {
	        var result,
	            option,
	            widget,
	            idx,
	            length,
	            role,
	            value,
	            dataSource,
	            fullPath,
	            widgetKeyRegExp;

	        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
	        if (!roles) {
	            roles = kendo.ui.roles;
	        } else if (roles.roles) {
	            roles = roles.roles;
	        }

	        element = element.nodeType ? element : element[0];

	        role = element.getAttribute("data-" + kendo.ns + "role");

	        if (!role) {
	            return;
	        }

	        fullPath = role.indexOf(".") === -1;

	        // look for any widget that may be already instantiated based on this role.
	        // The prefix used is unknown, hence the regexp
	        //

	        if (fullPath) {
	            widget = roles[role];
	        } else { // full namespace path - like kendo.ui.Widget
	            widget = kendo.getter(role)(window);
	        }

	        var data = $(element).data(),
	            widgetKey = widget ? "kendo" + widget.fn.options.prefix + widget.fn.options.name : "";

	        if (fullPath) {
	            widgetKeyRegExp = new RegExp("^kendo.*" + role + "$", "i");
	        } else { // full namespace path - like kendo.ui.Widget
	            widgetKeyRegExp = new RegExp("^" + widgetKey + "$", "i");
	        }

	        for(var key in data) {
	            if (key.match(widgetKeyRegExp)) {
	                // we have detected a widget of the same kind - save its reference, we will set its options
	                if (key === widgetKey) {
	                    result = data[key];
	                } else {
	                    return data[key];
	                }
	            }
	        }

	        if (!widget) {
	            return;
	        }

	        dataSource = parseOption(element, "dataSource");

	        options = $.extend({}, parseOptions(element, widget.fn.options), options);

	        if (dataSource) {
	            if (typeof dataSource === STRING) {
	                options.dataSource = kendo.getter(dataSource)(window);
	            } else {
	                options.dataSource = dataSource;
	            }
	        }

	        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
	            option = widget.fn.events[idx];

	            value = parseOption(element, option);

	            if (value !== undefined) {
	                options[option] = kendo.getter(value)(window);
	            }
	        }

	        if (!result) {
	            result = new widget(element, options);
	        } else if (!$.isEmptyObject(options)) {
	            result.setOptions(options);
	        }

	        return result;
	    };

	    kendo.rolesFromNamespaces = function(namespaces) {
	        var roles = [],
	            idx,
	            length;

	        if (!namespaces[0]) {
	            namespaces = [kendo.ui, kendo.dataviz.ui];
	        }

	        for (idx = 0, length = namespaces.length; idx < length; idx ++) {
	            roles[idx] = namespaces[idx].roles;
	        }

	        return extend.apply(null, [{}].concat(roles.reverse()));
	    };

	    kendo.init = function(element) {
	        var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));

	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            kendo.initWidget(this, {}, roles);
	        });
	    };

	    kendo.destroy = function(element) {
	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            var data = $(this).data();

	            for (var key in data) {
	                if (key.indexOf("kendo") === 0 && typeof data[key].destroy === FUNCTION) {
	                    data[key].destroy();
	                }
	            }
	        });
	    };

	    function containmentComparer(a, b) {
	        return $.contains(a, b) ? -1 : 1;
	    }

	    function resizableWidget() {
	        var widget = $(this);
	        return ($.inArray(widget.attr("data-" + kendo.ns + "role"), ["slider", "rangeslider"]) > -1) || widget.is(":visible");
	    }

	    kendo.resize = function(element, force) {
	        var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);

	        if (!widgets.length) {
	            return;
	        }

	        // sort widgets based on their parent-child relation
	        var widgetsArray = $.makeArray(widgets);
	        widgetsArray.sort(containmentComparer);

	        // resize widgets
	        $.each(widgetsArray, function () {
	            var widget = kendo.widgetInstance($(this));
	            if (widget) {
	                widget.resize(force);
	            }
	        });
	    };

	    kendo.parseOptions = parseOptions;

	    extend(kendo.ui, {
	        Widget: Widget,
	        DataBoundWidget: DataBoundWidget,
	        roles: {},
	        progress: function(container, toggle, options) {
	            var mask = container.find(".k-loading-mask"),
	                support = kendo.support,
	                browser = support.browser,
	                isRtl, leftRight, webkitCorrection, containerScrollLeft, cssClass;

	                options = $.extend({}, {
	                    width: "100%",
	                    height: "100%",
	                    top: container.scrollTop(),
	                    opacity: false
	                }, options);

	                cssClass = options.opacity ? 'k-loading-mask k-opaque' : 'k-loading-mask';

	            if (toggle) {
	                if (!mask.length) {
	                    isRtl = support.isRtl(container);
	                    leftRight = isRtl ? "right" : "left";
	                    containerScrollLeft = container.scrollLeft();
	                    webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;

	                    mask = $(kendo.format("<div class='{0}'><span class='k-loading-text'>{1}</span><div class='k-loading-image'/><div class='k-loading-color'/></div>", cssClass, kendo.ui.progress.messages.loading))
	                        .width(options.width).height(options.height)
	                        .css("top", options.top)
	                        .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
	                        .prependTo(container);
	                }
	            } else if (mask) {
	                mask.remove();
	            }
	        },
	        plugin: function(widget, register, prefix) {
	            var name = widget.fn.options.name,
	                getter;

	            register = register || kendo.ui;
	            prefix = prefix || "";

	            register[name] = widget;

	            register.roles[name.toLowerCase()] = widget;

	            getter = "getKendo" + prefix + name;
	            name = "kendo" + prefix + name;

	            var widgetEntry = { name: name, widget: widget, prefix: prefix || "" };
	            kendo.widgets.push(widgetEntry);

	            for (var i = 0, len = kendo._widgetRegisteredCallbacks.length; i < len; i++) {
	                kendo._widgetRegisteredCallbacks[i](widgetEntry);
	            }

	            $.fn[name] = function(options) {
	                var value = this,
	                    args;

	                if (typeof options === STRING) {
	                    args = slice.call(arguments, 1);

	                    this.each(function(){
	                        var widget = $.data(this, name),
	                            method,
	                            result;

	                        if (!widget) {
	                            throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
	                        }

	                        method = widget[options];

	                        if (typeof method !== FUNCTION) {
	                            throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
	                        }

	                        result = method.apply(widget, args);

	                        if (result !== undefined) {
	                            value = result;
	                            return false;
	                        }
	                    });
	                } else {
	                    this.each(function() {
	                        return new widget(this, options);
	                    });
	                }

	                return value;
	            };

	            $.fn[name].widget = widget;

	            $.fn[getter] = function() {
	                return this.data(name);
	            };
	        }
	    });

	    kendo.ui.progress.messages = {
	        loading: "Loading..."
	    };

	    var ContainerNullObject = { bind: function () { return this; }, nullObject: true, options: {} };

	    var MobileWidget = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.element.autoApplyNS();
	            this.wrapper = this.element;
	            this.element.addClass("km-widget");
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.element.kendoDestroy();
	        },

	        options: {
	            prefix: "Mobile"
	        },

	        events: [],

	        view: function() {
	            var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
	            return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
	        },

	        viewHasNativeScrolling: function() {
	            var view = this.view();
	            return view && view.options.useNativeScrolling;
	        },

	        container: function() {
	            var element = this.element.closest(kendo.roleSelector("view layout modalview drawer splitview"));
	            return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;
	        }
	    });

	    extend(kendo.mobile, {
	        init: function(element) {
	            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
	        },

	        appLevelNativeScrolling: function() {
	            return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;
	        },

	        roles: {},

	        ui: {
	            Widget: MobileWidget,
	            DataBoundWidget: DataBoundWidget.extend(MobileWidget.prototype),
	            roles: {},
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
	            }
	        }
	    });

	    deepExtend(kendo.dataviz, {
	        init: function(element) {
	            kendo.init(element, kendo.dataviz.ui);
	        },
	        ui: {
	            roles: {},
	            themes: {},
	            views: [],
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.dataviz.ui);
	            }
	        },
	        roles: {}
	    });

	    kendo.touchScroller = function(elements, options) {
	        // return the first touch scroller
	        if (!options){ options = {}; }

	        options.useNative = true;

	        return $(elements).map(function(idx, element) {
	            element = $(element);
	            if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
	                element.kendoMobileScroller(options);
	                return element.data("kendoMobileScroller");
	            } else {
	                return false;
	            }
	        })[0];
	    };

	    kendo.preventDefault = function(e) {
	        e.preventDefault();
	    };

	    kendo.widgetInstance = function(element, suites) {
	        var role = element.data(kendo.ns + "role"),
	            widgets = [], i, length;

	        if (role) {
	            // HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
	            if (role === "content") {
	                role = "scroller";
	            }

	            if (suites) {
	                if (suites[0]) {
	                    for (i = 0, length = suites.length; i < length; i ++) {
	                        widgets.push(suites[i].roles[role]);
	                    }
	                } else {
	                    widgets.push(suites.roles[role]);
	                }
	            }
	            else {
	                widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role],  kendo.mobile.ui.roles[role] ];
	            }

	            if (role.indexOf(".") >= 0) {
	                widgets = [ kendo.getter(role)(window) ];
	            }

	            for (i = 0, length = widgets.length; i < length; i ++) {
	                var widget = widgets[i];
	                if (widget) {
	                    var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
	                    if (instance) {
	                        return instance;
	                    }
	                }
	            }
	        }
	    };

	    kendo.onResize = function(callback) {
	        var handler = callback;
	        if (support.mobileOS.android) {
	            handler = function() { setTimeout(callback, 600); };
	        }

	        $(window).on(support.resize, handler);
	        return handler;
	    };

	    kendo.unbindResize = function(callback) {
	        $(window).off(support.resize, callback);
	    };

	    kendo.attrValue = function(element, key) {
	        return element.data(kendo.ns + key);
	    };

	    kendo.days = {
	        Sunday: 0,
	        Monday: 1,
	        Tuesday: 2,
	        Wednesday: 3,
	        Thursday: 4,
	        Friday: 5,
	        Saturday: 6
	    };

	    function focusable(element, isTabIndexNotNaN) {
	        var nodeName = element.nodeName.toLowerCase();

	        return (/input|select|textarea|button|object/.test(nodeName) ?
	                !element.disabled :
	                "a" === nodeName ?
	                element.href || isTabIndexNotNaN :
	                isTabIndexNotNaN
	               ) &&
	            visible(element);
	    }

	    function visible(element) {
	        return $.expr.filters.visible(element) &&
	            !$(element).parents().addBack().filter(function() {
	                return $.css(this,"visibility") === "hidden";
	            }).length;
	    }

	    $.extend($.expr[ ":" ], {
	        kendoFocusable: function(element) {
	            var idx = $.attr(element, "tabindex");
	            return focusable(element, !isNaN(idx) && idx > -1);
	        }
	    });

	    var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
	    var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";

	    var MouseEventNormalizer = {
	        setupMouseMute: function() {
	            var idx = 0,
	                length = MOUSE_EVENTS.length,
	                element = document.documentElement;

	            if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
	                return;
	            }

	            MouseEventNormalizer.mouseTrap = true;

	            MouseEventNormalizer.bustClick = false;
	            MouseEventNormalizer.captureMouse = false;

	            var handler = function(e) {
	                if (MouseEventNormalizer.captureMouse) {
	                    if (e.type === "click") {
	                        if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                    } else {
	                        e.stopPropagation();
	                    }
	                }
	            };

	            for (; idx < length; idx++) {
	                element.addEventListener(MOUSE_EVENTS[idx], handler, true);
	            }
	        },

	        muteMouse: function(e) {
	            MouseEventNormalizer.captureMouse = true;
	            if (e.data.bustClick) {
	                MouseEventNormalizer.bustClick = true;
	            }
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	        },

	        unMuteMouse: function() {
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	            MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {
	                MouseEventNormalizer.captureMouse = false;
	                MouseEventNormalizer.bustClick = false;
	            }, 400);
	        }
	    };

	    var eventMap = {
	        down: "touchstart mousedown",
	        move: "mousemove touchmove",
	        up: "mouseup touchend touchcancel",
	        cancel: "mouseleave touchcancel"
	    };

	    if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
	        eventMap = {
	            down: "touchstart",
	            move: "touchmove",
	            up: "touchend touchcancel",
	            cancel: "touchcancel"
	        };
	    } else if (support.pointers) {
	        eventMap = {
	            down: "pointerdown",
	            move: "pointermove",
	            up: "pointerup",
	            cancel: "pointercancel pointerleave"
	        };
	    } else if (support.msPointers) {
	        eventMap = {
	            down: "MSPointerDown",
	            move: "MSPointerMove",
	            up: "MSPointerUp",
	            cancel: "MSPointerCancel MSPointerLeave"
	        };
	    }

	    if (support.msPointers && !("onmspointerenter" in window)) { // IE10
	        // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
	        $.each({
	            MSPointerEnter: "MSPointerOver",
	            MSPointerLeave: "MSPointerOut"
	        }, function( orig, fix ) {
	            $.event.special[ orig ] = {
	                delegateType: fix,
	                bindType: fix,

	                handle: function( event ) {
	                    var ret,
	                        target = this,
	                        related = event.relatedTarget,
	                        handleObj = event.handleObj;

	                    // For mousenter/leave call the handler if related is outside the target.
	                    // NB: No relatedTarget if the mouse left/entered the browser window
	                    if ( !related || (related !== target && !$.contains( target, related )) ) {
	                        event.type = handleObj.origType;
	                        ret = handleObj.handler.apply( this, arguments );
	                        event.type = fix;
	                    }
	                    return ret;
	                }
	            };
	        });
	    }


	    var getEventMap = function(e) { return (eventMap[e] || e); },
	        eventRegEx = /([^ ]+)/g;

	    kendo.applyEventMap = function(events, ns) {
	        events = events.replace(eventRegEx, getEventMap);

	        if (ns) {
	            events = events.replace(eventRegEx, "$1." + ns);
	        }

	        return events;
	    };

	    var on = $.fn.on;

	    function kendoJQuery(selector, context) {
	        return new kendoJQuery.fn.init(selector, context);
	    }

	    extend(true, kendoJQuery, $);

	    kendoJQuery.fn = kendoJQuery.prototype = new $();

	    kendoJQuery.fn.constructor = kendoJQuery;

	    kendoJQuery.fn.init = function(selector, context) {
	        if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
	            context = kendoJQuery(context);
	        }

	        return $.fn.init.call(this, selector, context, rootjQuery);
	    };

	    kendoJQuery.fn.init.prototype = kendoJQuery.fn;

	    var rootjQuery = kendoJQuery(document);

	    extend(kendoJQuery.fn, {
	        handler: function(handler) {
	            this.data("handler", handler);
	            return this;
	        },

	        autoApplyNS: function(ns) {
	            this.data("kendoNS", ns || kendo.guid());
	            return this;
	        },

	        on: function() {
	            var that = this,
	                ns = that.data("kendoNS");

	            // support for event map signature
	            if (arguments.length === 1) {
	                return on.call(that, arguments[0]);
	            }

	            var context = that,
	                args = slice.call(arguments);

	            if (typeof args[args.length -1] === UNDEFINED) {
	                args.pop();
	            }

	            var callback =  args[args.length - 1],
	                events = kendo.applyEventMap(args[0], ns);

	            // setup mouse trap
	            if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
	                MouseEventNormalizer.setupMouseMute();

	                var selector = args.length === 2 ? null : args[1],
	                    bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;

	                on.call(this,
	                    {
	                        touchstart: MouseEventNormalizer.muteMouse,
	                        touchend: MouseEventNormalizer.unMuteMouse
	                    },
	                    selector,
	                    {
	                        bustClick: bustClick
	                    });
	            }

	            if (typeof callback === STRING) {
	                context = that.data("handler");
	                callback = context[callback];

	                args[args.length - 1] = function(e) {
	                    callback.call(context, e);
	                };
	            }

	            args[0] = events;

	            on.apply(that, args);

	            return that;
	        },

	        kendoDestroy: function(ns) {
	            ns = ns || this.data("kendoNS");

	            if (ns) {
	                this.off("." + ns);
	            }

	            return this;
	        }
	    });

	    kendo.jQuery = kendoJQuery;
	    kendo.eventMap = eventMap;

	    kendo.timezone = (function(){
	        var months =  { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
	        var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };

	        function ruleToDate(year, rule) {
	            var date;
	            var targetDay;
	            var ourDay;
	            var month = rule[3];
	            var on = rule[4];
	            var time = rule[5];
	            var cache = rule[8];

	            if (!cache) {
	                rule[8] = cache = {};
	            }

	            if (cache[year]) {
	                return cache[year];
	            }

	            if (!isNaN(on)) {
	                date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
	            } else if (on.indexOf("last") === 0) {
	                date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));

	                targetDay = days[on.substr(4, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
	            } else if (on.indexOf(">=") >= 0) {
	                date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

	                targetDay = days[on.substr(0, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
	            }

	            return cache[year] = date;
	        }

	        function findRule(utcTime, rules, zone) {
	            rules = rules[zone];

	            if (!rules) {
	                var time = zone.split(":");
	                var offset = 0;

	                if (time.length > 1) {
	                    offset = time[0] * 60 + Number(time[1]);
	                }

	                return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
	            }

	            var year = new Date(utcTime).getUTCFullYear();

	            rules = jQuery.grep(rules, function(rule) {
	                var from = rule[0];
	                var to = rule[1];

	                return from <= year && (to >= year || (from == year && to == "only") || to == "max");
	            });

	            rules.push(utcTime);

	            rules.sort(function(a, b) {
	                if (typeof a != "number") {
	                    a = Number(ruleToDate(year, a));
	                }

	                if (typeof b != "number") {
	                    b = Number(ruleToDate(year, b));
	                }

	                return a - b;
	            });

	            var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];

	            return isNaN(rule) ? rule : null;
	        }

	        function findZone(utcTime, zones, timezone) {
	            var zoneRules = zones[timezone];

	            if (typeof zoneRules === "string") {
	                zoneRules = zones[zoneRules];
	            }

	            if (!zoneRules) {
	                throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
	            }

	            for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
	                var until = zoneRules[idx][3];

	                if (until && utcTime > until) {
	                    break;
	                }
	            }

	            var zone = zoneRules[idx + 1];

	            if (!zone) {
	                throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
	            }

	            return zone;
	        }

	        function zoneAndRule(utcTime, zones, rules, timezone) {
	            if (typeof utcTime != NUMBER) {
	                utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
	                    utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
	                    utcTime.getSeconds(), utcTime.getMilliseconds());
	            }

	            var zone = findZone(utcTime, zones, timezone);

	            return {
	                zone: zone,
	                rule: findRule(utcTime, rules, zone[1])
	            };
	        }

	        function offset(utcTime, timezone) {
	            if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
	                return 0;
	            }

	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            return kendo.parseFloat(rule? zone[0] - rule[6] : zone[0]);
	        }

	        function abbr(utcTime, timezone) {
	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            var base = zone[2];

	            if (base.indexOf("/") >= 0) {
	                return base.split("/")[rule && +rule[6] ? 1 : 0];
	            } else if (base.indexOf("%s") >= 0) {
	                return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
	            }

	            return base;
	        }

	        function convert(date, fromOffset, toOffset) {
	            var tempToOffset = toOffset;
	            var diff;

	            if (typeof fromOffset == STRING) {
	                fromOffset = this.offset(date, fromOffset);
	            }

	            if (typeof toOffset == STRING) {
	                toOffset = this.offset(date, toOffset);
	            }

	            var fromLocalOffset = date.getTimezoneOffset();

	            date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);

	            var toLocalOffset = date.getTimezoneOffset();

	            if (typeof tempToOffset == STRING) {
	                tempToOffset = this.offset(date, tempToOffset);
	            }

	            diff = (toLocalOffset - fromLocalOffset) + (toOffset - tempToOffset);

	            return new Date(date.getTime() + diff * 60000);
	        }

	        function apply(date, timezone) {
	           return this.convert(date, date.getTimezoneOffset(), timezone);
	        }

	        function remove(date, timezone) {
	           return this.convert(date, timezone, date.getTimezoneOffset());
	        }

	        function toLocalDate(time) {
	            return this.apply(new Date(time), "Etc/UTC");
	        }

	        return {
	           zones: {},
	           rules: {},
	           offset: offset,
	           convert: convert,
	           apply: apply,
	           remove: remove,
	           abbr: abbr,
	           toLocalDate: toLocalDate
	        };
	    })();

	    kendo.date = (function(){
	        var MS_PER_MINUTE = 60000,
	            MS_PER_DAY = 86400000;

	        function adjustDST(date, hours) {
	            if (hours === 0 && date.getHours() === 23) {
	                date.setHours(date.getHours() + 2);
	                return true;
	            }

	            return false;
	        }

	        function setDayOfWeek(date, day, dir) {
	            var hours = date.getHours();

	            dir = dir || 1;
	            day = ((day - date.getDay()) + (7 * dir)) % 7;

	            date.setDate(date.getDate() + day);
	            adjustDST(date, hours);
	        }

	        function dayOfWeek(date, day, dir) {
	            date = new Date(date);
	            setDayOfWeek(date, day, dir);
	            return date;
	        }

	        function firstDayOfMonth(date) {
	            return new Date(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        }

	        function lastDayOfMonth(date) {
	            var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
	                first = firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

	            if (timeOffset) {
	                last.setHours(first.getHours() + (timeOffset / 60));
	            }

	            return last;
	        }

	        function moveDateToWeekStart(date, weekStartDay) {
	            if (weekStartDay !== 1) {
	                return addDays(dayOfWeek(date, weekStartDay, -1), 4);
	            }

	            return addDays(date, (4 - (date.getDay() || 7)));
	        }

	        function calcWeekInYear(date, weekStartDay) {
	            var firstWeekInYear = new Date(date.getFullYear(), 0, 1, -6);

	            var newDate = moveDateToWeekStart(date, weekStartDay);

	            var diffInMS = newDate.getTime() - firstWeekInYear.getTime();

	            var days = Math.floor(diffInMS / MS_PER_DAY);

	            return 1 + Math.floor(days / 7);
	        }

	        function weekInYear(date, weekStartDay) {
	            if(weekStartDay === undefined) {
	                weekStartDay = kendo.culture().calendar.firstDay;
	            }

	            var prevWeekDate = addDays(date, -7);
	            var nextWeekDate = addDays(date, 7);

	            var weekNumber = calcWeekInYear(date, weekStartDay);

	            if (weekNumber === 0) {
	                return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
	            }

	            if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
	                return 1;
	            }

	            return weekNumber;
	        }

	        function getDate(date) {
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	            adjustDST(date, 0);
	            return date;
	        }

	        function toUtcTime(date) {
	            return Date.UTC(date.getFullYear(), date.getMonth(),
	                        date.getDate(), date.getHours(), date.getMinutes(),
	                        date.getSeconds(), date.getMilliseconds());
	        }

	        function getMilliseconds(date) {
	            return toInvariantTime(date).getTime() - getDate(toInvariantTime(date));
	        }

	        function isInTimeRange(value, min, max) {
	            var msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msValue;

	            if (!value || msMin == msMax) {
	                return true;
	            }

	            if (min >= max) {
	                max += MS_PER_DAY;
	            }

	            msValue = getMilliseconds(value);

	            if (msMin > msValue) {
	                msValue += MS_PER_DAY;
	            }

	            if (msMax < msMin) {
	                msMax += MS_PER_DAY;
	            }

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function isInDateRange(value, min, max) {
	            var msMin = min.getTime(),
	                msMax = max.getTime(),
	                msValue;

	            if (msMin >= msMax) {
	                msMax += MS_PER_DAY;
	            }

	            msValue = value.getTime();

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function addDays(date, offset) {
	            var hours = date.getHours();
	                date = new Date(date);

	            setTime(date, offset * MS_PER_DAY);
	            adjustDST(date, hours);
	            return date;
	        }

	        function setTime(date, milliseconds, ignoreDST) {
	            var offset = date.getTimezoneOffset();
	            var difference;

	            date.setTime(date.getTime() + milliseconds);

	            if (!ignoreDST) {
	                difference = date.getTimezoneOffset() - offset;
	                date.setTime(date.getTime() + difference * MS_PER_MINUTE);
	            }
	        }

	        function setHours(date, time) {
	            date = new Date(kendo.date.getDate(date).getTime() + kendo.date.getMilliseconds(time));
	            adjustDST(date, time.getHours());
	            return date;
	        }

	        function today() {
	            return getDate(new Date());
	        }

	        function isToday(date) {
	           return getDate(date).getTime() == today().getTime();
	        }

	        function toInvariantTime(date) {
	            var staticDate = new Date(1980, 1, 1, 0, 0, 0);

	            if (date) {
	                staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
	            }

	            return staticDate;
	        }

	        return {
	            adjustDST: adjustDST,
	            dayOfWeek: dayOfWeek,
	            setDayOfWeek: setDayOfWeek,
	            getDate: getDate,
	            isInDateRange: isInDateRange,
	            isInTimeRange: isInTimeRange,
	            isToday: isToday,
	            nextDay: function(date) {
	                return addDays(date, 1);
	            },
	            previousDay: function(date) {
	                return addDays(date, -1);
	            },
	            toUtcTime: toUtcTime,
	            MS_PER_DAY: MS_PER_DAY,
	            MS_PER_HOUR: 60 * MS_PER_MINUTE,
	            MS_PER_MINUTE: MS_PER_MINUTE,
	            setTime: setTime,
	            setHours: setHours,
	            addDays: addDays,
	            today: today,
	            toInvariantTime: toInvariantTime,
	            firstDayOfMonth: firstDayOfMonth,
	            lastDayOfMonth: lastDayOfMonth,
	            weekInYear: weekInYear,
	            getMilliseconds: getMilliseconds
	        };
	    })();


	    kendo.stripWhitespace = function(element) {
	        if (document.createNodeIterator) {
	            var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {
	                    return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
	                }, false);

	            while (iterator.nextNode()) {
	                if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
	                    iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
	                }
	            }
	        } else { // IE7/8 support
	            for (var i = 0; i < element.childNodes.length; i++) {
	                var child = element.childNodes[i];

	                if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
	                    element.removeChild(child);
	                    i--;
	                }

	                if (child.nodeType == 1) {
	                    kendo.stripWhitespace(child);
	                }
	            }
	        }
	    };

	    var animationFrame  = window.requestAnimationFrame       ||
	                          window.webkitRequestAnimationFrame ||
	                          window.mozRequestAnimationFrame    ||
	                          window.oRequestAnimationFrame      ||
	                          window.msRequestAnimationFrame     ||
	                          function(callback){ setTimeout(callback, 1000 / 60); };

	    kendo.animationFrame = function(callback) {
	        animationFrame.call(window, callback);
	    };

	    var animationQueue = [];

	    kendo.queueAnimation = function(callback) {
	        animationQueue[animationQueue.length] = callback;
	        if (animationQueue.length === 1) {
	            kendo.runNextAnimation();
	        }
	    };

	    kendo.runNextAnimation = function() {
	        kendo.animationFrame(function() {
	            if (animationQueue[0]) {
	                animationQueue.shift()();
	                if (animationQueue[0]) {
	                    kendo.runNextAnimation();
	                }
	            }
	        });
	    };

	    kendo.parseQueryStringParams = function(url) {
	        var queryString = url.split('?')[1] || "",
	            params = {},
	            paramParts = queryString.split(/&|=/),
	            length = paramParts.length,
	            idx = 0;

	        for (; idx < length; idx += 2) {
	            if(paramParts[idx] !== "") {
	                params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
	            }
	        }

	        return params;
	    };

	    kendo.elementUnderCursor = function(e) {
	        if (typeof e.x.client != "undefined") {
	            return document.elementFromPoint(e.x.client, e.y.client);
	        }
	    };

	    kendo.wheelDeltaY = function(jQueryEvent) {
	        var e = jQueryEvent.originalEvent,
	            deltaY = e.wheelDeltaY,
	            delta;

	            if (e.wheelDelta) { // Webkit and IE
	                if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
	                    delta = e.wheelDelta;
	                }
	            } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
	                delta = (-e.detail) * 10;
	            }

	        return delta;
	    };

	    kendo.throttle = function(fn, delay) {
	        var timeout;
	        var lastExecTime = 0;

	        if (!delay || delay <= 0) {
	            return fn;
	        }

	        var throttled = function() {
	            var that = this;
	            var elapsed = +new Date() - lastExecTime;
	            var args = arguments;

	            function exec() {
	                fn.apply(that, args);
	                lastExecTime = +new Date();
	            }

	            // first execution
	            if (!lastExecTime) {
	                return exec();
	            }

	            if (timeout) {
	                clearTimeout(timeout);
	            }

	            if (elapsed > delay) {
	                exec();
	            } else {
	                timeout = setTimeout(exec, delay - elapsed);
	            }
	        };

	        throttled.cancel = function() {
	            clearTimeout(timeout);
	        };

	        return throttled;
	    };


	    kendo.caret = function (element, start, end) {
	        var rangeElement;
	        var isPosition = start !== undefined;

	        if (end === undefined) {
	            end = start;
	        }

	        if (element[0]) {
	            element = element[0];
	        }

	        if (isPosition && element.disabled) {
	            return;
	        }

	        try {
	            if (element.selectionStart !== undefined) {
	                if (isPosition) {
	                    element.focus();
	                    var mobile = support.mobileOS;
	                    if(mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input
	                        setTimeout(function() { element.setSelectionRange(start, end); }, 0);
	                    }
	                    else {
	                        element.setSelectionRange(start, end);
	                    }
	                } else {
	                    start = [element.selectionStart, element.selectionEnd];
	                }
	            } else if (document.selection) {
	                if ($(element).is(":visible")) {
	                    element.focus();
	                }

	                rangeElement = element.createTextRange();

	                if (isPosition) {
	                    rangeElement.collapse(true);
	                    rangeElement.moveStart("character", start);
	                    rangeElement.moveEnd("character", end - start);
	                    rangeElement.select();
	                } else {
	                    var rangeDuplicated = rangeElement.duplicate(),
	                        selectionStart, selectionEnd;

	                        rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
	                        rangeDuplicated.setEndPoint('EndToStart', rangeElement);
	                        selectionStart = rangeDuplicated.text.length;
	                        selectionEnd = selectionStart + rangeElement.text.length;

	                    start = [selectionStart, selectionEnd];
	                }
	            }
	        } catch(e) {
	            /* element is not focused or it is not in the DOM */
	            start = [];
	        }

	        return start;
	    };

	    kendo.compileMobileDirective = function(element, scope) {
	        var angular = window.angular;

	        element.attr("data-" + kendo.ns + "role", element[0].tagName.toLowerCase().replace('kendo-mobile-', '').replace('-', ''));

	        angular.element(element).injector().invoke(["$compile", function($compile) {
	            $compile(element)(scope);

	            if (!/^\$(digest|apply)$/.test(scope.$$phase)) {
	                scope.$digest();
	            }
	        }]);

	        return kendo.widgetInstance(element, kendo.mobile.ui);
	    };

	    kendo.antiForgeryTokens = function() {
	        var tokens = { },
	            csrf_token = $("meta[name=csrf-token],meta[name=_csrf]").attr("content"),
	            csrf_param = $("meta[name=csrf-param],meta[name=_csrf_header]").attr("content");

	        $("input[name^='__RequestVerificationToken']").each(function() {
	            tokens[this.name] = this.value;
	        });

	        if (csrf_param !== undefined && csrf_token !== undefined) {
	          tokens[csrf_param] = csrf_token;
	        }

	        return tokens;
	    };

	    kendo.cycleForm = function(form) {
	        var firstElement = form.find("input, .k-widget").first();
	        var lastElement = form.find("button, .k-button").last();

	        function focus(el) {
	            var widget = kendo.widgetInstance(el);

	            if (widget && widget.focus) {
	              widget.focus();
	            } else {
	              el.focus();
	            }
	        }

	        lastElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && !e.shiftKey) {
	            e.preventDefault();
	            focus(firstElement);
	          }
	        });

	        firstElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && e.shiftKey) {
	            e.preventDefault();
	            focus(lastElement);
	          }
	        });
	    };

	    kendo.focusElement = function(element) {
	        var scrollTopPositions = [];
	        var scrollableParents = element.parentsUntil("body")
	                .filter(function(index, element) {
	                    var computedStyle = kendo.getComputedStyles(element, ["overflow"]);
	                    return computedStyle.overflow !== "visible";
	                })
	                .add(window);

	        scrollableParents.each(function(index, parent) {
	            scrollTopPositions[index] = $(parent).scrollTop();
	        });

	        try {
	            //The setActive method does not cause the document to scroll to the active object in the current page
	            element[0].setActive();
	        } catch (e) {
	            element[0].focus();
	        }

	        scrollableParents.each(function(index, parent) {
	            $(parent).scrollTop(scrollTopPositions[index]);
	        });
	    };

	    // kendo.saveAs -----------------------------------------------
	    (function() {
	        function postToProxy(dataURI, fileName, proxyURL, proxyTarget) {
	            var form = $("<form>").attr({
	                action: proxyURL,
	                method: "POST",
	                target: proxyTarget
	            });

	            var data = kendo.antiForgeryTokens();
	            data.fileName = fileName;

	            var parts = dataURI.split(";base64,");
	            data.contentType = parts[0].replace("data:", "");
	            data.base64 = parts[1];

	            for (var name in data) {
	                if (data.hasOwnProperty(name)) {
	                    $('<input>').attr({
	                        value: data[name],
	                        name: name,
	                        type: "hidden"
	                    }).appendTo(form);
	                }
	            }

	            form.appendTo("body").submit().remove();
	        }

	        var fileSaver = document.createElement("a");
	        var downloadAttribute = "download" in fileSaver && !kendo.support.browser.edge;

	        function saveAsBlob(dataURI, fileName) {
	            var blob = dataURI; // could be a Blob object

	            if (typeof dataURI == "string") {
	                var parts = dataURI.split(";base64,");
	                var contentType = parts[0];
	                var base64 = atob(parts[1]);
	                var array = new Uint8Array(base64.length);

	                for (var idx = 0; idx < base64.length; idx++) {
	                    array[idx] = base64.charCodeAt(idx);
	                }
	                blob = new Blob([array.buffer], { type: contentType });
	            }

	            navigator.msSaveBlob(blob, fileName);
	        }

	        function saveAsDataURI(dataURI, fileName) {
	            if (window.Blob && dataURI instanceof Blob) {
	                dataURI = URL.createObjectURL(dataURI);
	            }

	            fileSaver.download = fileName;
	            fileSaver.href = dataURI;

	            var e = document.createEvent("MouseEvents");
	            e.initMouseEvent("click", true, false, window,
	                0, 0, 0, 0, 0, false, false, false, false, 0, null);

	            fileSaver.dispatchEvent(e);
	            setTimeout(function(){
	                URL.revokeObjectURL(dataURI);
	            });
	        }

	        kendo.saveAs = function(options) {
	            var save = postToProxy;

	            if (!options.forceProxy) {
	                if (downloadAttribute) {
	                    save = saveAsDataURI;
	                } else if (navigator.msSaveBlob) {
	                    save = saveAsBlob;
	                }
	            }

	            save(options.dataURI, options.fileName, options.proxyURL, options.proxyTarget);
	        };
	    })();

	    // kendo proxySetters
	    kendo.proxyModelSetters = function proxyModelSetters(data) {
	        var observable = {};

	        Object.keys(data || {}).forEach(function(property) {
	          Object.defineProperty(observable, property, {
	            get: function() {
	              return data[property];
	            },
	            set: function(value) {
	              data[property] = value;
	              data.dirty = true;
	            }
	          });
	        });

	        return observable;
	    };

	})(jQuery, window);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(992)))

/***/ })

/******/ });

/***/ }),

/***/ 463:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ 464:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1027);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1027:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993), __webpack_require__(1028), __webpack_require__(1029) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data",
	    name: "Data source",
	    category: "framework",
	    description: "Powerful component for using local and remote data.Fully supports CRUD, Sorting, Paging, Filtering, Grouping, and Aggregates.",
	    depends: [ "core" ],
	    features: [ {
	        id: "data-odata",
	        name: "OData",
	        description: "Support for accessing Open Data Protocol (OData) services.",
	        depends: [ "data.odata" ]
	    }, {
	        id: "data-signalr",
	        name: "SignalR",
	        description: "Support for binding to SignalR hubs.",
	        depends: [ "data.signalr" ]
	    }, {
	        id: "data-XML",
	        name: "XML",
	        description: "Support for binding to XML.",
	        depends: [ "data.xml" ]
	    }]
	};

	/*jshint eqnull: true, loopfunc: true, evil: true */
	(function($, undefined) {
	    var extend = $.extend,
	        proxy = $.proxy,
	        isPlainObject = $.isPlainObject,
	        isEmptyObject = $.isEmptyObject,
	        isArray = $.isArray,
	        grep = $.grep,
	        ajax = $.ajax,
	        map,
	        each = $.each,
	        noop = $.noop,
	        kendo = window.kendo,
	        isFunction = kendo.isFunction,
	        Observable = kendo.Observable,
	        Class = kendo.Class,
	        STRING = "string",
	        FUNCTION = "function",
	        CREATE = "create",
	        READ = "read",
	        UPDATE = "update",
	        DESTROY = "destroy",
	        CHANGE = "change",
	        SYNC = "sync",
	        GET = "get",
	        ERROR = "error",
	        REQUESTSTART = "requestStart",
	        PROGRESS = "progress",
	        REQUESTEND = "requestEnd",
	        crud = [CREATE, READ, UPDATE, DESTROY],
	        identity = function(o) { return o; },
	        getter = kendo.getter,
	        stringify = kendo.stringify,
	        math = Math,
	        push = [].push,
	        join = [].join,
	        pop = [].pop,
	        splice = [].splice,
	        shift = [].shift,
	        slice = [].slice,
	        unshift = [].unshift,
	        toString = {}.toString,
	        stableSort = kendo.support.stableSort,
	        dateRegExp = /^\/Date\((.*?)\)\/$/;

	    var ObservableArray = Observable.extend({
	        init: function(array, type) {
	            var that = this;

	            that.type = type || ObservableObject;

	            Observable.fn.init.call(that);

	            that.length = array.length;

	            that.wrapAll(array, that);
	        },

	        at: function(index) {
	            return this[index];
	        },

	        toJSON: function() {
	            var idx, length = this.length, value, json = new Array(length);

	            for (idx = 0; idx < length; idx++){
	                value = this[idx];

	                if (value instanceof ObservableObject) {
	                    value = value.toJSON();
	                }

	                json[idx] = value;
	            }

	            return json;
	        },

	        parent: noop,

	        wrapAll: function(source, target) {
	            var that = this,
	                idx,
	                length,
	                parent = function() {
	                    return that;
	                };

	            target = target || [];

	            for (idx = 0, length = source.length; idx < length; idx++) {
	                target[idx] = that.wrap(source[idx], parent);
	            }

	            return target;
	        },

	        wrap: function(object, parent) {
	            var that = this,
	                observable;

	            if (object !== null && toString.call(object) === "[object Object]") {
	                observable = object instanceof that.type || object instanceof Model;

	                if (!observable) {
	                    object = object instanceof ObservableObject ? object.toJSON() : object;
	                    object = new that.type(object);
	                }

	                object.parent = parent;

	                object.bind(CHANGE, function(e) {
	                    that.trigger(CHANGE, {
	                        field: e.field,
	                        node: e.node,
	                        index: e.index,
	                        items: e.items || [this],
	                        action: e.node ? (e.action || "itemloaded") : "itemchange"
	                    });
	                });
	            }

	            return object;
	        },

	        push: function() {
	            var index = this.length,
	                items = this.wrapAll(arguments),
	                result;

	            result = push.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: index,
	                items: items
	            });

	            return result;
	        },

	        slice: slice,

	        sort: [].sort,

	        join: join,

	        pop: function() {
	            var length = this.length, result = pop.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: length - 1,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        splice: function(index, howMany, item) {
	            var items = this.wrapAll(slice.call(arguments, 2)),
	                result, i, len;

	            result = splice.apply(this, [index, howMany].concat(items));

	            if (result.length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: index,
	                    items: result
	                });

	                for (i = 0, len = result.length; i < len; i++) {
	                    if (result[i] && result[i].children) {
	                        result[i].unbind(CHANGE);
	                    }
	                }
	            }

	            if (item) {
	                this.trigger(CHANGE, {
	                    action: "add",
	                    index: index,
	                    items: items
	                });
	            }
	            return result;
	        },

	        shift: function() {
	            var length = this.length, result = shift.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: 0,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        unshift: function() {
	            var items = this.wrapAll(arguments),
	                result;

	            result = unshift.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: 0,
	                items: items
	            });

	            return result;
	        },

	        indexOf: function(item) {
	            var that = this,
	                idx,
	                length;

	            for (idx = 0, length = that.length; idx < length; idx++) {
	                if (that[idx] === item) {
	                    return idx;
	                }
	            }
	            return -1;
	        },

	        forEach: function(callback) {
	            var idx = 0,
	                length = this.length;

	            for (; idx < length; idx++) {
	                callback(this[idx], idx, this);
	            }
	        },

	        map: function(callback) {
	            var idx = 0,
	                result = [],
	                length = this.length;

	            for (; idx < length; idx++) {
	                result[idx] = callback(this[idx], idx, this);
	            }

	            return result;
	        },

	        reduce: function(callback) {
	            var idx = 0,
	                result,
	                length = this.length;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx < length) {
	                result = this[idx++];
	            }

	            for (; idx < length; idx++) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        reduceRight: function(callback) {
	            var idx = this.length - 1,
	                result;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx > 0) {
	                result = this[idx--];
	            }

	            for (; idx >= 0; idx--) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        filter: function(callback) {
	            var idx = 0,
	                result = [],
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    result[result.length] = item;
	                }
	            }

	            return result;
	        },

	        find: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return item;
	                }
	            }
	        },

	        every: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (!callback(item, idx, this)) {
	                    return false;
	                }
	            }

	            return true;
	        },

	        some: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        // non-standard collection methods
	        remove: function(item) {
	            var idx = this.indexOf(item);

	            if (idx !== -1) {
	                this.splice(idx, 1);
	            }
	        },

	        empty: function() {
	            this.splice(0, this.length);
	        }
	    });

	    // Polyfill for Symbol.iterator
	    if (typeof Symbol !== "undefined" && Symbol.iterator && !ObservableArray.prototype[Symbol.iterator]) {
	        ObservableArray.prototype[Symbol.iterator] = [][Symbol.iterator];
	    }

	    var LazyObservableArray = ObservableArray.extend({
	        init: function(data, type) {
	            Observable.fn.init.call(this);

	            this.type = type || ObservableObject;

	            for (var idx = 0; idx < data.length; idx++) {
	                this[idx] = data[idx];
	            }

	            this.length = idx;
	            this._parent = proxy(function() { return this; }, this);
	        },
	        at: function(index) {
	            var item = this[index];

	            if (!(item instanceof this.type)) {
	                item = this[index] = this.wrap(item, this._parent);
	            } else {
	                item.parent = this._parent;
	            }

	            return item;
	        }
	    });

	    function eventHandler(context, type, field, prefix) {
	        return function(e) {
	            var event = {}, key;

	            for (key in e) {
	                event[key] = e[key];
	            }

	            if (prefix) {
	                event.field = field + "." + e.field;
	            } else {
	                event.field = field;
	            }

	            if (type == CHANGE && context._notifyChange) {
	                context._notifyChange(event);
	            }

	            context.trigger(type, event);
	        };
	    }

	    var ObservableObject = Observable.extend({
	        init: function(value) {
	            var that = this,
	                member,
	                field,
	                parent = function() {
	                    return that;
	                };

	            Observable.fn.init.call(this);

	            this._handlers = {};

	            for (field in value) {
	                member = value[field];

	                if (typeof member === "object" && member && !member.getTime && field.charAt(0) != "_") {
	                    member = that.wrap(member, field, parent);
	                }

	                that[field] = member;
	            }

	            that.uid = kendo.guid();
	        },

	        shouldSerialize: function(field) {
	            return this.hasOwnProperty(field) && field !== "_handlers" && field !== "_events" && typeof this[field] !== FUNCTION && field !== "uid";
	        },

	        forEach: function(f) {
	            for (var i in this) {
	                if (this.shouldSerialize(i)) {
	                    f(this[i], i);
	                }
	            }
	        },

	        toJSON: function() {
	            var result = {}, value, field;

	            for (field in this) {
	                if (this.shouldSerialize(field)) {
	                    value = this[field];

	                    if (value instanceof ObservableObject || value instanceof ObservableArray) {
	                        value = value.toJSON();
	                    }

	                    result[field] = value;
	                }
	            }

	            return result;
	        },

	        get: function(field) {
	            var that = this, result;

	            that.trigger(GET, { field: field });

	            if (field === "this") {
	                result = that;
	            } else {
	                result = kendo.getter(field, true)(that);
	            }

	            return result;
	        },

	        _set: function(field, value) {
	            var that = this;
	            var composite = field.indexOf(".") >= 0;

	            if (composite) {
	                var paths = field.split("."),
	                    path = "";

	                while (paths.length > 1) {
	                    path += paths.shift();
	                    var obj = kendo.getter(path, true)(that);
	                    if (obj instanceof ObservableObject) {
	                        obj.set(paths.join("."), value);
	                        return composite;
	                    }
	                    path += ".";
	                }
	            }

	            kendo.setter(field)(that, value);

	            return composite;
	        },

	        set: function(field, value) {
	            var that = this,
	                isSetPrevented = false,
	                composite = field.indexOf(".") >= 0,
	                current = kendo.getter(field, true)(that);

	            if (current !== value) {
	                if (current instanceof Observable && this._handlers[field]) {
	                    if (this._handlers[field].get) {
	                       current.unbind(GET, this._handlers[field].get);
	                    }
	                    current.unbind(CHANGE, this._handlers[field].change);
	                }

	                isSetPrevented = that.trigger("set", { field: field, value: value });

	                if (!isSetPrevented) {
	                    if (!composite) {
	                        value = that.wrap(value, field, function() { return that; });
	                    }
	                    if (!that._set(field, value) || field.indexOf("(") >= 0 || field.indexOf("[") >= 0) {
	                        that.trigger(CHANGE, { field: field });
	                    }
	                }
	            }

	            return isSetPrevented;
	        },

	        parent: noop,

	        wrap: function(object, field, parent) {
	            var that = this;
	            var get;
	            var change;
	            var type = toString.call(object);

	            if (object != null && (type === "[object Object]" || type === "[object Array]")) {
	                var isObservableArray = object instanceof ObservableArray;
	                var isDataSource = object instanceof DataSource;

	                if (type === "[object Object]" && !isDataSource && !isObservableArray) {
	                    if (!(object instanceof ObservableObject)) {
	                        object = new ObservableObject(object);
	                    }

	                    get = eventHandler(that, GET, field, true);
	                    object.bind(GET, get);
	                    change = eventHandler(that, CHANGE, field, true);
	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { get: get, change: change };
	                } else if (type === "[object Array]" || isObservableArray || isDataSource) {
	                    if (!isObservableArray && !isDataSource) {
	                        object = new ObservableArray(object);
	                    }

	                    change = eventHandler(that, CHANGE, field, false);

	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { change: change };
	                }

	                object.parent = parent;
	            }

	            return object;
	        }
	    });

	    function equal(x, y) {
	        if (x === y) {
	            return true;
	        }

	        var xtype = $.type(x), ytype = $.type(y), field;

	        if (xtype !== ytype) {
	            return false;
	        }

	        if (xtype === "date") {
	            return x.getTime() === y.getTime();
	        }

	        if (xtype !== "object" && xtype !== "array") {
	            return false;
	        }

	        for (field in x) {
	            if (!equal(x[field], y[field])) {
	                return false;
	            }
	        }

	        return true;
	    }

	    var parsers = {
	        "number": function(value) {
	            return kendo.parseFloat(value);
	        },

	        "date": function(value) {
	            return kendo.parseDate(value);
	        },

	        "boolean": function(value) {
	            if (typeof value === STRING) {
	                return value.toLowerCase() === "true";
	            }
	            return value != null ? !!value : value;
	        },

	        "string": function(value) {
	            return value != null ? (value + "") : value;
	        },

	        "default": function(value) {
	            return value;
	        }
	    };

	    var defaultValues = {
	        "string": "",
	        "number": 0,
	        "date": new Date(),
	        "boolean": false,
	        "default": ""
	    };

	    function getFieldByName(obj, name) {
	        var field,
	            fieldName;

	        for (fieldName in obj) {
	            field = obj[fieldName];
	            if (isPlainObject(field) && field.field && field.field === name) {
	                return field;
	            } else if (field === name) {
	                return field;
	            }
	        }
	        return null;
	    }

	    var Model = ObservableObject.extend({
	        init: function(data) {
	            var that = this;

	            if (!data || $.isEmptyObject(data)) {
	                data = $.extend({}, that.defaults, data);

	                if (that._initializers) {
	                    for (var idx = 0; idx < that._initializers.length; idx++) {
	                         var name = that._initializers[idx];
	                         data[name] = that.defaults[name]();
	                    }
	                }
	            }

	            ObservableObject.fn.init.call(that, data);

	            that.dirty = false;
	            that.dirtyFields = {};

	            if (that.idField) {
	                that.id = that.get(that.idField);

	                if (that.id === undefined) {
	                    that.id = that._defaultId;
	                }
	            }
	        },

	        shouldSerialize: function(field) {
	            return ObservableObject.fn.shouldSerialize.call(this, field) &&
	                field !== "uid" && !(this.idField !== "id" && field === "id") &&
	                field !== "dirty" &&  field !== "dirtyFields" && field !== "_accessors";
	        },

	        _parse: function(field, value) {
	            var that = this,
	                fieldName = field,
	                fields = (that.fields || {}),
	                parse;

	            field = fields[field];
	            if (!field) {
	                field = getFieldByName(fields, fieldName);
	            }
	            if (field) {
	                parse = field.parse;
	                if (!parse && field.type) {
	                    parse = parsers[field.type.toLowerCase()];
	                }
	            }

	            return parse ? parse(value) : value;
	        },

	        _notifyChange: function(e) {
	            var action = e.action;

	            if (action == "add" || action == "remove") {
	                this.dirty = true;
	                this.dirtyFields[e.field] = true;
	            }
	        },

	        editable: function(field) {
	            field = (this.fields || {})[field];
	            return field ? field.editable !== false : true;
	        },

	        set: function(field, value, initiator) {
	            var that = this;
	            var dirty = that.dirty;

	            if (that.editable(field)) {
	                value = that._parse(field, value);

	                if (!equal(value, that.get(field))) {
	                    that.dirty = true;
	                    that.dirtyFields[field] = true;

	                    if (ObservableObject.fn.set.call(that, field, value, initiator) && !dirty) {
	                        that.dirty = dirty;

	                        if (!that.dirty) {
	                            that.dirtyFields[field] = false;
	                        }
	                    }
	                }
	            }
	        },

	        accept: function(data) {
	            var that = this,
	                parent = function() { return that; },
	                field;

	            for (field in data) {
	                var value = data[field];

	                if (field.charAt(0) != "_") {
	                    value = that.wrap(data[field], field, parent);
	                }

	                that._set(field, value);
	            }

	            if (that.idField) {
	                that.id = that.get(that.idField);
	            }

	            that.dirty = false;
	            that.dirtyFields = {};
	        },

	        isNew: function() {
	            return this.id === this._defaultId;
	        }
	    });

	    Model.define = function(base, options) {
	        if (options === undefined) {
	            options = base;
	            base = Model;
	        }

	        var model,
	            proto = extend({ defaults: {} }, options),
	            name,
	            field,
	            type,
	            value,
	            idx,
	            length,
	            fields = {},
	            originalName,
	            id = proto.id,
	            functionFields = [];

	        if (id) {
	            proto.idField = id;
	        }

	        if (proto.id) {
	            delete proto.id;
	        }

	        if (id) {
	            proto.defaults[id] = proto._defaultId = "";
	        }

	        if (toString.call(proto.fields) === "[object Array]") {
	            for (idx = 0, length = proto.fields.length; idx < length; idx++) {
	                field = proto.fields[idx];
	                if (typeof field === STRING) {
	                    fields[field] = {};
	                } else if (field.field) {
	                    fields[field.field] = field;
	                }
	            }
	            proto.fields = fields;
	        }

	        for (name in proto.fields) {
	            field = proto.fields[name];
	            type = field.type || "default";
	            value = null;
	            originalName = name;

	            name = typeof (field.field) === STRING ? field.field : name;

	            if (!field.nullable) {
	                value = proto.defaults[originalName !== name ? originalName : name] = field.defaultValue !== undefined ? field.defaultValue : defaultValues[type.toLowerCase()];

	                if (typeof value === "function") {
	                    functionFields.push(name);
	                }
	            }

	            if (options.id === name) {
	                proto._defaultId = value;
	            }

	            proto.defaults[originalName !== name ? originalName : name] = value;

	            field.parse = field.parse || parsers[type];
	        }

	        if (functionFields.length > 0) {
	            proto._initializers = functionFields;
	        }

	        model = base.extend(proto);
	        model.define = function(options) {
	            return Model.define(model, options);
	        };

	        if (proto.fields) {
	            model.fields = proto.fields;
	            model.idField = proto.idField;
	        }

	        return model;
	    };

	    var Comparer = {
	        selector: function(field) {
	            return isFunction(field) ? field : getter(field);
	        },

	        compare: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                a = selector(a);
	                b = selector(b);

	                if (a == null && b == null) {
	                    return 0;
	                }

	                if (a == null) {
	                    return -1;
	                }

	                if (b == null) {
	                    return 1;
	                }

	                if (a.localeCompare) {
	                    return a.localeCompare(b);
	                }

	                return a > b ? 1 : (a < b ? -1 : 0);
	            };
	        },

	        create: function(sort) {
	            var compare = sort.compare || this.compare(sort.field);

	            if (sort.dir == "desc") {
	                return function(a, b) {
	                    return compare(b, a, true);
	                };
	            }

	            return compare;
	        },

	        combine: function(comparers) {
	            return function(a, b) {
	                var result = comparers[0](a, b),
	                    idx,
	                    length;

	                for (idx = 1, length = comparers.length; idx < length; idx ++) {
	                    result = result || comparers[idx](a, b);
	                }

	                return result;
	            };
	        }
	    };

	    var StableComparer = extend({}, Comparer, {
	        asc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return -1;
	                }

	                if (valueB == null) {
	                    return 1;
	                }

	                if (valueA.localeCompare) {
	                    return valueA.localeCompare(valueB);
	                }

	                return valueA > valueB ? 1 : -1;
	            };
	        },

	        desc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return 1;
	                }

	                if (valueB == null) {
	                    return -1;
	                }

	                if (valueB.localeCompare) {
	                    return valueB.localeCompare(valueA);
	                }

	                return valueA < valueB ? 1 : -1;
	            };
	        },
	        create: function(sort) {
	           return this[sort.dir](sort.field);
	        }
	    });

	    map = function (array, callback) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = callback(array[idx], idx, array);
	        }

	        return result;
	    };

	    var operators = (function(){

	        function quote(str) {
	            if (typeof str == "string") {
	                str = str.replace(/[\r\n]+/g, "");
	            }
	            return JSON.stringify(str);
	        }

	        function textOp(impl) {
	            return function(a, b, ignore) {
	                b += "";
	                if (ignore) {
	                    a = "(" + a + " || '').toLowerCase()";
	                    b = b.toLowerCase();
	                }
	                return impl(a, quote(b), ignore);
	            };
	        }

	        function operator(op, a, b, ignore) {
	            if (b != null) {
	                if (typeof b === STRING) {
	                    var date = dateRegExp.exec(b);
	                    if (date) {
	                        b = new Date(+date[1]);
	                    } else if (ignore) {
	                        b = quote(b.toLowerCase());
	                        a = "((" + a + " || '')+'').toLowerCase()";
	                    } else {
	                        b = quote(b);
	                    }
	                }

	                if (b.getTime) {
	                    //b looks like a Date
	                    a = "(" + a + "&&" + a + ".getTime?" + a + ".getTime():" + a + ")";
	                    b = b.getTime();
	                }
	            }

	            return a + " " + op + " " + b;
	        }

	        function getMatchRegexp(pattern) {
	            // take a pattern, as supported by Excel match filter, and
	            // convert it to the equivalent JS regular expression.
	            // Excel patterns support:
	            //
	            //   * - match any sequence of characters
	            //   ? - match a single character
	            //
	            // to match a literal * or ?, they must be prefixed by a tilde (~)
	            for (var rx = "/^", esc = false, i = 0; i < pattern.length; ++i) {
	                var ch = pattern.charAt(i);
	                if (esc) {
	                    rx += "\\" + ch;
	                } else if (ch == "~") {
	                    esc = true;
	                    continue;
	                } else if (ch == "*") {
	                    rx += ".*";
	                } else if (ch == "?") {
	                    rx += ".";
	                } else if (".+^$()[]{}|\\/\n\r\u2028\u2029\xA0".indexOf(ch) >= 0) {
	                    rx += "\\" + ch;
	                } else {
	                    rx += ch;
	                }
	                esc = false;
	            }
	            return rx + "$/";
	        }

	        return {
	            quote: function(value) {
	                if (value && value.getTime) {
	                    return "new Date(" + value.getTime() + ")";
	                }
	                return quote(value);
	            },
	            eq: function(a, b, ignore) {
	                return operator("==", a, b, ignore);
	            },
	            neq: function(a, b, ignore) {
	                return operator("!=", a, b, ignore);
	            },
	            gt: function(a, b, ignore) {
	                return operator(">", a, b, ignore);
	            },
	            gte: function(a, b, ignore) {
	                return operator(">=", a, b, ignore);
	            },
	            lt: function(a, b, ignore) {
	                return operator("<", a, b, ignore);
	            },
	            lte: function(a, b, ignore) {
	                return operator("<=", a, b, ignore);
	            },
	            startswith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == 0";
	            }),
	            doesnotstartwith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == -1";
	            }),
	            endswith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") >= 0";
	            }),
	            doesnotendwith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") < 0";
	            }),
	            contains: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") >= 0";
	            }),
	            doesnotcontain: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") == -1";
	            }),
	            matches: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            doesnotmatch: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return "!" + getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            isempty: function(a) {
	                return a + " === ''";
	            },
	            isnotempty: function(a) {
	                return a + " !== ''";
	            },
	            isnull: function(a) {
	                return "(" + a + " == null)";
	            },
	            isnotnull: function(a) {
	                return "(" + a + " != null)";
	            }
	        };
	    })();

	    function Query(data) {
	        this.data = data || [];
	    }

	    Query.filterExpr = function(expression) {
	        var expressions = [],
	            logic = { and: " && ", or: " || " },
	            idx,
	            length,
	            filter,
	            expr,
	            fieldFunctions = [],
	            operatorFunctions = [],
	            field,
	            operator,
	            filters = expression.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            operator = filter.operator;

	            if (filter.filters) {
	                expr = Query.filterExpr(filter);
	                //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]
	                filter = expr.expression
	                .replace(/__o\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__o[" + (operatorFunctions.length + index) + "]";
	                })
	                .replace(/__f\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__f[" + (fieldFunctions.length + index) + "]";
	                });

	                operatorFunctions.push.apply(operatorFunctions, expr.operators);
	                fieldFunctions.push.apply(fieldFunctions, expr.fields);
	            } else {
	                if (typeof field === FUNCTION) {
	                    expr = "__f[" + fieldFunctions.length +"](d)";
	                    fieldFunctions.push(field);
	                } else {
	                    expr = kendo.expr(field);
	                }

	                if (typeof operator === FUNCTION) {
	                    filter = "__o[" + operatorFunctions.length + "](" + expr + ", " + operators.quote(filter.value) + ")";
	                    operatorFunctions.push(operator);
	                } else {
	                    filter = operators[(operator || "eq").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined? filter.ignoreCase : true);
	                }
	            }

	            expressions.push(filter);
	        }

	        return  { expression: "(" + expressions.join(logic[expression.logic]) + ")", fields: fieldFunctions, operators: operatorFunctions };
	    };

	    function normalizeSort(field, dir) {
	        if (field) {
	            var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	            return grep(descriptors, function(d) { return !!d.dir; });
	        }
	    }

	    var operatorMap = {
	        "==": "eq",
	        equals: "eq",
	        isequalto: "eq",
	        equalto: "eq",
	        equal: "eq",
	        "!=": "neq",
	        ne: "neq",
	        notequals: "neq",
	        isnotequalto: "neq",
	        notequalto: "neq",
	        notequal: "neq",
	        "<": "lt",
	        islessthan: "lt",
	        lessthan: "lt",
	        less: "lt",
	        "<=": "lte",
	        le: "lte",
	        islessthanorequalto: "lte",
	        lessthanequal: "lte",
	        ">": "gt",
	        isgreaterthan: "gt",
	        greaterthan: "gt",
	        greater: "gt",
	        ">=": "gte",
	        isgreaterthanorequalto: "gte",
	        greaterthanequal: "gte",
	        ge: "gte",
	        notsubstringof: "doesnotcontain",
	        isnull: "isnull",
	        isempty: "isempty",
	        isnotempty: "isnotempty"
	    };

	    function normalizeOperator(expression) {
	        var idx,
	        length,
	        filter,
	        operator,
	        filters = expression.filters;

	        if (filters) {
	            for (idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];
	                operator = filter.operator;

	                if (operator && typeof operator === STRING) {
	                    filter.operator = operatorMap[operator.toLowerCase()] || operator;
	                }

	                normalizeOperator(filter);
	            }
	        }
	    }

	    function normalizeFilter(expression) {
	        if (expression && !isEmptyObject(expression)) {
	            if (isArray(expression) || !expression.filters) {
	                expression = {
	                    logic: "and",
	                    filters: isArray(expression) ? expression : [expression]
	                };
	            }

	            normalizeOperator(expression);

	            return expression;
	        }
	    }

	    Query.normalizeFilter = normalizeFilter;

	    function compareDescriptor(f1, f2) {
	        if (f1.logic || f2.logic) {
	            return false;
	        }

	        return f1.field === f2.field && f1.value === f2.value && f1.operator === f2.operator;
	    }

	    function normalizeDescriptor(filter) {
	        filter = filter || {};

	        if (isEmptyObject(filter)) {
	            return { logic: "and", filters: [] };
	        }

	        return normalizeFilter(filter);
	    }

	    function fieldComparer(a, b) {
	        if (b.logic || (a.field > b.field)) {
	            return 1;
	        } else if (a.field < b.field) {
	            return -1;
	        } else {
	            return 0;
	        }
	    }

	    function compareFilters(expr1, expr2) {
	        expr1 = normalizeDescriptor(expr1);
	        expr2 = normalizeDescriptor(expr2);

	        if (expr1.logic !== expr2.logic) {
	            return false;
	        }

	        var f1, f2;
	        var filters1 = (expr1.filters || []).slice();
	        var filters2 = (expr2.filters || []).slice();

	        if (filters1.length !== filters2.length) {
	            return false;
	        }

	        filters1 = filters1.sort(fieldComparer);
	        filters2 = filters2.sort(fieldComparer);

	        for (var idx = 0; idx < filters1.length; idx++) {
	            f1 = filters1[idx];
	            f2 = filters2[idx];

	            if (f1.logic && f2.logic) {
	                if (!compareFilters(f1, f2)) {
	                    return false;
	                }
	            } else if (!compareDescriptor(f1, f2)) {
	                return false;
	            }
	        }

	        return true;
	    }

	    Query.compareFilters = compareFilters;

	    function normalizeAggregate(expressions) {
	        return isArray(expressions) ? expressions : [expressions];
	    }

	    function normalizeGroup(field, dir) {
	        var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	        descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	        return map(descriptors, function(d) { return { field: d.field, dir: d.dir || "asc", aggregates: d.aggregates }; });
	    }

	    Query.prototype = {
	        toArray: function () {
	            return this.data;
	        },
	        range: function(index, count) {
	            return new Query(this.data.slice(index, index + count));
	        },
	        skip: function (count) {
	            return new Query(this.data.slice(count));
	        },
	        take: function (count) {
	            return new Query(this.data.slice(0, count));
	        },
	        select: function (selector) {
	            return new Query(map(this.data, selector));
	        },
	        order: function(selector, dir, inPlace) {
	            var sort = { dir: dir };

	            if (selector) {
	                if (selector.compare) {
	                    sort.compare = selector.compare;
	                } else {
	                    sort.field = selector;
	                }
	            }

	            if (inPlace) {
	                return new Query(this.data.sort(Comparer.create(sort)));
	            }
	            return new Query(this.data.slice(0).sort(Comparer.create(sort)));
	        },
	        orderBy: function(selector, inPlace) {
	            return this.order(selector, "asc", inPlace);
	        },
	        orderByDescending: function(selector, inPlace) {
	            return this.order(selector, "desc", inPlace);
	        },
	        sort: function(field, dir, comparer, inPlace) {
	            var idx,
	            length,
	            descriptors = normalizeSort(field, dir),
	            comparers = [];

	            comparer = comparer || Comparer;

	            if (descriptors.length) {
	                for (idx = 0, length = descriptors.length; idx < length; idx++) {
	                    comparers.push(comparer.create(descriptors[idx]));
	                }

	                return this.orderBy({ compare: comparer.combine(comparers) }, inPlace);
	            }

	            return this;
	        },

	        filter: function(expressions) {
	            var idx,
	            current,
	            length,
	            compiled,
	            predicate,
	            data = this.data,
	            fields,
	            operators,
	            result = [],
	            filter;

	            expressions = normalizeFilter(expressions);

	            if (!expressions || expressions.filters.length === 0) {
	                return this;
	            }

	            compiled = Query.filterExpr(expressions);
	            fields = compiled.fields;
	            operators = compiled.operators;

	            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

	            if (fields.length || operators.length) {
	                filter = function(d) {
	                    return predicate(d, fields, operators);
	                };
	            }


	            for (idx = 0, length = data.length; idx < length; idx++) {
	                current = data[idx];

	                if (filter(current)) {
	                    result.push(current);
	                }
	            }

	            return new Query(result);
	        },

	        group: function(descriptors, allData) {
	            descriptors =  normalizeGroup(descriptors || []);
	            allData = allData || this.data;

	            var that = this,
	            result = new Query(that.data),
	            descriptor;

	            if (descriptors.length > 0) {
	                descriptor = descriptors[0];
	                result = result.groupBy(descriptor).select(function(group) {
	                    var data = new Query(allData).filter([ { field: group.field, operator: "eq", value: group.value, ignoreCase: false } ]);
	                    return {
	                        field: group.field,
	                        value: group.value,
	                        items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), data.toArray()).toArray() : group.items,
	                        hasSubgroups: descriptors.length > 1,
	                        aggregates: data.aggregate(descriptor.aggregates)
	                    };
	                });
	            }
	            return result;
	        },

	        groupBy: function(descriptor) {
	            if (isEmptyObject(descriptor) || !this.data.length) {
	                return new Query([]);
	            }

	            var field = descriptor.field,
	                sorted = this._sortForGrouping(field, descriptor.dir || "asc"),
	                accessor = kendo.accessor(field),
	                item,
	                groupValue = accessor.get(sorted[0], field),
	                group = {
	                    field: field,
	                    value: groupValue,
	                    items: []
	                },
	                currentValue,
	                idx,
	                len,
	                result = [group];

	            for(idx = 0, len = sorted.length; idx < len; idx++) {
	                item = sorted[idx];
	                currentValue = accessor.get(item, field);
	                if(!groupValueComparer(groupValue, currentValue)) {
	                    groupValue = currentValue;
	                    group = {
	                        field: field,
	                        value: groupValue,
	                        items: []
	                    };
	                    result.push(group);
	                }
	                group.items.push(item);
	            }
	            return new Query(result);
	        },

	        _sortForGrouping: function(field, dir) {
	            var idx, length,
	                data = this.data;

	            if (!stableSort) {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    data[idx].__position = idx;
	                }

	                data = new Query(data).sort(field, dir, StableComparer).toArray();

	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    delete data[idx].__position;
	                }
	                return data;
	            }
	            return this.sort(field, dir).toArray();
	        },

	        aggregate: function (aggregates) {
	            var idx,
	                len,
	                result = {},
	                state = {};

	            if (aggregates && aggregates.length) {
	                for(idx = 0, len = this.data.length; idx < len; idx++) {
	                    calculateAggregate(result, aggregates, this.data[idx], idx, len, state);
	                }
	            }
	            return result;
	        }
	    };

	    function groupValueComparer(a, b) {
	        if (a && a.getTime && b && b.getTime) {
	            return a.getTime() === b.getTime();
	        }
	        return a === b;
	    }

	    function calculateAggregate(accumulator, aggregates, item, index, length, state) {
	        aggregates = aggregates || [];
	        var idx,
	            aggr,
	            functionName,
	            len = aggregates.length;

	        for (idx = 0; idx < len; idx++) {
	            aggr = aggregates[idx];
	            functionName = aggr.aggregate;
	            var field = aggr.field;
	            accumulator[field] = accumulator[field] || {};
	            state[field] = state[field] || {};
	            state[field][functionName] = state[field][functionName] || {};
	            accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length, state[field][functionName]);
	        }
	    }

	    var functions = {
	        sum: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            return accumulator;
	        },
	        count: function(accumulator) {
	            return (accumulator || 0) + 1;
	        },
	        average: function(accumulator, item, accessor, index, length, state) {
	            var value = accessor.get(item);

	            if (state.count === undefined) {
	                state.count = 0;
	            }

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            if (isNumber(value)) {
	                state.count++;
	            }

	            if(index == length - 1 && isNumber(accumulator)) {
	                accumulator = accumulator / state.count;
	            }
	            return accumulator;
	        },
	        max: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator < value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        },
	        min: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator > value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        }
	    };

	    function isNumber(val) {
	        return typeof val === "number" && !isNaN(val);
	    }

	    function isDate(val) {
	        return val && val.getTime;
	    }

	    function toJSON(array) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = array[idx].toJSON();
	        }

	        return result;
	    }

	    Query.process = function(data, options, inPlace) {
	        options = options || {};

	        var query = new Query(data),
	            group = options.group,
	            sort = normalizeGroup(group || []).concat(normalizeSort(options.sort || [])),
	            total,
	            filterCallback = options.filterCallback,
	            filter = options.filter,
	            skip = options.skip,
	            take = options.take;

	        if (filter) {
	            query = query.filter(filter);

	            if (filterCallback) {
	                query = filterCallback(query);
	            }

	            total = query.toArray().length;
	        }

	        if (sort) {
	            if (inPlace) {
	                query = query.sort(sort, undefined, undefined, inPlace);
	            }
	            else {
	                query = query.sort(sort);
	            }

	            if (group) {
	                data = query.toArray();
	            }
	        }

	        if (skip !== undefined && take !== undefined) {
	            query = query.range(skip, take);
	        }

	        if (group) {
	            query = query.group(group, data);
	        }

	        return {
	            total: total,
	            data: query.toArray()
	        };
	    };

	    var LocalTransport = Class.extend({
	        init: function(options) {
	            this.data = options.data;
	        },

	        read: function(options) {
	            options.success(this.data);
	        },
	        update: function(options) {
	            options.success(options.data);
	        },
	        create: function(options) {
	            options.success(options.data);
	        },
	        destroy: function(options) {
	            options.success(options.data);
	        }
	    });

	    var RemoteTransport = Class.extend( {
	        init: function(options) {
	            var that = this, parameterMap;

	            options = that.options = extend({}, that.options, options);

	            each(crud, function(index, type) {
	                if (typeof options[type] === STRING) {
	                    options[type] = {
	                        url: options[type]
	                    };
	                }
	            });

	            that.cache = options.cache? Cache.create(options.cache) : {
	                find: noop,
	                add: noop
	            };

	            parameterMap = options.parameterMap;

	            if (isFunction(options.push)) {
	                that.push = options.push;
	            }

	            if (!that.push) {
	                that.push = identity;
	            }

	            that.parameterMap = isFunction(parameterMap) ? parameterMap : function(options) {
	                var result = {};

	                each(options, function(option, value) {
	                    if (option in parameterMap) {
	                        option = parameterMap[option];
	                        if (isPlainObject(option)) {
	                            value = option.value(value);
	                            option = option.key;
	                        }
	                    }

	                    result[option] = value;
	                });

	                return result;
	            };
	        },

	        options: {
	            parameterMap: identity
	        },

	        create: function(options) {
	            return ajax(this.setup(options, CREATE));
	        },

	        read: function(options) {
	            var that = this,
	                success,
	                error,
	                result,
	                cache = that.cache;

	            options = that.setup(options, READ);

	            success = options.success || noop;
	            error = options.error || noop;

	            result = cache.find(options.data);

	            if(result !== undefined) {
	                success(result);
	            } else {
	                options.success = function(result) {
	                    cache.add(options.data, result);

	                    success(result);
	                };

	                $.ajax(options);
	            }
	        },

	        update: function(options) {
	            return ajax(this.setup(options, UPDATE));
	        },

	        destroy: function(options) {
	            return ajax(this.setup(options, DESTROY));
	        },

	        setup: function(options, type) {
	            options = options || {};

	            var that = this,
	                parameters,
	                operation = that.options[type],
	                data = isFunction(operation.data) ? operation.data(options.data) : operation.data;

	            options = extend(true, {}, operation, options);
	            parameters = extend(true, {}, data, options.data);

	            options.data = that.parameterMap(parameters, type);

	            if (isFunction(options.url)) {
	                options.url = options.url(parameters);
	            }

	            return options;
	        }
	    });

	    var Cache = Class.extend({
	        init: function() {
	            this._store = {};
	        },
	        add: function(key, data) {
	            if(key !== undefined) {
	                this._store[stringify(key)] = data;
	            }
	        },
	        find: function(key) {
	            return this._store[stringify(key)];
	        },
	        clear: function() {
	            this._store = {};
	        },
	        remove: function(key) {
	            delete this._store[stringify(key)];
	        }
	    });

	    Cache.create = function(options) {
	        var store = {
	            "inmemory": function() { return new Cache(); }
	        };

	        if (isPlainObject(options) && isFunction(options.find)) {
	            return options;
	        }

	        if (options === true) {
	            return new Cache();
	        }

	        return store[options]();
	    };

	    function serializeRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            setters = {},
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                originalName = fieldNames[getter];

	                if (originalName && originalName !== getter) {
	                    if (!setters[originalName]) {
	                        setters[originalName] = kendo.setter(originalName);
	                    }
	                    setters[originalName](record, getters[getter](record));
	                    delete record[getter];
	                }
	            }
	        }
	    }

	    function convertRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                record[getter] = modelInstance._parse(getter, getters[getter](record));

	                originalName = fieldNames[getter];
	                if (originalName && originalName !== getter) {
	                    delete record[originalName];
	                }
	            }
	        }
	    }

	    function convertGroup(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            idx,
	            fieldName,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];

	            fieldName = originalFieldNames[record.field];
	            if (fieldName && fieldName != record.field) {
	                record.field = fieldName;
	            }

	            record.value = modelInstance._parse(record.field, record.value);

	            if (record.hasSubgroups) {
	                convertGroup(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            } else {
	                convertRecords(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            }
	        }
	    }

	    function wrapDataAccess(originalFunction, model, converter, getters, originalFieldNames, fieldNames) {
	        return function(data) {
	            data = originalFunction(data);

	            if (data && !isEmptyObject(getters)) {
	                if (toString.call(data) !== "[object Array]" && !(data instanceof ObservableArray)) {
	                    data = [data];
	                }

	                converter(data, getters, new model(), originalFieldNames, fieldNames);
	            }

	            return data || [];
	        };
	    }

	    var DataReader = Class.extend({
	        init: function(schema) {
	            var that = this, member, get, model, base;

	            schema = schema || {};

	            for (member in schema) {
	                get = schema[member];

	                that[member] = typeof get === STRING ? getter(get) : get;
	            }

	            base = schema.modelBase || Model;

	            if (isPlainObject(that.model)) {
	                that.model = model = base.define(that.model);
	            }

	            var dataFunction = proxy(that.data, that);

	            that._dataAccessFunction = dataFunction;

	            if (that.model) {
	                var groupsFunction = proxy(that.groups, that),
	                    serializeFunction = proxy(that.serialize, that),
	                    originalFieldNames = {},
	                    getters = {},
	                    serializeGetters = {},
	                    fieldNames = {},
	                    shouldSerialize = false,
	                    fieldName;

	                model = that.model;

	                if (model.fields) {
	                    each(model.fields, function(field, value) {
	                        var fromName;

	                        fieldName = field;

	                        if (isPlainObject(value) && value.field) {
	                            fieldName = value.field;
	                        } else if (typeof value === STRING) {
	                            fieldName = value;
	                        }

	                        if (isPlainObject(value) && value.from) {
	                            fromName = value.from;
	                        }

	                        shouldSerialize = shouldSerialize || (fromName && fromName !== field) || fieldName !== field;

	                        getters[field] = getter(fromName || fieldName);
	                        serializeGetters[field] = getter(field);
	                        originalFieldNames[fromName || fieldName] = field;
	                        fieldNames[field] = fromName || fieldName;
	                    });

	                    if (!schema.serialize && shouldSerialize) {
	                        that.serialize = wrapDataAccess(serializeFunction, model, serializeRecords, serializeGetters, originalFieldNames, fieldNames);
	                    }
	                }

	                that._dataAccessFunction = dataFunction;
	                that.data = wrapDataAccess(dataFunction, model, convertRecords, getters, originalFieldNames, fieldNames);
	                that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters, originalFieldNames, fieldNames);
	            }
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        parse: identity,
	        data: identity,
	        total: function(data) {
	            return data.length;
	        },
	        groups: identity,
	        aggregates: function() {
	            return {};
	        },
	        serialize: function(data) {
	            return data;
	        }
	    });

	    function mergeGroups(target, dest, skip, take) {
	        var group,
	            idx = 0,
	            items;

	        while (dest.length && take) {
	            group = dest[idx];
	            items = group.items;

	            var length = items.length;

	            if (target && target.field === group.field && target.value === group.value) {
	                if (target.hasSubgroups && target.items.length) {
	                    mergeGroups(target.items[target.items.length - 1], group.items, skip, take);
	                } else {
	                    items = items.slice(skip, skip + take);
	                    target.items = target.items.concat(items);
	                }
	                dest.splice(idx--, 1);
	            } else if (group.hasSubgroups && items.length) {
	                mergeGroups(group, items, skip, take);
	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            } else {
	                items = items.slice(skip, skip + take);
	                group.items = items;

	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            }

	            if (items.length === 0) {
	                skip -= length;
	            } else {
	                skip = 0;
	                take -= items.length;
	            }

	            if (++idx >= dest.length) {
	                break;
	            }
	        }

	        if (idx < dest.length) {
	            dest.splice(idx, dest.length - idx);
	        }
	    }

	    function flattenGroups(data) {
	        var idx,
	            result = [],
	            length,
	            items,
	            itemIndex;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            var group = data.at(idx);
	            if (group.hasSubgroups) {
	                result = result.concat(flattenGroups(group.items));
	            } else {
	                items = group.items;
	                for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
	                    result.push(items.at(itemIndex));
	                }
	            }
	        }
	        return result;
	    }

	    function wrapGroupItems(data, model) {
	        var idx, length, group;
	        if (model) {
	            for (idx = 0, length = data.length; idx < length; idx++) {
	                group = data.at(idx);

	                if (group.hasSubgroups) {
	                    wrapGroupItems(group.items, model);
	                } else {
	                    group.items = new LazyObservableArray(group.items, model);
	                }
	            }
	        }
	    }

	    function eachGroupItems(data, func) {
	        for (var idx = 0, length = data.length; idx < length; idx++) {
	            if (data[idx].hasSubgroups) {
	                if (eachGroupItems(data[idx].items, func)) {
	                    return true;
	                }
	            } else if (func(data[idx].items, data[idx])) {
	                return true;
	            }
	        }
	    }

	    function replaceInRanges(ranges, data, item, observable) {
	        for (var idx = 0; idx < ranges.length; idx++) {
	            if (ranges[idx].data === data) {
	                break;
	            }
	            if (replaceInRange(ranges[idx].data, item, observable)) {
	                break;
	            }
	        }
	    }

	    function replaceInRange(items, item, observable) {
	        for (var idx = 0, length = items.length; idx < length; idx++) {
	            if (items[idx] && items[idx].hasSubgroups) {
	                return replaceInRange(items[idx].items, item, observable);
	            } else if (items[idx] === item || items[idx] === observable) {
	               items[idx] = observable;
	               return true;
	            }
	        }
	    }

	    function replaceWithObservable(view, data, ranges, type, serverGrouping) {
	        for (var viewIndex = 0, length = view.length; viewIndex < length; viewIndex++) {
	            var item = view[viewIndex];

	            if (!item || item instanceof type) {
	                continue;
	            }

	            if (item.hasSubgroups !== undefined && !serverGrouping) {
	                replaceWithObservable(item.items, data, ranges, type, serverGrouping);
	            } else {
	                for (var idx = 0; idx < data.length; idx++) {
	                    if (data[idx] === item) {
	                        view[viewIndex] = data.at(idx);
	                        replaceInRanges(ranges, data, item, view[viewIndex]);
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function removeModel(data, model, skip, take) {
	        var length = data.length;
	        var startIndex = skip || 0;
	        var endIndex = typeof(take) !== "undefined" ? math.min(startIndex + take, length) : length;
	        var idx;

	        for (idx = startIndex; idx < endIndex; idx++) {
	            var dataItem = data.at(idx);
	            if (dataItem.uid == model.uid) {
	                data.splice(idx, 1);
	                return dataItem;
	            }
	        }
	    }

	    function indexOfPristineModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return (item.uid && item.uid == model.uid) || (item[model.idField] === model.id && model.id !== model._defaultId);
	            });
	        }
	        return -1;
	    }

	    function indexOfModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return item.uid == model.uid;
	            });
	        }
	        return -1;
	    }

	    function indexOf(data, comparer) {
	        var idx, length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            if (comparer(data[idx])) {
	                return idx;
	            }
	        }

	        return -1;
	    }

	    function fieldNameFromModel(fields, name) {
	        if (fields && !isEmptyObject(fields)) {
	            var descriptor = fields[name];
	            var fieldName;
	            if (isPlainObject(descriptor)) {
	                fieldName = descriptor.from || descriptor.field || name;
	            } else {
	                fieldName = fields[name] || name;
	            }

	            if (isFunction(fieldName)) {
	                return name;
	            }

	            return fieldName;
	        }
	        return name;
	    }

	    function convertFilterDescriptorsField(descriptor, model) {
	        var idx,
	            length,
	            target = {};

	        for (var field in descriptor) {
	            if (field !== "filters") {
	                target[field] = descriptor[field];
	            }
	        }

	        if (descriptor.filters) {
	            target.filters = [];
	            for (idx = 0, length = descriptor.filters.length; idx < length; idx++) {
	                target.filters[idx] = convertFilterDescriptorsField(descriptor.filters[idx], model);
	            }
	        } else {
	            target.field = fieldNameFromModel(model.fields, target.field);
	        }
	        return target;
	    }

	    function convertDescriptorsField(descriptors, model) {
	        var idx,
	            length,
	            result = [],
	            target,
	            descriptor;

	        for (idx = 0, length = descriptors.length; idx < length; idx ++) {
	            target = {};

	            descriptor = descriptors[idx];

	            for (var field in descriptor) {
	                target[field] = descriptor[field];
	            }

	            target.field = fieldNameFromModel(model.fields, target.field);

	            if (target.aggregates && isArray(target.aggregates)) {
	                target.aggregates = convertDescriptorsField(target.aggregates, model);
	            }
	            result.push(target);
	        }
	        return result;
	    }

	    var DataSource = Observable.extend({
	        init: function(options) {
	            var that = this, model, data;

	            if (options) {
	                data = options.data;
	            }

	            options = that.options = extend({}, that.options, options);

	            that._map = {};
	            that._prefetch = {};
	            that._data = [];
	            that._pristineData = [];
	            that._ranges = [];
	            that._view = [];
	            that._pristineTotal = 0;
	            that._destroyed = [];
	            that._pageSize = options.pageSize;
	            that._page = options.page  || (options.pageSize ? 1 : undefined);
	            that._sort = normalizeSort(options.sort);
	            that._filter = normalizeFilter(options.filter);
	            that._group = normalizeGroup(options.group);
	            that._aggregate = options.aggregate;
	            that._total = options.total;

	            that._shouldDetachObservableParents = true;

	            Observable.fn.init.call(that);

	            that.transport = Transport.create(options, data, that);

	            if (isFunction(that.transport.push)) {
	                that.transport.push({
	                    pushCreate: proxy(that._pushCreate, that),
	                    pushUpdate: proxy(that._pushUpdate, that),
	                    pushDestroy: proxy(that._pushDestroy, that)
	                });
	            }

	            if (options.offlineStorage != null) {
	                if (typeof options.offlineStorage == "string") {
	                    var key = options.offlineStorage;

	                    that._storage = {
	                        getItem: function() {
	                            return JSON.parse(localStorage.getItem(key));
	                        },
	                        setItem: function(item) {
	                            localStorage.setItem(key, stringify(that.reader.serialize(item)));
	                        }
	                    };
	                } else {
	                    that._storage = options.offlineStorage;
	                }
	            }

	            that.reader = new kendo.data.readers[options.schema.type || "json" ](options.schema);

	            model = that.reader.model || {};

	            that._detachObservableParents();

	            that._data = that._observe(that._data);
	            that._online = true;

	            that.bind(["push", ERROR, CHANGE, REQUESTSTART, SYNC, REQUESTEND, PROGRESS], options);
	        },

	        options: {
	            data: null,
	            schema: {
	               modelBase: Model
	            },
	            offlineStorage: null,
	            serverSorting: false,
	            serverPaging: false,
	            serverFiltering: false,
	            serverGrouping: false,
	            serverAggregates: false,
	            batch: false,
	            inPlaceSort: false
	        },

	        clone: function() {
	            return this;
	        },

	        online: function(value) {
	            if (value !== undefined) {
	                if (this._online != value) {
	                    this._online = value;

	                    if (value) {
	                        return this.sync();
	                    }
	                }

	                return $.Deferred().resolve().promise();
	            } else {
	                return this._online;
	            }
	        },

	        offlineData: function(state) {
	            if (this.options.offlineStorage == null) {
	                return null;
	            }

	            if (state !== undefined) {
	                return this._storage.setItem(state);
	            }

	            return this._storage.getItem() || [];
	        },

	        _isServerGrouped: function() {
	            var group = this.group() || [];

	            return this.options.serverGrouping && group.length;
	        },

	        _pushCreate: function(result) {
	            this._push(result, "pushCreate");
	        },

	        _pushUpdate: function(result) {
	            this._push(result, "pushUpdate");
	        },

	        _pushDestroy: function(result) {
	            this._push(result, "pushDestroy");
	        },

	        _push: function(result, operation) {
	            var data = this._readData(result);

	            if (!data) {
	                data = result;
	            }

	            this[operation](data);
	        },

	        _flatData: function(data, skip) {
	            if (data) {
	                if (this._isServerGrouped()) {
	                    return flattenGroups(data);
	                }

	                if (!skip) {
	                    for (var idx = 0; idx < data.length; idx++) {
	                        data.at(idx);
	                    }
	                }
	            }

	            return data;
	        },

	        parent: noop,

	        get: function(id) {
	            var idx, length, data = this._flatData(this._data, this.options.useRanges);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].id == id) {
	                    return data[idx];
	                }
	            }
	        },

	        getByUid: function(id) {
	            return this._getByUid(id, this._data);
	        },

	        _getByUid: function(id, dataItems) {
	            var idx, length, data = this._flatData(dataItems, this.options.useRanges);

	            if (!data) {
	                return;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].uid == id) {
	                    return data[idx];
	                }
	            }
	        },

	        indexOf: function(model) {
	            return indexOfModel(this._data, model);
	        },

	        at: function(index) {
	            return this._data.at(index);
	        },

	        data: function(value) {
	            var that = this;
	            if (value !== undefined) {
	                that._detachObservableParents();
	                that._data = this._observe(value);

	                that._pristineData = value.slice(0);

	                that._storeData();

	                that._ranges = [];
	                that.trigger("reset");
	                that._addRange(that._data);

	                that._total = that._data.length;
	                that._pristineTotal = that._total;

	                that._process(that._data);
	            } else {
	                if (that._data) {
	                    for (var idx = 0; idx < that._data.length; idx++) {
	                        that._data.at(idx);
	                    }
	                }

	                return that._data;
	            }
	        },

	        view: function(value) {
	            if (value === undefined) {
	                return this._view;
	            } else {
	                this._view = this._observeView(value);
	            }
	        },

	        _observeView: function(data) {
	            var that = this;
	            replaceWithObservable(data, that._data, that._ranges, that.reader.model || ObservableObject, that._isServerGrouped());

	            var view = new LazyObservableArray(data, that.reader.model);
	            view.parent = function() { return that.parent(); };
	            return view;
	        },

	        flatView: function() {
	            var groups = this.group() || [];

	            if (groups.length) {
	                return flattenGroups(this._view);
	            } else {
	                return this._view;
	            }
	        },

	        add: function(model) {
	            return this.insert(this._data.length, model);
	        },

	        _createNewModel: function(model) {
	            if (this.reader.model) {
	                return new this.reader.model(model);
	            }

	            if (model instanceof ObservableObject) {
	                return model;
	            }

	            return new ObservableObject(model);
	        },

	        insert: function(index, model) {
	            if (!model) {
	                model = index;
	                index = 0;
	            }

	            if (!(model instanceof Model)) {
	                model = this._createNewModel(model);
	            }

	            if (this._isServerGrouped()) {
	                this._data.splice(index, 0, this._wrapInEmptyGroup(model));
	            } else {
	                this._data.splice(index, 0, model);
	            }

	            this._insertModelInRange(index, model);

	            return model;
	        },

	        pushInsert: function(index, items) {
	            if (!items) {
	                items = index;
	                index = 0;
	            }

	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;

	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];

	                    var result = this.insert(index, item);

	                    pushed.push(result);

	                    var pristine = result.toJSON();

	                    if (this._isServerGrouped()) {
	                        pristine = this._wrapInEmptyGroup(pristine);
	                    }

	                    this._pristineData.push(pristine);

	                    index++;
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "create",
	                    items: pushed
	                });
	            }
	        },

	        pushCreate: function(items) {
	            this.pushInsert(this._data.length, items);
	        },

	        pushUpdate: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];

	            for (var idx = 0; idx < items.length; idx ++) {
	                var item = items[idx];
	                var model = this._createNewModel(item);

	                var target = this.get(model.id);

	                if (target) {
	                    pushed.push(target);

	                    target.accept(item);

	                    target.trigger(CHANGE);

	                    this._updatePristineForModel(target, item);
	                } else {
	                    this.pushCreate(item);
	                }
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "update",
	                    items: pushed
	                });
	            }
	        },

	        pushDestroy: function(items) {
	            var pushed = this._removeItems(items);

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "destroy",
	                    items: pushed
	                });
	            }
	        },

	        _removeItems: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var destroyed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;
	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];
	                    var model = this._createNewModel(item);
	                    var found = false;

	                    this._eachItem(this._data, function(items){
	                        for (var idx = 0; idx < items.length; idx++) {
	                            var item = items.at(idx);
	                            if (item.id === model.id) {
	                                destroyed.push(item);
	                                items.splice(idx, 1);
	                                found = true;
	                                break;
	                            }
	                        }
	                    });

	                    if (found) {
	                        this._removePristineForModel(model);
	                        this._destroyed.pop();
	                    }
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            return destroyed;
	        },

	        remove: function(model) {
	            var result,
	                that = this,
	                hasGroups = that._isServerGrouped();

	            this._eachItem(that._data, function(items) {
	                if (that.options.useRanges && !that.options.serverPaging) {
	                    result = removeModel(items, model, that.currentRangeStart(), that.take());
	                } else {
	                    result = removeModel(items, model);
	                }

	                if (result && hasGroups) {
	                    if (!result.isNew || !result.isNew()) {
	                        that._destroyed.push(result);
	                    }
	                    return true;
	                }
	            });

	            this._removeModelFromRanges(model);

	            return model;
	        },

	        destroyed: function() {
	            return this._destroyed;
	        },

	        created: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data, this.options.useRanges);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].isNew && data[idx].isNew()) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        updated: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data, this.options.useRanges);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && !data[idx].isNew()) && data[idx].dirty) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        sync: function() {
	            var that = this,
	                created = [],
	                updated = [],
	                destroyed = that._destroyed;

	            var promise = $.Deferred().resolve().promise();

	            if (that.online()) {

	                if (!that.reader.model) {
	                    return promise;
	                }

	                created = that.created();
	                updated = that.updated();

	                var promises = [];

	                if (that.options.batch && that.transport.submit) {
	                    promises = that._sendSubmit(created, updated, destroyed);
	                } else {
	                    promises.push.apply(promises, that._send("create", created));
	                    promises.push.apply(promises, that._send("update", updated));
	                    promises.push.apply(promises, that._send("destroy", destroyed));
	                }

	                promise = $.when
	                 .apply(null, promises)
	                 .then(function() {
	                    var idx, length;

	                    for (idx = 0, length = arguments.length; idx < length; idx++){
	                        if (arguments[idx]) {
	                            that._accept(arguments[idx]);
	                        }
	                    }

	                    that._storeData(true);

	                    that._change({ action: "sync" });

	                    that.trigger(SYNC);
	                });
	            } else {
	                that._storeData(true);

	                that._change({ action: "sync" });
	            }

	            return promise;
	        },

	        cancelChanges: function(model) {
	            var that = this;

	            if (model instanceof kendo.data.Model) {
	                that._cancelModel(model);
	            } else {
	                that._destroyed = [];
	                that._detachObservableParents();
	                that._data = that._observe(that._pristineData);
	                if (that.options.serverPaging) {
	                    that._total = that._pristineTotal;
	                }

	                that._ranges = [];
	                that._addRange(that._data, 0);

	                that._change();

	                that._markOfflineUpdatesAsDirty();
	            }
	        },

	        _markOfflineUpdatesAsDirty: function() {
	            var that = this;

	            if (that.options.offlineStorage != null) {
	                that._eachItem(that._data, function(items) {
	                    for (var idx = 0; idx < items.length; idx++) {
	                        var item = items.at(idx);
	                        if (item.__state__ == "update" || item.__state__ == "create") {
	                            item.dirty = true;
	                        }
	                    }
	                });
	            }
	        },

	        hasChanges: function() {
	            var idx,
	                length,
	                data = this._flatData(this._data, this.options.useRanges);

	            if (this._destroyed.length) {
	                return true;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && data[idx].isNew()) || data[idx].dirty) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        _accept: function(result) {
	            var that = this,
	                models = result.models,
	                response = result.response,
	                idx = 0,
	                serverGroup = that._isServerGrouped(),
	                pristine = that._pristineData,
	                type = result.type,
	                length;

	            that.trigger(REQUESTEND, { response: response, type: type });

	            if (response && !isEmptyObject(response)) {
	                response = that.reader.parse(response);

	                if (that._handleCustomErrors(response)) {
	                    return;
	                }

	                response = that.reader.data(response);

	                if (!isArray(response)) {
	                    response = [response];
	                }
	            } else {
	                response = $.map(models, function(model) { return model.toJSON(); } );
	            }

	            if (type === "destroy") {
	                that._destroyed = [];
	            }

	            for (idx = 0, length = models.length; idx < length; idx++) {
	                if (type !== "destroy") {
	                    models[idx].accept(response[idx]);

	                    if (type === "create") {
	                        pristine.push(serverGroup ? that._wrapInEmptyGroup(models[idx]) : response[idx]);
	                    } else if (type === "update") {
	                        that._updatePristineForModel(models[idx], response[idx]);
	                    }
	                } else {
	                    that._removePristineForModel(models[idx]);
	                }
	            }
	        },

	        _updatePristineForModel: function(model, values) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                kendo.deepExtend(items[index], values);
	            });
	        },

	        _executeOnPristineForModel: function(model, callback) {
	            this._eachPristineItem(
	                function(items) {
	                    var index = indexOfPristineModel(items, model);
	                    if (index > -1) {
	                        callback(index, items);
	                        return true;
	                    }
	                });
	        },

	        _removePristineForModel: function(model) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                items.splice(index, 1);
	            });
	        },

	        _readData: function(data) {
	            var read = !this._isServerGrouped() ? this.reader.data : this.reader.groups;
	            return read.call(this.reader, data);
	        },

	        _eachPristineItem: function(callback) {
	            this._eachItem(this._pristineData, callback);
	        },

	       _eachItem: function(data, callback) {
	            if (data && data.length) {
	                if (this._isServerGrouped()) {
	                    eachGroupItems(data, callback);
	                } else {
	                    callback(data);
	                }
	            }
	        },

	        _pristineForModel: function(model) {
	            var pristine,
	                idx,
	                callback = function(items) {
	                    idx = indexOfPristineModel(items, model);
	                    if (idx > -1) {
	                        pristine = items[idx];
	                        return true;
	                    }
	                };

	            this._eachPristineItem(callback);

	            return pristine;
	        },

	        _cancelModel: function(model) {
	            var that = this;
	            var pristine = this._pristineForModel(model);

	            this._eachItem(this._data, function(items) {
	                var idx = indexOfModel(items, model);
	                if (idx >= 0) {
	                    if (pristine && (!model.isNew() || pristine.__state__)) {
	                        items[idx].accept(pristine);

	                        if (pristine.__state__ == "update") {
	                            items[idx].dirty = true;
	                        }

	                    } else {
	                        items.splice(idx, 1);

	                        that._removeModelFromRanges(model);
	                    }
	                }
	            });
	        },

	        _submit: function(promises, data) {
	            var that = this;

	            that.trigger(REQUESTSTART, { type: "submit" });

	            that.trigger(PROGRESS);

	            that.transport.submit(extend({
	                success: function(response, type) {
	                    var promise = $.grep(promises, function(x) {
	                        return x.type == type;
	                    })[0];

	                    if (promise) {
	                        promise.resolve({
	                            response: response,
	                            models: promise.models,
	                            type: type
	                        });
	                    }
	                },
	                error: function(response, status, error) {
	                    for (var idx = 0; idx < promises.length; idx++) {
	                        promises[idx].reject(response);
	                    }

	                    that.error(response, status, error);
	                }
	            }, data));
	        },

	        _sendSubmit: function(created, updated, destroyed) {
	            var that = this,
	                promises = [];

	            if (that.options.batch) {
	                if (created.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "create";
	                        deferred.models = created;
	                    }));
	                }

	                if (updated.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "update";
	                        deferred.models = updated;
	                    }));
	                }

	                if (destroyed.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "destroy";
	                        deferred.models = destroyed;
	                    }));
	                }

	                that._submit(promises, {
	                    data: {
	                        created: that.reader.serialize(toJSON(created)),
	                        updated: that.reader.serialize(toJSON(updated)),
	                        destroyed: that.reader.serialize(toJSON(destroyed))
	                    }
	                });
	            }

	            return promises;
	        },

	        _promise: function(data, models, type) {
	            var that = this;

	            return $.Deferred(function(deferred) {
	                that.trigger(REQUESTSTART, { type: type });

	                that.trigger(PROGRESS);

	                that.transport[type].call(that.transport, extend({
	                    success: function(response) {
	                        deferred.resolve({
	                            response: response,
	                            models: models,
	                            type: type
	                        });
	                    },
	                    error: function(response, status, error) {
	                        deferred.reject(response);
	                        that.error(response, status, error);
	                    }
	                }, data));
	            }).promise();
	        },

	        _send: function(method, data) {
	            var that = this,
	                idx,
	                length,
	                promises = [],
	                converted = that.reader.serialize(toJSON(data));

	            if (that.options.batch) {
	                if (data.length) {
	                    promises.push(that._promise( { data: { models: converted } }, data , method));
	                }
	            } else {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    promises.push(that._promise( { data: converted[idx] }, [ data[idx] ], method));
	                }
	            }

	            return promises;
	        },

	        read: function(data) {
	            var that = this, params = that._params(data);
	            var deferred = $.Deferred();

	            that._queueRequest(params, function() {
	                var isPrevented = that.trigger(REQUESTSTART, { type: "read" });
	                if (!isPrevented) {
	                    that.trigger(PROGRESS);

	                    that._ranges = [];
	                    that.trigger("reset");
	                    if (that.online()) {
	                        that.transport.read({
	                            data: params,
	                            success: function(data) {
	                                that._ranges = [];
	                                that.success(data, params);

	                                deferred.resolve();
	                            },
	                            error: function() {
	                                var args = slice.call(arguments);

	                                that.error.apply(that, args);

	                                deferred.reject.apply(deferred, args);
	                            }
	                        });
	                    } else if (that.options.offlineStorage != null){
	                        that.success(that.offlineData(), params);

	                        deferred.resolve();
	                    }
	                } else {
	                    that._dequeueRequest();

	                    deferred.resolve(isPrevented);
	                }
	            });

	            return deferred.promise();
	        },

	        _readAggregates: function(data) {
	            return this.reader.aggregates(data);
	        },

	        success: function(data) {
	            var that = this,
	                options = that.options,
	                requestParams;

	            that.trigger(REQUESTEND, { response: data, type: "read" });

	            if (that.online()) {
	                data = that.reader.parse(data);

	                if (that._handleCustomErrors(data)) {
	                    that._dequeueRequest();
	                    return;
	                }

	                that._total = that.reader.total(data);

	                if (that._aggregate && options.serverAggregates) {
	                    that._aggregateResult = that._readAggregates(data);
	                }

	                requestParams = arguments.length > 1 ? arguments[1] : undefined;
	                data = that._readData(data, requestParams);

	                that._destroyed = [];
	            } else {
	                data = that._readData(data);

	                var items = [];
	                var itemIds = {};
	                var model = that.reader.model;
	                var idField = model ? model.idField : "id";
	                var idx;

	                for (idx = 0; idx < this._destroyed.length; idx++) {
	                    var id = this._destroyed[idx][idField];
	                    itemIds[id] = id;
	                }

	                for (idx = 0; idx < data.length; idx++) {
	                    var item = data[idx];
	                    var state = item.__state__;
	                    if (state == "destroy") {
	                        if (!itemIds[item[idField]]) {
	                            this._destroyed.push(this._createNewModel(item));
	                        }
	                    } else {
	                        items.push(item);
	                    }
	                }

	                data = items;

	                that._total = data.length;
	            }

	            that._pristineTotal = that._total;

	            that._pristineData = data.slice(0);

	            that._detachObservableParents();

	            if (that.options.endless) {
	                that._data.unbind(CHANGE, that._changeHandler);
	                data = that._observe(data);
	                for (var i = 0; i < data.length; i++) {
	                    that._data.push(data[i]);
	                }
	                that._data.bind(CHANGE, that._changeHandler);
	            } else {
	                that._data = that._observe(data);
	            }

	            that._markOfflineUpdatesAsDirty();

	            that._storeData();

	            that._addRange(that._data);

	            that._process(that._data);

	            that._dequeueRequest();
	        },

	        _detachObservableParents: function() {
	            if (this._data && this._shouldDetachObservableParents) {
	                for (var idx = 0; idx < this._data.length; idx++) {
	                    if (this._data[idx].parent) {
	                        this._data[idx].parent = noop;
	                    }
	                }
	            }
	        },

	        _storeData: function(updatePristine) {
	            var serverGrouping = this._isServerGrouped();
	            var model = this.reader.model;

	            function items(data) {
	                var state = [];

	                for (var idx = 0; idx < data.length; idx++) {
	                    var dataItem = data.at(idx);
	                    var item = dataItem.toJSON();

	                    if (serverGrouping && dataItem.items) {
	                        item.items = items(dataItem.items);
	                    } else {
	                        item.uid = dataItem.uid;

	                        if (model) {
	                            if (dataItem.isNew()) {
	                                item.__state__ = "create";
	                            } else if (dataItem.dirty) {
	                                item.__state__ = "update";
	                            }
	                        }
	                    }
	                    state.push(item);
	                }

	                return state;
	            }

	            if (this.options.offlineStorage != null) {
	                var state = items(this._data);

	                var destroyed = [];

	                for (var idx = 0; idx < this._destroyed.length; idx++) {
	                    var item = this._destroyed[idx].toJSON();
	                    item.__state__ = "destroy";
	                    destroyed.push(item);
	                }

	                this.offlineData(state.concat(destroyed));

	                if (updatePristine) {
	                    this._pristineData = this._readData(state);
	                }
	            }
	        },

	        _addRange: function(data, skip) {
	            var that = this,
	                start = typeof(skip) !== "undefined" ? skip : (that._skip || 0),
	                end = start + that._flatData(data, true).length;

	            that._ranges.push({ start: start, end: end, data: data, timestamp: new Date().getTime() });
	            that._ranges.sort( function(x, y) { return x.start - y.start; } );
	        },

	        error: function(xhr, status, errorThrown) {
	            this._dequeueRequest();
	            this.trigger(REQUESTEND, { });
	            this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });
	        },

	        _params: function(data) {
	            var that = this,
	                options =  extend({
	                    take: that.take(),
	                    skip: that.skip(),
	                    page: that.page(),
	                    pageSize: that.pageSize(),
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                }, data);

	            if (!that.options.serverPaging) {
	                delete options.take;
	                delete options.skip;
	                delete options.page;
	                delete options.pageSize;
	            }

	            if (!that.options.serverGrouping) {
	                delete options.group;
	            } else if (that.reader.model && options.group) {
	                options.group = convertDescriptorsField(options.group, that.reader.model);
	            }

	            if (!that.options.serverFiltering) {
	                delete options.filter;
	            } else if (that.reader.model && options.filter) {
	               options.filter = convertFilterDescriptorsField(options.filter, that.reader.model);
	            }

	            if (!that.options.serverSorting) {
	                delete options.sort;
	            } else if (that.reader.model && options.sort) {
	                options.sort = convertDescriptorsField(options.sort, that.reader.model);
	            }

	            if (!that.options.serverAggregates) {
	                delete options.aggregate;
	            } else if (that.reader.model && options.aggregate) {
	                options.aggregate = convertDescriptorsField(options.aggregate, that.reader.model);
	            }

	            return options;
	        },

	        _queueRequest: function(options, callback) {
	            var that = this;
	            if (!that._requestInProgress) {
	                that._requestInProgress = true;
	                that._pending = undefined;
	                callback();
	            } else {
	                that._pending = { callback: proxy(callback, that), options: options };
	            }
	        },

	        _dequeueRequest: function() {
	            var that = this;
	            that._requestInProgress = false;
	            if (that._pending) {
	                that._queueRequest(that._pending.options, that._pending.callback);
	            }
	        },

	        _handleCustomErrors: function(response) {
	            if (this.reader.errors) {
	                var errors = this.reader.errors(response);
	                if (errors) {
	                    this.trigger(ERROR, { xhr: null, status: "customerror", errorThrown: "custom error", errors: errors });
	                    return true;
	                }
	            }
	            return false;
	        },

	        _shouldWrap: function(data) {
	            var model = this.reader.model;

	            if (model && data.length) {
	                return !(data[0] instanceof model);
	            }

	            return false;
	        },

	        _observe: function(data) {
	            var that = this,
	                model = that.reader.model;

	            that._shouldDetachObservableParents = true;

	            if (data instanceof ObservableArray) {
	                that._shouldDetachObservableParents = false;
	                if (that._shouldWrap(data)) {
	                    data.type = that.reader.model;
	                    data.wrapAll(data, data);
	                }
	            } else {
	                var arrayType = that.pageSize() && !that.options.serverPaging ? LazyObservableArray : ObservableArray;
	                data = new arrayType(data, that.reader.model);
	                data.parent = function() { return that.parent(); };
	            }

	            if (that._isServerGrouped()) {
	                wrapGroupItems(data, model);
	            }

	            if (that._changeHandler && that._data && that._data instanceof ObservableArray) {
	                that._data.unbind(CHANGE, that._changeHandler);
	            } else {
	                that._changeHandler = proxy(that._change, that);
	            }

	            return data.bind(CHANGE, that._changeHandler);
	        },

	        _updateTotalForAction: function(action, items) {
	            var that = this;

	            var total = parseInt(that._total, 10);

	            if (!isNumber(that._total)) {
	                total = parseInt(that._pristineTotal, 10);
	            }
	            if (action === "add") {
	                total += items.length;
	            } else if (action === "remove") {
	                total -= items.length;
	            } else if (action !== "itemchange" && action !== "sync" && !that.options.serverPaging) {
	                total = that._pristineTotal;
	            } else if (action === "sync") {
	                total = that._pristineTotal = parseInt(that._total, 10);
	            }

	            that._total = total;
	        },

	        _change: function(e) {
	            var that = this, idx, length, action = e ? e.action : "";

	            if (action === "remove") {
	                for (idx = 0, length = e.items.length; idx < length; idx++) {
	                    if (!e.items[idx].isNew || !e.items[idx].isNew()) {
	                        that._destroyed.push(e.items[idx]);
	                    }
	                }
	            }

	            if (that.options.autoSync && (action === "add" || action === "remove" || action === "itemchange")) {

	                var handler = function(args) {
	                    if (args.action === "sync") {
	                        that.unbind("change", handler);
	                        that._updateTotalForAction(action, e.items);
	                    }
	                };

	                that.first("change", handler);

	                that.sync();

	            } else {
	                that._updateTotalForAction(action, e ? e.items : []);

	                that._process(that._data, e);
	            }
	        },

	        _calculateAggregates: function (data, options) {
	            options = options || {};

	            var query = new Query(data),
	                aggregates = options.aggregate,
	                filter = options.filter;

	            if (filter) {
	                query = query.filter(filter);
	            }

	            return query.aggregate(aggregates);
	        },

	        _process: function (data, e) {
	            var that = this,
	                options = {},
	                result;

	            if (that.options.serverPaging !== true) {
	                options.skip = that._skip;
	                options.take = that._take || that._pageSize;

	                if(options.skip === undefined && that._page !== undefined && that._pageSize !== undefined) {
	                    options.skip = (that._page - 1) * that._pageSize;
	                }
	            }

	            if (that.options.serverSorting !== true) {
	                options.sort = that._sort;
	            }

	            if (that.options.serverFiltering !== true) {
	                options.filter = that._filter;
	            }

	            if (that.options.serverGrouping !== true) {
	                options.group = that._group;
	            }

	            if (that.options.serverAggregates !== true) {
	                options.aggregate = that._aggregate;
	                that._aggregateResult = that._calculateAggregates(data, options);
	            }

	            result = that._queryProcess(data, options);

	            that.view(result.data);

	            if (result.total !== undefined && !that.options.serverFiltering) {
	                that._total = result.total;
	            }

	            e = e || {};

	            e.items = e.items || that._view;

	            that.trigger(CHANGE, e);
	        },

	        _queryProcess: function(data, options) {
	            if (this.options.inPlaceSort) {
	                return Query.process(data, options, this.options.inPlaceSort);
	            }
	            else {
	                return Query.process(data, options);
	            }
	        },

	        _mergeState: function(options) {
	            var that = this;

	            if (options !== undefined) {
	                that._pageSize = options.pageSize;
	                that._page = options.page;
	                that._sort = options.sort;
	                that._filter = options.filter;
	                that._group = options.group;
	                that._aggregate = options.aggregate;
	                that._skip = that._currentRangeStart = options.skip;
	                that._take = options.take;

	                if(that._skip === undefined) {
	                    that._skip = that._currentRangeStart = that.skip();
	                    options.skip = that.skip();
	                }

	                if(that._take === undefined && that._pageSize !== undefined) {
	                    that._take = that._pageSize;
	                    options.take = that._take;
	                }

	                if (options.sort) {
	                    that._sort = options.sort = normalizeSort(options.sort);
	                }

	                if (options.filter) {
	                    that._filter = options.filter = normalizeFilter(options.filter);
	                }

	                if (options.group) {
	                    that._group = options.group = normalizeGroup(options.group);
	                }
	                if (options.aggregate) {
	                    that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);
	                }
	            }
	            return options;
	        },

	        query: function(options) {
	            var result;
	            var remote = this.options.serverSorting || this.options.serverPaging || this.options.serverFiltering || this.options.serverGrouping || this.options.serverAggregates;

	            if (remote || ((this._data === undefined || this._data.length === 0) && !this._destroyed.length)) {
	                if (this.options.endless) {
	                    var moreItemsCount = options.pageSize - this.pageSize();
	                    if (moreItemsCount > 0) {
	                        moreItemsCount = this.pageSize();
	                        options.page = options.pageSize / moreItemsCount;
	                        options.pageSize = moreItemsCount;
	                    } else {
	                        options.page = 1;
	                        this.options.endless = false;
	                    }
	                }
	                return this.read(this._mergeState(options));
	            }

	            var isPrevented = this.trigger(REQUESTSTART, { type: "read" });
	            if (!isPrevented) {
	                this.trigger(PROGRESS);

	                result = this._queryProcess(this._data, this._mergeState(options));

	                if (!this.options.serverFiltering) {
	                    if (result.total !== undefined) {
	                        this._total = result.total;
	                    } else {
	                        this._total = this._data.length;
	                    }
	                }

	                this._aggregateResult = this._calculateAggregates(this._data, options);
	                this.view(result.data);
	                this.trigger(REQUESTEND, { type: "read" });
	                this.trigger(CHANGE, { items: result.data });
	            }

	            return $.Deferred().resolve(isPrevented).promise();
	        },

	        fetch: function(callback) {
	            var that = this;
	            var fn = function(isPrevented) {
	                if (isPrevented !== true && isFunction(callback)) {
	                    callback.call(that);
	                }
	            };

	            return this._query().then(fn);
	        },

	        _query: function(options) {
	            var that = this;

	            return that.query(extend({}, {
	                page: that.page(),
	                pageSize: that.pageSize(),
	                sort: that.sort(),
	                filter: that.filter(),
	                group: that.group(),
	                aggregate: that.aggregate()
	            }, options));
	        },

	        next: function(options) {
	            var that = this,
	                page = that.page(),
	                total = that.total();

	            options = options || {};

	            if (!page || (total && page + 1 > that.totalPages())) {
	                return;
	            }

	            that._skip = that._currentRangeStart = page * that.take();

	            page += 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        prev: function(options) {
	            var that = this,
	                page = that.page();

	            options = options || {};

	            if (!page || page === 1) {
	                return;
	            }

	            that._skip = that._currentRangeStart = that._skip - that.take();

	            page -= 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        page: function(val) {
	            var that = this,
	            skip;

	            if(val !== undefined) {
	                val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);
	                that._query({ page: val });
	                return;
	            }
	            skip = that.skip();

	            return skip !== undefined ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined;
	        },

	        pageSize: function(val) {
	            var that = this;

	            if (val !== undefined) {
	                that._query({ pageSize: val, page: 1 });
	                return;
	            }

	            return that.take();
	        },

	        sort: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ sort: val });
	                return;
	            }

	            return that._sort;
	        },

	        filter: function(val) {
	            var that = this;

	            if (val === undefined) {
	                return that._filter;
	            }

	            that.trigger("reset");
	            that._query({ filter: val, page: 1 });
	        },

	        group: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ group: val });
	                return;
	            }

	            return that._group;
	        },

	        total: function() {
	            return parseInt(this._total || 0, 10);
	        },

	        aggregate: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ aggregate: val });
	                return;
	            }

	            return that._aggregate;
	        },

	        aggregates: function() {
	            var result = this._aggregateResult;

	            if (isEmptyObject(result)) {
	                result = this._emptyAggregates(this.aggregate());
	            }

	            return result;
	        },

	        _emptyAggregates: function(aggregates) {
	            var result = {};

	            if (!isEmptyObject(aggregates)) {
	                var aggregate = {};

	                if (!isArray(aggregates)){
	                    aggregates = [aggregates];
	                }

	                for (var idx = 0; idx <aggregates.length; idx++) {
	                    aggregate[aggregates[idx].aggregate] = 0;
	                    result[aggregates[idx].field] = aggregate;
	                }
	            }

	            return result;
	        },

	        _wrapInEmptyGroup: function(model) {
	            var groups = this.group(),
	                parent,
	                group,
	                idx,
	                length;

	            for (idx = groups.length-1, length = 0; idx >= length; idx--) {
	                group = groups[idx];
	                parent = {
	                    value: model.get(group.field),
	                    field: group.field,
	                    items: parent ? [parent] : [model],
	                    hasSubgroups: !!parent,
	                    aggregates: this._emptyAggregates(group.aggregates)
	                };
	            }

	            return parent;
	        },

	        totalPages: function() {
	            var that = this,
	            pageSize = that.pageSize() || that.total();

	            return math.ceil((that.total() || 0) / pageSize);
	        },

	        inRange: function(skip, take) {
	            var that = this,
	                end = math.min(skip + take, that.total());

	            if (!that.options.serverPaging && that._data.length > 0) {
	                return true;
	            }

	            return that._findRange(skip, end).length > 0;
	        },

	        lastRange: function() {
	            var ranges = this._ranges;
	            return ranges[ranges.length - 1] || { start: 0, end: 0, data: [] };
	        },

	        firstItemUid: function() {
	            var ranges = this._ranges;
	            return ranges.length && ranges[0].data.length && ranges[0].data[0].uid;
	        },

	        enableRequestsInProgress: function() {
	            this._skipRequestsInProgress = false;
	        },

	        _timeStamp: function() {
	            return new Date().getTime();
	        },

	        range: function(skip, take, callback) {
	            this._currentRequestTimeStamp = this._timeStamp();
	            this._skipRequestsInProgress = true;

	            skip = math.min(skip || 0, this.total());

	            var that = this,
	                pageSkip = math.max(math.floor(skip / take), 0) * take,
	                size = math.min(pageSkip + take, that.total()),
	                data;

	            data = that._findRange(skip, math.min(skip + take, that.total()));

	            if (data.length) {

	                that._pending = undefined;

	                that._skip = skip > that.skip() ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;

	                that._currentRangeStart = skip;

	                that._take = take;

	                var paging = that.options.serverPaging;
	                var sorting = that.options.serverSorting;
	                var filtering = that.options.serverFiltering;
	                var aggregates = that.options.serverAggregates;
	                try {
	                    that.options.serverPaging = true;
	                    if (!that._isServerGrouped() && !(that.group() && that.group().length)) {
	                        that.options.serverSorting = true;
	                    }
	                    that.options.serverFiltering = true;
	                    that.options.serverPaging = true;
	                    that.options.serverAggregates = true;

	                    if (paging) {
	                        that._detachObservableParents();
	                        that._data = data = that._observe(data);
	                    }
	                    that._process(data);
	                } finally {
	                    that.options.serverPaging = paging;
	                    that.options.serverSorting = sorting;
	                    that.options.serverFiltering = filtering;
	                    that.options.serverAggregates = aggregates;
	                }

	                if (isFunction(callback)) {
	                    callback();
	                }

	                return;
	            }

	            if (take !== undefined) {
	                if (!that._rangeExists(pageSkip, size)) {
	                    that.prefetch(pageSkip, take, function() {
	                        if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {
	                            that.prefetch(size, take, function() {
	                                that.range(skip, take, callback );
	                            });
	                        } else {
	                            that.range(skip, take, callback);
	                        }
	                    });
	                } else if (pageSkip < skip) {
	                    that.prefetch(size, take, function() {
	                        that.range(skip, take, callback );
	                    });
	                }
	            }
	        },

	        _findRange: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                range,
	                data = [],
	                skipIdx,
	                takeIdx,
	                startIndex,
	                endIndex,
	                rangeData,
	                rangeEnd,
	                processed,
	                options = that.options,
	                remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,
	                flatData,
	                count,
	                length;

	            for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {
	                range = ranges[skipIdx];
	                if (start >= range.start && start <= range.end) {
	                    count = 0;

	                    for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {
	                        range = ranges[takeIdx];
	                        flatData = that._flatData(range.data, true);

	                        if (flatData.length && start + count >= range.start) {
	                            rangeData = range.data;
	                            rangeEnd = range.end;

	                            if (!remote) {
	                                if (options.inPlaceSort) {
	                                    processed = that._queryProcess(range.data, { filter: that.filter() });
	                                } else {
	                                    var sort = normalizeGroup(that.group() || []).concat(normalizeSort(that.sort() || []));
	                                    processed = that._queryProcess(range.data, { sort: sort, filter: that.filter() });
	                                }
	                                flatData = rangeData = processed.data;

	                                if (processed.total !== undefined) {
	                                    rangeEnd = processed.total;
	                                }
	                            }

	                            startIndex = 0;
	                            if (start + count > range.start) {
	                                startIndex = (start + count) - range.start;
	                            }
	                            endIndex = flatData.length;
	                            if (rangeEnd > end) {
	                                endIndex = endIndex - (rangeEnd - end);
	                            }
	                            count += endIndex - startIndex;
	                            data = that._mergeGroups(data, rangeData, startIndex, endIndex);

	                            if (end <= range.end && count == end - start) {
	                                return data;
	                            }
	                        }
	                    }
	                    break;
	                }
	            }
	            return [];
	        },

	        _mergeGroups: function(data, range, skip, take) {
	            if (this._isServerGrouped()) {
	                var temp = range.toJSON(),
	                    prevGroup;

	                if (data.length) {
	                    prevGroup = data[data.length - 1];
	                }

	                mergeGroups(prevGroup, temp, skip, take);

	                return data.concat(temp);
	            }
	            return data.concat(range.slice(skip, take));
	        },

	        skip: function() {
	            var that = this;

	            if (that._skip === undefined) {
	                return (that._page !== undefined ? (that._page  - 1) * (that.take() || 1) : undefined);
	            }
	            return that._skip;
	        },

	        currentRangeStart: function() {
	            return this._currentRangeStart || 0;
	        },

	        take: function() {
	            return this._take || this._pageSize;
	        },

	        _prefetchSuccessHandler: function (skip, size, callback, force) {
	            var that = this;
	            var timestamp = that._timeStamp();

	            return function(data) {
	                var found = false,
	                    range = { start: skip, end: size, data: [], timestamp: that._timeStamp() },
	                    idx,
	                    length,
	                    temp;

	                that._dequeueRequest();

	                that.trigger(REQUESTEND, { response: data, type: "read" });

	                data = that.reader.parse(data);

	                temp = that._readData(data);

	                if (temp.length) {

	                    for (idx = 0, length = that._ranges.length; idx < length; idx++) {
	                        if (that._ranges[idx].start === skip) {
	                            found = true;
	                            range = that._ranges[idx];
	                            break;
	                        }
	                    }
	                    if (!found) {
	                        that._ranges.push(range);
	                    }
	                }

	                range.data = that._observe(temp);
	                range.end = range.start + that._flatData(range.data, true).length;
	                that._ranges.sort( function(x, y) { return x.start - y.start; } );
	                that._total = that.reader.total(data);

	                if (force || (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress)) {
	                    if (callback && temp.length) {
	                        callback();
	                    } else {
	                        that.trigger(CHANGE, {});
	                    }
	                }
	            };
	        },

	        prefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                clearTimeout(that._timeout);

	                that._timeout = setTimeout(function() {
	                    that._queueRequest(options, function() {
	                        if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                            that.transport.read({
	                                data: that._params(options),
	                                success: that._prefetchSuccessHandler(skip, size, callback),
	                                error: function() {
	                                    var args = slice.call(arguments);
	                                    that.error.apply(that, args);
	                                }
	                            });
	                        } else {
	                            that._dequeueRequest();
	                        }
	                    });
	                }, 100);
	            } else if (callback) {
	                callback();
	            }
	        },

	        _multiplePrefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                    that.transport.read({
	                        data: that._params(options),
	                        success: that._prefetchSuccessHandler(skip, size, callback, true)
	                    });
	                }
	            } else if (callback) {
	                callback();
	            }
	        },

	        _rangeExists: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                idx,
	                length;

	            for (idx = 0, length = ranges.length; idx < length; idx++) {
	                if (ranges[idx].start <= start && ranges[idx].end >= end) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _removeModelFromRanges: function(model) {
	            var that = this;
	            var result,
	                found,
	                range;

	            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
	                range = this._ranges[idx];

	                this._eachItem(range.data, function(items) {
	                    if (that.options.useRanges && !that.options.serverPaging) {
	                        result = removeModel(items, model, that.currentRangeStart(), that.take());
	                    } else {
	                        result = removeModel(items, model);
	                    }

	                    if (result) {
	                        found = true;
	                    }
	                });

	                if (found) {
	                    break;
	                }
	            }

	            that._updateRangesLength();
	        },

	        _insertModelInRange: function(index, model) {
	            var that = this;
	            var ranges = that._ranges || [];
	            var rangesLength = ranges.length;
	            var range;
	            var i;

	            for (i = 0; i < rangesLength; i++) {
	                range = ranges[i];

	                if (range.start <= index && range.end >= index) {
	                    if (!that._getByUid(model.uid, range.data)) {
	                        if (that._isServerGrouped()) {
	                            range.data.splice(index, 0, that._wrapInEmptyGroup(model));
	                        } else {
	                            range.data.splice(index, 0, model);
	                        }
	                    }

	                    break;
	                }
	            }

	            that._updateRangesLength();
	        },

	        _updateRangesLength: function() {
	            var that = this;
	            var ranges = that._ranges || [];
	            var rangesLength = ranges.length;
	            var mismatchFound = false;
	            var mismatchLength = 0;
	            var lengthDifference = 0;
	            var range;
	            var i;

	            for (i = 0; i < rangesLength; i++) {
	                range = ranges[i];
	                lengthDifference = that._flatData(range.data, true).length - math.abs(range.end - range.start);

	                if (!mismatchFound && lengthDifference !== 0) {
	                    mismatchFound = true;
	                    mismatchLength = lengthDifference;
	                    range.end += mismatchLength;
	                    continue;
	                }

	                if (mismatchFound) {
	                    range.start += mismatchLength;
	                    range.end += mismatchLength;
	                }
	            }
	        }
	    });

	    var Transport = {};

	    Transport.create = function(options, data, dataSource) {
	        var transport,
	            transportOptions = options.transport ? $.extend({}, options.transport) : null;

	        if (transportOptions) {
	            transportOptions.read = typeof transportOptions.read === STRING ? { url: transportOptions.read } : transportOptions.read;

	            if (options.type === "jsdo") {
	                transportOptions.dataSource = dataSource;
	            }

	            if (options.type) {
	                kendo.data.transports = kendo.data.transports || {};
	                kendo.data.schemas = kendo.data.schemas || {};

	                if (!kendo.data.transports[options.type]) {
	                    kendo.logToConsole("Unknown DataSource transport type '" + options.type + "'.\nVerify that registration scripts for this type are included after Kendo UI on the page.", "warn");
	                } else if (!isPlainObject(kendo.data.transports[options.type])) {
	                    transport = new kendo.data.transports[options.type](extend(transportOptions, { data: data }));
	                } else {
	                    transportOptions = extend(true, {}, kendo.data.transports[options.type], transportOptions);
	                }

	                options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);
	            }

	            if (!transport) {
	                transport = isFunction(transportOptions.read) ? transportOptions : new RemoteTransport(transportOptions);
	            }
	        } else {
	            transport = new LocalTransport({ data: options.data || [] });
	        }
	        return transport;
	    };

	    DataSource.create = function(options) {
	        if (isArray(options) || options instanceof ObservableArray) {
	           options = { data: options };
	        }

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            table = dataSource.table,
	            select = dataSource.select,
	            idx,
	            length,
	            model = {},
	            field;

	        if (!data && fields && !dataSource.transport) {
	            if (table) {
	                data = inferTable(table, fields);
	            } else if (select) {
	                data = inferSelect(select, fields);

	                if (dataSource.group === undefined && data[0] && data[0].optgroup !== undefined) {
	                    dataSource.group = "optgroup";
	                }
	            }
	        }

	        if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {
	            for (idx = 0, length = fields.length; idx < length; idx++) {
	                field = fields[idx];
	                if (field.type) {
	                    model[field.field] = field;
	                }
	            }

	            if (!isEmptyObject(model)) {
	                dataSource.schema = extend(true, dataSource.schema, { model:  { fields: model } });
	            }
	        }

	        dataSource.data = data;

	        select = null;
	        dataSource.select = null;
	        table = null;
	        dataSource.table = null;

	        return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);
	    };

	    function inferSelect(select, fields) {
	        select = $(select)[0];
	        var options = select.options;
	        var firstField = fields[0];
	        var secondField = fields[1];

	        var data = [];
	        var idx, length;
	        var optgroup;
	        var option;
	        var record;
	        var value;

	        for (idx = 0, length = options.length; idx < length; idx++) {
	            record = {};
	            option = options[idx];
	            optgroup = option.parentNode;

	            if (optgroup === select) {
	                optgroup = null;
	            }

	            if (option.disabled || (optgroup && optgroup.disabled)) {
	                continue;
	            }

	            if (optgroup) {
	                record.optgroup = optgroup.label;
	            }

	            record[firstField.field] = option.text;

	            value = option.attributes.value;

	            if (value && value.specified) {
	                value = option.value;
	            } else {
	                value = option.text;
	            }

	            record[secondField.field] = value;

	            data.push(record);
	        }

	        return data;
	    }

	    function inferTable(table, fields) {
	        var tbody = $(table)[0].tBodies[0],
	        rows = tbody ? tbody.rows : [],
	        idx,
	        length,
	        fieldIndex,
	        fieldCount = fields.length,
	        data = [],
	        cells,
	        record,
	        cell,
	        empty;

	        for (idx = 0, length = rows.length; idx < length; idx++) {
	            record = {};
	            empty = true;
	            cells = rows[idx].cells;

	            for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {
	                cell = cells[fieldIndex];
	                if(cell.nodeName.toLowerCase() !== "th") {
	                    empty = false;
	                    record[fields[fieldIndex].field] = cell.innerHTML;
	                }
	            }
	            if(!empty) {
	                data.push(record);
	            }
	        }

	        return data;
	    }

	    var Node = Model.define({
	        idField: "id",

	        init: function(value) {
	            var that = this,
	                hasChildren = that.hasChildren || value && value.hasChildren,
	                childrenField = "items",
	                childrenOptions = {};

	            kendo.data.Model.fn.init.call(that, value);

	            if (typeof that.children === STRING) {
	                childrenField = that.children;
	            }

	            childrenOptions = {
	                schema: {
	                    data: childrenField,
	                    model: {
	                        hasChildren: hasChildren,
	                        id: that.idField,
	                        fields: that.fields
	                    }
	                }
	            };

	            if (typeof that.children !== STRING) {
	                extend(childrenOptions, that.children);
	            }

	            childrenOptions.data = value;

	            if (!hasChildren) {
	                hasChildren = childrenOptions.schema.data;
	            }

	            if (typeof hasChildren === STRING) {
	                hasChildren = kendo.getter(hasChildren);
	            }

	            if (isFunction(hasChildren)) {
	                var hasChildrenObject = hasChildren.call(that, that);

	                if(hasChildrenObject && hasChildrenObject.length === 0){
	                    that.hasChildren = false;
	                } else{
	                    that.hasChildren = !!hasChildrenObject;
	                }
	            }

	            that._childrenOptions = childrenOptions;

	            if (that.hasChildren) {
	                that._initChildren();
	            }

	            that._loaded = !!(value && value._loaded);
	        },

	        _initChildren: function() {
	            var that = this;
	            var children, transport, parameterMap;

	            if (!(that.children instanceof HierarchicalDataSource)) {
	                children = that.children = new HierarchicalDataSource(that._childrenOptions);

	                transport = children.transport;
	                parameterMap = transport.parameterMap;

	                transport.parameterMap = function(data, type) {
	                    data[that.idField || "id"] = that.id;

	                    if (parameterMap) {
	                        data = parameterMap(data, type);
	                    }

	                    return data;
	                };

	                children.parent = function(){
	                    return that;
	                };

	                children.bind(CHANGE, function(e){
	                    e.node = e.node || that;
	                    that.trigger(CHANGE, e);
	                });

	                children.bind(ERROR, function(e){
	                    var collection = that.parent();

	                    if (collection) {
	                        e.node = e.node || that;
	                        collection.trigger(ERROR, e);
	                    }
	                });

	                that._updateChildrenField();
	            }
	        },

	        append: function(model) {
	            this._initChildren();
	            this.loaded(true);
	            this.children.add(model);
	        },

	        hasChildren: false,

	        level: function() {
	            var parentNode = this.parentNode(),
	                level = 0;

	            while (parentNode && parentNode.parentNode) {
	                level++;
	                parentNode = parentNode.parentNode ? parentNode.parentNode() : null;
	            }

	            return level;
	        },

	        _updateChildrenField: function() {
	            var fieldName = this._childrenOptions.schema.data;

	            this[fieldName || "items"] = this.children.data();
	        },

	        _childrenLoaded: function() {
	            this._loaded = true;

	            this._updateChildrenField();
	        },

	        load: function() {
	            var options = {};
	            var method = "_query";
	            var children, promise;

	            if (this.hasChildren) {
	                this._initChildren();

	                children = this.children;

	                options[this.idField || "id"] = this.id;

	                if (!this._loaded) {
	                    children._data = undefined;
	                    method = "read";
	                }

	                children.one(CHANGE, proxy(this._childrenLoaded, this));

	                if(this._matchFilter){
	                    options.filter = { field: '_matchFilter', operator: 'eq', value: true };
	                }

	                promise = children[method](options);
	            } else {
	                this.loaded(true);
	            }

	            return promise || $.Deferred().resolve().promise();
	        },

	        parentNode: function() {
	            var array = this.parent();

	            return array.parent();
	        },

	        loaded: function(value) {
	            if (value !== undefined) {
	                this._loaded = value;
	            } else {
	                return this._loaded;
	            }
	        },

	        shouldSerialize: function(field) {
	            return Model.fn.shouldSerialize.call(this, field) &&
	                    field !== "children" &&
	                    field !== "_loaded" &&
	                    field !== "hasChildren" &&
	                    field !== "_childrenOptions";
	        }
	    });

	    function dataMethod(name) {
	        return function() {
	            var data = this._data,
	                result = DataSource.fn[name].apply(this, slice.call(arguments));

	            if (this._data != data) {
	                this._attachBubbleHandlers();
	            }

	            return result;
	        };
	    }

	    var HierarchicalDataSource = DataSource.extend({
	        init: function(options) {
	            var node = Node.define({
	                children: options
	            });

	            if(options.filter && !options.serverFiltering){
	                this._hierarchicalFilter = options.filter;
	                options.filter = null;
	            }

	            DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));

	            this._attachBubbleHandlers();
	        },

	        _attachBubbleHandlers: function() {
	            var that = this;

	            that._data.bind(ERROR, function(e) {
	                that.trigger(ERROR, e);
	            });
	        },

	        read: function(data) {
	            var result = DataSource.fn.read.call(this, data);

	            if(this._hierarchicalFilter){
	                if(this._data && this._data.length > 0){
	                    this.filter(this._hierarchicalFilter);
	                }else{
	                    this.options.filter = this._hierarchicalFilter;
	                    this._filter = normalizeFilter(this.options.filter);
	                    this._hierarchicalFilter = null;
	                }
	            }

	            return result;
	        },

	        remove: function(node){
	            var parentNode = node.parentNode(),
	                dataSource = this,
	                result;

	            if (parentNode && parentNode._initChildren) {
	                dataSource = parentNode.children;
	            }

	            result = DataSource.fn.remove.call(dataSource, node);

	            if (parentNode && !dataSource.data().length) {
	                parentNode.hasChildren = false;
	            }

	            return result;
	        },

	        success: dataMethod("success"),

	        data: dataMethod("data"),

	        insert: function(index, model) {
	            var parentNode = this.parent();

	            if (parentNode && parentNode._initChildren) {
	                parentNode.hasChildren = true;
	                parentNode._initChildren();
	            }

	            return DataSource.fn.insert.call(this, index, model);
	        },

	        filter: function(val) {
	            if (val === undefined) {
	                 return this._filter;
	            }

	            if(!this.options.serverFiltering && this._markHierarchicalQuery(val)){
	                val = { logic: "or", filters: [val, {field:'_matchFilter', operator: 'equals', value: true }]};
	            }

	            this.trigger("reset");
	            this._query({ filter: val, page: 1 });
	        },

	        _markHierarchicalQuery: function(expressions){
	            var compiled;
	            var predicate;
	            var fields;
	            var operators;
	            var filter;

	            expressions = normalizeFilter(expressions);

	            if (!expressions || expressions.filters.length === 0) {
	                this._updateHierarchicalFilter(function(){return true;});
	                return false;
	            }

	            compiled = Query.filterExpr(expressions);
	            fields = compiled.fields;
	            operators = compiled.operators;

	            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

	            if (fields.length || operators.length) {
	                filter = function(d) {
	                    return predicate(d, fields, operators);
	                };
	            }

	            this._updateHierarchicalFilter(filter);
	            return true;
	        },

	         _updateHierarchicalFilter: function(filter){
	            var current;
	            var data = this._data;
	            var result = false;

	            for (var idx = 0; idx < data.length; idx++) {
	                 current = data[idx];

	                 if(current.hasChildren){
	                     current._matchFilter = current.children._updateHierarchicalFilter(filter);
	                    if(!current._matchFilter){
	                        current._matchFilter = filter(current);
	                    }
	                }else{
	                    current._matchFilter = filter(current);
	                }

	                if(current._matchFilter){
	                    result = true;
	                }
	            }
	            return result;
	        },

	        _find: function(method, value) {
	            var idx, length, node, children;
	            var data = this._data;

	            if (!data) {
	                return;
	            }

	            node = DataSource.fn[method].call(this, value);

	            if (node) {
	                return node;
	            }

	            data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                children = data[idx].children;

	                if (!(children instanceof HierarchicalDataSource)) {
	                    continue;
	                }

	                node = children[method](value);

	                if (node) {
	                    return node;
	                }
	            }
	        },

	        get: function(id) {
	            return this._find("get", id);
	        },

	        getByUid: function(uid) {
	            return this._find("getByUid", uid);
	        }
	    });

	    function inferList(list, fields) {
	        var items = $(list).children(),
	            idx,
	            length,
	            data = [],
	            record,
	            textField = fields[0].field,
	            urlField = fields[1] && fields[1].field,
	            spriteCssClassField = fields[2] && fields[2].field,
	            imageUrlField = fields[3] && fields[3].field,
	            item,
	            id,
	            textChild,
	            className,
	            children;

	        function elements(collection, tagName) {
	            return collection.filter(tagName).add(collection.find(tagName));
	        }

	        for (idx = 0, length = items.length; idx < length; idx++) {
	            record = { _loaded: true };
	            item = items.eq(idx);

	            textChild = item[0].firstChild;
	            children = item.children();
	            list = children.filter("ul");
	            children = children.filter(":not(ul)");

	            id = item.attr("data-id");

	            if (id) {
	                record.id = id;
	            }

	            if (textChild) {
	                record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();
	            }

	            if (urlField) {
	                record[urlField] = elements(children, "a").attr("href");
	            }

	            if (imageUrlField) {
	                record[imageUrlField] = elements(children, "img").attr("src");
	            }

	            if (spriteCssClassField) {
	                className = elements(children, ".k-sprite").prop("className");
	                record[spriteCssClassField] = className && $.trim(className.replace("k-sprite", ""));
	            }

	            if (list.length) {
	                record.items = inferList(list.eq(0), fields);
	            }

	            if (item.attr("data-hasChildren") == "true") {
	                record.hasChildren = true;
	            }

	            data.push(record);
	        }

	        return data;
	    }

	    HierarchicalDataSource.create = function(options) {
	        options = options && options.push ? { data: options } : options;

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            list = dataSource.list;

	        if (data && data._dataSource) {
	            return data._dataSource;
	        }

	        if (!data && fields && !dataSource.transport) {
	            if (list) {
	                data = inferList(list, fields);
	            }
	        }

	        dataSource.data = data;

	        return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);
	    };

	    var Buffer = kendo.Observable.extend({
	        init: function(dataSource, viewSize, disablePrefetch) {
	            kendo.Observable.fn.init.call(this);

	            this._prefetching = false;
	            this.dataSource = dataSource;
	            this.prefetch = !disablePrefetch;

	            var buffer = this;

	            dataSource.bind("change", function() {
	                buffer._change();
	            });

	            dataSource.bind("reset", function() {
	                buffer._reset();
	            });

	            this._syncWithDataSource();

	            this.setViewSize(viewSize);
	        },

	        setViewSize: function(viewSize) {
	            this.viewSize = viewSize;
	            this._recalculate();
	        },

	        at: function(index)  {
	            var pageSize = this.pageSize,
	                itemPresent = true;

	            if (index >= this.total()) {
	                this.trigger("endreached", {index: index });
	                return null;
	            }

	            if (!this.useRanges) {
	               return this.dataSource.view()[index];
	            }
	            if (this.useRanges) {
	                // out of range request
	                if (index < this.dataOffset || index >= this.skip + pageSize) {
	                    itemPresent = this.range(Math.floor(index / pageSize) * pageSize);
	                }

	                // prefetch
	                if (index === this.prefetchThreshold) {
	                    this._prefetch();
	                }

	                // mid-range jump - prefetchThreshold and nextPageThreshold may be equal, do not change to else if
	                if (index === this.midPageThreshold) {
	                    this.range(this.nextMidRange, true);
	                }
	                // next range jump
	                else if (index === this.nextPageThreshold) {
	                    this.range(this.nextFullRange);
	                }
	                // pull-back
	                else if (index === this.pullBackThreshold) {
	                    if (this.offset === this.skip) { // from full range to mid range
	                        this.range(this.previousMidRange);
	                    } else { // from mid range to full range
	                        this.range(this.previousFullRange);
	                    }
	                }

	                if (itemPresent) {
	                    return this.dataSource.at(index - this.dataOffset);
	                } else {
	                    this.trigger("endreached", { index: index });
	                    return null;
	                }
	            }
	        },

	        indexOf: function(item) {
	            return this.dataSource.data().indexOf(item) + this.dataOffset;
	        },

	        total: function() {
	            return parseInt(this.dataSource.total(), 10);
	        },

	        next: function() {
	            var buffer = this,
	                pageSize = buffer.pageSize,
	                offset = buffer.skip - buffer.viewSize + pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize;

	            this.offset = offset;
	            this.dataSource.prefetch(pageSkip, pageSize, function() {
	                buffer._goToRange(offset, true);
	            });
	        },

	        range: function(offset, nextRange) {
	            if (this.offset === offset) {
	                return true;
	            }

	            var buffer = this,
	                pageSize = this.pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize,
	                dataSource = this.dataSource;

	            if (nextRange) {
	                pageSkip += pageSize;
	            }

	            if (dataSource.inRange(offset, pageSize)) {
	                this.offset = offset;
	                this._recalculate();
	                this._goToRange(offset);
	                return true;
	            } else if (this.prefetch) {
	                dataSource.prefetch(pageSkip, pageSize, function() {
	                    buffer.offset = offset;
	                    buffer._recalculate();
	                    buffer._goToRange(offset, true);
	                });
	                return false;
	            }

	            return true;
	        },

	        syncDataSource: function() {
	            var offset = this.offset;
	            this.offset = null;
	            this.range(offset);
	        },

	        destroy: function() {
	            this.unbind();
	        },

	        _prefetch: function() {
	            var buffer = this,
	                pageSize = this.pageSize,
	                prefetchOffset = this.skip + pageSize,
	                dataSource = this.dataSource;

	            if (!dataSource.inRange(prefetchOffset, pageSize) && !this._prefetching && this.prefetch) {
	                this._prefetching = true;
	                this.trigger("prefetching", { skip: prefetchOffset, take: pageSize });

	                dataSource.prefetch(prefetchOffset, pageSize, function() {
	                    buffer._prefetching = false;
	                    buffer.trigger("prefetched", { skip: prefetchOffset, take: pageSize });
	                });
	            }
	        },

	        _goToRange: function(offset, expanding) {
	            if (this.offset !== offset) {
	                return;
	            }

	            this.dataOffset = offset;
	            this._expanding = expanding;
	            this.dataSource.range(offset, this.pageSize);
	            this.dataSource.enableRequestsInProgress();
	        },

	        _reset: function() {
	            this._syncPending = true;
	        },

	        _change: function() {
	            var dataSource = this.dataSource;

	            this.length = this.useRanges ? dataSource.lastRange().end : dataSource.view().length;

	            if (this._syncPending) {
	                this._syncWithDataSource();
	                this._recalculate();
	                this._syncPending = false;
	                this.trigger("reset", { offset: this.offset });
	            }

	            this.trigger("resize");

	            if (this._expanding) {
	                this.trigger("expand");
	            }

	            delete this._expanding;
	        },

	        _syncWithDataSource: function() {
	            var dataSource = this.dataSource;

	            this._firstItemUid = dataSource.firstItemUid();
	            this.dataOffset = this.offset = dataSource.skip() || 0;
	            this.pageSize = dataSource.pageSize();
	            this.useRanges = dataSource.options.serverPaging;
	        },

	        _recalculate: function() {
	            var pageSize = this.pageSize,
	                offset = this.offset,
	                viewSize = this.viewSize,
	                skip = Math.ceil(offset / pageSize) * pageSize;

	            this.skip = skip;
	            this.midPageThreshold = skip + pageSize - 1;
	            this.nextPageThreshold = skip + viewSize - 1;
	            this.prefetchThreshold = skip + Math.floor(pageSize / 3 * 2);
	            this.pullBackThreshold = this.offset - 1;

	            this.nextMidRange = skip + pageSize - viewSize;
	            this.nextFullRange = skip;
	            this.previousMidRange = offset - viewSize;
	            this.previousFullRange = skip - pageSize;
	        }
	    });

	    var BatchBuffer = kendo.Observable.extend({
	        init: function(dataSource, batchSize) {
	            var batchBuffer = this;

	            kendo.Observable.fn.init.call(batchBuffer);

	            this.dataSource = dataSource;
	            this.batchSize = batchSize;
	            this._total = 0;

	            this.buffer = new Buffer(dataSource, batchSize * 3);

	            this.buffer.bind({
	                "endreached": function (e) {
	                    batchBuffer.trigger("endreached", { index: e.index });
	                },
	                "prefetching": function (e) {
	                    batchBuffer.trigger("prefetching", { skip: e.skip, take: e.take });
	                },
	                "prefetched": function (e) {
	                    batchBuffer.trigger("prefetched", { skip: e.skip, take: e.take });
	                },
	                "reset": function () {
	                    batchBuffer._total = 0;
	                    batchBuffer.trigger("reset");
	                },
	                "resize": function () {
	                    batchBuffer._total = Math.ceil(this.length / batchBuffer.batchSize);
	                    batchBuffer.trigger("resize", { total: batchBuffer.total(), offset: this.offset });
	                }
	            });
	        },

	        syncDataSource: function() {
	            this.buffer.syncDataSource();
	        },

	        at: function(index) {
	            var buffer = this.buffer,
	                skip = index * this.batchSize,
	                take = this.batchSize,
	                view = [],
	                item;

	            if (buffer.offset > skip) {
	                buffer.at(buffer.offset - 1);
	            }

	            for (var i = 0; i < take; i++) {
	                item = buffer.at(skip + i);

	                if (item === null) {
	                    break;
	                }

	                view.push(item);
	            }

	            return view;
	        },

	        total: function() {
	            return this._total;
	        },

	        destroy: function() {
	            this.buffer.destroy();
	            this.unbind();
	        }
	    });

	    extend(true, kendo.data, {
	        readers: {
	            json: DataReader
	        },
	        Query: Query,
	        DataSource: DataSource,
	        HierarchicalDataSource: HierarchicalDataSource,
	        Node: Node,
	        ObservableObject: ObservableObject,
	        ObservableArray: ObservableArray,
	        LazyObservableArray: LazyObservableArray,
	        LocalTransport: LocalTransport,
	        RemoteTransport: RemoteTransport,
	        Cache: Cache,
	        DataReader: DataReader,
	        Model: Model,
	        Buffer: Buffer,
	        BatchBuffer: BatchBuffer
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }),

/***/ 1028:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(514);

/***/ }),

/***/ 1029:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(515);

/***/ })

/******/ });

/***/ }),

/***/ 465:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1321);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1321:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "userevents",
	    name: "User Events",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        Class = kendo.Class,
	        Observable = kendo.Observable,
	        now = $.now,
	        extend = $.extend,
	        OS = support.mobileOS,
	        invalidZeroEvents = OS && OS.android,
	        DEFAULT_MIN_HOLD = 800,
	        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.

	        // UserEvents events
	        PRESS = "press",
	        HOLD = "hold",
	        SELECT = "select",
	        START = "start",
	        MOVE = "move",
	        END = "end",
	        CANCEL = "cancel",
	        TAP = "tap",
	        RELEASE = "release",
	        GESTURESTART = "gesturestart",
	        GESTURECHANGE = "gesturechange",
	        GESTUREEND = "gestureend",
	        GESTURETAP = "gesturetap";

	    var THRESHOLD = {
	        "api": 0,
	        "touch": 0,
	        "mouse": 9,
	        "pointer": 9
	    };

	    var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);

	    function touchDelta(touch1, touch2) {
	        var x1 = touch1.x.location,
	            y1 = touch1.y.location,
	            x2 = touch2.x.location,
	            y2 = touch2.y.location,
	            dx = x1 - x2,
	            dy = y1 - y2;

	        return {
	            center: {
	               x: (x1 + x2) / 2,
	               y: (y1 + y2) / 2
	            },

	            distance: Math.sqrt(dx*dx + dy*dy)
	        };
	    }

	    function getTouches(e) {
	        var touches = [],
	            originalEvent = e.originalEvent,
	            currentTarget = e.currentTarget,
	            idx = 0, length,
	            changedTouches,
	            touch;

	        if (e.api) {
	            touches.push({
	                id: 2,  // hardcoded ID for API call;
	                event: e,
	                target: e.target,
	                currentTarget: e.target,
	                location: e,
	                type: "api"
	            });
	        }
	        else if (e.type.match(/touch/)) {
	            changedTouches = originalEvent ? originalEvent.changedTouches : [];
	            for (length = changedTouches.length; idx < length; idx ++) {
	                touch = changedTouches[idx];
	                touches.push({
	                    location: touch,
	                    event: e,
	                    target: touch.target,
	                    currentTarget: currentTarget,
	                    id: touch.identifier,
	                    type: "touch"
	                });
	            }
	        }
	        else if (support.pointers || support.msPointers) {
	            touches.push({
	                location: originalEvent,
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                id: originalEvent.pointerId,
	                type: "pointer"
	            });
	        } else {
	            touches.push({
	                id: 1, // hardcoded ID for mouse event;
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                location: e,
	                type: "mouse"
	            });
	        }

	        return touches;
	    }

	    var TouchAxis = Class.extend({
	        init: function(axis, location) {
	            var that = this;

	            that.axis = axis;

	            that._updateLocationData(location);

	            that.startLocation = that.location;
	            that.velocity = that.delta = 0;
	            that.timeStamp = now();
	        },

	        move: function(location) {
	            var that = this,
	                offset = location["page" + that.axis],
	                timeStamp = now(),
	                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;

	            if (!offset && invalidZeroEvents) {
	                return;
	            }

	            that.delta = offset - that.location;

	            that._updateLocationData(location);

	            that.initialDelta = offset - that.startLocation;
	            that.velocity = that.delta / timeDelta;
	            that.timeStamp = timeStamp;
	        },

	        _updateLocationData: function(location) {
	            var that = this, axis = that.axis;

	            that.location = location["page" + axis];
	            that.client = location["client" + axis];
	            that.screen = location["screen" + axis];
	        }
	    });

	    var Touch = Class.extend({
	        init: function(userEvents, target, touchInfo) {
	            extend(this, {
	                x: new TouchAxis("X", touchInfo.location),
	                y: new TouchAxis("Y", touchInfo.location),
	                type: touchInfo.type,
	                useClickAsTap: userEvents.useClickAsTap,
	                threshold: userEvents.threshold || THRESHOLD[touchInfo.type],
	                userEvents: userEvents,
	                target: target,
	                currentTarget: touchInfo.currentTarget,
	                initialTouch: touchInfo.target,
	                id: touchInfo.id,
	                pressEvent: touchInfo,
	                _moved: false,
	                _finished: false
	            });
	        },

	        press: function() {
	            this._holdTimeout = setTimeout($.proxy(this, "_hold"), this.userEvents.minHold);
	            this._trigger(PRESS, this.pressEvent);
	        },

	        _hold: function() {
	            this._trigger(HOLD, this.pressEvent);
	        },

	        move: function(touchInfo) {
	            var that = this;

	            if (that._finished) { return; }

	            that.x.move(touchInfo.location);
	            that.y.move(touchInfo.location);

	            if (!that._moved) {
	                if (that._withinIgnoreThreshold()) {
	                    return;
	                }

	                if (!UserEvents.current || UserEvents.current === that.userEvents) {
	                    that._start(touchInfo);
	                } else {
	                    return that.dispose();
	                }
	            }

	            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
	            if (!that._finished) {
	                that._trigger(MOVE, touchInfo);
	            }
	        },

	        end: function(touchInfo) {
	            this.endTime = now();

	            if (this._finished) { return; }

	            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
	            this._finished = true;

	            this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)

	            if (this._moved) {
	                this._trigger(END, touchInfo);
	            } else {
	                if (!this.useClickAsTap) {
	                    this._trigger(TAP, touchInfo);
	                }
	            }

	            clearTimeout(this._holdTimeout);

	            this.dispose();
	        },

	        dispose: function() {
	            var userEvents = this.userEvents,
	                activeTouches = userEvents.touches;

	            this._finished = true;
	            this.pressEvent = null;
	            clearTimeout(this._holdTimeout);

	            activeTouches.splice($.inArray(this, activeTouches), 1);
	        },

	        skip: function() {
	            this.dispose();
	        },

	        cancel: function() {
	            this.dispose();
	        },

	        isMoved: function() {
	            return this._moved;
	        },

	        _start: function(touchInfo) {
	            clearTimeout(this._holdTimeout);

	            this.startTime = now();
	            this._moved = true;
	            this._trigger(START, touchInfo);
	        },

	        _trigger: function(name, touchInfo) {
	            var that = this,
	                jQueryEvent = touchInfo.event,
	                data = {
	                    touch: that,
	                    x: that.x,
	                    y: that.y,
	                    target: that.target,
	                    event: jQueryEvent
	                };

	            if(that.userEvents.notify(name, data)) {
	                jQueryEvent.preventDefault();
	            }
	        },

	        _withinIgnoreThreshold: function() {
	            var xDelta = this.x.initialDelta,
	                yDelta = this.y.initialDelta;

	            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;
	        }
	    });

	    function withEachUpEvent(callback) {
	        var downEvents = kendo.eventMap.up.split(" "),
	            idx = 0,
	            length = downEvents.length;

	        for(; idx < length; idx ++) {
	            callback(downEvents[idx]);
	        }
	    }

	    var UserEvents = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                filter,
	                ns = kendo.guid();

	            options = options || {};
	            filter = that.filter = options.filter;
	            that.threshold = options.threshold || DEFAULT_THRESHOLD;
	            that.minHold = options.minHold || DEFAULT_MIN_HOLD;
	            that.touches = [];
	            that._maxTouches = options.multiTouch ? 2 : 1;
	            that.allowSelection = options.allowSelection;
	            that.captureUpIfMoved = options.captureUpIfMoved;
	            that.useClickAsTap = !options.fastTap && !support.delayedClick();
	            that.eventNS = ns;

	            element = $(element).handler(that);
	            Observable.fn.init.call(that);

	            extend(that, {
	                element: element,
	                // the touch events lock to the element anyway, so no need for the global setting
	                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),
	                stopPropagation: options.stopPropagation,
	                pressed: false
	            });

	            that.surface.handler(that)
	                .on(kendo.applyEventMap("move", ns), "_move")
	                .on(kendo.applyEventMap("up cancel", ns), "_end");

	            element.on(kendo.applyEventMap("down", ns), filter, "_start");

	            if (that.useClickAsTap) {
	                element.on(kendo.applyEventMap("click", ns), filter, "_click");
	            }

	            if (support.pointers || support.msPointers) {
	                //touch-action:none will not work for IE10
	                if (support.browser.version < 11) {
	                    var defaultAction = "pinch-zoom double-tap-zoom";
	                    element.css("-ms-touch-action", options.touchAction && options.touchAction != "none" ? defaultAction + " " + options.touchAction : defaultAction);
	                } else {
	                    element.css("touch-action", options.touchAction || "none");
	                }
	            }

	            if (options.preventDragEvent) {
	                element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
	            }

	            element.on(kendo.applyEventMap("mousedown", ns), filter, { root: element }, "_select");

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0],
	                    preventIfMovingProxy = $.proxy(that.preventIfMoving, that);

	                withEachUpEvent(function(eventName) {
	                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
	                });
	            }

	            that.bind([
	            PRESS,
	            HOLD,
	            TAP,
	            START,
	            MOVE,
	            END,
	            RELEASE,
	            CANCEL,
	            GESTURESTART,
	            GESTURECHANGE,
	            GESTUREEND,
	            GESTURETAP,
	            SELECT
	            ], options);
	        },

	        preventIfMoving: function(e) {
	            if (this._isMoved()) {
	                e.preventDefault();
	            }
	        },

	        destroy: function() {
	            var that = this;

	            if (that._destroyed) {
	                return;
	            }

	            that._destroyed = true;

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0];
	                withEachUpEvent(function(eventName) {
	                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);
	                });
	            }

	            that.element.kendoDestroy(that.eventNS);
	            that.surface.kendoDestroy(that.eventNS);
	            that.element.removeData("handler");
	            that.surface.removeData("handler");
	            that._disposeAll();

	            that.unbind();
	            delete that.surface;
	            delete that.element;
	            delete that.currentTarget;
	        },

	        capture: function() {
	            UserEvents.current = this;
	        },

	        cancel: function() {
	            this._disposeAll();
	            this.trigger(CANCEL);
	        },

	        notify: function(eventName, data) {
	            var that = this,
	                touches = that.touches;

	            if (this._isMultiTouch()) {
	                switch(eventName) {
	                    case MOVE:
	                        eventName = GESTURECHANGE;
	                        break;
	                    case END:
	                        eventName = GESTUREEND;
	                        break;
	                    case TAP:
	                        eventName = GESTURETAP;
	                        break;
	                }

	                extend(data, {touches: touches}, touchDelta(touches[0], touches[1]));
	            }

	            return this.trigger(eventName, extend(data, {type: eventName}));
	        },

	        // API
	        press: function(x, y, target) {
	            this._apiCall("_start", x, y, target);
	        },

	        move: function(x, y) {
	            this._apiCall("_move", x, y);
	        },

	        end: function(x, y) {
	            this._apiCall("_end", x, y);
	        },

	        _isMultiTouch: function() {
	            return this.touches.length > 1;
	        },

	        _maxTouchesReached: function() {
	            return this.touches.length >= this._maxTouches;
	        },

	        _disposeAll: function() {
	            var touches = this.touches;
	            while (touches.length > 0) {
	                touches.pop().dispose();
	            }
	        },

	        _isMoved: function() {
	            return $.grep(this.touches, function(touch) {
	                return touch.isMoved();
	            }).length;
	        },

	        _select: function(e) {
	           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
	               e.preventDefault();
	           }
	        },

	        _start: function(e) {
	            var that = this,
	                idx = 0,
	                filter = that.filter,
	                target,
	                touches = getTouches(e),
	                length = touches.length,
	                touch,
	                which = e.which;

	            if ((which && which > 1) || (that._maxTouchesReached())){
	                return;
	            }

	            UserEvents.current = null;

	            that.currentTarget = e.currentTarget;

	            if (that.stopPropagation) {
	                e.stopPropagation();
	            }

	            for (; idx < length; idx ++) {
	                if (that._maxTouchesReached()) {
	                    break;
	                }

	                touch = touches[idx];

	                if (filter) {
	                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
	                } else {
	                    target = that.element;
	                }

	                if (!target.length) {
	                    continue;
	                }

	                touch = new Touch(that, target, touch);
	                that.touches.push(touch);
	                touch.press();

	                if (that._isMultiTouch()) {
	                    that.notify("gesturestart", {});
	                }
	            }
	        },

	        _move: function(e) {
	            this._eachTouch("move", e);
	        },

	        _end: function(e) {
	            this._eachTouch("end", e);
	        },

	        _click: function(e) {
	            var data = {
	                touch: {
	                    initialTouch: e.target,
	                    target: $(e.currentTarget),
	                    endTime: now(),
	                    x: {
	                        location: e.pageX,
	                        client: e.clientX
	                    },
	                    y: {
	                        location: e.pageY,
	                        client: e.clientY
	                    }
	                },
	                x: e.pageX,
	                y: e.pageY,
	                target: $(e.currentTarget),
	                event: e,
	                type: "tap"
	            };

	            if (this.trigger("tap", data)) {
	                e.preventDefault();
	            }
	        },

	        _eachTouch: function(methodName, e) {
	            var that = this,
	                dict = {},
	                touches = getTouches(e),
	                activeTouches = that.touches,
	                idx,
	                touch,
	                touchInfo,
	                matchingTouch;

	            for (idx = 0; idx < activeTouches.length; idx ++) {
	                touch = activeTouches[idx];
	                dict[touch.id] = touch;
	            }

	            for (idx = 0; idx < touches.length; idx ++) {
	                touchInfo = touches[idx];
	                matchingTouch = dict[touchInfo.id];

	                if (matchingTouch) {
	                    matchingTouch[methodName](touchInfo);
	                }
	            }
	        },

	        _apiCall: function(type, x, y, target) {
	            this[type]({
	                api: true,
	                pageX: x,
	                pageY: y,
	                clientX: x,
	                clientY: y,
	                target: $(target || this.element)[0],
	                stopPropagation: $.noop,
	                preventDefault: $.noop
	            });
	        }
	    });

	    UserEvents.defaultThreshold = function(value) {
	        DEFAULT_THRESHOLD = value;
	    };

	    UserEvents.minHold = function(value) {
	        DEFAULT_MIN_HOLD = value;
	    };

	    kendo.getTouches = getTouches;
	    kendo.touchDelta = touchDelta;
	    kendo.UserEvents = UserEvents;
	 })(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ })

/******/ });

/***/ }),

/***/ 466:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1240);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1240:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "popup",
	    name: "Pop-up",
	    category: "framework",
	    depends: [ "core" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        Class = kendo.Class,
	        support = kendo.support,
	        getOffset = kendo.getOffset,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        OPEN = "open",
	        CLOSE = "close",
	        DEACTIVATE = "deactivate",
	        ACTIVATE = "activate",
	        CENTER = "center",
	        LEFT = "left",
	        RIGHT = "right",
	        TOP = "top",
	        BOTTOM = "bottom",
	        ABSOLUTE = "absolute",
	        HIDDEN = "hidden",
	        BODY = "body",
	        LOCATION = "location",
	        POSITION = "position",
	        VISIBLE = "visible",
	        EFFECTS = "effects",
	        ACTIVE = "k-state-active",
	        ACTIVEBORDER = "k-state-border",
	        ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
	        ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
	        MOUSEDOWN = "down",
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        proxy = $.proxy,
	        WINDOW = $(window),
	        SCROLL = "scroll",
	        cssPrefix = support.transitions.css,
	        TRANSFORM = cssPrefix + "transform",
	        extend = $.extend,
	        NS = ".kendoPopup",
	        styles = ["font-size",
	                  "font-family",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "line-height"];

	    function contains(container, target) {
	        if (!container || !target) {
	            return false;
	        }
	        return container === target || $.contains(container, target);
	    }

	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this, parentPopup;

	            options = options || {};

	            if (options.isRtl) {
	                options.origin = options.origin || BOTTOM + " " + RIGHT;
	                options.position = options.position || TOP + " " + RIGHT;
	            }

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            that.collisions = options.collision ? options.collision.split(" ") : [];
	            that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());

	            if (that.collisions.length === 1) {
	                that.collisions.push(that.collisions[0]);
	            }

	            parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.

	            options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || document.body);

	            that.element.hide()
	                .addClass("k-popup k-group k-reset")
	                .toggleClass("k-rtl", !!options.isRtl)
	                .css({ position : ABSOLUTE })
	                .appendTo(options.appendTo)
	                .attr("aria-hidden", true)
	                .on("mouseenter" + NS, function() {
	                    that._hovered = true;
	                })
	                .on("wheel" + NS, function(e) {
	                    var scrollArea = $(this).find(".k-list").parent();
	                    if ((scrollArea.scrollTop() === 0 && e.originalEvent.deltaY < 0) ||
	                        (scrollArea.scrollTop() === scrollArea.prop('scrollHeight') - scrollArea.prop('offsetHeight') && e.originalEvent.deltaY > 0)) {
	                            e.preventDefault();
	                    }
	                })
	                .on("mouseleave" + NS, function() {
	                    that._hovered = false;
	                });

	            that.wrapper = $();

	            if (options.animation === false) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }

	            extend(options.animation.open, {
	                complete: function() {
	                    that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
	                    that._activated = true;
	                    that._trigger(ACTIVATE);
	                }
	            });

	            extend(options.animation.close, {
	                complete: function() {
	                    that._animationClose();
	                }
	            });

	            that._mousedownProxy = function(e) {
	                that._mousedown(e);
	            };

	            if (support.mobileOS.android) {
	                that._resizeProxy = function(e) {
	                    setTimeout(function() {
	                        that._resize(e);
	                    }, 600); //Logic from kendo.onResize
	                };
	            } else {
	                that._resizeProxy = function(e) {
	                    that._resize(e);
	                };
	            }

	            if (options.toggleTarget) {
	                $(options.toggleTarget).on(options.toggleEvent + NS, $.proxy(that.toggle, that));
	            }
	        },

	        events: [
	            OPEN,
	            ACTIVATE,
	            CLOSE,
	            DEACTIVATE
	        ],

	        options: {
	            name: "Popup",
	            toggleEvent: "click",
	            origin: BOTTOM + " " + LEFT,
	            position: TOP + " " + LEFT,
	            anchor: BODY,
	            appendTo: null,
	            collision: "flip fit",
	            viewport: window,
	            copyAnchorStyles: true,
	            autosize: false,
	            modal: false,
	            adjustSize: {
	                width: 0,
	                height: 0
	            },
	            animation: {
	                open: {
	                    effects: "slideIn:down",
	                    transition: true,
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100,
	                    hide: true
	                }
	            }
	        },

	        _animationClose: function() {
	            var that = this;
	            var location = that.wrapper.data(LOCATION);

	            that.wrapper.hide();

	            if (location) {
	                that.wrapper.css(location);
	            }

	            if (that.options.anchor != BODY) {
	                that._hideDirClass();
	            }

	            that._closing = false;
	            that._trigger(DEACTIVATE);
	        },

	        destroy: function() {
	            var that = this,
	                options = that.options,
	                element = that.element.off(NS),
	                parent;

	            Widget.fn.destroy.call(that);

	            if (options.toggleTarget) {
	                $(options.toggleTarget).off(NS);
	            }

	            if (!options.modal) {
	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);
	                that._toggleResize(false);
	            }

	            kendo.destroy(that.element.children());
	            element.removeData();

	            if (options.appendTo[0] === document.body) {
	                parent = element.parent(".k-animation-container");

	                if (parent[0]) {
	                    parent.remove();
	                } else {
	                    element.remove();
	                }
	            }
	        },

	        open: function(x, y) {
	            var that = this,
	                fixed = { isFixed: !isNaN(parseInt(y,10)), x: x, y: y },
	                element = that.element,
	                options = that.options,
	                animation, wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");

	            if (!that.visible()) {
	                if (options.copyAnchorStyles) {
	                    if (mobile && styles[0] == "font-size") {
	                        styles.shift();
	                    }
	                    element.css(kendo.getComputedStyles(anchor[0], styles));
	                }

	                if (element.data("animating") || that._trigger(OPEN)) {
	                    return;
	                }

	                that._activated = false;

	                if (!options.modal) {
	                    DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy)
	                                .bind(that.downEvent, that._mousedownProxy);

	                    // this binding hangs iOS in editor
	                    // all elements in IE7/8 fire resize event, causing mayhem
	                    that._toggleResize(false);
	                    that._toggleResize(true);
	                }

	                that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                        .css({
	                                            overflow: HIDDEN,
	                                            display: "block",
	                                            position: ABSOLUTE
	                                        })
	                                        .attr("aria-hidden", false);

	                if (support.mobileOS.android) {
	                    wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	                }

	                wrapper.css(POSITION);

	                if ($(options.appendTo)[0] == document.body) {
	                    wrapper.css(TOP, "-10000px");
	                }

	                that.flipped = that._position(fixed);
	                animation = that._openAnimation();

	                if (options.anchor != BODY) {
	                    that._showDirClass(animation);
	                }

	                element.data(EFFECTS, animation.effects)
	                       .kendoStop(true)
	                       .kendoAnimate(animation)
	                       .attr("aria-hidden", false);
	            }
	        },

	        _location: function(isFixed) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");

	            if (options.copyAnchorStyles) {
	                if (mobile && styles[0] == "font-size") {
	                    styles.shift();
	                }
	                element.css(kendo.getComputedStyles(anchor[0], styles));
	            }

	            that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                    .css({
	                                        overflow: HIDDEN,
	                                        display: "block",
	                                        position: ABSOLUTE
	                                    });

	            if (support.mobileOS.android) {
	                wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	            }

	            wrapper.css(POSITION);

	            if ($(options.appendTo)[0] == document.body) {
	                wrapper.css(TOP, "-10000px");
	            }

	            that._position(isFixed || {});

	            var offset = wrapper.offset();
	            return {
	                width: kendo._outerWidth(wrapper),
	                height: kendo._outerHeight(wrapper),
	                left: offset.left,
	                top: offset.top
	            };
	        },

	        _openAnimation: function() {
	            var animation = extend(true, {}, this.options.animation.open);
	            animation.effects = kendo.parseEffects(animation.effects, this.flipped);

	            return animation;
	        },

	        _hideDirClass: function() {
	            var anchor = $(this.options.anchor);
	            var direction = ((anchor.attr("class") || "").match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            anchor
	                .removeClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .removeClass(ACTIVE)
	                .removeClass(dirClass);

	            this.element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        _showDirClass: function(animation) {
	            var direction = animation.effects.slideIn ? animation.effects.slideIn.direction : "down";
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            $(this.options.anchor)
	                .addClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .addClass(ACTIVE)
	                .addClass(dirClass);

	            this.element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        position: function() {
	            if (this.visible()) {
	                this.flipped = this._position();
	                //this._hideDirClass();
	                //this._showDirClass(this._openAnimation());
	            }
	        },

	        toggle: function() {
	            var that = this;

	            that[that.visible() ? CLOSE : OPEN]();
	        },

	        visible: function() {
	            return this.element.is(":" + VISIBLE);
	        },

	        close: function(skipEffects) {
	            var that = this,
	                options = that.options, wrap,
	                animation, openEffects, closeEffects;

	            if (that.visible()) {
	                wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());

	                that._toggleResize(false);

	                if (that._closing || that._trigger(CLOSE)) {
	                    that._toggleResize(true);
	                    return;
	                }

	                // Close all inclusive popups.
	                that.element.find(".k-popup").each(function () {
	                    var that = $(this),
	                        popup = that.data("kendoPopup");

	                    if (popup) {
	                        popup.close(skipEffects);
	                    }
	                });

	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);

	                if (skipEffects) {
	                    animation = { hide: true, effects: {} };
	                } else {
	                    animation = extend(true, {}, options.animation.close);
	                    openEffects = that.element.data(EFFECTS);
	                    closeEffects = animation.effects;

	                    if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
	                        animation.effects = openEffects;
	                        animation.reverse = true;
	                    }

	                    that._closing = true;
	                }

	                that.element
	                        .kendoStop(true)
	                        .attr("aria-hidden", true);
	                wrap
	                    .css({ overflow: HIDDEN }) // stop callback will remove hidden overflow
	                    .attr("aria-hidden", true);
	                that.element.kendoAnimate(animation);

	                if (skipEffects) {
	                    that._animationClose();
	                }
	            }
	        },

	        _trigger: function(ev) {
	            return this.trigger(ev, { type: ev });
	        },

	        _resize: function(e) {
	            var that = this;

	            if (support.resize.indexOf(e.type) !== -1) {
	                clearTimeout(that._resizeTimeout);
	                that._resizeTimeout = setTimeout(function() {
	                    that._position();
	                    that._resizeTimeout = null;
	                }, 50);
	            } else {
	                if (!that._hovered || (that._activated && that.element.hasClass("k-list-container"))) {
	                    that.close();
	                }
	            }
	        },

	        _toggleResize: function(toggle) {
	            var method = toggle ? "on" : "off";
	            var eventNames = support.resize;

	            if (!(support.mobileOS.ios || support.mobileOS.android)) {
	                eventNames += " " + SCROLL;
	            }

	            this._scrollableParents()[method](SCROLL, this._resizeProxy);
	            WINDOW[method](eventNames, this._resizeProxy);
	        },

	        _mousedown: function(e) {
	            var that = this,
	                container = that.element[0],
	                options = that.options,
	                anchor = $(options.anchor)[0],
	                toggleTarget = options.toggleTarget,
	                target = kendo.eventTarget(e),
	                popup = $(target).closest(".k-popup"),
	                mobile = popup.parent().parent(".km-shim").length;

	            popup = popup[0];
	            if (!mobile && popup && popup !== that.element[0]){
	                return;
	            }

	            // This MAY result in popup not closing in certain cases.
	            if ($(e.target).closest("a").data("rel") === "popover") {
	                return;
	            }

	            if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
	                that.close();
	            }
	        },

	        _fit: function(position, size, viewPortSize) {
	            var output = 0;

	            if (position + size > viewPortSize) {
	                output = viewPortSize - (position + size);
	            }

	            if (position < 0) {
	                output = -position;
	            }

	            return output;
	        },

	        _flip: function(offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
	            var output = 0;
	                boxSize = boxSize || size;

	            if (position !== origin && position !== CENTER && origin !== CENTER) {
	                if (offset + boxSize > viewPortSize) {
	                    output += -(anchorSize + size);
	                }

	                if (offset + output < 0) {
	                    output += anchorSize + size;
	                }
	            }
	            return output;
	        },

	        _scrollableParents: function() {
	            return $(this.options.anchor)
	                       .parentsUntil("body")
	                       .filter(function(index, element) {
	                           return kendo.isScrollable(element);
	                       });
	        },

	        _position: function(fixed) {
	            var that = this,
	                //element = that.element.css(POSITION, ""), /* fixes telerik/kendo-ui-core#790, comes from telerik/kendo#615 */
	                element = that.element,
	                wrapper = that.wrapper,
	                options = that.options,
	                viewport = $(options.viewport),
	                zoomLevel = support.zoomLevel(),
	                isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
	                anchor = $(options.anchor),
	                origins = options.origin.toLowerCase().split(" "),
	                positions = options.position.toLowerCase().split(" "),
	                collisions = that.collisions,
	                siblingContainer, parents,
	                parentZIndex, zIndex = 10002,
	                idx = 0,
	                docEl = document.documentElement,
	                length, viewportOffset, viewportWidth, viewportHeight;

	            if (options.viewport === window) {
	                viewportOffset = {
	                    top: (window.pageYOffset || document.documentElement.scrollTop || 0),
	                    left: (window.pageXOffset || document.documentElement.scrollLeft || 0)
	                };
	            } else {
	                viewportOffset = viewport.offset();
	            }

	            if (isWindow) {
	                viewportWidth = window.innerWidth;
	                viewportHeight = window.innerHeight;
	            } else {
	                viewportWidth = viewport.width();
	                viewportHeight = viewport.height();
	            }

	            if (isWindow && docEl.scrollHeight - docEl.clientHeight > 0) {
	                 var sign = options.isRtl ? -1 : 1;

	                 viewportWidth -= sign * kendo.support.scrollbar();
	            }

	            siblingContainer = anchor.parents().filter(wrapper.siblings());

	            if (siblingContainer[0]) {
	                parentZIndex = Math.max(Number(siblingContainer.css("zIndex")), 0);

	                // set z-index to be more than that of the container/sibling
	                // compensate with more units for window z-stack
	                if (parentZIndex) {
	                    zIndex = parentZIndex + 10;
	                } else {
	                    parents = anchor.parentsUntil(siblingContainer);
	                    for (length = parents.length; idx < length; idx++) {
	                        parentZIndex = Number($(parents[idx]).css("zIndex"));
	                        if (parentZIndex && zIndex < parentZIndex) {
	                            zIndex = parentZIndex + 10;
	                        }
	                    }
	                }
	            }

	            wrapper.css("zIndex", zIndex);

	            if (fixed && fixed.isFixed) {
	                wrapper.css({ left: fixed.x, top: fixed.y });
	            } else {
	                wrapper.css(that._align(origins, positions));
	            }

	            var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
	                offset = getOffset(wrapper),
	                anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions

	            if (anchorParent.length) {
	                pos = getOffset(wrapper, POSITION, true);
	                offset = getOffset(wrapper);
	            }

	            offset.top -= viewportOffset.top;
	            offset.left -= viewportOffset.left;

	            if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
	                wrapper.data(LOCATION, extend({}, pos));
	            }

	            var offsets = extend({}, offset),
	                location = extend({}, pos),
	                adjustSize = options.adjustSize;

	            if (collisions[0] === "fit") {
	                location.top += that._fit(offsets.top, outerHeight(wrapper) + adjustSize.height, viewportHeight / zoomLevel);
	            }

	            if (collisions[1] === "fit") {
	                location.left += that._fit(offsets.left, outerWidth(wrapper) + adjustSize.width, viewportWidth / zoomLevel);
	            }

	            var flipPos = extend({}, location);
	            var elementHeight = outerHeight(element);
	            var wrapperHeight =  outerHeight(wrapper);

	            if (!wrapper.height() && elementHeight) {
	                wrapperHeight = wrapperHeight + elementHeight;
	            }

	            if (collisions[0] === "flip") {
	                location.top += that._flip(offsets.top, elementHeight, outerHeight(anchor), viewportHeight / zoomLevel, origins[0], positions[0], wrapperHeight);
	            }

	            if (collisions[1] === "flip") {
	                location.left += that._flip(offsets.left, outerWidth(element), outerWidth(anchor), viewportWidth / zoomLevel, origins[1], positions[1], outerWidth(wrapper));
	            }

	            element.css(POSITION, ABSOLUTE);
	            wrapper.css(location);

	            return (location.left != flipPos.left || location.top != flipPos.top);
	        },

	        _align: function(origin, position) {
	            var that = this,
	                element = that.wrapper,
	                anchor = $(that.options.anchor),
	                verticalOrigin = origin[0],
	                horizontalOrigin = origin[1],
	                verticalPosition = position[0],
	                horizontalPosition = position[1],
	                anchorOffset = getOffset(anchor),
	                appendTo = $(that.options.appendTo),
	                appendToOffset,
	                width = outerWidth(element),
	                height = outerHeight(element) || outerHeight(element.children().first()),
	                anchorWidth = outerWidth(anchor),
	                anchorHeight = outerHeight(anchor),
	                top = anchorOffset.top,
	                left = anchorOffset.left,
	                round = Math.round;

	            if (appendTo[0] != document.body) {
	                appendToOffset = getOffset(appendTo);
	                top -= appendToOffset.top;
	                left -= appendToOffset.left;
	            }


	            if (verticalOrigin === BOTTOM) {
	                top += anchorHeight;
	            }

	            if (verticalOrigin === CENTER) {
	                top += round(anchorHeight / 2);
	            }

	            if (verticalPosition === BOTTOM) {
	                top -= height;
	            }

	            if (verticalPosition === CENTER) {
	                top -= round(height / 2);
	            }

	            if (horizontalOrigin === RIGHT) {
	                left += anchorWidth;
	            }

	            if (horizontalOrigin === CENTER) {
	                left += round(anchorWidth / 2);
	            }

	            if (horizontalPosition === RIGHT) {
	                left -= width;
	            }

	            if (horizontalPosition === CENTER) {
	                left -= round(width / 2);
	            }

	            return {
	                top: top,
	                left: left
	            };
	        }
	    });

	    ui.plugin(Popup);

	    var stableSort = kendo.support.stableSort;
	    var tabKeyTrapNS = "kendoTabKeyTrap";
	    var focusableNodesSelector = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], *[contenteditable]";
	    var TabKeyTrap = Class.extend({
	        init: function(element) {
	            this.element = $(element);
	            this.element.autoApplyNS(tabKeyTrapNS);
	        },

	        trap: function() {
	            this.element.on("keydown", proxy(this._keepInTrap, this));
	        },

	        removeTrap: function() {
	            this.element.kendoDestroy(tabKeyTrapNS);
	        },

	        destroy: function() {
	            this.element.kendoDestroy(tabKeyTrapNS);
	            this.element = undefined;
	        },

	        shouldTrap: function () {
	            return true;
	        },

	        _keepInTrap: function(e) {
	            if (e.which !== 9 || !this.shouldTrap() || e.isDefaultPrevented()) {
	                return;
	            }

	            var elements = this._focusableElements();
	            var sortedElements = this._sortFocusableElements(elements);
	            var next = this._nextFocusable(e, sortedElements);

	            this._focus(next);

	            e.preventDefault();
	        },
	        _focusableElements: function(){
	            var elements = this.element.find(focusableNodesSelector).filter(function(i, item){
	                return item.tabIndex >= 0 && $(item).is(':visible') && !$(item).is(':disabled');
	            });

	            if (this.element.is("[tabindex]")) {
	                elements.push(this.element[0]);
	            }

	            return elements;
	        },
	        _sortFocusableElements: function(elements){
	            var sortedElements;

	            if (stableSort) {
	                sortedElements = elements.sort(function(prev, next) {
	                    return prev.tabIndex - next.tabIndex;
	                });
	            } else {
	                var attrName = "__k_index";
	                elements.each(function(i, item){
	                    item.setAttribute(attrName, i);
	                });

	                sortedElements = elements.sort(function(prev, next) {
	                    return prev.tabIndex === next.tabIndex ?
	                        parseInt(prev.getAttribute(attrName), 10) - parseInt(next.getAttribute(attrName), 10) :
	                        prev.tabIndex - next.tabIndex;
	                });

	                elements.removeAttr(attrName);
	            }

	            return sortedElements;
	        },
	        _nextFocusable: function(e, elements){
	            var count = elements.length;
	            var current = elements.index(e.target);

	            return elements.get((current + (e.shiftKey ? -1 : 1)) % count);
	        },
	        _focus: function(element){
	            element.focus();
	            if (element.nodeName == "INPUT" && element.setSelectionRange && this._haveSelectionRange(element)) {
	                element.setSelectionRange(0, element.value.length);
	            }
	        },
	        _haveSelectionRange: function(element){
	            var elementType = element.type.toLowerCase();

	            return elementType === "text" || elementType === "search" ||
	            elementType === "url" || elementType === "tel" ||
	            elementType === "password";
	        }
	    });
	    ui.Popup.TabKeyTrap = TabKeyTrap;
	})(window.kendo.jQuery);



	return window.kendo;

	}, __webpack_require__(3));


/***/ })

/******/ });

/***/ }),

/***/ 467:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(919);
	module.exports = __webpack_require__(919);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 919:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(920)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function($) {

	    function createPromise() {
	        return $.Deferred();
	    }

	    function promiseAll(promises) {
	        return $.when.apply($, promises);
	    }

	    kendo.drawing.util = kendo.drawing.util || {};
	    kendo.deepExtend(kendo.drawing.util, {
	        createPromise: createPromise,
	        promiseAll: promiseAll
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

/***/ }),

/***/ 920:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ })

/******/ });

/***/ }),

/***/ 468:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(917);
	module.exports = __webpack_require__(917);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 910:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(169);

/***/ }),

/***/ 917:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(918), __webpack_require__(910) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    var NS = ".kendo";
	    var kendo = window.kendo;
	    var deepExtend = kendo.deepExtend;
	    var utils = kendo.drawing.util;
	    var defined = utils.defined;
	    var limitValue = utils.limitValue;
	    var eventCoordinates = utils.eventCoordinates;
	    var outerWidth = kendo._outerWidth;
	    var outerHeight = kendo._outerHeight;
	    var proxy = $.proxy;

	    var TOOLTIP_TEMPLATE = '<div class="k-tooltip">' +
	            '<div class="k-tooltip-content"></div>' +
	        '</div>';
	    var TOOLTIP_CLOSE_TEMPLATE = '<div class="k-tooltip-button"><a href="\\#" class="k-icon k-i-close">close</a></div>';

	    var SurfaceTooltip = kendo.Class.extend({
	        init: function(surface, options) {
	            this.element = $(TOOLTIP_TEMPLATE);
	            this.content = this.element.children(".k-tooltip-content");

	            options = options || {};

	            this.options = deepExtend({}, this.options, this._tooltipOptions(options));
	            this.popupOptions = {
	                appendTo: options.appendTo,
	                animation: options.animation,
	                copyAnchorStyles: false,
	                collision: "fit fit"
	            };

	            this._openPopupHandler = $.proxy(this._openPopup, this);

	            this.surface = surface;
	            this._bindEvents();
	        },

	        options: {
	            position: "top",
	            showOn: "mouseenter",
	            offset: 7,
	            autoHide: true,
	            hideDelay: 0,
	            showAfter: 100
	        },

	        _bindEvents: function() {
	            this._showHandler = proxy(this._showEvent, this);
	            this._surfaceLeaveHandler = proxy(this._surfaceLeave, this);
	            this._mouseleaveHandler = proxy(this._mouseleave, this);
	            this._mousemoveHandler = proxy(this._mousemove, this);

	            this.surface.bind("click", this._showHandler);
	            this.surface.bind("mouseenter", this._showHandler);
	            this.surface.bind("mouseleave", this._mouseleaveHandler);
	            this.surface.bind("mousemove", this._mousemoveHandler);

	            this.surface.element.on("mouseleave" + NS, this._surfaceLeaveHandler);

	            this.element.on("click" + NS, ".k-tooltip-button", proxy(this._hideClick, this));
	        },

	        getPopup: function() {
	            if (!this.popup) {
	                this.popup = new kendo.ui.Popup(this.element, this.popupOptions);
	            }

	            return this.popup;
	        },

	        destroy: function() {
	            var popup = this.popup;

	            this.surface.unbind("click", this._showHandler);
	            this.surface.unbind("mouseenter", this._showHandler);
	            this.surface.unbind("mouseleave", this._mouseleaveHandler);
	            this.surface.unbind("mousemove", this._mousemoveHandler);

	            this.surface.element.off("mouseleave" + NS, this._surfaceLeaveHandler);
	            this.element.off("click" + NS);

	            if (popup) {
	                popup.destroy();
	                delete this.popup;
	            }
	            delete this.popupOptions;

	            clearTimeout(this._timeout);

	            delete this.element;
	            delete this.content;
	            delete this.surface;
	        },

	        _tooltipOptions: function(options) {
	            options = options || {};
	            return {
	                position: options.position,
	                showOn: options.showOn,
	                offset: options.offset,
	                autoHide: options.autoHide,
	                width: options.width,
	                height: options.height,
	                content: options.content,
	                shared: options.shared,
	                hideDelay: options.hideDelay,
	                showAfter: options.showAfter
	            };
	        },

	        _tooltipShape: function(shape) {
	            while(shape && !shape.options.tooltip) {
	                shape = shape.parent;
	            }
	            return shape;
	        },

	        _updateContent: function(target, shape, options) {
	            var content = options.content;
	            if (kendo.isFunction(content)) {
	                content = content({
	                    element: shape,
	                    target: target
	                });
	            }

	            if (content) {
	                this.content.html(content);
	                return true;
	            }
	        },

	        _position: function(shape, options, elementSize, event) {
	            var position = options.position;
	            var tooltipOffset = options.offset || 0;
	            var surface = this.surface;
	            var offset = surface._instance._elementOffset();
	            var size = surface.getSize();
	            var surfaceOffset = surface._instance._offset;
	            var bbox = shape.bbox();
	            var width = elementSize.width;
	            var height = elementSize.height;
	            var left = 0, top = 0;

	            bbox.origin.translate(offset.left, offset.top);
	            if (surfaceOffset) {
	                bbox.origin.translate(-surfaceOffset.x, -surfaceOffset.y);
	            }

	            if (position == "cursor" && event) {
	                var coord = eventCoordinates(event);
	                left = coord.x - width / 2;
	                top = coord.y - height - tooltipOffset;
	            } else if (position == "left") {
	                left = bbox.origin.x - width - tooltipOffset;
	                top = bbox.center().y - height / 2;
	            } else if (position == "right") {
	                left = bbox.bottomRight().x + tooltipOffset;
	                top = bbox.center().y - height / 2;
	            } else if (position == "bottom") {
	                left = bbox.center().x - width / 2;
	                top = bbox.bottomRight().y + tooltipOffset;
	            } else {
	                left = bbox.center().x - width / 2;
	                top = bbox.origin.y - height - tooltipOffset;
	            }

	            return {
	                left: limitValue(left, offset.left, offset.left + size.width),
	                top: limitValue(top, offset.top, offset.top + size.height)
	            };
	        },

	        show: function(shape, options) {
	            this._show(shape, shape, deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip), options));
	        },

	        hide: function() {
	            var popup = this.popup;
	            var current = this._current;
	            delete this._current;
	            clearTimeout(this._showTimeout);
	            if (popup && popup.visible() && current &&
	                !this.surface.trigger("tooltipClose", { element: current.shape, target: current.target, popup: popup})) {
	                popup.close();
	            }
	        },

	        _hideClick: function(e) {
	            e.preventDefault();
	            this.hide();
	        },

	        _show: function(target, shape, options, event, delay) {
	            var current = this._current;

	            clearTimeout(this._timeout);

	            if (current && ((current.shape === shape && options.shared) || current.target === target)) {
	                return;
	            }

	            clearTimeout(this._showTimeout);

	            var popup = this.getPopup();

	            if (!this.surface.trigger("tooltipOpen", { element: shape, target: target, popup: popup }) &&
	                this._updateContent(target, shape, options)) {

	                this._autoHide(options);
	                var elementSize = this._measure(options);

	                if (popup.visible()) {
	                    popup.close(true);
	                }

	                this._current = {
	                    options: options,
	                    elementSize: elementSize,
	                    shape: shape,
	                    target: target,
	                    position: this._position(options.shared ? shape: target, options, elementSize, event)
	                };

	                if (delay) {
	                    this._showTimeout = setTimeout(this._openPopupHandler, options.showAfter || 0);
	                } else {
	                    this._openPopup();
	                }
	            }
	        },

	        _openPopup: function() {
	            var current = this._current;
	            var position = current.position;

	            this.getPopup().open(position.left, position.top);
	        },

	        _autoHide: function(options) {
	            if (options.autoHide && this._closeButton) {
	                this.element.removeClass("k-tooltip-closable");
	                this._closeButton.remove();
	                delete this._closeButton;
	            }

	            if (!options.autoHide && !this._closeButton) {
	                this.element.addClass("k-tooltip-closable");
	                this._closeButton = $(TOOLTIP_CLOSE_TEMPLATE).prependTo(this.element);
	            }
	        },

	        _showEvent: function(e) {
	            var shape = this._tooltipShape(e.element);
	            if (shape) {
	                var options = deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip));

	                if (options && options.showOn == e.type) {
	                    this._show(e.element, shape, options, e.originalEvent, true);
	                }
	            }
	        },

	        _measure: function(options) {
	            var popup = this.getPopup();
	            var width, height;
	            this.element.css({
	                width: "auto",
	                height: "auto"
	            });
	            var visible = popup.visible();
	            if (!visible) {
	                popup.wrapper.show();
	            }

	            this.element.css({
	                width: defined(options.width) ? options.width : "auto",
	                height: defined(options.height) ? options.height : "auto"
	            });

	            width = outerWidth(this.element);
	            height = outerHeight(this.element);

	            if (!visible) {
	                popup.wrapper.hide();
	            }

	            return {
	                width: width,
	                height: height
	            };
	        },

	        _mouseleave: function(e) {
	            if (this.popup && !this._popupRelatedTarget(e.originalEvent)) {
	                var tooltip = this;
	                var current = tooltip._current;

	                if (current && current.options.autoHide) {
	                    tooltip._timeout = setTimeout(function() {
	                        clearTimeout(tooltip._showTimeout);
	                        tooltip.hide();
	                    }, current.options.hideDelay || 0);
	                }
	            }
	        },

	        _mousemove: function(e) {
	            var current = this._current;
	            if (current && e.element) {
	                var options = current.options;
	                if (options.position == "cursor") {
	                    var position = this._position(e.element, options, current.elementSize, e.originalEvent);
	                    current.position = position;
	                    this.getPopup().wrapper.css({left: position.left, top: position.top});
	                }
	            }
	        },

	        _surfaceLeave: function(e) {
	            if (this.popup && !this._popupRelatedTarget(e)) {
	                clearTimeout(this._showTimeout);
	                this.hide();
	            }
	        },

	        _popupRelatedTarget: function(e) {
	            return e.relatedTarget && $(e.relatedTarget).closest(this.popup.wrapper).length;
	        }
	    });

	    kendo.drawing.SurfaceTooltip = SurfaceTooltip;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }),

/***/ 918:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(466);

/***/ })

/******/ });

/***/ }),

/***/ 469:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(859);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 852:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(168);

/***/ }),

/***/ 855:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 859:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(855),
	        __webpack_require__(852)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {
	/* jshint curly:false */

	window.kendo.dataviz = window.kendo.dataviz || {};
	var drawing = kendo.drawing;
	var util = drawing.util;
	var Path = drawing.Path;
	var Group = drawing.Group;
	var Class = kendo.Class;
	var geometry = kendo.geometry;
	var Rect = geometry.Rect;
	var Circle = geometry.Circle;
	var geometryTransform = geometry.transform;
	var Segment = geometry.Segment;
	var dataviz = kendo.dataviz;

	var deepExtend = kendo.deepExtend;
	var isFunction = kendo.isFunction;
	var __common_getter_js = kendo.getter;

	var X = "x";
	var Y = "y";
	var TOP = "top";
	var BOTTOM = "bottom";
	var LEFT = "left";
	var RIGHT = "right";
	var CENTER = "center";
	var WIDTH = "width";
	var HEIGHT = "height";
	var COORD_PRECISION = 3;
	var MAX_VALUE = Number.MAX_VALUE;
	var MIN_VALUE = -Number.MAX_VALUE;
	var DEFAULT_WIDTH = 600;
	var DEFAULT_HEIGHT = 400;
	var WHITE = "#fff";
	var BLACK = "#000";
	var DEFAULT_FONT = "12px sans-serif";
	var DEFAULT_PRECISION = 10;
	var AXIS_LABEL_CLICK = "axisLabelClick";
	var NOTE_CLICK = "noteClick";
	var NOTE_HOVER = "noteHover";
	var OUTSIDE = "outside";
	var NONE = "none";
	var CIRCLE = "circle";
	var TRIANGLE = "triangle";
	var CROSS = "cross";
	var ARC = "arc";
	var INSIDE = "inside";
	var VALUE = "value";
	var STRING = "string";
	var OBJECT = "object";
	var DATE = "date";
	var FORMAT_REGEX = /\{\d+:?/;
	var HIGHLIGHT_ZINDEX = 100;

	var constants = {
		X: X,
		Y: Y,
		WIDTH: WIDTH,
		HEIGHT: HEIGHT,
		DEFAULT_HEIGHT: DEFAULT_HEIGHT,
		DEFAULT_WIDTH: DEFAULT_WIDTH,
		TOP: TOP,
		LEFT: LEFT,
		BOTTOM: BOTTOM,
		RIGHT: RIGHT,
		CENTER: CENTER,
		COORD_PRECISION: COORD_PRECISION,
		DEFAULT_PRECISION: DEFAULT_PRECISION,
		CIRCLE: CIRCLE,
		TRIANGLE: TRIANGLE,
		CROSS: CROSS,
		MAX_VALUE: MAX_VALUE,
		MIN_VALUE: MIN_VALUE,
		WHITE: WHITE,
		BLACK: BLACK,
		DEFAULT_FONT: DEFAULT_FONT,
		AXIS_LABEL_CLICK: AXIS_LABEL_CLICK,
		OUTSIDE: OUTSIDE,
		INSIDE: INSIDE,
		NONE: NONE,
		NOTE_CLICK: NOTE_CLICK,
		NOTE_HOVER: NOTE_HOVER,
		VALUE: VALUE,
		STRING: STRING,
		OBJECT: OBJECT,
		DATE: DATE,
		ARC: ARC,
		FORMAT_REGEX: FORMAT_REGEX,
		HIGHLIGHT_ZINDEX: HIGHLIGHT_ZINDEX
	};

	function isArray(value) {
	    return Array.isArray(value);
	}

	function addClass(element, classes) {
	    var classArray = isArray(classes) ? classes : [ classes ];

	    for (var idx = 0; idx < classArray.length; idx++) {
	        var className = classArray[idx];
	        if (element.className.indexOf(className) === -1) {
	            element.className += " " + className;
	        }
	    }
	}

	var SPACE_REGEX = /\s+/g;

	function removeClass(element, className) {
	    if (element && element.className) {
	        element.className = element.className.replace(className, "").replace(SPACE_REGEX, " ");
	    }
	}

	function alignPathToPixel(path) {
	    var offset = 0.5;
	    if (path.options.stroke && kendo.drawing.util.defined(path.options.stroke.width)) {
	        if (path.options.stroke.width % 2 === 0) {
	            offset = 0;
	        }
	    }

	    for (var i = 0; i < path.segments.length; i++) {
	        path.segments[i].anchor().round(0).translate(offset, offset);
	    }

	    return path;
	}

	function clockwise(angle1, angle2) {
	    // True if angle2 is clockwise of angle1
	    // assuming angles grow in clock-wise direction
	    // (as in the pie and radar charts)
	    return -angle1.x * angle2.y + angle1.y * angle2.x < 0;
	}

	function isNumber(value) {
	    return typeof value === "number" && !isNaN(value);
	}

	function isString(value) {
	    return typeof value === STRING;
	}

	function convertableToNumber(value) {
	    return isNumber(value) || (isString(value) && isFinite(value));
	}

	function isObject(value) {
	    return typeof value === "object";
	}

	function styleValue(value) {
	    if (isNumber(value)) {
	        return value + "px";
	    }
	    return value;
	}

	var SIZE_STYLES_REGEX = /width|height|top|left|bottom|right/i;

	function isSizeField(field) {
	    return SIZE_STYLES_REGEX.test(field);
	}

	function elementStyles(element, styles) {
	    var stylesArray = isString(styles) ? [ styles ] : styles;

	    if (isArray(stylesArray)) {
	        var result = {};
	        var style = window.getComputedStyle(element);

	        for (var idx = 0; idx < stylesArray.length; idx++) {
	            var field = stylesArray[idx];
	            result[field] = isSizeField(field) ? parseFloat(style[field]) : style[field];
	        }

	        return result;
	    } else if (isObject(styles)) {
	        for (var field$1 in styles) {
	            element.style[field$1] = styleValue(styles[field$1]);
	        }
	    }
	}

	function getSpacing(value, defaultSpacing) {
	    if (defaultSpacing === void 0) { defaultSpacing = 0; }

	    var spacing = { top: 0, right: 0, bottom: 0, left: 0 };

	    if (typeof(value) === "number") {
	        spacing[TOP] = spacing[RIGHT] = spacing[BOTTOM] = spacing[LEFT] = value;
	    } else {
	        spacing[TOP] = value[TOP] || defaultSpacing;
	        spacing[RIGHT] = value[RIGHT] || defaultSpacing;
	        spacing[BOTTOM] = value[BOTTOM] || defaultSpacing;
	        spacing[LEFT] = value[LEFT] || defaultSpacing;
	    }

	    return spacing;
	}

	var defaultImplementation = {
	    format: function (format, value) { return value; },

	    toString: function (value) { return value; },

	    parseDate: function (value) { return new Date(value); }
	};

	var current = defaultImplementation;

	var IntlService = Class.extend({

	});

	IntlService.register = function(userImplementation) {
	    current = userImplementation;
	};

	if (Object.defineProperties) {
	    Object.defineProperties(IntlService, {
	        implementation: {
	            get: function() {
	                return current;
	            }
	        }
	    });
	}

	var FORMAT_REPLACE_REGEX = /\{(\d+)(:[^\}]+)?\}/g;

	var FormatService = Class.extend({
	    init: function(intlService) {
	        this._intlService = intlService;
	    },

	    auto: function(formatString) {
	        var values = [], len = arguments.length - 1;
	        while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

	        var intl = this.intlService;

	        if (isString(formatString) && formatString.match(FORMAT_REGEX)) {
	            return intl.format.apply(intl, [ formatString ].concat( values ));
	        }

	        return intl.toString(values[0], formatString);
	    },

	    localeAuto: function(formatString, values, locale) {
	        var intl = this.intlService;
	        var result;

	        if (isString(formatString) && formatString.match(FORMAT_REGEX)) {
	            result = formatString.replace(FORMAT_REPLACE_REGEX, function(match, index, placeholderFormat) {
	                var value = values[parseInt(index, 10)];

	                return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : "", locale);
	            });
	        } else {
	            result = intl.toString(values[0], formatString, locale);
	        }

	        return result;
	    }
	});

	if (Object.defineProperties) {
	    Object.defineProperties(FormatService.fn, {
	        intlService: {
	            get: function() {
	                return this._intlService || IntlService.implementation;
	            }
	        }
	    });
	}

	var ChartService = Class.extend({
	    init: function(chart, context) {
	        if (context === void 0) { context = {}; }

	        this._intlService = context.intlService;
	        this.sender = context.sender || chart;
	        this.format = new FormatService(context.intlService);
	        this.chart = chart;
	        this.rtl = context.rtl;
	    },

	    notify: function(name, args) {
	        this.chart.trigger(name, args);
	    }
	});

	if (Object.defineProperties) {
	    Object.defineProperties(ChartService.fn, {
	        intl: {
	            get: function() {
	                return this._intlService || IntlService.implementation;
	            }
	        }
	    });
	}

	var current$1;

	var DomEventsBuilder = Class.extend({

	});

	DomEventsBuilder.register = function(userImplementation) {
	    current$1 = userImplementation;
	};

	DomEventsBuilder.create = function(element, events) {
	    if (current$1) {
	        return current$1.create(element, events);
	    }
	};

	var current$2 = {
	    compile: function(template) {
	        return template;
	    }
	};

	var TemplateService = Class.extend({

	});

	TemplateService.register = function(userImplementation) {
	    current$2 = userImplementation;
	};

	TemplateService.compile = function(template) {
	    return current$2.compile(template);
	};

	var services = {
		ChartService: ChartService,
		DomEventsBuilder: DomEventsBuilder,
		FormatService: FormatService,
		IntlService: IntlService,
		TemplateService: TemplateService
	};

	function getTemplate(options) {
	    if (options === void 0) { options = {}; }

	    var template;
	    if (options.template) {
	        options.template = template = TemplateService.compile(options.template);
	    } else if (isFunction(options.content)) {
	        template = options.content;
	    }

	    return template;
	}

	function grep(array, callback) {
	    var length = array.length;
	    var result = [];
	    for (var idx = 0; idx < length; idx++) {
	        if (callback(array[idx])) {
	            result .push(array[idx]);
	        }
	    }

	    return result;
	}

	function hasClasses(element, classNames) {
	    if (element.className) {
	        var names = classNames.split(" ");
	        for (var idx = 0; idx < names.length; idx++) {
	            if (element.className.indexOf(names[idx]) !== -1) {
	                return true;
	            }
	        }
	    }
	}

	function inArray(value, array) {
	    if (array) {
	        return array.indexOf(value) !== -1;
	    }
	}

	function interpolateValue(start, end, progress) {
	    return kendo.drawing.util.round(start + (end - start) * progress, COORD_PRECISION);
	}

	var TRIGGER = 'trigger';

	var InstanceObserver = Class.extend({
	    init: function(observer, handlers) {
	        this.observer = observer;
	        this.handlerMap = deepExtend({}, this.handlerMap, handlers);
	    },

	    trigger: function(name, args) {
	        var ref = this;
	        var observer = ref.observer;
	        var handlerMap = ref.handlerMap;
	        var isDefaultPrevented;
	        if (handlerMap[name]) {
	            isDefaultPrevented = this.callObserver(handlerMap[name], args);
	        } else if (observer[TRIGGER]) {
	            isDefaultPrevented = this.callObserver(TRIGGER, name, args);
	        }

	        return isDefaultPrevented;
	    },

	    callObserver: function(fnName) {
	        var args = [], len = arguments.length - 1;
	        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

	        return this.observer[fnName].apply(this.observer, args);
	    },

	    requiresHandlers: function(names) {
	        var this$1 = this;

	        if (this.observer.requiresHandlers) {
	            return this.observer.requiresHandlers(names);
	        }

	        for (var idx = 0; idx < names.length; idx++) {
	            if (this$1.handlerMap[names[idx]]) {
	                return true;
	            }
	        }
	    }
	});

	function map(array, callback) {
	    var length = array.length;
	    var result = [];
	    for (var idx = 0; idx < length; idx++) {
	        var value = callback(array[idx]);
	        if (kendo.drawing.util.defined(value)) {
	            result.push(value);
	        }
	    }
	    return result;
	}

	function mousewheelDelta(e) {
	    var delta = 0;

	    if (e.wheelDelta) {
	        delta = -e.wheelDelta / 120;
	        delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
	    }

	    if (e.detail) {
	        delta = kendo.drawing.util.round(e.detail / 3);
	    }

	    return delta;
	}

	var ref = kendo.drawing.util;
	var append = ref.append;
	var bindEvents = ref.bindEvents;
	var defined = ref.defined;
	var deg = ref.deg;
	var elementOffset = ref.elementOffset;
	var elementSize = ref.elementSize;
	var eventElement = ref.eventElement;
	var eventCoordinates = ref.eventCoordinates;
	var last = ref.last;
	var limitValue = ref.limitValue;
	var objectKey = ref.objectKey;
	var rad = ref.rad;
	var round = ref.round;
	var unbindEvents = ref.unbindEvents;
	var valueOrDefault = ref.valueOrDefault;

	var FontLoader = Class.extend({

	});

	FontLoader.fetchFonts = function(options, fonts, state) {
	    if (state === void 0) { state = { depth: 0 }; }

	    var MAX_DEPTH = 5;

	    if (!options || state.depth > MAX_DEPTH || !document.fonts) {
	        return;
	    }

	    Object.keys(options).forEach(function(key) {
	        var value = options[key];
	        if (key === "dataSource" || key[0] === "$" || !value) {
	            return;
	        }

	        if (key === "font") {
	            fonts.push(value);
	        } else if (typeof value === "object") {
	            state.depth++;
	            FontLoader.fetchFonts(value, fonts, state);
	            state.depth--;
	        }
	    });
	};

	FontLoader.loadFonts = function(fonts, callback) {
	    var promises = [];

	    if (fonts.length > 0 && document.fonts) {
	        try {
	            promises = fonts.map(function(font) {
	                return document.fonts.load(font);
	            });
	        } catch (e) {
	            // Silence font-loading errors
	            kendo.logToConsole(e);
	        }

	        Promise.all(promises).then(callback, callback);
	    } else {
	        callback();
	    }
	};

	FontLoader.preloadFonts = function(options, callback) {
	    var fonts = [];
	    FontLoader.fetchFonts(options, fonts);

	    FontLoader.loadFonts(fonts, callback);
	};

	function setDefaultOptions(type, options) {
	    var proto = type.prototype;
	    if (proto.options) {
	        proto.options = deepExtend({}, proto.options, options);
	    } else {
	        proto.options = options;
	    }
	}

	function sparseArrayLimits(arr) {
	    var min = MAX_VALUE;
	    var max = MIN_VALUE;

	    for (var idx = 0, length = arr.length; idx < length; idx++) {
	        var value = arr[idx];
	        if (value !== null && isFinite(value)) {
	            min = Math.min(min, value);
	            max = Math.max(max, value);
	        }
	    }

	    return {
	        min: min === MAX_VALUE ? undefined : min,
	        max: max === MIN_VALUE ? undefined : max
	    };
	}

	var Point = Class.extend({
	    init: function(x, y) {

	        this.x = x || 0;
	        this.y = y || 0;
	    },

	    clone: function() {
	        return new Point(this.x, this.y);
	    },

	    equals: function(point) {
	        return point && this.x === point.x && this.y === point.y;
	    },

	    rotate: function(center, degrees) {
	        var theta = rad(degrees);
	        var cosT = Math.cos(theta);
	        var sinT = Math.sin(theta);
	        var cx = center.x;
	        var cy = center.y;
	        var ref = this;
	        var x = ref.x;
	        var y = ref.y;

	        this.x = round(
	            cx + (x - cx) * cosT + (y - cy) * sinT,
	            COORD_PRECISION
	        );

	        this.y = round(
	            cy + (y - cy) * cosT - (x - cx) * sinT,
	            COORD_PRECISION
	        );

	        return this;
	    },

	    multiply: function(a) {

	        this.x *= a;
	        this.y *= a;

	        return this;
	    },

	    distanceTo: function(point) {
	        var dx = this.x - point.x;
	        var dy = this.y - point.y;

	        return Math.sqrt(dx * dx + dy * dy);
	    }
	});

	Point.onCircle = function(center, angle, radius) {
	    var radians = rad(angle);

	    return new Point(
	        center.x - radius * Math.cos(radians),
	        center.y - radius * Math.sin(radians)
	    );
	};

	var Box = Class.extend({
	    init: function(x1, y1, x2, y2) {

	        this.x1 = x1 || 0;
	        this.y1 = y1 || 0;
	        this.x2 = x2 || 0;
	        this.y2 = y2 || 0;
	    },

	    equals: function(box) {
	        return this.x1 === box.x1 && this.x2 === box.x2 &&
	            this.y1 === box.y1 && this.y2 === box.y2;
	    },

	    width: function() {
	        return this.x2 - this.x1;
	    },

	    height: function() {
	        return this.y2 - this.y1;
	    },

	    translate: function(dx, dy) {
	        this.x1 += dx;
	        this.x2 += dx;
	        this.y1 += dy;
	        this.y2 += dy;

	        return this;
	    },

	    move: function(x, y) {
	        var height = this.height();
	        var width = this.width();

	        if (defined(x)) {
	            this.x1 = x;
	            this.x2 = this.x1 + width;
	        }

	        if (defined(y)) {
	            this.y1 = y;
	            this.y2 = this.y1 + height;
	        }

	        return this;
	    },

	    wrap: function(targetBox) {
	        this.x1 = Math.min(this.x1, targetBox.x1);
	        this.y1 = Math.min(this.y1, targetBox.y1);
	        this.x2 = Math.max(this.x2, targetBox.x2);
	        this.y2 = Math.max(this.y2, targetBox.y2);

	        return this;
	    },

	    wrapPoint: function(point) {
	        var arrayPoint = isArray(point);
	        var x = arrayPoint ? point[0] : point.x;
	        var y = arrayPoint ? point[1] : point.y;
	        this.wrap(new Box(x, y, x, y));

	        return this;
	    },

	    snapTo: function(targetBox, axis) {

	        if (axis === X || !axis) {
	            this.x1 = targetBox.x1;
	            this.x2 = targetBox.x2;
	        }

	        if (axis === Y || !axis) {
	            this.y1 = targetBox.y1;
	            this.y2 = targetBox.y2;
	        }

	        return this;
	    },

	    alignTo: function(targetBox, anchor) {
	        var height = this.height();
	        var width = this.width();
	        var axis = anchor === TOP || anchor === BOTTOM ? Y : X;
	        var offset = axis === Y ? height : width;

	        if (anchor === CENTER) {
	            var targetCenter = targetBox.center();
	            var center = this.center();

	            this.x1 += targetCenter.x - center.x;
	            this.y1 += targetCenter.y - center.y;
	        } else if (anchor === TOP || anchor === LEFT) {
	            this[axis + 1] = targetBox[axis + 1] - offset;
	        } else {
	            this[axis + 1] = targetBox[axis + 2];
	        }

	        this.x2 = this.x1 + width;
	        this.y2 = this.y1 + height;

	        return this;
	    },

	    shrink: function(dw, dh) {

	        this.x2 -= dw;
	        this.y2 -= dh;

	        return this;
	    },

	    expand: function(dw, dh) {
	        this.shrink(-dw, -dh);
	        return this;
	    },

	    pad: function(padding) {
	        var spacing = getSpacing(padding);

	        this.x1 -= spacing.left;
	        this.x2 += spacing.right;
	        this.y1 -= spacing.top;
	        this.y2 += spacing.bottom;

	        return this;
	    },

	    unpad: function(padding) {
	        var spacing = getSpacing(padding);

	        spacing.left = -spacing.left;
	        spacing.top = -spacing.top;
	        spacing.right = -spacing.right;
	        spacing.bottom = -spacing.bottom;

	        return this.pad(spacing);
	    },

	    clone: function() {
	        return new Box(this.x1, this.y1, this.x2, this.y2);
	    },

	    center: function() {
	        return new Point(
	            this.x1 + this.width() / 2,
	            this.y1 + this.height() / 2
	        );
	    },

	    containsPoint: function(point) {

	        return point.x >= this.x1 && point.x <= this.x2 &&
	               point.y >= this.y1 && point.y <= this.y2;
	    },

	    points: function() {
	        return [
	            new Point(this.x1, this.y1),
	            new Point(this.x2, this.y1),
	            new Point(this.x2, this.y2),
	            new Point(this.x1, this.y2)
	        ];
	    },

	    getHash: function() {
	        return [ this.x1, this.y1, this.x2, this.y2 ].join(",");
	    },

	    overlaps: function(box) {
	        return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);
	    },

	    rotate: function(rotation) {
	        var width = this.width();
	        var height = this.height();
	        var ref = this.center();
	        var cx = ref.x;
	        var cy = ref.y;

	        var r1 = rotatePoint(0, 0, cx, cy, rotation);
	        var r2 = rotatePoint(width, 0, cx, cy, rotation);
	        var r3 = rotatePoint(width, height, cx, cy, rotation);
	        var r4 = rotatePoint(0, height, cx, cy, rotation);

	        width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);
	        height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);

	        this.x2 = this.x1 + width;
	        this.y2 = this.y1 + height;

	        return this;
	    },

	    toRect: function() {
	        return new Rect([ this.x1, this.y1 ], [ this.width(), this.height() ]);
	    },

	    hasSize: function() {
	        return this.width() !== 0 && this.height() !== 0;
	    },

	    align: function(targetBox, axis, alignment) {
	        var c1 = axis + 1;
	        var c2 = axis + 2;
	        var sizeFunc = axis === X ? WIDTH : HEIGHT;
	        var size = this[sizeFunc]();

	        if (inArray(alignment, [ LEFT, TOP ])) {
	            this[c1] = targetBox[c1];
	            this[c2] = this[c1] + size;
	        } else if (inArray(alignment, [ RIGHT, BOTTOM ])) {
	            this[c2] = targetBox[c2];
	            this[c1] = this[c2] - size;
	        } else if (alignment === CENTER) {
	            this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;
	            this[c2] = this[c1] + size;
	        }
	    }
	});

	function rotatePoint(x, y, cx, cy, angle) {
	    var theta = rad(angle);

	    return new Point(
	        cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta),
	        cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta)
	    );
	}

	var Ring = Class.extend({
	    init: function(center, innerRadius, radius, startAngle, angle) {

	        this.center = center;
	        this.innerRadius = innerRadius;
	        this.radius = radius;
	        this.startAngle = startAngle;
	        this.angle = angle;
	    },

	    clone: function() {
	        return new Ring(this.center, this.innerRadius, this.radius, this.startAngle, this.angle);
	    },

	    middle: function() {
	        return this.startAngle + this.angle / 2;
	    },

	    setRadius: function(newRadius, innerRadius) {
	        if (innerRadius) {
	            this.innerRadius = newRadius;
	        } else {
	            this.radius = newRadius;
	        }

	        return this;
	    },

	    point: function(angle, innerRadius) {
	        var radianAngle = rad(angle);
	        var ax = Math.cos(radianAngle);
	        var ay = Math.sin(radianAngle);
	        var radius = innerRadius ? this.innerRadius : this.radius;
	        var x = round(this.center.x - (ax * radius), COORD_PRECISION);
	        var y = round(this.center.y - (ay * radius), COORD_PRECISION);

	        return new Point(x, y);
	    },

	    adjacentBox: function(distance, width, height) {
	        var sector = this.clone().expand(distance);
	        var midAndle = sector.middle();
	        var midPoint = sector.point(midAndle);
	        var hw = width / 2;
	        var hh = height / 2;
	        var sa = Math.sin(rad(midAndle));
	        var ca = Math.cos(rad(midAndle));
	        var x = midPoint.x - hw;
	        var y = midPoint.y - hh;

	        if (Math.abs(sa) < 0.9) {
	            x += hw * -ca / Math.abs(ca);
	        }

	        if (Math.abs(ca) < 0.9) {
	            y += hh * -sa / Math.abs(sa);
	        }

	        return new Box(x, y, x + width, y + height);
	    },

	    containsPoint: function(p) {
	        var center = this.center;
	        var innerRadius = this.innerRadius;
	        var radius = this.radius;
	        var startAngle = this.startAngle;
	        var endAngle = this.startAngle + this.angle;
	        var dx = p.x - center.x;
	        var dy = p.y - center.y;
	        var vector = new Point(dx, dy);
	        var startPoint = this.point(startAngle);
	        var startVector = new Point(startPoint.x - center.x, startPoint.y - center.y);
	        var endPoint = this.point(endAngle);
	        var endVector = new Point(endPoint.x - center.x, endPoint.y - center.y);
	        var dist = round(dx * dx + dy * dy, COORD_PRECISION);

	        return (startVector.equals(vector) || clockwise(startVector, vector)) &&
	               !clockwise(endVector, vector) &&
	               dist >= innerRadius * innerRadius && dist <= radius * radius;
	    },

	    getBBox: function() {
	        var this$1 = this;

	        var box = new Box(MAX_VALUE, MAX_VALUE, MIN_VALUE, MIN_VALUE);
	        var startAngle = round(this.startAngle % 360);
	        var endAngle = round((startAngle + this.angle) % 360);
	        var innerRadius = this.innerRadius;
	        var allAngles = [ 0, 90, 180, 270, startAngle, endAngle ].sort(numericComparer);
	        var startAngleIndex = allAngles.indexOf(startAngle);
	        var endAngleIndex = allAngles.indexOf(endAngle);
	        var angles;

	        if (startAngle === endAngle) {
	            angles = allAngles;
	        } else {
	            if (startAngleIndex < endAngleIndex) {
	                angles = allAngles.slice(startAngleIndex, endAngleIndex + 1);
	            } else {
	                angles = [].concat(
	                    allAngles.slice(0, endAngleIndex + 1),
	                    allAngles.slice(startAngleIndex, allAngles.length)
	                );
	            }
	        }

	        for (var i = 0; i < angles.length; i++) {
	            var point = this$1.point(angles[i]);
	            box.wrapPoint(point);
	            box.wrapPoint(point, innerRadius);
	        }

	        if (!innerRadius) {
	            box.wrapPoint(this.center);
	        }

	        return box;
	    },

	    expand: function(value) {
	        this.radius += value;
	        return this;
	    }
	});

	function numericComparer(a, b) {
	    return a - b;
	}

	var Sector = Ring.extend({
	    init: function(center, radius, startAngle, angle) {
	        Ring.fn.init.call(this, center, 0, radius, startAngle, angle);
	    },

	    expand: function(value) {
	        return Ring.fn.expand.call(this, value);
	    },

	    clone: function() {
	        return new Sector(this.center, this.radius, this.startAngle, this.angle);
	    },

	    setRadius: function(newRadius) {
	        this.radius = newRadius;

	        return this;
	    }
	});

	var DIRECTION_ANGLE = 0.001; //any value that will make the endAngle bigger than the start angle will work here.

	var ShapeBuilder = Class.extend({
	    createRing: function(sector, options) {
	        var startAngle = sector.startAngle + 180;
	        var endAngle = sector.angle + startAngle;

	        //required in order to avoid reversing the arc direction in cases like 0.000000000000001 + 100 === 100
	        if (sector.angle > 0 && startAngle === endAngle) {
	            endAngle += DIRECTION_ANGLE;
	        }

	        var center = new geometry.Point(sector.center.x, sector.center.y);
	        var radius = Math.max(sector.radius, 0);
	        var innerRadius = Math.max(sector.innerRadius, 0);
	        var arc = new geometry.Arc(center, {
	            startAngle: startAngle,
	            endAngle: endAngle,
	            radiusX: radius,
	            radiusY: radius
	        });
	        var path = Path.fromArc(arc, options).close();

	        if (innerRadius) {
	            arc.radiusX = arc.radiusY = innerRadius;
	            var innerEnd = arc.pointAt(endAngle);
	            path.lineTo(innerEnd.x, innerEnd.y);
	            path.arc(endAngle, startAngle, innerRadius, innerRadius, true);
	        } else {
	            path.lineTo(center.x, center.y);
	        }

	        return path;
	    }
	});

	ShapeBuilder.current = new ShapeBuilder();

	var ChartElement = Class.extend({
	    init: function(options) {

	        this.children = [];

	        this.options = deepExtend({}, this.options, options);
	    },

	    reflow: function(targetBox) {
	        var children = this.children;
	        var box;

	        for (var i = 0; i < children.length; i++) {
	            var currentChild = children[i];
	            currentChild.reflow(targetBox);

	            box = box ? box.wrap(currentChild.box) : currentChild.box.clone();
	        }

	        this.box = box || targetBox;
	    },

	    destroy: function() {
	        var children = this.children;

	        if (this.animation) {
	            this.animation.destroy();
	        }

	        for (var i = 0; i < children.length; i++) {
	            children[i].destroy();
	        }
	    },

	    getRoot: function() {
	        var parent = this.parent;

	        return parent ? parent.getRoot() : null;
	    },

	    getSender: function() {
	        var service = this.getService();
	        if (service) {
	            return service.sender;
	        }
	    },

	    getService: function() {
	        var element = this;
	        while (element) {
	            if (element.chartService) {
	                return element.chartService;
	            }
	            element = element.parent;
	        }
	    },

	    translateChildren: function(dx, dy) {
	        var children = this.children;
	        var childrenCount = children.length;

	        for (var i = 0; i < childrenCount; i++) {
	            children[i].box.translate(dx, dy);
	        }
	    },

	    append: function() {
	        var arguments$1 = arguments;
	        var this$1 = this;

	        for (var i = 0; i < arguments.length; i++) {
	            var item = arguments$1[i];
	            this$1.children.push(item);
	            item.parent = this$1;
	        }
	    },

	    renderVisual: function() {
	        if (this.options.visible === false) {
	            return;
	        }

	        this.createVisual();

	        this.addVisual();

	        this.renderChildren();

	        this.createAnimation();
	        this.renderComplete();
	    },

	    addVisual: function() {
	        if (this.visual) {
	            this.visual.chartElement = this;

	            if (this.parent) {
	                this.parent.appendVisual(this.visual);
	            }
	        }
	    },

	    renderChildren: function() {
	        var children = this.children;
	        var length = children.length;
	        for (var i = 0; i < length; i++) {
	            children[i].renderVisual();
	        }
	    },

	    createVisual: function() {
	        this.visual = new Group({
	            zIndex: this.options.zIndex,
	            visible: valueOrDefault(this.options.visible, true)
	        });
	    },

	    createAnimation: function() {
	        if (this.visual) {
	            this.animation = drawing.Animation.create(
	                this.visual, this.options.animation
	            );
	        }
	    },

	    appendVisual: function(childVisual) {
	        if (!childVisual.chartElement) {
	            childVisual.chartElement = this;
	        }

	        if (childVisual.options.noclip) {
	            this.clipRoot().visual.append(childVisual);
	        } else if (defined(childVisual.options.zIndex)) {
	            this.stackRoot().stackVisual(childVisual);
	        } else if (this.isStackRoot) {
	            this.stackVisual(childVisual);
	        } else if (this.visual) {
	            this.visual.append(childVisual);
	        } else {
	            // Allow chart elements without visuals to
	            // pass through child visuals
	            this.parent.appendVisual(childVisual);
	        }
	    },

	    clipRoot: function() {
	        if (this.parent) {
	            return this.parent.clipRoot();
	        }

	        return this;
	    },

	    stackRoot: function() {
	        if (this.parent) {
	            return this.parent.stackRoot();
	        }

	        return this;
	    },

	    stackVisual: function(childVisual) {
	        var zIndex = childVisual.options.zIndex || 0;
	        var visuals = this.visual.children;
	        var length = visuals.length;
	        var pos;

	        for (pos = 0; pos < length; pos++) {
	            var sibling = visuals[pos];
	            var here = valueOrDefault(sibling.options.zIndex, 0);
	            if (here > zIndex) {
	                break;
	            }
	        }

	        this.visual.insert(pos, childVisual);
	    },

	    traverse: function(callback) {
	        var children = this.children;
	        var length = children.length;

	        for (var i = 0; i < length; i++) {
	            var child = children[i];

	            callback(child);
	            if (child.traverse) {
	                child.traverse(callback);
	            }
	        }
	    },

	    closest: function(match) {
	        var element = this;
	        var matched = false;

	        while (element && !matched) {
	            matched = match(element);

	            if (!matched) {
	                element = element.parent;
	            }
	        }

	        if (matched) {
	            return element;
	        }
	    },

	    renderComplete: function() {},

	    hasHighlight: function() {
	        var options = (this.options || {}).highlight;
	        return !(!this.createHighlight || (options && options.visible === false));
	    },

	    toggleHighlight: function(show) {
	        var this$1 = this;

	        var options = (this.options || {}).highlight || {};
	        var customVisual = options.visual;
	        var highlight = this._highlight;

	        if (!highlight) {
	            var highlightOptions = {
	                fill: {
	                    color: WHITE,
	                    opacity: 0.2
	                },
	                stroke: {
	                    color: WHITE,
	                    width: 1,
	                    opacity: 0.2
	                }
	            };

	            if (customVisual) {
	                highlight = this._highlight = customVisual(
	                    $.extend(this.highlightVisualArgs(), {
	                        createVisual: function () { return this$1.createHighlight(highlightOptions); },
	                        sender: this.getSender(),
	                        series: this.series,
	                        dataItem: this.dataItem,
	                        category: this.category,
	                        value: this.value,
	                        percentage: this.percentage,
	                        runningTotal: this.runningTotal,
	                        total: this.total
	                    }
	                ));

	                if (!highlight) {
	                    return;
	                }
	            } else {
	                highlight = this._highlight = this.createHighlight(highlightOptions);
	            }

	            if (!defined(highlight.options.zIndex)) {
	                highlight.options.zIndex = valueOrDefault(options.zIndex, this.options.zIndex);
	            }

	            this.appendVisual(highlight);
	        }

	        highlight.visible(show);
	    },

	    createGradientOverlay: function(element, options, gradientOptions) {
	        var overlay = new Path($.extend({
	            stroke: {
	                color: "none"
	            },
	            fill: this.createGradient(gradientOptions),
	            closed: element.options.closed
	        }, options));

	        overlay.segments.elements(element.segments.elements());

	        return overlay;
	    },

	    createGradient: function(options) {
	        if (this.parent) {
	            return this.parent.createGradient(options);
	        }
	    }
	});

	ChartElement.prototype.options = { };

	var BoxElement = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);

	        this.options.margin = getSpacing(this.options.margin);
	        this.options.padding = getSpacing(this.options.padding);
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        var options = this.options;
	        var width = options.width;
	        var height = options.height;
	        var shrinkToFit = options.shrinkToFit;
	        var hasSetSize = width && height;
	        var margin = options.margin;
	        var padding = options.padding;
	        var borderWidth = options.border.width;
	        var box;

	        var reflowPaddingBox = function () {
	            this$1.align(targetBox, X, options.align);
	            this$1.align(targetBox, Y, options.vAlign);
	            this$1.paddingBox = box.clone().unpad(margin).unpad(borderWidth);
	        };

	        var contentBox = targetBox.clone();
	        if (hasSetSize) {
	            contentBox.x2 = contentBox.x1 + width;
	            contentBox.y2 = contentBox.y1 + height;
	        }

	        if (shrinkToFit) {
	            contentBox.unpad(margin).unpad(borderWidth).unpad(padding);
	        }

	        ChartElement.fn.reflow.call(this, contentBox);

	        if (hasSetSize) {
	            box = this.box = new Box(0, 0, width, height);
	        } else {
	            box = this.box;
	        }

	        if (shrinkToFit && hasSetSize) {
	            reflowPaddingBox();
	            contentBox = this.contentBox = this.paddingBox.clone().unpad(padding);
	        } else {
	            contentBox = this.contentBox = box.clone();
	            box.pad(padding).pad(borderWidth).pad(margin);
	            reflowPaddingBox();
	        }

	        this.translateChildren(
	            box.x1 - contentBox.x1 + margin.left + borderWidth + padding.left,
	            box.y1 - contentBox.y1 + margin.top + borderWidth + padding.top
	        );

	        var children = this.children;
	        for (var i = 0; i < children.length; i++) {
	            var item = children[i];
	            item.reflow(item.box);
	        }
	    },

	    align: function(targetBox, axis, alignment) {
	        this.box.align(targetBox, axis, alignment);
	    },

	    hasBox: function() {
	        var options = this.options;
	        return options.border.width || options.background;
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        var options = this.options;
	        if (options.visible && this.hasBox()) {
	            this.visual.append(Path.fromRect(
	                this.paddingBox.toRect(),
	                this.visualStyle()
	            ));
	        }
	    },

	    visualStyle: function() {
	        var options = this.options;
	        var border = options.border || {};

	        return {
	            stroke: {
	                width: border.width,
	                color: border.color,
	                opacity: valueOrDefault(border.opacity, options.opacity),
	                dashType: border.dashType
	            },
	            fill: {
	                color: options.background,
	                opacity: options.opacity
	            },
	            cursor: options.cursor
	        };
	    }
	});

	setDefaultOptions(BoxElement, {
	    align: LEFT,
	    vAlign: TOP,
	    margin: {},
	    padding: {},
	    border: {
	        color: BLACK,
	        width: 0
	    },
	    background: "",
	    shrinkToFit: false,
	    width: 0,
	    height: 0,
	    visible: true
	});

	var ShapeElement = BoxElement.extend({
	    init: function(options, pointData) {
	        BoxElement.fn.init.call(this, options);

	        this.pointData = pointData;
	    },

	    getElement: function() {
	        var ref = this;
	        var options = ref.options;
	        var box = ref.paddingBox;
	        var type = options.type;
	        var rotation = options.rotation;
	        var center = box.center();
	        var halfWidth = box.width() / 2;

	        if (!options.visible || !this.hasBox()) {
	            return null;
	        }

	        var style = this.visualStyle();
	        var element;

	        if (type === CIRCLE) {
	            element = new drawing.Circle(
	                new Circle([
	                    round(box.x1 + halfWidth, COORD_PRECISION),
	                    round(box.y1 + box.height() / 2, COORD_PRECISION)
	                ], halfWidth),
	                style
	            );
	        } else if (type === TRIANGLE) {
	            element = Path.fromPoints([
	                [ box.x1 + halfWidth, box.y1 ],
	                [ box.x1, box.y2 ],
	                [ box.x2, box.y2 ]
	            ], style).close();
	        } else if (type === CROSS) {
	            element = new drawing.MultiPath(style);

	            element.moveTo(box.x1, box.y1).lineTo(box.x2, box.y2);
	            element.moveTo(box.x1, box.y2).lineTo(box.x2, box.y1);
	        } else {
	            element = Path.fromRect(box.toRect(), style);
	        }

	        if (rotation) {
	            element.transform(geometryTransform()
	                .rotate(-rotation, [ center.x, center.y ])
	            );
	        }

	        element.options.zIndex = options.zIndex;
	        return element;
	    },

	    createElement: function() {
	        var this$1 = this;

	        var customVisual = this.options.visual;
	        var pointData = this.pointData || {};
	        var visual;

	        if (customVisual) {
	            visual = customVisual({
	                value: pointData.value,
	                dataItem: pointData.dataItem,
	                sender: this.getSender(),
	                series: pointData.series,
	                category: pointData.category,
	                rect: this.paddingBox.toRect(),
	                options: this.visualOptions(),
	                createVisual: function () { return this$1.getElement(); }
	            });
	        } else {
	            visual = this.getElement();
	        }

	        return visual;
	    },

	    visualOptions: function() {
	        var options = this.options;
	        return {
	            background: options.background,
	            border: options.border,
	            margin: options.margin,
	            padding: options.padding,
	            type: options.type,
	            size: options.width,
	            visible: options.visible
	        };
	    },

	    createVisual: function() {
	        this.visual = this.createElement();
	    }
	});

	setDefaultOptions(ShapeElement, {
	    type: CIRCLE,
	    align: CENTER,
	    vAlign: CENTER
	});

	var LINEAR = "linear";
	var RADIAL = "radial";

	var GRADIENTS = {
	    glass: {
	        type: LINEAR,
	        rotation: 0,
	        stops: [ {
	            offset: 0,
	            color: WHITE,
	            opacity: 0
	        }, {
	            offset: 0.25,
	            color: WHITE,
	            opacity: 0.3
	        }, {
	            offset: 1,
	            color: WHITE,
	            opacity: 0
	        } ]
	    },
	    sharpBevel: {
	        type: RADIAL,
	        stops: [ {
	            offset: 0,
	            color: WHITE,
	            opacity: 0.55
	        }, {
	            offset: 0.65,
	            color: WHITE,
	            opacity: 0
	        }, {
	            offset: 0.95,
	            color: WHITE,
	            opacity: 0.25
	        } ]
	    },
	    roundedBevel: {
	        type: RADIAL,
	        stops: [ {
	            offset: 0.33,
	            color: WHITE,
	            opacity: 0.06
	        }, {
	            offset: 0.83,
	            color: WHITE,
	            opacity: 0.2
	        }, {
	            offset: 0.95,
	            color: WHITE,
	            opacity: 0
	        } ]
	    },
	    roundedGlass: {
	        type: RADIAL,
	        supportVML: false,
	        stops: [ {
	            offset: 0,
	            color: WHITE,
	            opacity: 0
	        }, {
	            offset: 0.5,
	            color: WHITE,
	            opacity: 0.3
	        }, {
	            offset: 0.99,
	            color: WHITE,
	            opacity: 0
	        } ]
	    },
	    sharpGlass: {
	        type: RADIAL,
	        supportVML: false,
	        stops: [ {
	            offset: 0,
	            color: WHITE,
	            opacity: 0.2
	        }, {
	            offset: 0.15,
	            color: WHITE,
	            opacity: 0.15
	        }, {
	            offset: 0.17,
	            color: WHITE,
	            opacity: 0.35
	        }, {
	            offset: 0.85,
	            color: WHITE,
	            opacity: 0.05
	        }, {
	            offset: 0.87,
	            color: WHITE,
	            opacity: 0.15
	        }, {
	            offset: 0.99,
	            color: WHITE,
	            opacity: 0
	        } ]
	    },
	    bubbleShadow: {
	        type: RADIAL,
	        center: [ 0.5, 0.5 ],
	        radius: 0.5
	    }
	};

	function boxDiff(r, s) {
	    if (r.x1 === s.x1 && r.y1 === s.y1 && r.x2 === s.x2 && r.y2 === s.y2) {
	        return s;
	    }

	    var a = Math.min(r.x1, s.x1);
	    var b = Math.max(r.x1, s.x1);
	    var c = Math.min(r.x2, s.x2);
	    var d = Math.max(r.x2, s.x2);
	    var e = Math.min(r.y1, s.y1);
	    var f = Math.max(r.y1, s.y1);
	    var g = Math.min(r.y2, s.y2);
	    var h = Math.max(r.y2, s.y2);
	    var boxes = [];

	    // X = intersection, 0-7 = possible difference areas
	    // h +-+-+-+
	    // . |5|6|7|
	    // g +-+-+-+
	    // . |3|X|4|
	    // f +-+-+-+
	    // . |0|1|2|
	    // e +-+-+-+
	    // . a b c d

	    // we'll always have rectangles 1, 3, 4 and 6
	    boxes[0] = new Box(b, e, c, f);
	    boxes[1] = new Box(a, f, b, g);
	    boxes[2] = new Box(c, f, d, g);
	    boxes[3] = new Box(b, g, c, h);

	    // decide which corners
	    if (r.x1 === a && r.y1 === e || s.x1 === a && s.y1 === e) { // corners 0 and 7
	        boxes[4] = new Box(a, e, b, f);
	        boxes[5] = new Box(c, g, d, h);
	    } else { // corners 2 and 5
	        boxes[4] = new Box(c, e, d, f);
	        boxes[5] = new Box(a, g, b, h);
	    }

	    return grep(boxes, function(box) {
	        return box.height() > 0 && box.width() > 0;
	    })[0];
	}

	var RootElement = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);

	        var rootOptions = this.options;
	        rootOptions.width = parseInt(rootOptions.width, 10);
	        rootOptions.height = parseInt(rootOptions.height, 10);

	        this.gradients = {};
	    },

	    reflow: function() {
	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var currentBox = new Box(0, 0, options.width, options.height);

	        this.box = currentBox.unpad(options.margin);

	        for (var i = 0; i < children.length; i++) {
	            children[i].reflow(currentBox);
	            currentBox = boxDiff(currentBox, children[i].box) || new Box();
	        }
	    },

	    createVisual: function() {
	        this.visual = new Group();
	        this.createBackground();
	    },

	    createBackground: function() {
	        var options = this.options;
	        var border = options.border || {};
	        var box = this.box.clone().pad(options.margin).unpad(border.width);

	        var background = Path.fromRect(box.toRect(), {
	            stroke: {
	                color: border.width ? border.color : "",
	                width: border.width,
	                dashType: border.dashType
	            },
	            fill: {
	                color: options.background,
	                opacity: options.opacity
	            },
	            zIndex: -10
	        });

	        this.visual.append(background);
	    },

	    getRoot: function() {
	        return this;
	    },

	    createGradient: function(options) {
	        var gradients = this.gradients;
	        var hashCode = objectKey(options);
	        var gradient = GRADIENTS[options.gradient];
	        var drawingGradient;

	        if (gradients[hashCode]) {
	            drawingGradient = gradients[hashCode];
	        } else {
	            var gradientOptions = $.extend({}, gradient, options);
	            if (gradient.type === "linear") {
	                drawingGradient = new drawing.LinearGradient(gradientOptions);
	            } else {
	                if (options.innerRadius) {
	                    gradientOptions.stops = innerRadialStops(gradientOptions);
	                }
	                drawingGradient = new drawing.RadialGradient(gradientOptions);
	                drawingGradient.supportVML = gradient.supportVML !== false;
	            }
	            gradients[hashCode] = drawingGradient;
	        }

	        return drawingGradient;
	    }
	});

	setDefaultOptions(RootElement, {
	    width: DEFAULT_WIDTH,
	    height: DEFAULT_HEIGHT,
	    background: WHITE,
	    border: {
	        color: BLACK,
	        width: 0
	    },
	    margin: getSpacing(5),
	    zIndex: -2
	});

	function innerRadialStops(options) {
	    var stops = options.stops;
	    var usedSpace = ((options.innerRadius / options.radius) * 100);
	    var length = stops.length;
	    var currentStops = [];

	    for (var i = 0; i < length; i++) {
	        var currentStop = $.extend({}, stops[i]);
	        currentStop.offset = (currentStop.offset * (100 - usedSpace) + usedSpace) / 100;
	        currentStops.push(currentStop);
	    }

	    return currentStops;
	}

	var FloatElement = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);
	        this._initDirection();
	    },

	    _initDirection: function() {
	        var options = this.options;
	        if (options.vertical) {
	            this.groupAxis = X;
	            this.elementAxis = Y;
	            this.groupSizeField = WIDTH;
	            this.elementSizeField = HEIGHT;
	            this.groupSpacing = options.spacing;
	            this.elementSpacing = options.vSpacing;
	        } else {
	            this.groupAxis = Y;
	            this.elementAxis = X;
	            this.groupSizeField = HEIGHT;
	            this.elementSizeField = WIDTH;
	            this.groupSpacing = options.vSpacing;
	            this.elementSpacing = options.spacing;
	        }
	    },

	    reflow: function(targetBox) {
	        this.box = targetBox.clone();
	        this.reflowChildren();
	    },

	    reflowChildren: function() {
	        var this$1 = this;

	        var ref = this;
	        var box = ref.box;
	        var elementAxis = ref.elementAxis;
	        var groupAxis = ref.groupAxis;
	        var elementSizeField = ref.elementSizeField;
	        var groupSizeField = ref.groupSizeField;
	        var ref$1 = this.groupOptions();
	        var groups = ref$1.groups;
	        var groupsSize = ref$1.groupsSize;
	        var maxGroupElementsSize = ref$1.maxGroupElementsSize;
	        var groupsCount = groups.length;
	        var groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());

	        if (groupsCount) {
	            var groupStart = groupsStart;

	            for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {
	                var group = groups[groupIdx];
	                var groupElements = group.groupElements;
	                var elementStart = box[elementAxis + 1];
	                var groupElementsCount = groupElements.length;

	                for (var idx = 0; idx < groupElementsCount; idx++) {
	                    var element = groupElements[idx];
	                    var elementSize$$1 = this$1.elementSize(element);
	                    var groupElementStart = groupStart + this$1.alignStart(elementSize$$1[groupSizeField], group.groupSize);

	                    var elementBox = new Box();
	                    elementBox[groupAxis + 1] = groupElementStart;
	                    elementBox[groupAxis + 2] = groupElementStart + elementSize$$1[groupSizeField];
	                    elementBox[elementAxis + 1] = elementStart;
	                    elementBox[elementAxis + 2] = elementStart + elementSize$$1[elementSizeField];

	                    element.reflow(elementBox);

	                    elementStart += elementSize$$1[elementSizeField] + this$1.elementSpacing;
	                }
	                groupStart += group.groupSize + this$1.groupSpacing;
	            }
	            box[groupAxis + 1] = groupsStart;
	            box[groupAxis + 2] = groupsStart + groupsSize;
	            box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;
	        }
	    },

	    alignStart: function(size, maxSize) {
	        var start = 0;
	        var align = this.options.align;
	        if (align === RIGHT || align === BOTTOM) {
	            start = maxSize - size;
	        } else if (align === CENTER) {
	            start = (maxSize - size) / 2;
	        }
	        return start;
	    },

	    groupOptions: function() {
	        var this$1 = this;

	        var ref = this;
	        var box = ref.box;
	        var children = ref.children;
	        var elementSizeField = ref.elementSizeField;
	        var groupSizeField = ref.groupSizeField;
	        var elementSpacing = ref.elementSpacing;
	        var groupSpacing = ref.groupSpacing;
	        var maxSize = round(box[elementSizeField]());
	        var childrenCount = children.length;
	        var groups = [];

	        var groupSize = 0;
	        var groupElementsSize = 0;
	        var groupsSize = 0;
	        var maxGroupElementsSize = 0;
	        var groupElements = [];

	        for (var idx = 0; idx < childrenCount; idx++) {
	            var element = children[idx];
	            if (!element.box) {
	                element.reflow(box);
	            }

	            var elementSize$$1 = this$1.elementSize(element);
	            if (this$1.options.wrap && round(groupElementsSize + elementSpacing + elementSize$$1[elementSizeField]) > maxSize) {
	                groups.push({
	                    groupElements: groupElements,
	                    groupSize: groupSize,
	                    groupElementsSize: groupElementsSize
	                });
	                maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
	                groupsSize += groupSpacing + groupSize;
	                groupSize = 0;
	                groupElementsSize = 0;
	                groupElements = [];
	            }
	            groupSize = Math.max(groupSize, elementSize$$1[groupSizeField]);
	            if (groupElementsSize > 0) {
	                groupElementsSize += elementSpacing;
	            }
	            groupElementsSize += elementSize$$1[elementSizeField];
	            groupElements.push(element);
	        }

	        groups.push({
	            groupElements: groupElements,
	            groupSize: groupSize,
	            groupElementsSize: groupElementsSize
	        });
	        maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
	        groupsSize += groupSize;

	        return {
	            groups: groups,
	            groupsSize: groupsSize,
	            maxGroupElementsSize: maxGroupElementsSize
	        };
	    },

	    elementSize: function(element) {
	        return {
	            width: element.box.width(),
	            height: element.box.height()
	        };
	    },

	    createVisual: function() {}
	});

	setDefaultOptions(FloatElement, {
	    vertical: true,
	    wrap: true,
	    vSpacing: 0,
	    spacing: 0
	});

	var DrawingText = drawing.Text;

	var Text = ChartElement.extend({
	    init: function(content, options) {
	        ChartElement.fn.init.call(this, options);

	        this.content = content;

	        // Calculate size
	        this.reflow(new Box());
	    },

	    reflow: function(targetBox) {
	        var options = this.options;
	        var size = options.size = util.measureText(this.content, { font: options.font });

	        this.baseline = size.baseline;

	        this.box = new Box(targetBox.x1, targetBox.y1,
	                targetBox.x1 + size.width, targetBox.y1 + size.height);
	    },

	    createVisual: function() {
	        var ref = this.options;
	        var font = ref.font;
	        var color = ref.color;
	        var opacity = ref.opacity;
	        var cursor = ref.cursor;

	        this.visual = new DrawingText(this.content, this.box.toRect().topLeft(), {
	            font: font,
	            fill: { color: color, opacity: opacity },
	            cursor: cursor
	        });
	    }
	});

	setDefaultOptions(Text, {
	    font: DEFAULT_FONT,
	    color: BLACK
	});

	function rectToBox(rect) {
	    var origin = rect.origin;
	    var bottomRight = rect.bottomRight();

	    return new Box(origin.x, origin.y, bottomRight.x, bottomRight.y);
	}

	var ROWS_SPLIT_REGEX = /\n/m;

	var TextBox = BoxElement.extend({
	    init: function(content, options) {
	        BoxElement.fn.init.call(this, options);
	        this.content = content;

	        this._initContainer();
	        if (this.options._autoReflow !== false) {
	            this.reflow(new Box());
	        }
	    },

	    _initContainer: function() {
	        var options = this.options;
	        var rows = String(this.content).split(ROWS_SPLIT_REGEX);
	        var floatElement = new FloatElement({ vertical: true, align: options.align, wrap: false });
	        var textOptions = deepExtend({ }, options, { opacity: 1, animation: null });

	        this.container = floatElement;
	        this.append(floatElement);

	        for (var rowIdx = 0; rowIdx < rows.length; rowIdx++) {
	            var text = new Text(rows[rowIdx].trim(), textOptions);
	            floatElement.append(text);
	        }
	    },

	    reflow: function(targetBox) {
	        var options = this.options;
	        var visualFn = options.visual;
	        this.container.options.align = options.align;

	        if (visualFn && !this._boxReflow) {
	            var visualBox = targetBox;
	            if (!visualBox.hasSize()) {
	                this._boxReflow = true;
	                this.reflow(visualBox);
	                this._boxReflow = false;
	                visualBox = this.box;
	            }
	            var visual = this.visual = visualFn(this.visualContext(visualBox));

	            if (visual) {
	                visualBox = rectToBox(visual.clippedBBox() || new Rect());

	                visual.options.zIndex = options.zIndex;
	            }

	            this.box = this.contentBox = this.paddingBox = visualBox;
	        } else {
	            BoxElement.fn.reflow.call(this, targetBox);

	            if (options.rotation) {
	                var margin = getSpacing(options.margin);
	                var box = this.box.unpad(margin);

	                this.targetBox = targetBox;
	                this.normalBox = box.clone();

	                box = this.rotate();
	                box.translate(margin.left - margin.right, margin.top - margin.bottom);

	                this.rotatedBox = box.clone();

	                box.pad(margin);
	            }
	        }
	    },

	    createVisual: function() {
	        var options = this.options;

	        if (!options.visible) {
	            return;
	        }

	        this.visual = new Group({
	            transform: this.rotationTransform(),
	            zIndex: options.zIndex,
	            noclip: options.noclip
	        });

	        if (this.hasBox()) {
	            var box = Path.fromRect(this.paddingBox.toRect(), this.visualStyle());
	            this.visual.append(box);
	        }
	    },

	    renderVisual: function() {
	        if (this.options.visual) {
	            var visual = this.visual;
	            if (visual && !defined(visual.options.noclip)) {
	                visual.options.noclip = this.options.noclip;
	            }
	            this.addVisual();
	            this.createAnimation();
	        } else {
	            BoxElement.fn.renderVisual.call(this);
	        }
	    },

	    visualOptions: function() {
	        var options = this.options;
	        return {
	            background: options.background,
	            border: options.border,
	            color: options.color,
	            font: options.font,
	            margin: options.margin,
	            padding: options.padding,
	            visible: options.visible
	        };
	    },

	    visualContext: function(targetBox) {
	        var this$1 = this;

	        return {
	            text: this.content,
	            rect: targetBox.toRect(),
	            sender: this.getSender(),
	            options: this.visualOptions(),
	            createVisual: function () {
	                this$1._boxReflow = true;
	                this$1.reflow(targetBox);
	                this$1._boxReflow = false;
	                return this$1.getDefaultVisual();
	            }
	        };
	    },

	    getDefaultVisual: function() {
	        this.createVisual();
	        this.renderChildren();
	        var visual = this.visual;
	        delete this.visual;
	        return visual;
	    },

	    rotate: function() {
	        var options = this.options;
	        this.box.rotate(options.rotation);
	        this.align(this.targetBox, X, options.align);
	        this.align(this.targetBox, Y, options.vAlign);
	        return this.box;
	    },

	    rotationTransform: function() {
	        var rotation = this.options.rotation;
	        if (!rotation) {
	            return null;
	        }

	        var ref = this.normalBox.center();
	        var cx = ref.x;
	        var cy = ref.y;
	        var boxCenter = this.rotatedBox.center();

	        return geometryTransform()
	                   .translate(boxCenter.x - cx, boxCenter.y - cy)
	                   .rotate(rotation, [ cx, cy ]);
	    }
	});

	var Title = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);

	        this.append(
	            new TextBox(this.options.text, $.extend({}, this.options, {
	                vAlign: this.options.position
	            }))
	        );
	    },

	    reflow: function(targetBox) {
	        ChartElement.fn.reflow.call(this, targetBox);
	        this.box.snapTo(targetBox, X);
	    }
	});

	Title.buildTitle = function(options, parent, defaultOptions) {
	    var titleOptions = options;

	    if (typeof options === "string") {
	        titleOptions = { text: options };
	    }

	    titleOptions = $.extend({ visible: true }, defaultOptions, titleOptions);

	    var title;
	    if (titleOptions && titleOptions.visible && titleOptions.text) {
	        title = new Title(titleOptions);
	        parent.append(title);
	    }

	    return title;
	};

	setDefaultOptions(Title, {
	    color: BLACK,
	    position: TOP,
	    align: CENTER,
	    margin: getSpacing(5),
	    padding: getSpacing(5)
	});

	var AxisLabel = TextBox.extend({
	    init: function(value, text, index, dataItem, options) {
	        TextBox.fn.init.call(this, text, options);

	        this.text = text;
	        this.value = value;
	        this.index = index;
	        this.dataItem = dataItem;
	        this.reflow(new Box());
	    },

	    visualContext: function(targetBox) {
	        var context = TextBox.fn.visualContext.call(this, targetBox);

	        context.value = this.value;
	        context.dataItem = this.dataItem;
	        context.format = this.options.format;
	        context.culture = this.options.culture;

	        return context;
	    },

	    click: function(widget, e) {

	        widget.trigger(AXIS_LABEL_CLICK, {
	            element: eventElement(e),
	            value: this.value,
	            text: this.text,
	            index: this.index,
	            dataItem: this.dataItem,
	            axis: this.parent.options
	        });
	    },

	    rotate: function() {
	        if (this.options.alignRotation !== CENTER) {
	            var box = this.normalBox.toRect();
	            var transform = this.rotationTransform();

	            this.box = rectToBox(box.bbox(transform.matrix()));
	        } else {
	            TextBox.fn.rotate.call(this);
	        }

	        return this.box;
	    },

	    rotationTransform: function() {
	        var options = this.options;
	        var rotation = options.rotation;
	        if (!rotation) {
	            return null;
	        }

	        if (options.alignRotation === CENTER) {
	            return TextBox.fn.rotationTransform.call(this);
	        }

	        var rotationMatrix = geometryTransform().rotate(rotation).matrix();
	        var box = this.normalBox.toRect();
	        var rect = this.targetBox.toRect();

	        var rotationOrigin = options.rotationOrigin || TOP;
	        var alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;
	        var distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;
	        var axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();

	        var topLeft = box.topLeft().transformCopy(rotationMatrix);
	        var topRight = box.topRight().transformCopy(rotationMatrix);
	        var bottomRight = box.bottomRight().transformCopy(rotationMatrix);
	        var bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);
	        var rotatedBox = Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);

	        var translate = {};
	        translate[distanceAxis] = rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis];

	        var distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);
	        var distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);

	        var alignStart, alignEnd;

	        if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {
	            alignStart = topLeft;
	            alignEnd = topRight;
	        } else if (distanceRight < distanceLeft) {
	            alignStart = topRight;
	            alignEnd = bottomRight;
	        } else {
	            alignStart = topLeft;
	            alignEnd = bottomLeft;
	        }

	        var alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;
	        translate[alignAxis] = rect.center()[alignAxis] - alignCenter;

	        return geometryTransform()
	            .translate(translate.x, translate.y)
	            .rotate(rotation);
	    }
	});

	setDefaultOptions(AxisLabel, {
	    _autoReflow: false
	});

	var DEFAULT_ICON_SIZE = 7;
	var DEFAULT_LABEL_COLOR = "#fff";

	var Note = BoxElement.extend({
	    init: function(fields, options, chartService) {
	        BoxElement.fn.init.call(this, options);

	        this.fields = fields;
	        this.chartService = chartService;

	        this.render();
	    },

	    hide: function() {
	        this.options.visible = false;
	    },

	    show: function() {
	        this.options.visible = true;
	    },

	    render: function() {
	        var options = this.options;

	        if (options.visible) {
	            var label = options.label;
	            var icon = options.icon;
	            var box = new Box();
	            var size = icon.size;
	            var text = this.fields.text;
	            var width, height;

	            if (defined(label) && label.visible) {
	                var noteTemplate = getTemplate(label);
	                if (noteTemplate) {
	                    text = noteTemplate(this.fields);
	                } else if (label.format) {
	                    text = this.chartService.format.auto(label.format, text);
	                }

	                if (!label.color) {
	                    label.color = label.position === INSIDE ? DEFAULT_LABEL_COLOR : icon.background;
	                }

	                this.label = new TextBox(text, deepExtend({}, label));

	                if (label.position === INSIDE && !defined(size)) {
	                    if (icon.type === CIRCLE) {
	                        size = Math.max(this.label.box.width(), this.label.box.height());
	                    } else {
	                        width = this.label.box.width();
	                        height = this.label.box.height();
	                    }
	                    box.wrap(this.label.box);
	                }
	            }

	            icon.width = width || size || DEFAULT_ICON_SIZE;
	            icon.height = height || size || DEFAULT_ICON_SIZE;

	            var marker = new ShapeElement(deepExtend({}, icon));

	            this.marker = marker;
	            this.append(marker);

	            if (this.label) {
	                this.append(this.label);
	            }

	            marker.reflow(new Box());
	            this.wrapperBox = box.wrap(marker.box);
	        }
	    },

	    reflow: function(targetBox) {
	        var ref = this;
	        var options = ref.options;
	        var label = ref.label;
	        var marker = ref.marker;
	        var wrapperBox = ref.wrapperBox;
	        var center = targetBox.center();
	        var length = options.line.length;
	        var position = options.position;

	        // TODO: Review
	        if (options.visible) {
	            var lineStart, box, contentBox;

	            if (inArray(position, [ LEFT, RIGHT ])) {
	                if (position === LEFT) {
	                    contentBox = wrapperBox.alignTo(targetBox, position).translate(-length, targetBox.center().y - wrapperBox.center().y);

	                    if (options.line.visible) {
	                        lineStart = [ targetBox.x1, center.y ];
	                        this.linePoints = [
	                            lineStart,
	                            [ contentBox.x2, center.y ]
	                        ];
	                        box = contentBox.clone().wrapPoint(lineStart);
	                    }
	                } else {
	                    contentBox = wrapperBox.alignTo(targetBox, position).translate(length, targetBox.center().y - wrapperBox.center().y);

	                    if (options.line.visible) {
	                        lineStart = [ targetBox.x2, center.y ];
	                        this.linePoints = [
	                            lineStart,
	                            [ contentBox.x1, center.y ]
	                        ];
	                        box = contentBox.clone().wrapPoint(lineStart);
	                    }
	                }
	            } else {
	                if (position === BOTTOM) {
	                    contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, length);

	                    if (options.line.visible) {
	                        lineStart = [ center.x, targetBox.y2 ];
	                        this.linePoints = [
	                            lineStart,
	                            [ center.x, contentBox.y1 ]
	                        ];
	                        box = contentBox.clone().wrapPoint(lineStart);
	                    }
	                } else {
	                    contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, -length);

	                    if (options.line.visible) {
	                        lineStart = [ center.x, targetBox.y1 ];
	                        this.linePoints = [
	                            lineStart,
	                            [ center.x, contentBox.y2 ]
	                        ];
	                        box = contentBox.clone().wrapPoint(lineStart);
	                    }
	                }
	            }

	            if (marker) {
	                marker.reflow(contentBox);
	            }

	            if (label) {
	                label.reflow(contentBox);
	                if (marker) {
	                    if (options.label.position === OUTSIDE) {
	                        label.box.alignTo(marker.box, position);
	                    }
	                    label.reflow(label.box);
	                }
	            }

	            this.contentBox = contentBox;
	            this.targetBox = targetBox;
	            this.box = box || contentBox;
	        }
	    },

	    createVisual: function() {
	        BoxElement.fn.createVisual.call(this);
	        this.visual.options.noclip = this.options.noclip;

	        if (this.options.visible) {
	            this.createLine();
	        }
	    },

	    renderVisual: function() {
	        var this$1 = this;

	        var options = this.options;
	        var customVisual = options.visual;
	        if (options.visible && customVisual) {
	            this.visual = customVisual($.extend(this.fields, {
	                sender: this.getSender(),
	                rect: this.targetBox.toRect(),
	                options: {
	                    background: options.background,
	                    border: options.background,
	                    icon: options.icon,
	                    label: options.label,
	                    line: options.line,
	                    position: options.position,
	                    visible: options.visible
	                },
	                createVisual: function () {
	                    this$1.createVisual();
	                    this$1.renderChildren();
	                    var defaultVisual = this$1.visual;
	                    delete this$1.visual;
	                    return defaultVisual;
	                }
	            }));
	            this.addVisual();
	        } else {
	            BoxElement.fn.renderVisual.call(this);
	        }
	    },

	    createLine: function() {
	        var options = this.options.line;

	        if (this.linePoints) {
	            var path = Path.fromPoints(this.linePoints, {
	                stroke: {
	                    color: options.color,
	                    width: options.width,
	                    dashType: options.dashType
	                }
	            });

	            alignPathToPixel(path);
	            this.visual.append(path);
	        }
	    },

	    click: function(widget, e) {
	        var args = this.eventArgs(e);

	        if (!widget.trigger(NOTE_CLICK, args)) {
	            e.preventDefault();
	        }
	    },

	    hover: function(widget, e) {
	        var args = this.eventArgs(e);

	        if (!widget.trigger(NOTE_HOVER, args)) {
	            e.preventDefault();
	        }
	    },

	    leave: function(widget) {
	        widget._unsetActivePoint();
	    },

	    eventArgs: function(e) {
	        var options = this.options;

	        return $.extend(this.fields, {
	            element: eventElement(e),
	            text: defined(options.label) ? options.label.text : "",
	            visual: this.visual
	        });
	    }
	});

	setDefaultOptions(Note, {
	    icon: {
	        visible: true,
	        type: CIRCLE
	    },
	    label: {
	        position: INSIDE,
	        visible: true,
	        align: CENTER,
	        vAlign: CENTER
	    },
	    line: {
	        visible: true
	    },
	    visible: true,
	    position: TOP,
	    zIndex: 2
	});

	function createAxisTick(options, tickOptions) {
	    var tickX = options.tickX;
	    var tickY = options.tickY;
	    var position = options.position;

	    var tick = new Path({
	        stroke: {
	            width: tickOptions.width,
	            color: tickOptions.color
	        }
	    });

	    if (options.vertical) {
	        tick.moveTo(tickX, position)
	            .lineTo(tickX + tickOptions.size, position);
	    } else {
	        tick.moveTo(position, tickY)
	            .lineTo(position, tickY + tickOptions.size);
	    }

	    alignPathToPixel(tick);

	    return tick;
	}

	function createAxisGridLine(options, gridLine) {
	    var lineStart = options.lineStart;
	    var lineEnd = options.lineEnd;
	    var position = options.position;

	    var line = new Path({
	        stroke: {
	            width: gridLine.width,
	            color: gridLine.color,
	            dashType: gridLine.dashType
	        }
	    });

	    if (options.vertical) {
	        line.moveTo(lineStart, position)
	            .lineTo(lineEnd, position);
	    } else {
	        line.moveTo(position, lineStart)
	            .lineTo(position, lineEnd);
	    }

	    alignPathToPixel(line);

	    return line;
	}

	var Axis = ChartElement.extend({
	    init: function(options, chartService) {
	        if (chartService === void 0) { chartService = new ChartService(); }

	        ChartElement.fn.init.call(this, options);

	        this.chartService = chartService;

	        if (!this.options.visible) {
	            this.options = deepExtend({}, this.options, {
	                labels: {
	                    visible: false
	                },
	                line: {
	                    visible: false
	                },
	                margin: 0,
	                majorTickSize: 0,
	                minorTickSize: 0
	            });
	        }

	        this.options.minorTicks = deepExtend({}, {
	            color: this.options.line.color,
	            width: this.options.line.width,
	            visible: this.options.minorTickType !== NONE
	        }, this.options.minorTicks, {
	            size: this.options.minorTickSize,
	            align: this.options.minorTickType
	        });

	        this.options.majorTicks = deepExtend({}, {
	            color: this.options.line.color,
	            width: this.options.line.width,
	            visible: this.options.majorTickType !== NONE
	        }, this.options.majorTicks, {
	            size: this.options.majorTickSize,
	            align: this.options.majorTickType
	        });

	        if (!this.options._deferLabels) {
	            this.createLabels();
	        }

	        this.createTitle();
	        this.createNotes();
	    },

	    labelsRange: function() {
	        return {
	            min: this.options.labels.skip,
	            max: this.labelsCount()
	        };
	    },

	    createLabels: function() {
	        var this$1 = this;

	        var options = this.options;
	        var align = options.vertical ? RIGHT : CENTER;
	        var labelOptions = deepExtend({ }, options.labels, {
	            align: align,
	            zIndex: options.zIndex
	        });
	        var step = Math.max(1, labelOptions.step);

	        this.children = grep(this.children, function (child) { return !(child instanceof AxisLabel); });

	        this.labels = [];

	        if (labelOptions.visible) {
	            var range = this.labelsRange();
	            var rotation = labelOptions.rotation;

	            if (isObject(rotation)) {
	                labelOptions.alignRotation = rotation.align;
	                labelOptions.rotation = rotation.angle;
	            }

	            if (labelOptions.rotation === "auto") {
	                labelOptions.rotation = 0;
	                options.autoRotateLabels = true;
	            }

	            for (var idx = range.min; idx < range.max; idx += step) {
	                var label = this$1.createAxisLabel(idx, labelOptions);
	                if (label) {
	                    this$1.append(label);
	                    this$1.labels.push(label);
	                }
	            }
	        }
	    },

	    lineBox: function() {
	        var ref = this;
	        var options = ref.options;
	        var box = ref.box;
	        var vertical = options.vertical;
	        var mirror = options.labels.mirror;
	        var axisX = mirror ? box.x1 : box.x2;
	        var axisY = mirror ? box.y2 : box.y1;
	        var lineWidth = options.line.width || 0;

	        return vertical ?
	            new Box(axisX, box.y1, axisX, box.y2 - lineWidth) :
	            new Box(box.x1, axisY, box.x2 - lineWidth, axisY);
	    },

	    createTitle: function() {
	        var options = this.options;
	        var titleOptions = deepExtend({
	            rotation: options.vertical ? -90 : 0,
	            text: "",
	            zIndex: 1,
	            visualSize: true
	        }, options.title);

	        if (titleOptions.visible && titleOptions.text) {
	            var title = new TextBox(titleOptions.text, titleOptions);
	            this.append(title);
	            this.title = title;
	        }
	    },

	    createNotes: function() {
	        var this$1 = this;

	        var options = this.options;
	        var notes = options.notes;
	        var items = notes.data || [];

	        this.notes = [];

	        for (var i = 0; i < items.length; i++) {
	            var item = deepExtend({}, notes, items[i]);
	            item.value = this$1.parseNoteValue(item.value);

	            var note = new Note({
	                value: item.value,
	                text: item.label.text,
	                dataItem: item
	            }, item, this$1.chartService);

	            if (note.options.visible) {
	                if (defined(note.options.position)) {
	                    if (options.vertical && !inArray(note.options.position, [ LEFT, RIGHT ])) {
	                        note.options.position = options.reverse ? LEFT : RIGHT;
	                    } else if (!options.vertical && !inArray(note.options.position, [ TOP, BOTTOM ])) {
	                        note.options.position = options.reverse ? BOTTOM : TOP;
	                    }
	                } else {
	                    if (options.vertical) {
	                        note.options.position = options.reverse ? LEFT : RIGHT;
	                    } else {
	                        note.options.position = options.reverse ? BOTTOM : TOP;
	                    }
	                }
	                this$1.append(note);
	                this$1.notes.push(note);
	            }
	        }
	    },

	    parseNoteValue: function(value) {
	        return value;
	    },

	    renderVisual: function() {
	        ChartElement.fn.renderVisual.call(this);

	        this.createPlotBands();
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        this.createBackground();
	        this.createLine();
	    },

	    gridLinesVisual: function() {
	        var gridLines = this._gridLines;
	        if (!gridLines) {
	            gridLines = this._gridLines = new Group({
	                zIndex: -2
	            });
	            this.appendVisual(this._gridLines);
	        }

	        return gridLines;
	    },

	    createTicks: function(lineGroup) {
	        var options = this.options;
	        var lineBox = this.lineBox();
	        var mirror = options.labels.mirror;
	        var majorUnit = options.majorTicks.visible ? options.majorUnit : 0;
	        var tickLineOptions = {
	            // TODO
	            // _alignLines: options._alignLines,
	            vertical: options.vertical
	        };

	        function render(tickPositions, tickOptions, skipUnit) {
	            var count = tickPositions.length;
	            var step = Math.max(1, tickOptions.step);

	            if (tickOptions.visible) {
	                for (var i = tickOptions.skip; i < count; i += step) {
	                    if (defined(skipUnit) && (i % skipUnit === 0)) {
	                        continue;
	                    }

	                    tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;
	                    tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;
	                    tickLineOptions.position = tickPositions[i];

	                    lineGroup.append(createAxisTick(tickLineOptions, tickOptions));
	                }
	            }
	        }

	        render(this.getMajorTickPositions(), options.majorTicks);
	        render(this.getMinorTickPositions(), options.minorTicks, majorUnit / options.minorUnit);
	    },

	    createLine: function() {
	        var options = this.options;
	        var line = options.line;
	        var lineBox = this.lineBox();

	        if (line.width > 0 && line.visible) {
	            var path = new Path({
	                stroke: {
	                    width: line.width,
	                    color: line.color,
	                    dashType: line.dashType
	                }

	                /* TODO
	                zIndex: line.zIndex,
	                */
	            });

	            path.moveTo(lineBox.x1, lineBox.y1)
	                .lineTo(lineBox.x2, lineBox.y2);

	            if (options._alignLines) {
	                alignPathToPixel(path);
	            }

	            var group = this._lineGroup = new Group();
	            group.append(path);

	            this.visual.append(group);
	            this.createTicks(group);
	        }
	    },

	    getActualTickSize: function() {
	        var options = this.options;
	        var tickSize = 0;

	        if (options.majorTicks.visible && options.minorTicks.visible) {
	            tickSize = Math.max(options.majorTicks.size, options.minorTicks.size);
	        } else if (options.majorTicks.visible) {
	            tickSize = options.majorTicks.size;
	        } else if (options.minorTicks.visible) {
	            tickSize = options.minorTicks.size;
	        }

	        return tickSize;
	    },

	    createBackground: function() {
	        var ref = this;
	        var options = ref.options;
	        var box = ref.box;
	        var background = options.background;

	        if (background) {
	            this._backgroundPath = Path.fromRect(box.toRect(), {
	                fill: {
	                    color: background
	                },
	                stroke: null
	            });

	            this.visual.append(this._backgroundPath);
	        }
	    },

	    createPlotBands: function() {
	        var this$1 = this;

	        var options = this.options;
	        var plotBands = options.plotBands || [];
	        var vertical = options.vertical;
	        var plotArea = this.plotArea;

	        if (plotBands.length === 0) {
	            return;
	        }

	        var group = this._plotbandGroup = new Group({
	            zIndex: -1
	        });

	        var altAxis = grep(this.pane.axes, function (axis) { return axis.options.vertical !== this$1.options.vertical; })[0];

	        for (var idx = 0; idx < plotBands.length; idx++) {
	            var item = plotBands[idx];
	            var slotX = (void 0), slotY = (void 0);

	            if (vertical) {
	                slotX = (altAxis || plotArea.axisX).lineBox();
	                slotY = this$1.getSlot(item.from, item.to, true);
	            } else {
	                slotX = this$1.getSlot(item.from, item.to, true);
	                slotY = (altAxis || plotArea.axisY).lineBox();
	            }

	            if (slotX.width() !== 0 && slotY.height() !== 0) {
	                var bandRect = new Rect(
	                    [ slotX.x1, slotY.y1 ],
	                    [ slotX.width(), slotY.height() ]
	                );

	                var path = Path.fromRect(bandRect, {
	                    fill: {
	                        color: item.color,
	                        opacity: item.opacity
	                    },
	                    stroke: null
	                });

	                group.append(path);
	            }
	        }

	        this.appendVisual(group);
	    },

	    createGridLines: function(altAxis) {
	        var options = this.options;
	        var minorGridLines = options.minorGridLines;
	        var majorGridLines = options.majorGridLines;
	        var minorUnit = options.minorUnit;
	        var vertical = options.vertical;
	        var axisLineVisible = altAxis.options.line.visible;
	        var majorUnit = majorGridLines.visible ? options.majorUnit : 0;
	        var lineBox = altAxis.lineBox();
	        var linePos = lineBox[vertical ? "y1" : "x1"];
	        var lineOptions = {
	            lineStart: lineBox[vertical ? "x1" : "y1"],
	            lineEnd: lineBox[vertical ? "x2" : "y2"],
	            vertical: vertical
	        };
	        var majorTicks = [];

	        var container = this.gridLinesVisual();

	        function render(tickPositions, gridLine, skipUnit) {
	            var count = tickPositions.length;
	            var step = Math.max(1, gridLine.step);

	            if (gridLine.visible) {
	                for (var i = gridLine.skip; i < count; i += step) {
	                    var pos = round(tickPositions[i]);
	                    if (!inArray(pos, majorTicks)) {
	                        if (i % skipUnit !== 0 && (!axisLineVisible || linePos !== pos)) {
	                            lineOptions.position = pos;
	                            container.append(createAxisGridLine(lineOptions, gridLine));

	                            majorTicks.push(pos);
	                        }
	                    }
	                }
	            }
	        }

	        render(this.getMajorTickPositions(), majorGridLines);
	        render(this.getMinorTickPositions(), minorGridLines, majorUnit / minorUnit);

	        return container.children;
	    },

	    reflow: function(box) {
	        var ref = this;
	        var options = ref.options;
	        var labels = ref.labels;
	        var title = ref.title;
	        var vertical = options.vertical;
	        var count = labels.length;
	        var sizeFn = vertical ? WIDTH : HEIGHT;
	        var titleSize = title ? title.box[sizeFn]() : 0;
	        var space = this.getActualTickSize() + options.margin + titleSize;
	        var rootBox = (this.getRoot() || {}).box || box;
	        var boxSize = rootBox[sizeFn]();
	        var maxLabelSize = 0;

	        for (var i = 0; i < count; i++) {
	            var labelSize = labels[i].box[sizeFn]();
	            if (labelSize + space <= boxSize) {
	                maxLabelSize = Math.max(maxLabelSize, labelSize);
	            }
	        }

	        if (vertical) {
	            this.box = new Box(
	                box.x1, box.y1,
	                box.x1 + maxLabelSize + space, box.y2
	            );
	        } else {
	            this.box = new Box(
	                box.x1, box.y1,
	                box.x2, box.y1 + maxLabelSize + space
	            );
	        }

	        this.arrangeTitle();
	        this.arrangeLabels();
	        this.arrangeNotes();
	    },

	    getLabelsTickPositions: function() {
	        return this.getMajorTickPositions();
	    },

	    labelTickIndex: function(label) {
	        return label.index;
	    },

	    arrangeLabels: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var labels = ref.labels;
	        var labelsBetweenTicks = !options.justified;
	        var vertical = options.vertical;
	        var lineBox = this.lineBox();
	        var mirror = options.labels.mirror;
	        var tickPositions = this.getLabelsTickPositions();
	        var labelOffset = this.getActualTickSize() + options.margin;

	        for (var idx = 0; idx < labels.length; idx++) {
	            var label = labels[idx];
	            var tickIx = this$1.labelTickIndex(label);
	            var labelSize = vertical ? label.box.height() : label.box.width();
	            var labelPos = tickPositions[tickIx] - (labelSize / 2);
	            var labelBox = (void 0), firstTickPosition = (void 0), nextTickPosition = (void 0);

	            if (vertical) {
	                if (labelsBetweenTicks) {
	                    firstTickPosition = tickPositions[tickIx];
	                    nextTickPosition = tickPositions[tickIx + 1];

	                    var middle = firstTickPosition + (nextTickPosition - firstTickPosition) / 2;
	                    labelPos = middle - (labelSize / 2);
	                }

	                var labelX = lineBox.x2;

	                if (mirror) {
	                    labelX += labelOffset;
	                    label.options.rotationOrigin = LEFT;
	                } else {
	                    labelX -= labelOffset + label.box.width();
	                    label.options.rotationOrigin = RIGHT;
	                }

	                labelBox = label.box.move(labelX, labelPos);
	            } else {
	                if (labelsBetweenTicks) {
	                    firstTickPosition = tickPositions[tickIx];
	                    nextTickPosition = tickPositions[tickIx + 1];
	                } else {
	                    firstTickPosition = labelPos;
	                    nextTickPosition = labelPos + labelSize;
	                }

	                var labelY = lineBox.y1;

	                if (mirror) {
	                    labelY -= labelOffset + label.box.height();
	                    label.options.rotationOrigin = BOTTOM;
	                } else {
	                    labelY += labelOffset;
	                    label.options.rotationOrigin = TOP;
	                }

	                labelBox = new Box(firstTickPosition, labelY,
	                                nextTickPosition, labelY + label.box.height());
	            }

	            label.reflow(labelBox);
	        }
	    },

	    autoRotateLabels: function() {
	        if (this.options.autoRotateLabels && !this.options.vertical) {
	            var tickPositions = this.getMajorTickPositions();
	            var labels = this.labels;
	            var angle;

	            for (var idx = 0; idx < labels.length; idx++) {
	                var width = Math.abs(tickPositions[idx + 1] - tickPositions[idx]);
	                var labelBox = labels[idx].box;

	                if (labelBox.width() > width) {
	                    if (labelBox.height() > width) {
	                        angle = -90;
	                        break;
	                    }
	                    angle = -45;
	                }
	            }

	            if (angle) {
	                for (var idx$1 = 0; idx$1 < labels.length; idx$1++) {
	                    labels[idx$1].options.rotation = angle;
	                    labels[idx$1].reflow(new Box());
	                }
	                return true;
	            }
	        }
	    },

	    arrangeTitle: function() {
	        var ref = this;
	        var options = ref.options;
	        var title = ref.title;
	        var mirror = options.labels.mirror;
	        var vertical = options.vertical;

	        if (title) {
	            if (vertical) {
	                title.options.align = mirror ? RIGHT : LEFT;
	                title.options.vAlign = title.options.position;
	            } else {
	                title.options.align = title.options.position;
	                title.options.vAlign = mirror ? TOP : BOTTOM;
	            }

	            title.reflow(this.box);
	        }
	    },

	    arrangeNotes: function() {
	        var this$1 = this;

	        for (var idx = 0; idx < this.notes.length; idx++) {
	            var item = this$1.notes[idx];
	            var value = item.options.value;
	            var slot = (void 0);

	            if (defined(value)) {
	                if (this$1.shouldRenderNote(value)) {
	                    item.show();
	                } else {
	                    item.hide();
	                }

	                slot = this$1.noteSlot(value);
	            } else {
	                item.hide();
	            }

	            item.reflow(slot || this$1.lineBox());
	        }
	    },

	    noteSlot: function(value) {
	        return this.getSlot(value);
	    },

	    alignTo: function(secondAxis) {
	        var lineBox = secondAxis.lineBox();
	        var vertical = this.options.vertical;
	        var pos = vertical ? Y : X;

	        this.box.snapTo(lineBox, pos);
	        if (vertical) {
	            this.box.shrink(0, this.lineBox().height() - lineBox.height());
	        } else {
	            this.box.shrink(this.lineBox().width() - lineBox.width(), 0);
	        }
	        this.box[pos + 1] -= this.lineBox()[pos + 1] - lineBox[pos + 1];
	        this.box[pos + 2] -= this.lineBox()[pos + 2] - lineBox[pos + 2];
	    },

	    axisLabelText: function(value, dataItem, options) {
	        var tmpl = getTemplate(options);
	        var text = value;

	        if (tmpl) {
	            text = tmpl({ value: value, dataItem: dataItem, format: options.format, culture: options.culture });
	        } else if (options.format) {
	            text = this.chartService.format.localeAuto(options.format, [ value ], options.culture);
	        }

	        return text;
	    },

	    slot: function(from , to, limit) {
	        var slot = this.getSlot(from, to, limit);
	        if (slot) {
	            return slot.toRect();
	        }
	    },

	    contentBox: function() {
	        var box = this.box.clone();
	        var labels = this.labels;
	        if (labels.length) {
	            if (labels[0].options.visible) {
	                box.wrap(labels[0].box);
	            }
	            var lastLabel = labels[labels.length - 1];
	            if (lastLabel.options.visible) {
	                box.wrap(lastLabel.box);
	            }
	        }

	        return box;
	    },

	    limitRange: function(from, to, min, max, offset) {
	        var options = this.options;

	        if ((from < min && offset < 0 && (!defined(options.min) || options.min <= min)) || (max < to && offset > 0 && (!defined(options.max) || max <= options.max))) {
	            return null;
	        }

	        if ((to < min && offset > 0) || (max < from && offset < 0)) {
	            return {
	                min: from,
	                max: to
	            };
	        }

	        var rangeSize = to - from;
	        var minValue = from;
	        var maxValue = to;

	        if (from < min) {
	            minValue = limitValue(from, min, max);
	            maxValue = limitValue(from + rangeSize, min + rangeSize, max);
	        } else if (to > max) {
	            maxValue = limitValue(to, min, max);
	            minValue = limitValue(to - rangeSize, min, max - rangeSize);
	        }

	        return {
	            min: minValue,
	            max: maxValue
	        };
	    },

	    valueRange: function() {
	        return {
	            min: this.seriesMin,
	            max: this.seriesMax
	        };
	    }
	});

	setDefaultOptions(Axis, {
	    labels: {
	        visible: true,
	        rotation: 0,
	        mirror: false,
	        step: 1,
	        skip: 0
	    },
	    line: {
	        width: 1,
	        color: BLACK,
	        visible: true
	    },
	    title: {
	        visible: true,
	        position: CENTER
	    },
	    majorTicks: {
	        align: OUTSIDE,
	        size: 4,
	        skip: 0,
	        step: 1
	    },
	    minorTicks: {
	        align: OUTSIDE,
	        size: 3,
	        skip: 0,
	        step: 1
	    },
	    axisCrossingValue: 0,
	    majorTickType: OUTSIDE,
	    minorTickType: NONE,
	    majorGridLines: {
	        skip: 0,
	        step: 1
	    },
	    minorGridLines: {
	        visible: false,
	        width: 1,
	        color: BLACK,
	        skip: 0,
	        step: 1
	    },
	    // TODO: Move to line or labels options
	    margin: 5,
	    visible: true,
	    reverse: false,
	    justified: true,
	    notes: {
	        label: {
	            text: ""
	        }
	    },

	    _alignLines: true,
	    _deferLabels: false
	});

	var MILLISECONDS = "milliseconds";
	var SECONDS = "seconds";
	var MINUTES = "minutes";
	var HOURS = "hours";
	var DAYS = "days";
	var WEEKS = "weeks";
	var MONTHS = "months";
	var YEARS = "years";

	var TIME_PER_MILLISECOND = 1;
	var TIME_PER_SECOND = 1000;
	var TIME_PER_MINUTE = 60 * TIME_PER_SECOND;
	var TIME_PER_HOUR = 60 * TIME_PER_MINUTE;
	var TIME_PER_DAY = 24 * TIME_PER_HOUR;
	var TIME_PER_WEEK = 7 * TIME_PER_DAY;
	var TIME_PER_MONTH = 31 * TIME_PER_DAY;
	var TIME_PER_YEAR = 365 * TIME_PER_DAY;
	var TIME_PER_UNIT = {
	    "years": TIME_PER_YEAR,
	    "months": TIME_PER_MONTH,
	    "weeks": TIME_PER_WEEK,
	    "days": TIME_PER_DAY,
	    "hours": TIME_PER_HOUR,
	    "minutes": TIME_PER_MINUTE,
	    "seconds": TIME_PER_SECOND,
	    "milliseconds": TIME_PER_MILLISECOND
	};

	function absoluteDateDiff(a, b) {
	    var diff = a.getTime() - b;
	    var offsetDiff = a.getTimezoneOffset() - b.getTimezoneOffset();

	    return diff - (offsetDiff * TIME_PER_MINUTE);
	}

	function addTicks(date, ticks) {
	    return new Date(date.getTime() + ticks);
	}

	function toDate(value) {
	    var result;

	    if (value instanceof Date) {
	        result = value;
	    } else if (value) {
	        result = new Date(value);
	    }

	    return result;
	}

	function startOfWeek(date, weekStartDay) {
	    if (weekStartDay === void 0) { weekStartDay = 0; }

	    var daysToSubtract = 0;
	    var day = date.getDay();

	    if (!isNaN(day)) {
	        while (day !== weekStartDay) {
	            if (day === 0) {
	                day = 6;
	            } else {
	                day--;
	            }

	            daysToSubtract++;
	        }
	    }

	    return addTicks(date, -daysToSubtract * TIME_PER_DAY);
	}

	function adjustDST(date, hours) {
	    if (hours === 0 && date.getHours() === 23) {
	        date.setHours(date.getHours() + 2);
	        return true;
	    }

	    return false;
	}

	function addHours(date, hours) {
	    var roundedDate = new Date(date);

	    roundedDate.setMinutes(0, 0, 0);

	    var tzDiff = (date.getTimezoneOffset() - roundedDate.getTimezoneOffset()) * TIME_PER_MINUTE;

	    return addTicks(roundedDate, tzDiff + hours * TIME_PER_HOUR);
	}

	function addDuration(dateValue, value, unit, weekStartDay) {
	    var result = dateValue;

	    if (dateValue) {
	        var date = toDate(dateValue);
	        var hours = date.getHours();

	        if (unit === YEARS) {
	            result = new Date(date.getFullYear() + value, 0, 1);
	            adjustDST(result, 0);
	        } else if (unit === MONTHS) {
	            result = new Date(date.getFullYear(), date.getMonth() + value, 1);
	            adjustDST(result, hours);
	        } else if (unit === WEEKS) {
	            result = addDuration(startOfWeek(date, weekStartDay), value * 7, DAYS);
	            adjustDST(result, hours);
	        } else if (unit === DAYS) {
	            result = new Date(date.getFullYear(), date.getMonth(), date.getDate() + value);
	            adjustDST(result, hours);
	        } else if (unit === HOURS) {
	            result = addHours(date, value);
	        } else if (unit === MINUTES) {
	            result = addTicks(date, value * TIME_PER_MINUTE);

	            if (result.getSeconds() > 0) {
	                result.setSeconds(0);
	            }
	        } else if (unit === SECONDS) {
	            result = addTicks(date, value * TIME_PER_SECOND);
	        } else if (unit === MILLISECONDS) {
	            result = addTicks(date, value);
	        }

	        if (unit !== MILLISECONDS && result.getMilliseconds() > 0) {
	            result.setMilliseconds(0);
	        }
	    }

	    return result;
	}

	function floorDate(date, unit, weekStartDay) {
	    return addDuration(toDate(date), 0, unit, weekStartDay);
	}

	function ceilDate(dateValue, unit, weekStartDay) {
	    var date = toDate(dateValue);

	    if (date && floorDate(date, unit, weekStartDay).getTime() === date.getTime()) {
	        return date;
	    }

	    return addDuration(date, 1, unit, weekStartDay);
	}

	function dateComparer(a, b) {
	    if (a && b) {
	        return a.getTime() - b.getTime();
	    }

	    return -1;
	}

	function dateDiff(a, b) {
	    return a.getTime() - b;
	}

	function toTime(value) {
	    if (isArray(value)) {
	        var result = [];
	        for (var idx = 0; idx < value.length; idx++) {
	            result.push(toTime(value[idx]));
	        }

	        return result;
	    } else if (value) {
	        return toDate(value).getTime();
	    }
	}

	function dateEquals(a, b) {
	    if (a && b) {
	        return toTime(a) === toTime(b);
	    }

	    return a === b;
	}

	function timeIndex(date, start, baseUnit) {
	    return absoluteDateDiff(date, start) / TIME_PER_UNIT[baseUnit];
	}

	function dateIndex(value, start, baseUnit, baseUnitStep) {
	    var date = toDate(value);
	    var startDate = toDate(start);
	    var index;

	    if (baseUnit === MONTHS) {
	        index = (date.getMonth() - startDate.getMonth() + (date.getFullYear() - startDate.getFullYear()) * 12) +
	            timeIndex(date, new Date(date.getFullYear(), date.getMonth()), DAYS) / new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
	    } else if (baseUnit === YEARS) {
	        index = date.getFullYear() - startDate.getFullYear() + dateIndex(date, new Date(date.getFullYear(), 0), MONTHS, 1) / 12;
	    } else if (baseUnit === DAYS || baseUnit === WEEKS) {
	        index = timeIndex(date, startDate, baseUnit);
	    } else {
	        index = dateDiff(date, start) / TIME_PER_UNIT[baseUnit];
	    }

	    return index / baseUnitStep;
	}

	function duration(a, b, unit) {
	    var diff;

	    if (unit === YEARS) {
	        diff = b.getFullYear() - a.getFullYear();
	    } else if (unit === MONTHS) {
	        diff = duration(a, b, YEARS) * 12 + b.getMonth() - a.getMonth();
	    } else if (unit === DAYS) {
	        diff = Math.floor(dateDiff(b, a) / TIME_PER_DAY);
	    } else {
	        diff = Math.floor(dateDiff(b, a) / TIME_PER_UNIT[unit]);
	    }

	    return diff;
	}

	function lteDateIndex(date, sortedDates) {
	    var low = 0;
	    var high = sortedDates.length - 1;
	    var index;

	    while (low <= high) {
	        index = Math.floor((low + high) / 2);
	        var currentDate = sortedDates[index];

	        if (currentDate < date) {
	            low = index + 1;
	            continue;
	        }

	        if (currentDate > date) {
	            high = index - 1;
	            continue;
	        }

	        while (dateEquals(sortedDates[index - 1], date)) {
	            index--;
	        }

	        return index;
	    }

	    if (sortedDates[index] <= date) {
	        return index;
	    }

	    return index - 1;
	}

	function parseDate(intlService, date) {
	    var result;
	    if (isString(date)) {
	        result = intlService.parseDate(date) || toDate(date);
	    } else {
	        result = toDate(date);
	    }
	    return result;
	}

	function parseDates(intlService, dates) {
	    if (isArray(dates)) {
	        var result = [];
	        for (var idx = 0; idx < dates.length; idx++) {
	            result.push(parseDate(intlService, dates[idx]));
	        }

	        return result;
	    }

	    return parseDate(intlService, dates);
	}

	var MIN_CATEGORY_POINTS_RANGE = 0.01;

	function indexOf(value, arr) {
	    if (value instanceof Date) {
	        var length = arr.length;
	        for (var idx = 0; idx < length; idx++) {
	            if (dateEquals(arr[idx], value)) {
	                return idx;
	            }
	        }

	        return -1;
	    }

	    return arr.indexOf(value);
	}

	var CategoryAxis = Axis.extend({
	    init: function(options, chartService) {
	        Axis.fn.init.call(this, options, chartService);

	        this._ticks = {};
	        this._initCategories(this.options);
	    },

	    _initCategories: function(options) {
	        var categories = (options.categories || []).slice(0);
	        var definedMin = defined(options.min);
	        var definedMax = defined(options.max);
	        options.categories = categories;

	        if ((definedMin || definedMax) && categories.length) {
	            options.srcCategories = options.categories;
	            var min = definedMin ? Math.floor(options.min) : 0;
	            var max;

	            if (definedMax) {
	                max = options.justified ? Math.floor(options.max) + 1 : Math.ceil(options.max);
	            } else {
	                max = categories.length;
	            }

	            options.categories = options.categories.slice(min, max);
	        }
	    },

	    rangeIndices: function() {
	        var options = this.options;
	        var length = options.categories.length || 1;
	        var min = isNumber(options.min) ? options.min % 1 : 0;
	        var max;

	        if (isNumber(options.max) && options.max % 1 !== 0 && options.max < this.totalRange().max) {
	            max = length - (1 - options.max % 1);
	        } else {
	            max = length - (options.justified ? 1 : 0);
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    totalRangeIndices: function(limit) {
	        var options = this.options;
	        var min = isNumber(options.min) ? options.min : 0;
	        var max;

	        if (isNumber(options.max)) {
	            max = options.max;
	        } else if (isNumber(options.min)) {
	            max = min + options.categories.length;
	        } else {
	            max = ((options.srcCategories || options.categories).length - (options.justified ? 1 : 0) || 1);
	        }

	        if (limit) {
	            var totalRange = this.totalRange();
	            min = limitValue(min, 0, totalRange.max);
	            max = limitValue(max, 0, totalRange.max);
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    range: function() {
	        var options = this.options;
	        return { min: isNumber(options.min) ? options.min : 0, max: isNumber(options.max) ? options.max : options.categories.length };
	    },

	    totalRange: function() {
	        var options = this.options;
	        return { min: 0, max: Math.max(this._seriesMax || 0, (options.srcCategories || options.categories).length) - (options.justified ? 1 : 0) };
	    },

	    getScale: function() {
	        var ref = this.rangeIndices();
	        var min = ref.min;
	        var max = ref.max;
	        var lineBox = this.lineBox();
	        var size = this.options.vertical ? lineBox.height() : lineBox.width();
	        var scale = size / ((max - min) || 1);

	        return scale * (this.options.reverse ? -1 : 1);
	    },

	    getTickPositions: function(stepSize) {
	        var ref = this.options;
	        var vertical = ref.vertical;
	        var reverse = ref.reverse;
	        var ref$1 = this.rangeIndices();
	        var min = ref$1.min;
	        var max = ref$1.max;
	        var lineBox = this.lineBox();
	        var scale = this.getScale();
	        var pos = lineBox[(vertical ? Y : X) + (reverse ? 2 : 1)];
	        var positions = [];

	        var current = min % 1 !== 0 ? Math.floor(min / 1) + stepSize : min;

	        while (current <= max) {
	            positions.push(pos + round(scale * (current - min), COORD_PRECISION));
	            current += stepSize;
	        }

	        return positions;
	    },

	    getLabelsTickPositions: function() {
	        var tickPositions = this.getMajorTickPositions().slice(0);
	        var range = this.rangeIndices();
	        var scale = this.getScale();
	        var box = this.lineBox();
	        var options = this.options;
	        var axis = options.vertical ? Y : X;
	        var start = options.reverse ? 2 : 1;
	        var end = options.reverse ? 1 : 2;

	        if (range.min % 1 !== 0) {
	            tickPositions.unshift(box[axis + start] - scale * (range.min % 1));
	        }

	        if (range.max % 1 !== 0) {
	            tickPositions.push(box[axis + end] + scale * (1 - range.max % 1));
	        }

	        return tickPositions;
	    },

	    labelTickIndex: function(label) {
	        var range = this.rangeIndices();
	        var index = label.index;

	        if (range.min > 0) {
	            index = index - Math.floor(range.min);
	        }

	        return index;
	    },

	    arrangeLabels: function() {
	        Axis.fn.arrangeLabels.call(this);
	        this.hideOutOfRangeLabels();
	    },

	    hideOutOfRangeLabels: function() {
	        var ref = this;
	        var box = ref.box;
	        var labels = ref.labels;

	        if (labels.length) {
	            var valueAxis = this.options.vertical ? Y : X;
	            var start = box[valueAxis + 1];
	            var end = box[valueAxis + 2];
	            var firstLabel = labels[0];
	            var lastLabel = last(labels);

	            if (firstLabel.box[valueAxis + 1] > end || firstLabel.box[valueAxis + 2] < start) {
	                firstLabel.options.visible = false;
	            }
	            if (lastLabel.box[valueAxis + 1] > end || lastLabel.box[valueAxis + 2] < start) {
	                lastLabel.options.visible = false;
	            }
	        }
	    },

	    getMajorTickPositions: function() {
	        return this.getTicks().majorTicks;
	    },

	    getMinorTickPositions: function() {
	        return this.getTicks().minorTicks;
	    },

	    getTicks: function() {
	        var ref = this.options;
	        var reverse = ref.reverse;
	        var justified = ref.justified;
	        var cache = this._ticks;
	        var range = this.rangeIndices();
	        var lineBox = this.lineBox();
	        var hash = lineBox.getHash() + range.min + "," + range.max + reverse + justified;

	        if (cache._hash !== hash) {
	            cache._hash = hash;
	            cache.majorTicks = this.getTickPositions(1);
	            cache.minorTicks = this.getTickPositions(0.5);
	        }

	        return cache;
	    },

	    getSlot: function(from, to, limit) {
	        var options = this.options;
	        var reverse = options.reverse;
	        var justified = options.justified;
	        var vertical = options.vertical;
	        var ref = this.rangeIndices();
	        var min = ref.min;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var scale = this.getScale();
	        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
	        var slotBox = lineBox.clone();
	        var singleSlot = !defined(to);

	        var start = valueOrDefault(from, 0);
	        var end = valueOrDefault(to, start);
	        end = Math.max(end - 1, start);

	        // Fixes transient bug caused by iOS 6.0 JIT
	        // (one can never be too sure)
	        end = Math.max(start, end);

	        var p1 = lineStart + (start - min) * scale;
	        var p2 = lineStart + (end + 1 - min) * scale;

	        if (singleSlot && justified) {
	            p2 = p1;
	        }

	        if (limit) {
	            p1 = limitValue(p1, lineBox[valueAxis + 1], lineBox[valueAxis + 2]);
	            p2 = limitValue(p2, lineBox[valueAxis + 1], lineBox[valueAxis + 2]);
	        }

	        slotBox[valueAxis + 1] = reverse ? p2 : p1;
	        slotBox[valueAxis + 2] = reverse ? p1 : p2;

	        return slotBox;
	    },

	    limitSlot: function(slot) {
	        var vertical = this.options.vertical;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var limittedSlot = slot.clone();

	        limittedSlot[valueAxis + 1] = limitValue(slot[valueAxis + 1], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);
	        limittedSlot[valueAxis + 2] = limitValue(slot[valueAxis + 2], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);

	        return limittedSlot;
	    },

	    slot: function(from, to, limit) {
	        var start = from;
	        var end = to;

	        if (typeof start === "string") {
	            start = this.categoryIndex(start);
	        }

	        if (typeof end === "string") {
	            end = this.categoryIndex(end);
	        }

	        return Axis.fn.slot.call(this, start, end, limit);
	    },

	    pointCategoryIndex: function(point) {
	        var ref = this.options;
	        var reverse = ref.reverse;
	        var justified = ref.justified;
	        var vertical = ref.vertical;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var range = this.rangeIndices();
	        var startValue = reverse ? range.max : range.min;
	        var scale = this.getScale();
	        var lineStart = lineBox[valueAxis + 1];
	        var lineEnd = lineBox[valueAxis + 2];
	        var pos = point[valueAxis];

	        if (pos < lineStart || pos > lineEnd) {
	            return null;
	        }

	        var value = startValue + (pos - lineStart) / scale;
	        var diff = value % 1;

	        if (justified) {
	            value = Math.round(value);
	        } else if (diff === 0 && value > 0) {
	            value--;
	        }

	        return Math.floor(value);
	    },

	    getCategory: function(point) {
	        var index = this.pointCategoryIndex(point);

	        if (index === null) {
	            return null;
	        }

	        return this.options.categories[index];
	    },

	    categoryIndex: function(value) {
	        var options = this.options;
	        var index = indexOf(value, options.srcCategories || options.categories);

	        return index - Math.floor(options.min || 0);
	    },

	    translateRange: function(delta) {
	        var options = this.options;
	        var lineBox = this.lineBox();
	        var size = options.vertical ? lineBox.height() : lineBox.width();
	        var range = options.categories.length;
	        var scale = size / range;
	        var offset = round(delta / scale, DEFAULT_PRECISION);

	        return {
	            min: offset,
	            max: range + offset
	        };
	    },

	    zoomRange: function(rate) {
	        var rangeIndices = this.totalRangeIndices();
	        var ref = this.totalRange();
	        var totalMin = ref.min;
	        var totalMax = ref.max;
	        var min = limitValue(rangeIndices.min + rate, totalMin, totalMax);
	        var max = limitValue(rangeIndices.max - rate, totalMin, totalMax);

	        if (max - min > 0) {
	            return {
	                min: min,
	                max: max
	            };
	        }
	    },

	    scaleRange: function(scale) {
	        var range = this.options.categories.length;
	        var delta = scale * range;

	        return {
	            min: -delta,
	            max: range + delta
	        };
	    },

	    labelsCount: function() {
	        var labelsRange = this.labelsRange();

	        return labelsRange.max - labelsRange.min;
	    },

	    labelsRange: function() {
	        var options = this.options;
	        var justified = options.justified;
	        var labelOptions = options.labels;
	        var ref = this.totalRangeIndices(true);
	        var min = ref.min;
	        var max = ref.max;
	        var start = Math.floor(min);

	        if (!justified) {
	            min = Math.floor(min);
	            max = Math.ceil(max);
	        } else {
	            min = Math.ceil(min);
	            max = Math.floor(max);
	        }

	        var skip;

	        if (min > labelOptions.skip) {
	            skip = labelOptions.skip + labelOptions.step * Math.ceil((min - labelOptions.skip) / labelOptions.step);
	        } else {
	            skip = labelOptions.skip;
	        }

	        return {
	            min: skip - start,
	            max: (options.categories.length ? max + (justified ? 1 : 0) : 0) - start
	        };
	    },

	    createAxisLabel: function(index, labelOptions) {
	        var options = this.options;
	        var dataItem = options.dataItems ? options.dataItems[index] : null;
	        var category = valueOrDefault(options.categories[index], "");
	        var text = this.axisLabelText(category, dataItem, labelOptions);

	        return new AxisLabel(category, text, index, dataItem, labelOptions);
	    },

	    shouldRenderNote: function(value) {
	        var range = this.totalRangeIndices();

	        return Math.floor(range.min) <= value && value <= Math.ceil(range.max);
	    },

	    noteSlot: function(value) {
	        var options = this.options;
	        var index = value - Math.floor(options.min || 0);
	        return this.getSlot(index);
	    },

	    arrangeNotes: function() {
	        Axis.fn.arrangeNotes.call(this);
	        this.hideOutOfRangeNotes();
	    },

	    hideOutOfRangeNotes: function() {
	        var ref = this;
	        var notes = ref.notes;
	        var box = ref.box;
	        if (notes && notes.length) {
	            var valueAxis = this.options.vertical ? Y : X;
	            var start = box[valueAxis + 1];
	            var end = box[valueAxis + 2];

	            for (var idx = 0; idx < notes.length; idx++) {
	                var note = notes[idx];
	                if (note.box && (end < note.box[valueAxis + 1] || note.box[valueAxis + 2] < start)) {
	                    note.hide();
	                }
	            }
	        }
	    },

	    pan: function(delta) {
	        var range = this.totalRangeIndices(true);
	        var scale = this.getScale();
	        var offset = round(delta / scale, DEFAULT_PRECISION);
	        var totalRange = this.totalRange();
	        var min = range.min + offset;
	        var max = range.max + offset;

	        return this.limitRange(min, max, 0, totalRange.max, offset);
	    },

	    pointsRange: function(start, end) {
	        var ref = this.options;
	        var reverse = ref.reverse;
	        var vertical = ref.vertical;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var range = this.totalRangeIndices(true);
	        var scale = this.getScale();
	        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];

	        var diffStart = start[valueAxis] - lineStart;
	        var diffEnd = end[valueAxis] - lineStart;

	        var min = range.min + diffStart / scale;
	        var max = range.min + diffEnd / scale;
	        var rangeMin = Math.min(min, max);
	        var rangeMax = Math.max(min, max);

	        if (rangeMax - rangeMin >= MIN_CATEGORY_POINTS_RANGE) {
	            return {
	                min: rangeMin,
	                max: rangeMax
	            };
	        }
	    },

	    valueRange: function() {
	        return this.range();
	    }
	});

	setDefaultOptions(CategoryAxis, {
	    type: "category",
	    categories: [],
	    vertical: false,
	    majorGridLines: {
	        visible: false,
	        width: 1,
	        color: BLACK
	    },
	    labels: {
	        zIndex: 1
	    },
	    justified: false,
	    _deferLabels: true
	});

	var COORDINATE_LIMIT = 300000;

	var DateLabelFormats = {
	    milliseconds: "HH:mm:ss.fff",
	    seconds: "HH:mm:ss",
	    minutes: "HH:mm",
	    hours: "HH:mm",
	    days: "M/d",
	    weeks: "M/d",
	    months: "MMM 'yy",
	    years: "yyyy"
	};

	var ZERO_THRESHOLD = 0.2;

	var AUTO = "auto";
	var BASE_UNITS = [
	    MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS
	];
	var FIT = "fit";

	var DateCategoryAxis = CategoryAxis.extend({
	    init: function(axisOptions, chartService) {
	        CategoryAxis.fn.init.call(this, axisOptions, chartService);

	        var intlService = chartService.intl;
	        var options = this.options;

	        options = deepExtend({
	            roundToBaseUnit: true
	        }, options, {
	            categories: parseDates(intlService, options.categories),
	            min: parseDate(intlService, options.min),
	            max: parseDate(intlService, options.max)
	        });

	        options.userSetBaseUnit = options.userSetBaseUnit || options.baseUnit;
	        options.userSetBaseUnitStep = options.userSetBaseUnitStep || options.baseUnitStep;

	        if (options.categories && options.categories.length > 0) {
	            var baseUnit = (options.baseUnit || "").toLowerCase();
	            var useDefault = baseUnit !== FIT && !inArray(baseUnit, BASE_UNITS);

	            if (useDefault) {
	                options.baseUnit = this.defaultBaseUnit(options);
	            }

	            if (baseUnit === FIT || options.baseUnitStep === AUTO) {
	                this.autoBaseUnit(options);
	            }

	            this._groupsStart = addDuration(options.categories[0], 0, options.baseUnit, options.weekStartDay);

	            this.groupCategories(options);
	        } else {
	            options.baseUnit = options.baseUnit || DAYS;
	        }

	        this.options = options;
	    },

	    _initCategories: function() {},

	    shouldRenderNote: function(value) {
	        var range = this.range();
	        var categories = this.options.categories || [];

	        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0 && categories.length;
	    },

	    parseNoteValue: function(value) {
	        return parseDate(this.chartService.intl, value);
	    },

	    noteSlot: function(value) {
	        return this.getSlot(value);
	    },

	    translateRange: function(delta) {
	        var options = this.options;
	        var baseUnit = options.baseUnit;
	        var weekStartDay = options.weekStartDay;
	        var vertical = options.vertical;
	        var lineBox = this.lineBox();
	        var size = vertical ? lineBox.height() : lineBox.width();
	        var range = this.range();
	        var scale = size / (range.max - range.min);
	        var offset = round(delta / scale, DEFAULT_PRECISION);

	        if (range.min && range.max) {
	            var from = addTicks(options.min || range.min, offset);
	            var to = addTicks(options.max || range.max, offset);

	            range = {
	                min: addDuration(from, 0, baseUnit, weekStartDay),
	                max: addDuration(to, 0, baseUnit, weekStartDay)
	            };
	        }

	        return range;
	    },

	    scaleRange: function(delta) {
	        var rounds = Math.abs(delta);
	        var result = this.range();
	        var from = result.min;
	        var to = result.max;

	        if (from && to) {
	            while (rounds--) {
	                var range = dateDiff(from, to);
	                var step = Math.round(range * 0.1);
	                if (delta < 0) {
	                    from = addTicks(from, step);
	                    to = addTicks(to, -step);
	                } else {
	                    from = addTicks(from, -step);
	                    to = addTicks(to, step);
	                }
	            }

	            result = { min: from, max: to };
	        }

	        return result;
	    },

	    defaultBaseUnit: function(options) {
	        var categories = options.categories;
	        var count = defined(categories) ? categories.length : 0;
	        var minDiff = MAX_VALUE;
	        var lastCategory, unit;

	        for (var categoryIx = 0; categoryIx < count; categoryIx++) {
	            var category = categories[categoryIx];

	            if (category && lastCategory) {
	                var diff = absoluteDateDiff(category, lastCategory);
	                if (diff > 0) {
	                    minDiff = Math.min(minDiff, diff);

	                    if (minDiff >= TIME_PER_YEAR) {
	                        unit = YEARS;
	                    } else if (minDiff >= TIME_PER_MONTH - TIME_PER_DAY * 3) {
	                        unit = MONTHS;
	                    } else if (minDiff >= TIME_PER_WEEK) {
	                        unit = WEEKS;
	                    } else if (minDiff >= TIME_PER_DAY) {
	                        unit = DAYS;
	                    } else if (minDiff >= TIME_PER_HOUR) {
	                        unit = HOURS;
	                    } else if (minDiff >= TIME_PER_MINUTE) {
	                        unit = MINUTES;
	                    } else {
	                        unit = SECONDS;
	                    }
	                }
	            }

	            lastCategory = category;
	        }

	        return unit || DAYS;
	    },

	    _categoryRange: function(categories) {
	        var range = categories._range;
	        if (!range) {
	            range = categories._range = sparseArrayLimits(categories);
	        }

	        return range;
	    },

	    totalRange: function() {
	        return {
	            min: 0,
	            max: this.options.categories.length
	        };
	    },

	    rangeIndices: function() {
	        var options = this.options;
	        var categories = options.categories;
	        var baseUnit = options.baseUnit;
	        var baseUnitStep = options.baseUnitStep || 1;
	        var categoryLimits = this.categoriesRange();
	        var min = toDate(options.min || categoryLimits.min);
	        var max = toDate(options.max || categoryLimits.max);
	        var minIdx = 0, maxIdx = 0;

	        if (categories.length) {
	            minIdx = dateIndex(min, categories[0], baseUnit, baseUnitStep);
	            maxIdx = dateIndex(max, categories[0], baseUnit, baseUnitStep);

	            if (options.roundToBaseUnit) {
	                minIdx = Math.floor(minIdx);
	                maxIdx = options.justified ? Math.floor(maxIdx) : Math.ceil(maxIdx);
	            }
	        }

	        return { min: minIdx, max: maxIdx };
	    },

	    labelsRange: function() {
	        var options = this.options;
	        var labelOptions = options.labels;
	        var range = this.rangeIndices();
	        var min = Math.floor(range.min);
	        var max = Math.ceil(range.max);

	        return {
	            min: min + labelOptions.skip,
	            max: options.categories.length ? max + (options.justified ? 1 : 0) : 0
	        };
	    },

	    categoriesRange: function() {
	        var options = this.options;
	        var range = this._categoryRange(options.srcCategories || options.categories);

	        var max = toDate(range.max);
	        if (!options.justified && dateEquals(max, this._roundToTotalStep(max, options, false))) {
	            max = this._roundToTotalStep(max, options, true, true);
	        }
	        return {
	            min: toDate(range.min),
	            max: max
	        };
	    },

	    currentRange: function() {
	        var options = this.options;
	        var round$$1 = options.roundToBaseUnit !== false;
	        var totalRange = this.categoriesRange();
	        var min = options.min;
	        var max = options.max;

	        if (!min) {
	            min = round$$1 ? this._roundToTotalStep(totalRange.min, options, false) : totalRange.min;
	        }

	        if (!max) {
	            max = round$$1 ? this._roundToTotalStep(totalRange.max, options, !options.justified) : totalRange.max;
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    datesRange: function() {
	        var range = this._categoryRange(this.options.srcCategories || this.options.categories);
	        return {
	            min: toDate(range.min),
	            max: toDate(range.max)
	        };
	    },

	    pan: function(delta) {
	        var options = this.options;
	        var lineBox = this.lineBox();
	        var size = options.vertical ? lineBox.height() : lineBox.width();
	        var ref = this.currentRange();
	        var min = ref.min;
	        var max = ref.max;
	        var totalLimits = this.totalLimits();
	        var scale = size / (max - min);
	        var offset = round(delta / scale, DEFAULT_PRECISION);
	        var from = addTicks(min, offset);
	        var to = addTicks(max, offset);

	        var panRange = this.limitRange(toTime(from), toTime(to), toTime(totalLimits.min), toTime(totalLimits.max), offset);

	        if (panRange) {
	            panRange.min = toDate(panRange.min);
	            panRange.max = toDate(panRange.max);
	            panRange.baseUnit = options.baseUnit;
	            panRange.baseUnitStep = options.baseUnitStep || 1;
	            panRange.userSetBaseUnit = options.userSetBaseUnit;
	            panRange.userSetBaseUnitStep = options.userSetBaseUnitStep;

	            return panRange;
	        }
	    },

	    pointsRange: function(start, end) {
	        var pointsRange = CategoryAxis.fn.pointsRange.call(this, start, end);
	        var datesRange = this.currentRange();
	        var indicesRange = this.rangeIndices();
	        var scale = dateDiff(datesRange.max, datesRange.min) / (indicesRange.max - indicesRange.min);
	        var options = this.options;

	        var min = addTicks(datesRange.min, pointsRange.min * scale);
	        var max = addTicks(datesRange.min, pointsRange.max * scale);

	        return {
	            min: min,
	            max: max,
	            baseUnit: options.userSetBaseUnit,
	            baseUnitStep: options.userSetBaseUnitStep
	        };
	    },

	    zoomRange: function(delta) {
	        var options = this.options;
	        var totalLimits = this.totalLimits();
	        var weekStartDay = options.weekStartDay;
	        var baseUnit = options.baseUnit;
	        var baseUnitStep = options.baseUnitStep || 1;
	        var ref = this.currentRange();
	        var rangeMin = ref.min;
	        var rangeMax = ref.max;
	        var min = addDuration(rangeMin, delta * baseUnitStep, baseUnit, weekStartDay);
	        var max = addDuration(rangeMax, -delta * baseUnitStep, baseUnit, weekStartDay);

	        if (options.userSetBaseUnit === FIT) {
	            var autoBaseUnitSteps = options.autoBaseUnitSteps;
	            var maxDateGroups = options.maxDateGroups;

	            var maxDiff = last(autoBaseUnitSteps[baseUnit]) * maxDateGroups * TIME_PER_UNIT[baseUnit];
	            var rangeDiff = dateDiff(rangeMax, rangeMin);
	            var diff = dateDiff(max, min);
	            var baseUnitIndex = BASE_UNITS.indexOf(baseUnit);
	            var autoBaseUnitStep, ticks;

	            if (diff < TIME_PER_UNIT[baseUnit] && baseUnit !== MILLISECONDS) {
	                baseUnit = BASE_UNITS[baseUnitIndex - 1];
	                autoBaseUnitStep = last(autoBaseUnitSteps[baseUnit]);
	                ticks = (rangeDiff - (maxDateGroups - 1) * autoBaseUnitStep * TIME_PER_UNIT[baseUnit]) / 2;
	                min = addTicks(rangeMin, ticks);
	                max = addTicks(rangeMax, -ticks);

	            } else if (diff > maxDiff && baseUnit !== YEARS) {
	                var stepIndex = 0;

	                do {
	                    baseUnitIndex++;
	                    baseUnit = BASE_UNITS[baseUnitIndex];
	                    stepIndex = 0;
	                    ticks = 2 * TIME_PER_UNIT[baseUnit];
	                    do {
	                        autoBaseUnitStep = autoBaseUnitSteps[baseUnit][stepIndex];
	                        stepIndex++;
	                    } while (stepIndex < autoBaseUnitSteps[baseUnit].length && ticks * autoBaseUnitStep < rangeDiff);
	                } while (baseUnit !== YEARS && ticks * autoBaseUnitStep < rangeDiff);

	                ticks = (ticks * autoBaseUnitStep - rangeDiff) / 2;
	                if (ticks > 0) {
	                    min = addTicks(rangeMin, -ticks);
	                    max = addTicks(rangeMax, ticks);
	                    min = addTicks(min, limitValue(max, totalLimits.min, totalLimits.max) - max);
	                    max = addTicks(max, limitValue(min, totalLimits.min, totalLimits.max) - min);
	                }
	            }
	        }

	        min = toDate(limitValue(min, totalLimits.min, totalLimits.max));
	        max = toDate(limitValue(max, totalLimits.min, totalLimits.max));

	        if (min && max && dateDiff(max, min) > 0) {
	            return {
	                min: min,
	                max: max,
	                baseUnit: options.userSetBaseUnit,
	                baseUnitStep: options.userSetBaseUnitStep
	            };
	        }
	    },

	    totalLimits: function() {
	        var options = this.options;
	        var datesRange = this.datesRange();

	        var min = this._roundToTotalStep(toDate(datesRange.min), options, false);
	        var max = datesRange.max;

	        if (!options.justified) {
	            max = this._roundToTotalStep(max, options, true, dateEquals(max, this._roundToTotalStep(max, options, false)));
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    range: function(rangeOptions) {
	        var options = rangeOptions || this.options;

	        var categories = options.categories;
	        var autoUnit = options.baseUnit === FIT;
	        var baseUnit = autoUnit ? BASE_UNITS[0] : options.baseUnit;
	        var baseUnitStep = options.baseUnitStep || 1;
	        var stepOptions = {
	            baseUnit: baseUnit,
	            baseUnitStep: baseUnitStep,
	            weekStartDay: options.weekStartDay
	        };
	        var categoryLimits = this._categoryRange(categories);
	        var min = toDate(options.min || categoryLimits.min);
	        var max = toDate(options.max || categoryLimits.max);

	        return {
	            min: this._roundToTotalStep(min, stepOptions, false),
	            max: this._roundToTotalStep(max, stepOptions, true, true)
	        };
	    },

	    autoBaseUnit: function(options) {
	        var categoryLimits = this._categoryRange(options.categories);
	        var span = toDate(options.max || categoryLimits.max) - toDate(options.min || categoryLimits.min);
	        var maxDateGroups = options.maxDateGroups || this.options.maxDateGroups;
	        var autoUnit = options.baseUnit === FIT;
	        var autoUnitIx = 0;
	        var baseUnit = autoUnit ? BASE_UNITS[autoUnitIx++] : options.baseUnit;
	        var units = span / TIME_PER_UNIT[baseUnit];
	        var totalUnits = units;
	        var autoBaseUnitSteps = deepExtend(
	            {}, this.options.autoBaseUnitSteps, options.autoBaseUnitSteps
	        );
	        var unitSteps, step, nextStep;

	        while (!step || units >= maxDateGroups) {
	            unitSteps = unitSteps || autoBaseUnitSteps[baseUnit].slice(0);
	            nextStep = unitSteps.shift();

	            if (nextStep) {
	                step = nextStep;
	                units = totalUnits / step;
	            } else if (baseUnit === last(BASE_UNITS)) {
	                step = Math.ceil(totalUnits / maxDateGroups);
	                break;
	            } else if (autoUnit) {
	                baseUnit = BASE_UNITS[autoUnitIx++] || last(BASE_UNITS);
	                totalUnits = span / TIME_PER_UNIT[baseUnit];
	                unitSteps = null;
	            } else {
	                if (units > maxDateGroups) {
	                    step = Math.ceil(totalUnits / maxDateGroups);
	                }
	                break;
	            }
	        }

	        options.baseUnitStep = step;
	        options.baseUnit = baseUnit;
	    },

	    groupCategories: function(options) {
	        var categories = options.categories;
	        var baseUnit = options.baseUnit;
	        var baseUnitStep = options.baseUnitStep || 1;
	        var maxCategory = toDate(sparseArrayLimits(categories).max);
	        var ref = this.range(options);
	        var min = ref.min;
	        var max = ref.max;
	        var groups = [];
	        var nextDate;

	        for (var date = min; date < max; date = nextDate) {
	            groups.push(date);

	            nextDate = addDuration(date, baseUnitStep, baseUnit, options.weekStartDay);
	            if (nextDate > maxCategory && !options.max) {
	                break;
	            }
	        }

	        options.srcCategories = categories;
	        options.categories = groups;
	    },

	    _roundToTotalStep: function(value, axisOptions, upper, roundToNext) {
	        var options = axisOptions || this.options;
	        var baseUnit = options.baseUnit;
	        var baseUnitStep = options.baseUnitStep || 1;
	        var start = this._groupsStart;

	        if (start) {
	            var step = dateIndex(value, start, baseUnit, baseUnitStep);
	            var roundedStep = upper ? Math.ceil(step) : Math.floor(step);
	            if (roundToNext) {
	                roundedStep++;
	            }
	            return addDuration(start, roundedStep * baseUnitStep, baseUnit, options.weekStartDay);
	        }

	        return addDuration(value, upper ? baseUnitStep : 0, baseUnit, options.weekStartDay);
	    },

	    createAxisLabel: function(index, labelOptions) {
	        var options = this.options;
	        var dataItem = options.dataItems ? options.dataItems[index] : null;
	        var date = options.categories[index];
	        var baseUnit = options.baseUnit;
	        var unitFormat = labelOptions.dateFormats[baseUnit];
	        var visible = true;

	        if (options.justified) {
	            var roundedDate = floorDate(date, baseUnit, options.weekStartDay);
	            visible = dateEquals(roundedDate, date);
	        } else if (!options.roundToBaseUnit) {
	            visible = !dateEquals(this.range().max, date);
	        }

	        if (visible) {
	            labelOptions.format = labelOptions.format || unitFormat;
	            var text = this.axisLabelText(date, dataItem, labelOptions);
	            if (text) {
	                return new AxisLabel(date, text, index, dataItem, labelOptions);
	            }
	        }
	    },

	    categoryIndex: function(value) {
	        var options = this.options;
	        var categories = options.categories;
	        var index = -1;

	        if (categories.length) {
	            index = Math.floor(dateIndex(toDate(value), categories[0], options.baseUnit, options.baseUnitStep || 1));
	        }

	        return index;
	    },

	    getSlot: function(a, b, limit) {
	        var start = a;
	        var end = b;

	        if (typeof start === OBJECT) {
	            start = this.categoryIndex(start);
	        }

	        if (typeof end === OBJECT) {
	            end = this.categoryIndex(end);
	        }

	        return CategoryAxis.fn.getSlot.call(this, start, end, limit);
	    },

	    valueRange: function() {
	        var options = this.options;
	        var range = this._categoryRange(options.srcCategories || options.categories);

	        return {
	            min: toDate(range.min),
	            max: toDate(range.max)
	        };
	    }
	});

	setDefaultOptions(DateCategoryAxis, {
	    type: DATE,
	    labels: {
	        dateFormats: DateLabelFormats
	    },
	    autoBaseUnitSteps: {
	        milliseconds: [ 1, 10, 100 ],
	        seconds: [ 1, 2, 5, 15, 30 ],
	        minutes: [ 1, 2, 5, 15, 30 ],
	        hours: [ 1, 2, 3 ],
	        days: [ 1, 2, 3 ],
	        weeks: [ 1, 2 ],
	        months: [ 1, 2, 3, 6 ],
	        years: [ 1, 2, 3, 5, 10, 25, 50 ]
	    },
	    maxDateGroups: 10
	});

	function autoMajorUnit(min, max) {
	    var diff = round(max - min, DEFAULT_PRECISION - 1);

	    if (diff === 0) {
	        if (max === 0) {
	            return 0.1;
	        }

	        diff = Math.abs(max);
	    }

	    var scale = Math.pow(10, Math.floor(Math.log(diff) / Math.log(10)));
	    var relativeValue = round((diff / scale), DEFAULT_PRECISION);
	    var scaleMultiplier = 1;

	    if (relativeValue < 1.904762) {
	        scaleMultiplier = 0.2;
	    } else if (relativeValue < 4.761904) {
	        scaleMultiplier = 0.5;
	    } else if (relativeValue < 9.523809) {
	        scaleMultiplier = 1;
	    } else {
	        scaleMultiplier = 2;
	    }

	    return round(scale * scaleMultiplier, DEFAULT_PRECISION);
	}

	function autoAxisMin(min, max, narrow) {
	    if (!min && !max) {
	        return 0;
	    }

	    var axisMin;

	    if (min >= 0 && max >= 0) {
	        var minValue = min === max ? 0 : min;

	        var diff = (max - minValue) / max;
	        if (narrow === false || (!narrow && diff > ZERO_THRESHOLD)) {
	            return 0;
	        }

	        axisMin = Math.max(0, minValue - ((max - minValue) / 2));
	    } else {
	        axisMin = min;
	    }

	    return axisMin;
	}

	function autoAxisMax(min, max, narrow) {
	    if (!min && !max) {
	        return 1;
	    }

	    var axisMax;

	    if (min <= 0 && max <= 0) {
	        var maxValue = min === max ? 0 : max;

	        var diff = Math.abs((maxValue - min) / maxValue);
	        if (narrow === false || (!narrow && diff > ZERO_THRESHOLD)) {
	            return 0;
	        }

	        axisMax = Math.min(0, maxValue - ((min - maxValue) / 2));
	    } else {
	        axisMax = max;
	    }

	    return axisMax;
	}

	function floor(value, step) {
	    return round(Math.floor(value / step) * step, DEFAULT_PRECISION);
	}

	function ceil(value, step) {
	    return round(Math.ceil(value / step) * step, DEFAULT_PRECISION);
	}

	function limitCoordinate(value) {
	    return Math.max(Math.min(value, COORDINATE_LIMIT), -COORDINATE_LIMIT);
	}

	var MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);

	var NumericAxis = Axis.extend({
	    init: function(seriesMin, seriesMax, options, chartService) {
	        var autoOptions = autoAxisOptions(seriesMin, seriesMax, options);
	        var totalOptions = totalAxisOptions(autoOptions, options);

	        Axis.fn.init.call(this, axisOptions(autoOptions, options), chartService);

	        this.totalMin = totalOptions.min;
	        this.totalMax = totalOptions.max;
	        this.totalMajorUnit = totalOptions.majorUnit;
	        this.seriesMin = seriesMin;
	        this.seriesMax = seriesMax;
	    },

	    startValue: function() {
	        return 0;
	    },

	    range: function() {
	        var options = this.options;
	        return { min: options.min, max: options.max };
	    },

	    getDivisions: function(stepValue) {
	        if (stepValue === 0) {
	            return 1;
	        }

	        var options = this.options;
	        var range = options.max - options.min;

	        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;
	    },

	    getTickPositions: function(unit, skipUnit) {
	        var options = this.options;
	        var vertical = options.vertical;
	        var reverse = options.reverse;
	        var lineBox = this.lineBox();
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var range = options.max - options.min;
	        var scale = lineSize / range;
	        var step = unit * scale;
	        var divisions = this.getDivisions(unit);
	        var dir = (vertical ? -1 : 1) * (reverse ? -1 : 1);
	        var startEdge = dir === 1 ? 1 : 2;
	        var positions = [];
	        var pos = lineBox[(vertical ? Y : X) + startEdge];
	        var skipStep = 0;

	        if (skipUnit) {
	            skipStep = skipUnit / unit;
	        }

	        for (var idx = 0; idx < divisions; idx++) {
	            if (idx % skipStep !== 0) {
	                positions.push(round(pos, COORD_PRECISION));
	            }

	            pos = pos + step * dir;
	        }

	        return positions;
	    },

	    getMajorTickPositions: function() {
	        return this.getTickPositions(this.options.majorUnit);
	    },

	    getMinorTickPositions: function() {
	        return this.getTickPositions(this.options.minorUnit);
	    },

	    getSlot: function(a, b, limit) {
	        if (limit === void 0) { limit = false; }

	        var options = this.options;
	        var vertical = options.vertical;
	        var reverse = options.reverse;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var dir = reverse ? -1 : 1;
	        var step = dir * (lineSize / (options.max - options.min));
	        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);

	        var start = a;
	        var end = b;

	        if (!defined(start)) {
	            start = end || 0;
	        }

	        if (!defined(end)) {
	            end = start || 0;
	        }

	        if (limit) {
	            start = Math.max(Math.min(start, options.max), options.min);
	            end = Math.max(Math.min(end, options.max), options.min);
	        }

	        var p1, p2;

	        if (vertical) {
	            p1 = options.max - Math.max(start, end);
	            p2 = options.max - Math.min(start, end);
	        } else {
	            p1 = Math.min(start, end) - options.min;
	            p2 = Math.max(start, end) - options.min;
	        }

	        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));
	        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));

	        return slotBox;
	    },

	    getValue: function(point) {
	        var options = this.options;
	        var vertical = options.vertical;
	        var reverse = options.reverse;
	        var max = Number(options.max);
	        var min = Number(options.min);
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var dir = reverse ? -1 : 1;
	        var offset = dir * (point[valueAxis] - lineStart);
	        var step = (max - min) / lineSize;
	        var valueOffset = offset * step;

	        if (offset < 0 || offset > lineSize) {
	            return null;
	        }

	        var value = vertical ?
	                max - valueOffset :
	                min + valueOffset;

	        return round(value, DEFAULT_PRECISION);
	    },

	    translateRange: function(delta) {
	        var options = this.options;
	        var vertical = options.vertical;
	        var reverse = options.reverse;
	        var max = options.max;
	        var min = options.min;
	        var lineBox = this.lineBox();
	        var size = vertical ? lineBox.height() : lineBox.width();
	        var range = max - min;
	        var scale = size / range;
	        var offset = round(delta / scale, DEFAULT_PRECISION);

	        if ((vertical || reverse) && !(vertical && reverse )) {
	            offset = -offset;
	        }

	        return {
	            min: min + offset,
	            max: max + offset
	        };
	    },

	    scaleRange: function(delta) {
	        var options = this.options;
	        var offset = -delta * options.majorUnit;

	        return {
	            min: options.min - offset,
	            max: options.max + offset
	        };
	    },

	    labelsCount: function() {
	        return this.getDivisions(this.options.majorUnit);
	    },

	    createAxisLabel: function(index, labelOptions) {
	        var options = this.options;
	        var value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);
	        var text = this.axisLabelText(value, null, labelOptions);

	        return new AxisLabel(value, text, index, null, labelOptions);
	    },

	    shouldRenderNote: function(value) {
	        var range = this.range();
	        return range.min <= value && value <= range.max;
	    },

	    pan: function(delta) {
	        var range = this.translateRange(delta);
	        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax);
	    },

	    pointsRange: function(start, end) {
	        var startValue = this.getValue(start);
	        var endValue = this.getValue(end);
	        var min = Math.min(startValue, endValue);
	        var max = Math.max(startValue, endValue);

	        if (this.isValidRange(min, max)) {
	            return {
	                min: min,
	                max: max
	            };
	        }
	    },

	    zoomRange: function(delta) {
	        var ref = this;
	        var totalMin = ref.totalMin;
	        var totalMax = ref.totalMax;
	        var newRange = this.scaleRange(delta);
	        var min = limitValue(newRange.min, totalMin, totalMax);
	        var max = limitValue(newRange.max, totalMin, totalMax);

	        if (this.isValidRange(min, max)) {
	            return {
	                min: min,
	                max: max
	            };
	        }
	    },

	    isValidRange: function(min, max) {
	        return max - min > MIN_VALUE_RANGE;
	    }
	});

	function autoAxisOptions(seriesMin, seriesMax, options) {
	    var narrowRange = options.narrowRange;

	    var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);
	    var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);

	    var majorUnit = autoMajorUnit(autoMin, autoMax);
	    var autoOptions = {
	        majorUnit: majorUnit
	    };

	    if (options.roundToMajorUnit !== false) {
	        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {
	            autoMin -= majorUnit;
	        }

	        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {
	            autoMax += majorUnit;
	        }
	    }

	    autoOptions.min = floor(autoMin, majorUnit);
	    autoOptions.max = ceil(autoMax, majorUnit);

	    return autoOptions;
	}

	function totalAxisOptions(autoOptions, options) {
	    return {
	        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,
	        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,
	        majorUnit: autoOptions.majorUnit
	    };
	}

	function axisOptions(autoOptions, userOptions) {
	    var options = userOptions;
	    var userSetMin, userSetMax;

	    if (userOptions) {
	        userSetMin = defined(userOptions.min);
	        userSetMax = defined(userOptions.max);

	        var userSetLimits = userSetMin || userSetMax;

	        if (userSetLimits) {
	            if (userOptions.min === userOptions.max) {
	                if (userOptions.min > 0) {
	                    userOptions.min = 0;
	                } else {
	                    userOptions.max = 1;
	                }
	            }
	        }

	        if (userOptions.majorUnit) {
	            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);
	            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);
	        } else if (userSetLimits) {
	            options = deepExtend(autoOptions, userOptions);

	            // Determine an auto major unit after min/max have been set
	            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);
	        }
	    }

	    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;

	    var result = deepExtend(autoOptions, options);
	    if (result.min >= result.max) {
	        if (userSetMin && !userSetMax) {
	            result.max = result.min + result.majorUnit;
	        } else if (!userSetMin && userSetMax) {
	            result.min = result.max - result.majorUnit;
	        }
	    }

	    return result;
	}

	function remainderClose(value, divisor, ratio) {
	    var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);
	    var threshold = divisor * (1 - ratio);

	    return remainder === 0 || remainder > threshold;
	}

	setDefaultOptions(NumericAxis, {
	    type: "numeric",
	    min: 0,
	    max: 1,
	    vertical: true,
	    majorGridLines: {
	        visible: true,
	        width: 1,
	        color: BLACK
	    },
	    labels: {
	        format: "#.####################"
	    },
	    zIndex: 1
	});

	var DateValueAxis = Axis.extend({
	    init: function(seriesMin, seriesMax, axisOptions, chartService) {
	        var min = toDate(seriesMin);
	        var max = toDate(seriesMax);

	        var intlService = chartService.intl;
	        var options = axisOptions || {};
	        options = deepExtend(options || {}, {
	            min: parseDate(intlService, options.min),
	            max: parseDate(intlService, options.max),
	            axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue)
	        });
	        options = applyDefaults(min, max, options);

	        Axis.fn.init.call(this, options, chartService);

	        this.seriesMin = min;
	        this.seriesMax = max;
	        this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit));
	        this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit));
	    },

	    range: function() {
	        var options = this.options;
	        return { min: options.min, max: options.max };
	    },

	    getDivisions: function(stepValue) {
	        var options = this.options;

	        return Math.floor(
	            duration(options.min, options.max, options.baseUnit) / stepValue + 1
	        );
	    },

	    getTickPositions: function(step) {
	        var options = this.options;
	        var vertical = options.vertical;
	        var lineBox = this.lineBox();
	        var dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);
	        var startEdge = dir === 1 ? 1 : 2;
	        var start = lineBox[(vertical ? Y : X) + startEdge];
	        var divisions = this.getDivisions(step);
	        var timeRange = dateDiff(options.max, options.min);
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var scale = lineSize / timeRange;

	        var positions = [ start ];
	        for (var i = 1; i < divisions; i++) {
	            var date = addDuration(options.min, i * step, options.baseUnit);
	            var pos = start + dateDiff(date, options.min) * scale * dir;

	            positions.push(round(pos, COORD_PRECISION));
	        }

	        return positions;
	    },

	    getMajorTickPositions: function() {
	        return this.getTickPositions(this.options.majorUnit);
	    },

	    getMinorTickPositions: function() {
	        return this.getTickPositions(this.options.minorUnit);
	    },

	    getSlot: function(a, b, limit) {
	        return NumericAxis.prototype.getSlot.call(
	            this, toDate(a), toDate(b), limit
	        );
	    },

	    getValue: function(point) {
	        var value = NumericAxis.prototype.getValue.call(this, point);

	        return value !== null ? toDate(value) : null;
	    },

	    labelsCount: function() {
	        return this.getDivisions(this.options.majorUnit);
	    },

	    createAxisLabel: function(index, labelOptions) {
	        var options = this.options;
	        var offset = index * options.majorUnit;
	        var date = options.min;

	        if (offset > 0) {
	            date = addDuration(date, offset, options.baseUnit);
	        }

	        var unitFormat = labelOptions.dateFormats[options.baseUnit];
	        labelOptions.format = labelOptions.format || unitFormat;

	        var text = this.axisLabelText(date, null, labelOptions);
	        return new AxisLabel(date, text, index, null, labelOptions);
	    },

	    translateRange: function(delta, exact) {
	        var options = this.options;
	        var baseUnit = options.baseUnit;
	        var weekStartDay = options.weekStartDay;
	        var lineBox = this.lineBox();
	        var size = options.vertical ? lineBox.height() : lineBox.width();
	        var range = this.range();
	        var scale = size / dateDiff(range.max, range.min);
	        var offset = round(delta / scale, DEFAULT_PRECISION);
	        var from = addTicks(options.min, offset);
	        var to = addTicks(options.max, offset);

	        if (!exact) {
	            from = addDuration(from, 0, baseUnit, weekStartDay);
	            to = addDuration(to, 0, baseUnit, weekStartDay);
	        }

	        return {
	            min: from,
	            max: to
	        };
	    },

	    scaleRange: function(delta) {
	        var ref = this.options;
	        var from = ref.min;
	        var to = ref.max;
	        var rounds = Math.abs(delta);

	        while (rounds--) {
	            var range = dateDiff(from, to);
	            var step = Math.round(range * 0.1);
	            if (delta < 0) {
	                from = addTicks(from, step);
	                to = addTicks(to, -step);
	            } else {
	                from = addTicks(from, -step);
	                to = addTicks(to, step);
	            }
	        }

	        return { min: from, max: to };
	    },

	    shouldRenderNote: function(value) {
	        var range = this.range();

	        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;
	    },

	    pan: function(delta) {
	        var range = this.translateRange(delta, true);
	        var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax);

	        if (limittedRange) {
	            return {
	                min: toDate(limittedRange.min),
	                max: toDate(limittedRange.max)
	            };
	        }
	    },

	    pointsRange: function(start, end) {
	        var startValue = this.getValue(start);
	        var endValue = this.getValue(end);
	        var min = Math.min(startValue, endValue);
	        var max = Math.max(startValue, endValue);

	        return {
	            min: toDate(min),
	            max: toDate(max)
	        };
	    },

	    zoomRange: function(delta) {
	        var range = this.scaleRange(delta);
	        var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));
	        var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));

	        return {
	            min: min,
	            max: max
	        };
	    }
	});

	function timeUnits(delta) {
	    var unit = HOURS;

	    if (delta >= TIME_PER_YEAR) {
	        unit = YEARS;
	    } else if (delta >= TIME_PER_MONTH) {
	        unit = MONTHS;
	    } else if (delta >= TIME_PER_WEEK) {
	        unit = WEEKS;
	    } else if (delta >= TIME_PER_DAY) {
	        unit = DAYS;
	    }

	    return unit;
	}

	function applyDefaults(seriesMin, seriesMax, options) {
	    var min = options.min || seriesMin;
	    var max = options.max || seriesMax;
	    var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);
	    var baseUnitTime = TIME_PER_UNIT[baseUnit];
	    var autoMin = floorDate(toTime(min) - 1, baseUnit) || toDate(max);
	    var autoMax = ceilDate(toTime(max) + 1, baseUnit);
	    var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;
	    var majorUnit = userMajorUnit || ceil(
	                        autoMajorUnit(autoMin.getTime(), autoMax.getTime()),
	                        baseUnitTime
	                    ) / baseUnitTime;
	    var actualUnits = duration(autoMin, autoMax, baseUnit);
	    var totalUnits = ceil(actualUnits, majorUnit);
	    var unitsToAdd = totalUnits - actualUnits;
	    var head = Math.floor(unitsToAdd / 2);
	    var tail = unitsToAdd - head;

	    if (!options.baseUnit) {
	        delete options.baseUnit;
	    }

	    options.baseUnit = options.baseUnit || baseUnit;
	    options.min = options.min || addDuration(autoMin, -head, baseUnit);
	    options.max = options.max || addDuration(autoMax, tail, baseUnit);
	    options.minorUnit = options.minorUnit || majorUnit / 5;
	    options.majorUnit = majorUnit;

	    return options;
	}

	setDefaultOptions(DateValueAxis, {
	    type: DATE,
	    majorGridLines: {
	        visible: true,
	        width: 1,
	        color: BLACK
	    },
	    labels: {
	        dateFormats: DateLabelFormats
	    }
	});

	var DEFAULT_MAJOR_UNIT = 10;

	var LogarithmicAxis = Axis.extend({
	    init: function(seriesMin, seriesMax, options, chartService) {

	        var axisOptions = deepExtend({ majorUnit: DEFAULT_MAJOR_UNIT, min: seriesMin, max: seriesMax }, options);
	        var base = axisOptions.majorUnit;
	        var autoMax = autoAxisMax$1(seriesMax, base);
	        var autoMin = autoAxisMin$1(seriesMin, seriesMax, axisOptions);
	        var range = initRange(autoMin, autoMax, axisOptions, options);

	        axisOptions.max = range.max;
	        axisOptions.min = range.min;
	        axisOptions.minorUnit = options.minorUnit || round(base - 1, DEFAULT_PRECISION);

	        Axis.fn.init.call(this, axisOptions, chartService);

	        this.totalMin = defined(options.min) ? Math.min(autoMin, options.min) : autoMin;
	        this.totalMax = defined(options.max) ? Math.max(autoMax, options.max) : autoMax;
	        this.logMin = round(log(range.min, base), DEFAULT_PRECISION);
	        this.logMax = round(log(range.max, base), DEFAULT_PRECISION);
	        this.seriesMin = seriesMin;
	        this.seriesMax = seriesMax;

	        this.createLabels();
	    },

	    startValue: function() {
	        return this.options.min;
	    },

	    getSlot: function(a, b, limit) {
	        var ref = this;
	        var options = ref.options;
	        var logMin = ref.logMin;
	        var logMax = ref.logMax;
	        var reverse = options.reverse;
	        var vertical = options.vertical;
	        var base = options.majorUnit;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var dir = reverse ? -1 : 1;
	        var step = dir * (lineSize / (logMax - logMin));
	        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);
	        var start = a;
	        var end = b;

	        if (!defined(start)) {
	            start = end || 1;
	        }

	        if (!defined(end)) {
	            end = start || 1;
	        }

	        if (start <= 0 || end <= 0) {
	            return null;
	        }

	        if (limit) {
	            start = Math.max(Math.min(start, options.max), options.min);
	            end = Math.max(Math.min(end, options.max), options.min);
	        }

	        start = log(start, base);
	        end = log(end, base);

	        var p1, p2;

	        if (vertical) {
	            p1 = logMax - Math.max(start, end);
	            p2 = logMax - Math.min(start, end);
	        } else {
	            p1 = Math.min(start, end) - logMin;
	            p2 = Math.max(start, end) - logMin;
	        }

	        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));
	        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));

	        return slotBox;
	    },

	    getValue: function(point) {
	        var ref = this;
	        var options = ref.options;
	        var logMin = ref.logMin;
	        var logMax = ref.logMax;
	        var reverse = options.reverse;
	        var vertical = options.vertical;
	        var base = options.majorUnit;
	        var lineBox = this.lineBox();
	        var dir = vertical === reverse ? 1 : -1;
	        var startEdge = dir === 1 ? 1 : 2;
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var step = ((logMax - logMin) / lineSize);
	        var valueAxis = vertical ? Y : X;
	        var lineStart = lineBox[valueAxis + startEdge];
	        var offset = dir * (point[valueAxis] - lineStart);
	        var valueOffset = offset * step;

	        if (offset < 0 || offset > lineSize) {
	            return null;
	        }

	        var value = logMin + valueOffset;

	        return round(Math.pow(base, value), DEFAULT_PRECISION);
	    },

	    range: function() {
	        var options = this.options;
	        return { min: options.min, max: options.max };
	    },

	    scaleRange: function(delta) {
	        var base = this.options.majorUnit;
	        var offset = -delta;

	        return {
	            min: Math.pow(base, this.logMin - offset),
	            max: Math.pow(base, this.logMax + offset)
	        };
	    },

	    translateRange: function(delta) {
	        var ref = this;
	        var options = ref.options;
	        var logMin = ref.logMin;
	        var logMax = ref.logMax;
	        var reverse = options.reverse;
	        var vertical = options.vertical;
	        var base = options.majorUnit;
	        var lineBox = this.lineBox();
	        var size = vertical ? lineBox.height() : lineBox.width();
	        var scale = size / (logMax - logMin);
	        var offset = round(delta / scale, DEFAULT_PRECISION);

	        if ((vertical || reverse) && !(vertical && reverse )) {
	            offset = -offset;
	        }

	        return {
	            min: Math.pow(base, logMin + offset),
	            max: Math.pow(base, logMax + offset)
	        };
	    },

	    labelsCount: function() {
	        var floorMax = Math.floor(this.logMax);
	        var count = Math.floor(floorMax - this.logMin) + 1;

	        return count;
	    },

	    getMajorTickPositions: function() {
	        var ticks = [];

	        this.traverseMajorTicksPositions(function (position) {
	            ticks.push(position);
	        }, { step: 1, skip: 0 });

	        return ticks;
	    },

	    createTicks: function(lineGroup) {
	        var options = this.options;
	        var majorTicks = options.majorTicks;
	        var minorTicks = options.minorTicks;
	        var vertical = options.vertical;
	        var mirror = options.labels.mirror;
	        var lineBox = this.lineBox();
	        var ticks = [];
	        var tickLineOptions = {
	            // TODO
	            // _alignLines: options._alignLines,
	            vertical: vertical
	        };

	        function render(tickPosition, tickOptions) {
	            tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;
	            tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;
	            tickLineOptions.position = tickPosition;

	            lineGroup.append(createAxisTick(tickLineOptions, tickOptions));
	        }

	        if (majorTicks.visible) {
	            this.traverseMajorTicksPositions(render, majorTicks);
	        }

	        if (minorTicks.visible) {
	            this.traverseMinorTicksPositions(render, minorTicks);
	        }

	        return ticks;
	    },

	    createGridLines: function(altAxis) {
	        var options = this.options;
	        var minorGridLines = options.minorGridLines;
	        var majorGridLines = options.majorGridLines;
	        var vertical = options.vertical;
	        var lineBox = altAxis.lineBox();
	        var lineOptions = {
	            lineStart: lineBox[vertical ? "x1" : "y1"],
	            lineEnd: lineBox[vertical ? "x2" : "y2"],
	            vertical: vertical
	        };
	        var majorTicks = [];

	        var container = this.gridLinesVisual();
	        function render(tickPosition, gridLine) {
	            if (!inArray(tickPosition, majorTicks)) {
	                lineOptions.position = tickPosition;
	                container.append(createAxisGridLine(lineOptions, gridLine));

	                majorTicks.push(tickPosition);
	            }
	        }

	        if (majorGridLines.visible) {
	            this.traverseMajorTicksPositions(render, majorGridLines);
	        }

	        if (minorGridLines.visible) {
	            this.traverseMinorTicksPositions(render, minorGridLines);
	        }

	        return container.children;
	    },

	    traverseMajorTicksPositions: function(callback, tickOptions) {
	        var ref = this._lineOptions();
	        var lineStart = ref.lineStart;
	        var step = ref.step;
	        var ref$1 = this;
	        var logMin = ref$1.logMin;
	        var logMax = ref$1.logMax;

	        for (var power = Math.ceil(logMin) + tickOptions.skip; power <= logMax; power += tickOptions.step) {
	            var position = round(lineStart + step * (power - logMin), DEFAULT_PRECISION);
	            callback(position, tickOptions);
	        }
	    },

	    traverseMinorTicksPositions: function(callback, tickOptions) {
	        var this$1 = this;

	        var ref = this.options;
	        var min = ref.min;
	        var max = ref.max;
	        var minorUnit = ref.minorUnit;
	        var base = ref.majorUnit;
	        var ref$1 = this._lineOptions();
	        var lineStart = ref$1.lineStart;
	        var step = ref$1.step;
	        var ref$2 = this;
	        var logMin = ref$2.logMin;
	        var logMax = ref$2.logMax;
	        var start = Math.floor(logMin);

	        for (var power = start; power < logMax; power++) {
	            var minorOptions = this$1._minorIntervalOptions(power);
	            for (var idx = tickOptions.skip; idx < minorUnit; idx += tickOptions.step) {
	                var value = minorOptions.value + idx * minorOptions.minorStep;
	                if (value > max) {
	                    break;
	                }
	                if (value >= min) {
	                    var position = round(lineStart + step * (log(value, base) - logMin), DEFAULT_PRECISION);
	                    callback(position, tickOptions);
	                }
	            }
	        }
	    },

	    createAxisLabel: function(index, labelOptions) {
	        var power = Math.ceil(this.logMin + index);
	        var value = Math.pow(this.options.majorUnit, power);
	        var text = this.axisLabelText(value, null, labelOptions);

	        return new AxisLabel(value, text, index, null, labelOptions);
	    },

	    shouldRenderNote: function(value) {
	        var range = this.range();
	        return range.min <= value && value <= range.max;
	    },

	    pan: function(delta) {
	        var range = this.translateRange(delta);
	        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, -delta);
	    },

	    pointsRange: function(start, end) {
	        var startValue = this.getValue(start);
	        var endValue = this.getValue(end);
	        var min = Math.min(startValue, endValue);
	        var max = Math.max(startValue, endValue);

	        return {
	            min: min,
	            max: max
	        };
	    },

	    zoomRange: function(delta) {
	        var ref = this;
	        var options = ref.options;
	        var totalMin = ref.totalMin;
	        var totalMax = ref.totalMax;
	        var newRange = this.scaleRange(delta);
	        var min = limitValue(newRange.min, totalMin, totalMax);
	        var max = limitValue(newRange.max, totalMin, totalMax);
	        var base = options.majorUnit;
	        var acceptOptionsRange = max > min && options.min && options.max && (round(log(options.max, base) - log(options.min, base), DEFAULT_PRECISION) < 1);
	        var acceptNewRange = !(options.min === totalMin && options.max === totalMax) && round(log(max, base) - log(min, base), DEFAULT_PRECISION) >= 1;

	        if (acceptOptionsRange || acceptNewRange) {
	            return {
	                min: min,
	                max: max
	            };
	        }
	    },

	    _minorIntervalOptions: function(power) {
	        var ref = this.options;
	        var minorUnit = ref.minorUnit;
	        var base = ref.majorUnit;
	        var value = Math.pow(base, power);
	        var nextValue = Math.pow(base, power + 1);
	        var difference = nextValue - value;
	        var minorStep = difference / minorUnit;

	        return {
	            value: value,
	            minorStep: minorStep
	        };
	    },

	    _lineOptions: function() {
	        var ref = this.options;
	        var reverse = ref.reverse;
	        var vertical = ref.vertical;
	        var valueAxis = vertical ? Y : X;
	        var lineBox = this.lineBox();
	        var dir = vertical === reverse ? 1 : -1;
	        var startEdge = dir === 1 ? 1 : 2;
	        var lineSize = vertical ? lineBox.height() : lineBox.width();
	        var step = dir * (lineSize / (this.logMax - this.logMin));
	        var lineStart = lineBox[valueAxis + startEdge];

	        return {
	            step: step,
	            lineStart: lineStart,
	            lineBox: lineBox
	        };
	    }
	});

	function initRange(autoMin, autoMax, axisOptions, options) {
	    var min = axisOptions.min;
	    var max = axisOptions.max;

	    if (defined(axisOptions.axisCrossingValue) && axisOptions.axisCrossingValue <= 0) {
	        throwNegativeValuesError();
	    }

	    if (!defined(options.max)) {
	        max = autoMax;
	    } else if (options.max <= 0) {
	        throwNegativeValuesError();
	    }

	    if (!defined(options.min)) {
	        min = autoMin;
	    } else if (options.min <= 0) {
	        throwNegativeValuesError();
	    }

	    return {
	        min: min,
	        max: max
	    };
	}

	function autoAxisMin$1(min, max, options) {
	    var base = options.majorUnit;
	    var autoMin = min;
	    if (min <= 0) {
	        autoMin = max <= 1 ? Math.pow(base, -2) : 1;
	    } else if (!options.narrowRange) {
	        autoMin = Math.pow(base, Math.floor(log(min, base)));
	    }
	    return autoMin;
	}

	function autoAxisMax$1(max, base) {
	    var logMaxRemainder = round(log(max, base), DEFAULT_PRECISION) % 1;
	    var autoMax;
	    if (max <= 0) {
	        autoMax = base;
	    } else if (logMaxRemainder !== 0 && (logMaxRemainder < 0.3 || logMaxRemainder > 0.9)) {
	        autoMax = Math.pow(base, log(max, base) + 0.2);
	    } else {
	        autoMax = Math.pow(base, Math.ceil(log(max, base)));
	    }

	    return autoMax;
	}

	function throwNegativeValuesError() {
	    throw new Error("Non positive values cannot be used for a logarithmic axis");
	}

	function log(y, x) {
	    return Math.log(y) / Math.log(x);
	}

	setDefaultOptions(LogarithmicAxis, {
	    type: "log",
	    majorUnit: DEFAULT_MAJOR_UNIT,
	    minorUnit: 1,
	    axisCrossingValue: 1,
	    vertical: true,
	    majorGridLines: {
	        visible: true,
	        width: 1,
	        color: BLACK
	    },
	    zIndex: 1,
	    _deferLabels: true
	});

	var GridLinesMixin = {
	    createGridLines: function(altAxis) {
	        var options = this.options;
	        var radius = Math.abs(this.box.center().y - altAxis.lineBox().y1);
	        var gridLines = [];
	        var skipMajor = false;
	        var majorAngles, minorAngles;

	        if (options.majorGridLines.visible) {
	            majorAngles = this.majorGridLineAngles(altAxis);
	            skipMajor = true;

	            gridLines = this.renderMajorGridLines(
	                majorAngles, radius, options.majorGridLines
	            );
	        }

	        if (options.minorGridLines.visible) {
	            minorAngles = this.minorGridLineAngles(altAxis, skipMajor);

	            append(gridLines, this.renderMinorGridLines(
	                minorAngles, radius, options.minorGridLines, altAxis, skipMajor
	            ));
	        }

	        return gridLines;
	    },

	    renderMajorGridLines: function(angles, radius, options) {
	        return this.renderGridLines(angles, radius, options);
	    },

	    renderMinorGridLines: function(angles, radius, options, altAxis, skipMajor) {
	        var radiusCallback = this.radiusCallback && this.radiusCallback(radius, altAxis, skipMajor);
	        return this.renderGridLines(angles, radius, options, radiusCallback);
	    },

	    renderGridLines: function(angles, radius, options, radiusCallback) {
	        var style = {
	            stroke: {
	                width: options.width,
	                color: options.color,
	                dashType: options.dashType
	            }
	        };

	        var center = this.box.center();
	        var circle = new Circle([ center.x, center.y ], radius);
	        var container = this.gridLinesVisual();

	        for (var i = 0; i < angles.length; i++) {
	            var line = new Path(style);
	            if (radiusCallback) {
	                circle.radius = radiusCallback(angles[i]);
	            }

	            line.moveTo(circle.center)
	                .lineTo(circle.pointAt(angles[i] + 180));

	            container.append(line);
	        }

	        return container.children;
	    },

	    gridLineAngles: function(altAxis, size, skip, step, skipAngles) {
	        var this$1 = this;

	        var divs = this.intervals(size, skip, step, skipAngles);
	        var options = altAxis.options;
	        var altAxisVisible = options.visible && (options.line || {}).visible !== false;

	        return map(divs, function (d) {
	            var alpha = this$1.intervalAngle(d);

	            if (!altAxisVisible || alpha !== 90) {
	                return alpha;
	            }
	        });
	    }
	};

	var RadarCategoryAxis = CategoryAxis.extend({
	    range: function() {
	        return { min: 0, max: this.options.categories.length };
	    },

	    reflow: function(box) {
	        this.box = box;
	        this.reflowLabels();
	    },

	    lineBox: function() {
	        return this.box;
	    },

	    reflowLabels: function() {
	        var this$1 = this;

	        var ref = this;
	        var labels = ref.labels;
	        var labelOptions = ref.options.labels;
	        var skip = labelOptions.skip || 0;
	        var step = labelOptions.step || 1;
	        var measureBox = new Box();

	        for (var i = 0; i < labels.length; i++) {
	            labels[i].reflow(measureBox);
	            var labelBox = labels[i].box;

	            labels[i].reflow(this$1.getSlot(skip + i * step).adjacentBox(
	                0, labelBox.width(), labelBox.height()
	            ));
	        }
	    },

	    intervals: function(size, skipOption, stepOption, skipAngles) {
	        if (skipAngles === void 0) { skipAngles = false; }

	        var options = this.options;
	        var categories = options.categories.length;
	        var divCount = categories / size || 1;
	        var divAngle = 360 / divCount;
	        var skip = skipOption || 0;
	        var step = stepOption || 1;
	        var divs = [];
	        var angle = 0;

	        for (var i = skip; i < divCount; i += step) {
	            if (options.reverse) {
	                angle = 360 - i * divAngle;
	            } else {
	                angle = i * divAngle;
	            }

	            angle = round(angle, COORD_PRECISION) % 360;

	            if (!(skipAngles && inArray(angle, skipAngles))) {
	                divs.push(angle);
	            }
	        }

	        return divs;
	    },

	    majorIntervals: function() {
	        return this.intervals(1);
	    },

	    minorIntervals: function() {
	        return this.intervals(0.5);
	    },

	    intervalAngle: function(interval) {
	        return (360 + interval + this.options.startAngle) % 360;
	    },

	    majorAngles: function() {
	        var this$1 = this;

	        return map(this.majorIntervals(), function (interval) { return this$1.intervalAngle(interval); });
	    },

	    createLine: function() {
	        return [];
	    },

	    majorGridLineAngles: function(altAxis) {
	        var majorGridLines = this.options.majorGridLines;
	        return this.gridLineAngles(altAxis, 1, majorGridLines.skip, majorGridLines.step);
	    },

	    minorGridLineAngles: function(altAxis, skipMajor) {
	        var ref = this.options;
	        var minorGridLines = ref.minorGridLines;
	        var majorGridLines = ref.majorGridLines;
	        var majorGridLineAngles = skipMajor ? this.intervals(1, majorGridLines.skip, majorGridLines.step) : null;

	        return this.gridLineAngles(altAxis, 0.5, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);
	    },

	    radiusCallback: function(radius, altAxis, skipMajor) {
	        if (altAxis.options.type !== ARC) {
	            var minorAngle = rad(360 / (this.options.categories.length * 2));
	            var minorRadius = Math.cos(minorAngle) * radius;
	            var majorAngles = this.majorAngles();

	            var radiusCallback = function(angle) {
	                if (!skipMajor && inArray(angle, majorAngles)) {
	                    return radius;
	                }

	                return minorRadius;
	            };
	            return radiusCallback;
	        }
	    },

	    createPlotBands: function() {
	        var this$1 = this;

	        var plotBands = this.options.plotBands || [];

	        var group = this._plotbandGroup = new Group({
	            zIndex: -1
	        });

	        for (var i = 0; i < plotBands.length; i++) {
	            var band = plotBands[i];
	            var slot = this$1.plotBandSlot(band);
	            var singleSlot = this$1.getSlot(band.from);

	            var head = band.from - Math.floor(band.from);
	            slot.startAngle += head * singleSlot.angle;

	            var tail = Math.ceil(band.to) - band.to;
	            slot.angle -= (tail + head) * singleSlot.angle;

	            var ring = ShapeBuilder.current.createRing(slot, {
	                fill: {
	                    color: band.color,
	                    opacity: band.opacity
	                },
	                stroke: {
	                    opacity: band.opacity
	                }
	            });
	            group.append(ring);
	        }

	        this.appendVisual(group);
	    },

	    plotBandSlot: function(band) {
	        return this.getSlot(band.from, band.to - 1);
	    },

	    getSlot: function(from, to) {
	        var options = this.options;
	        var justified = options.justified;
	        var box = this.box;
	        var divs = this.majorAngles();
	        var totalDivs = divs.length;
	        var slotAngle = 360 / totalDivs;
	        var fromValue = from;

	        if (options.reverse && !justified) {
	            fromValue = (fromValue + 1) % totalDivs;
	        }

	        fromValue = limitValue(Math.floor(fromValue), 0, totalDivs - 1);
	        var slotStart = divs[fromValue];

	        if (justified) {
	            slotStart = slotStart - slotAngle / 2;

	            if (slotStart < 0) {
	                slotStart += 360;
	            }
	        }

	        var toValue = limitValue(Math.ceil(to || fromValue), fromValue, totalDivs - 1);
	        var slots = toValue - fromValue + 1;
	        var angle = slotAngle * slots;

	        return new Ring(box.center(), 0, box.height() / 2, slotStart, angle);
	    },

	    slot: function(from, to) {
	        var slot = this.getSlot(from, to);
	        var startAngle = slot.startAngle + 180;
	        var endAngle = startAngle + slot.angle;

	        return new geometry.Arc([ slot.center.x, slot.center.y ], {
	            startAngle: startAngle,
	            endAngle: endAngle,
	            radiusX: slot.radius,
	            radiusY: slot.radius
	        });
	    },

	    pointCategoryIndex: function(point) {
	        var this$1 = this;

	        var length = this.options.categories.length;
	        var index = null;

	        for (var i = 0; i < length; i++) {
	            var slot = this$1.getSlot(i);
	            if (slot.containsPoint(point)) {
	                index = i;
	                break;
	            }
	        }

	        return index;
	    }
	});

	setDefaultOptions(RadarCategoryAxis, {
	    startAngle: 90,
	    labels: {
	        margin: getSpacing(10)
	    },
	    majorGridLines: {
	        visible: true
	    },
	    justified: true
	});
	deepExtend(RadarCategoryAxis.prototype, GridLinesMixin);

	var PolarAxis = Axis.extend({
	    init: function(options, chartService) {
	        Axis.fn.init.call(this, options, chartService);

	        var instanceOptions = this.options;

	        instanceOptions.minorUnit = instanceOptions.minorUnit || instanceOptions.majorUnit / 2;
	    },

	    getDivisions: function(stepValue) {
	        return NumericAxis.prototype.getDivisions.call(this, stepValue) - 1;
	    },

	    reflow: function(box) {
	        this.box = box;
	        this.reflowLabels();
	    },

	    reflowLabels: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var labels = ref.labels;
	        var labelOptions = ref.options.labels;
	        var skip = labelOptions.skip || 0;
	        var step = labelOptions.step || 1;

	        var measureBox = new Box();
	        var divs = this.intervals(options.majorUnit, skip, step);

	        for (var i = 0; i < labels.length; i++) {
	            labels[i].reflow(measureBox);
	            var labelBox = labels[i].box;

	            labels[i].reflow(this$1.getSlot(divs[i]).adjacentBox(0, labelBox.width(), labelBox.height()));
	        }
	    },

	    lineBox: function() {
	        return this.box;
	    },

	    intervals: function(size, skipOption, stepOption, skipAngles) {
	        if (skipAngles === void 0) { skipAngles = false; }

	        var min = this.options.min;
	        var divisions = this.getDivisions(size);
	        var divs = [];
	        var skip = skipOption || 0;
	        var step = stepOption || 1;

	        for (var i = skip; i < divisions; i += step) {
	            var current = (360 + min + i * size) % 360;
	            if (!(skipAngles && inArray(current, skipAngles))) {
	                divs.push(current);
	            }
	        }

	        return divs;
	    },

	    majorIntervals: function() {
	        return this.intervals(this.options.majorUnit);
	    },

	    minorIntervals: function() {
	        return this.intervals(this.options.minorUnit);
	    },

	    intervalAngle: function(i) {
	        return (540 - i - this.options.startAngle) % 360;
	    },

	    createLine: function() {
	        return [];
	    },

	    majorGridLineAngles: function(altAxis) {
	        var majorGridLines = this.options.majorGridLines;
	        return this.gridLineAngles(altAxis, this.options.majorUnit, majorGridLines.skip, majorGridLines.step);
	    },

	    minorGridLineAngles: function(altAxis, skipMajor) {
	        var options = this.options;
	        var minorGridLines = options.minorGridLines;
	        var majorGridLines = options.majorGridLines;
	        var majorGridLineAngles = skipMajor ? this.intervals(options.majorUnit, majorGridLines.skip, majorGridLines.step) : null;

	        return this.gridLineAngles(altAxis, options.minorUnit, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);
	    },

	    plotBandSlot: function(band) {
	        return this.getSlot(band.from, band.to);
	    },

	    getSlot: function(a, b) {
	        var ref = this;
	        var options = ref.options;
	        var box = ref.box;
	        var startAngle = options.startAngle;
	        var start = limitValue(a, options.min, options.max);
	        var end = limitValue(b || start, start, options.max);

	        if (options.reverse) {
	            start *= -1;
	            end *= -1;
	        }

	        start = (540 - start - startAngle) % 360;
	        end = (540 - end - startAngle) % 360;

	        if (end < start) {
	            var tmp = start;
	            start = end;
	            end = tmp;
	        }

	        return new Ring(box.center(), 0, box.height() / 2, start, end - start);
	    },

	    slot: function(from, to) {
	        if (to === void 0) { to = from; }

	        var options = this.options;
	        var start = 360 - options.startAngle;
	        var slot = this.getSlot(from, to);
	        var min = Math.min(from, to);
	        var max = Math.max(from, to);
	        var startAngle, endAngle;

	        if (options.reverse) {
	            startAngle = min;
	            endAngle = max;
	        } else {
	            startAngle = 360 - max;
	            endAngle = 360 - min;
	        }

	        startAngle = (startAngle + start) % 360;
	        endAngle = (endAngle + start) % 360;

	        return new geometry.Arc([ slot.center.x, slot.center.y ], {
	            startAngle: startAngle,
	            endAngle: endAngle,
	            radiusX: slot.radius,
	            radiusY: slot.radius
	        });
	    },

	    getValue: function(point) {
	        var options = this.options;
	        var center = this.box.center();
	        var dx = point.x - center.x;
	        var dy = point.y - center.y;
	        var theta = Math.round(deg(Math.atan2(dy, dx)));
	        var start = options.startAngle;

	        if (!options.reverse) {
	            theta *= -1;
	            start *= -1;
	        }

	        return (theta + start + 360) % 360;
	    },

	    valueRange: function() {
	        return {
	            min: 0,
	            max: Math.PI * 2
	        };
	    }
	});

	setDefaultOptions(PolarAxis, {
	    type: "polar",
	    startAngle: 0,
	    reverse: false,
	    majorUnit: 60,
	    min: 0,
	    max: 360,
	    labels: {
	        margin: getSpacing(10)
	    },
	    majorGridLines: {
	        color: BLACK,
	        visible: true,
	        width: 1
	    },
	    minorGridLines: {
	        color: "#aaa"
	    }
	});

	deepExtend(PolarAxis.prototype, GridLinesMixin, {
	    createPlotBands: RadarCategoryAxis.prototype.createPlotBands,
	    majorAngles: RadarCategoryAxis.prototype.majorAngles,
	    range: NumericAxis.prototype.range,
	    labelsCount: NumericAxis.prototype.labelsCount,
	    createAxisLabel: NumericAxis.prototype.createAxisLabel
	});

	var RadarNumericAxisMixin = {
	    options: {
	        majorGridLines: {
	            visible: true
	        }
	    },

	    createPlotBands: function() {
	        var this$1 = this;

	        var ref = this.options;
	        var type = ref.majorGridLines.type;
	        var plotBands = ref.plotBands; if (plotBands === void 0) { plotBands = []; }
	        var altAxis = this.plotArea.polarAxis;
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var group = this._plotbandGroup = new Group({
	            zIndex: -1
	        });

	        for (var i = 0; i < plotBands.length; i++) {
	            var band = plotBands[i];
	            var bandStyle = {
	                fill: {
	                    color: band.color,
	                    opacity: band.opacity
	                },
	                stroke: {
	                    opacity: band.opacity
	                }
	            };

	            var slot = this$1.getSlot(band.from, band.to, true);
	            var ring = new Ring(center, center.y - slot.y2, center.y - slot.y1, 0, 360);

	            var shape = (void 0);
	            if (type === ARC) {
	                shape = ShapeBuilder.current.createRing(ring, bandStyle);
	            } else {
	                shape = Path.fromPoints(this$1.plotBandPoints(ring, majorAngles), bandStyle).close();
	            }

	            group.append(shape);
	        }

	        this.appendVisual(group);
	    },

	    plotBandPoints: function(ring, angles) {
	        var innerPoints = [];
	        var outerPoints = [];
	        var center = [ ring.center.x, ring.center.y ];
	        var innerCircle = new Circle(center, ring.innerRadius);
	        var outerCircle = new Circle(center, ring.radius);

	        for (var i = 0; i < angles.length; i++) {
	            innerPoints.push(innerCircle.pointAt(angles[i] + 180));
	            outerPoints.push(outerCircle.pointAt(angles[i] + 180));
	        }

	        innerPoints.reverse();
	        innerPoints.push(innerPoints[0]);
	        outerPoints.push(outerPoints[0]);

	        return outerPoints.concat(innerPoints);
	    },

	    createGridLines: function(altAxis) {
	        var options = this.options;
	        var majorTicks = this.radarMajorGridLinePositions();
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var gridLines = [];

	        if (options.majorGridLines.visible) {
	            gridLines = this.renderGridLines(
	                center, majorTicks, majorAngles, options.majorGridLines
	            );
	        }

	        if (options.minorGridLines.visible) {
	            var minorTicks = this.radarMinorGridLinePositions();
	            append(gridLines, this.renderGridLines(
	                center, minorTicks, majorAngles, options.minorGridLines
	            ));
	        }

	        return gridLines;
	    },

	    renderGridLines: function(center, ticks, angles, options) {
	        var style = {
	            stroke: {
	                width: options.width,
	                color: options.color,
	                dashType: options.dashType
	            }
	        };
	        var skip = options.skip; if (skip === void 0) { skip = 0; }
	        var step = options.step; if (step === void 0) { step = 0; }
	        var container = this.gridLinesVisual();

	        for (var tickIx = skip; tickIx < ticks.length; tickIx += step) {
	            var tickRadius = center.y - ticks[tickIx];
	            if (tickRadius > 0) {
	                var circle = new Circle([ center.x, center.y ], tickRadius);
	                if (options.type === ARC) {
	                    container.append(new drawing.Circle(circle, style));
	                } else {
	                    var line = new Path(style);
	                    for (var angleIx = 0; angleIx < angles.length; angleIx++) {
	                        line.lineTo(circle.pointAt(angles[angleIx] + 180));
	                    }

	                    line.close();
	                    container.append(line);
	                }
	            }
	        }

	        return container.children;
	    },

	    getValue: function(point) {
	        var lineBox = this.lineBox();
	        var altAxis = this.plotArea.polarAxis;
	        var majorAngles = altAxis.majorAngles();
	        var center = altAxis.box.center();
	        var radius = point.distanceTo(center);
	        var distance = radius;

	        if (this.options.majorGridLines.type !== ARC && majorAngles.length > 1) {
	            var dx = point.x - center.x;
	            var dy = point.y - center.y;
	            var theta = (deg(Math.atan2(dy, dx)) + 540) % 360;

	            majorAngles.sort(function(a, b) {
	                return angularDistance(a, theta) - angularDistance(b, theta);
	            });

	            // Solve triangle (center, point, axis X) using one side (radius) and two angles.
	            // Angles are derived from triangle (center, point, gridline X)
	            var midAngle = angularDistance(majorAngles[0], majorAngles[1]) / 2;
	            var alpha = angularDistance(theta, majorAngles[0]);
	            var gamma = 90 - midAngle;
	            var beta = 180 - alpha - gamma;

	            distance = radius * (Math.sin(rad(beta)) / Math.sin(rad(gamma)));
	        }

	        return this.axisType().prototype.getValue.call(
	            this, new Point(lineBox.x1, lineBox.y2 - distance)
	        );
	    }
	};

	function angularDistance(a, b) {
	    return 180 - Math.abs(Math.abs(a - b) - 180);
	}

	var RadarNumericAxis = NumericAxis.extend({
	    radarMajorGridLinePositions: function() {
	        return this.getTickPositions(this.options.majorUnit);
	    },

	    radarMinorGridLinePositions: function() {
	        var options = this.options;
	        var minorSkipStep = 0;

	        if (options.majorGridLines.visible) {
	            minorSkipStep = options.majorUnit;
	        }
	        return this.getTickPositions(options.minorUnit, minorSkipStep);
	    },

	    axisType: function() {
	        return NumericAxis;
	    }
	});

	deepExtend(RadarNumericAxis.prototype, RadarNumericAxisMixin);

	var RadarLogarithmicAxis = LogarithmicAxis.extend({
	    radarMajorGridLinePositions: function() {
	        var positions = [];

	        this.traverseMajorTicksPositions(function(position) {
	            positions.push(position);
	        }, this.options.majorGridLines);

	        return positions;
	    },

	    radarMinorGridLinePositions: function() {
	        var positions = [];

	        this.traverseMinorTicksPositions(function(position) {
	            positions.push(position);
	        }, this.options.minorGridLines);

	        return positions;
	    },

	    axisType: function() {
	        return LogarithmicAxis;
	    }
	});

	deepExtend(RadarLogarithmicAxis.prototype, RadarNumericAxisMixin);

	var WEIGHT = 0.333;
	var EXTREMUM_ALLOWED_DEVIATION = 0.01;

	var CurveProcessor = Class.extend({
	    init: function(closed) {

	        this.closed = closed;
	    },

	    process: function(dataPoints) {
	        var this$1 = this;

	        var points = dataPoints.slice(0);
	        var segments = [];
	        var closed = this.closed;
	        var length = points.length;

	        if (length > 2) {
	            this.removeDuplicates(0, points);
	            length = points.length;
	        }

	        if (length < 2 || (length === 2 && points[0].equals(points[1]))) {
	            return segments;
	        }

	        var p0 = points[0];
	        var p1 = points[1];
	        var p2 = points[2];

	        segments.push(new Segment(p0));

	        while (p0.equals(points[length - 1])) {
	            closed = true;
	            points.pop();
	            length--;
	        }

	        if (length === 2) {
	            var tangent = this.tangent(p0,p1, X, Y);

	            last(segments).controlOut(
	                this.firstControlPoint(tangent, p0, p1, X, Y)
	            );

	            segments.push(new Segment(
	                p1,
	                this.secondControlPoint(tangent, p0, p1, X, Y)
	            ));

	            return segments;
	        }

	        var initialControlPoint, lastControlPoint;

	        if (closed) {
	            p0 = points[length - 1]; p1 = points[0]; p2 = points[1];
	            var controlPoints = this.controlPoints(p0, p1, p2);
	            initialControlPoint = controlPoints[1];
	            lastControlPoint = controlPoints[0];
	        } else {
	            var tangent$1 = this.tangent(p0, p1, X,Y);
	            initialControlPoint = this.firstControlPoint(tangent$1, p0, p1, X, Y);
	        }

	        var cp0 = initialControlPoint;
	        for (var idx = 0; idx <= length - 3; idx++) {
	            this$1.removeDuplicates(idx, points);
	            length = points.length;
	            if (idx + 3 <= length) {
	                p0 = points[idx]; p1 = points[idx + 1]; p2 = points[idx + 2];
	                var controlPoints$1 = this$1.controlPoints(p0,p1,p2);

	                last(segments).controlOut(cp0);
	                cp0 = controlPoints$1[1];

	                var cp1 = controlPoints$1[0];
	                segments.push(new Segment(p1, cp1));
	            }
	        }

	        if (closed) {
	            p0 = points[length - 2]; p1 = points[length - 1]; p2 = points[0];
	            var controlPoints$2 = this.controlPoints(p0, p1, p2);

	            last(segments).controlOut(cp0);
	            segments.push(new Segment(
	                p1,
	                controlPoints$2[0]
	            ));

	            last(segments).controlOut(controlPoints$2[1]);
	            segments.push(new Segment(
	                p2,
	                lastControlPoint
	            ));
	        } else {
	            var tangent$2 = this.tangent(p1, p2, X, Y);

	            last(segments).controlOut(cp0);
	            segments.push(new Segment(
	                p2,
	                this.secondControlPoint(tangent$2, p1, p2, X, Y)
	            ));
	        }

	        return segments;
	    },

	    removeDuplicates: function(idx, points) {
	        while (points[idx + 1] && (points[idx].equals(points[idx + 1]) || points[idx + 1].equals(points[idx + 2]))) {
	            points.splice(idx + 1, 1);
	        }
	    },

	    invertAxis: function(p0, p1, p2) {
	        var invertAxis = false;

	        if (p0.x === p1.x) {
	            invertAxis = true;
	        } else if (p1.x === p2.x) {
	            if ((p1.y < p2.y && p0.y <= p1.y) || (p2.y < p1.y && p1.y <= p0.y)) {
	                invertAxis = true;
	            }
	        } else {
	            var fn = this.lineFunction(p0,p1);
	            var y2 = this.calculateFunction(fn, p2.x);
	            if (!(p0.y <= p1.y && p2.y <= y2) &&
	                !(p1.y <= p0.y && p2.y >= y2)) {
	                invertAxis = true;
	            }
	        }

	        return invertAxis;
	    },

	    isLine: function(p0, p1, p2) {
	        var fn = this.lineFunction(p0, p1);
	        var y2 = this.calculateFunction(fn, p2.x);

	        return (p0.x === p1.x && p1.x === p2.x) || round(y2, 1) === round(p2.y, 1);
	    },

	    lineFunction: function(p1, p2) {
	        var a = (p2.y - p1.y) / (p2.x - p1.x);
	        var b = p1.y - a * p1.x;

	        return [ b, a ];
	    },

	    controlPoints: function(p0, p1, p2) {
	        var xField = X;
	        var yField = Y;
	        var restrict = false;
	        var switchOrientation = false;
	        var tangent;

	        if (this.isLine(p0, p1, p2)) {
	            tangent = this.tangent(p0, p1, X, Y);
	        } else {
	            var monotonic = {
	                x: this.isMonotonicByField(p0, p1, p2, X),
	                y: this.isMonotonicByField(p0, p1, p2, Y)
	            };

	            if (monotonic.x && monotonic.y) {
	                tangent = this.tangent(p0, p2, X, Y);
	                restrict = true;
	            } else {
	                if (this.invertAxis(p0, p1, p2)) {
	                    xField = Y;
	                    yField = X;
	                }

	                if (monotonic[xField]) {
	                    tangent = 0;
	                } else {
	                    var sign;
	                    if ((p2[yField] < p0[yField] && p0[yField] <= p1[yField]) ||
	                        (p0[yField] < p2[yField] && p1[yField] <= p0[yField])) {
	                        sign = numberSign((p2[yField] - p0[yField]) * (p1[xField] - p0[xField]));
	                    } else {
	                        sign = -numberSign((p2[xField] - p0[xField]) * (p1[yField] - p0[yField]));
	                    }

	                    tangent = EXTREMUM_ALLOWED_DEVIATION * sign;
	                    switchOrientation = true;
	                }
	            }
	        }

	        var secondControlPoint = this.secondControlPoint(tangent, p0, p1, xField, yField);

	        if (switchOrientation) {
	            var oldXField = xField;
	            xField = yField;
	            yField = oldXField;
	        }

	        var firstControlPoint = this.firstControlPoint(tangent, p1, p2, xField, yField);

	        if (restrict) {
	            this.restrictControlPoint(p0, p1, secondControlPoint, tangent);
	            this.restrictControlPoint(p1, p2, firstControlPoint, tangent);
	        }

	        return [ secondControlPoint, firstControlPoint ];
	    },

	    restrictControlPoint: function(p1, p2, cp, tangent) {
	        if (p1.y < p2.y) {
	            if (p2.y < cp.y) {
	                cp.x = p1.x + (p2.y - p1.y) / tangent;
	                cp.y = p2.y;
	            } else if (cp.y < p1.y) {
	                cp.x = p2.x - (p2.y - p1.y) / tangent;
	                cp.y = p1.y;
	            }
	        } else {
	            if (cp.y < p2.y) {
	                cp.x = p1.x - (p1.y - p2.y) / tangent;
	                cp.y = p2.y;
	            } else if (p1.y < cp.y) {
	                cp.x = p2.x + (p1.y - p2.y) / tangent;
	                cp.y = p1.y;
	            }
	        }
	    },

	    tangent: function(p0, p1, xField, yField) {
	        var x = p1[xField] - p0[xField];
	        var y = p1[yField] - p0[yField];
	        var tangent;

	        if (x === 0) {
	            tangent = 0;
	        } else {
	            tangent = y / x;
	        }

	        return tangent;
	    },

	    isMonotonicByField: function(p0, p1, p2, field) {
	        return (p2[field] > p1[field] && p1[field] > p0[field]) ||
	                    (p2[field] < p1[field] && p1[field] < p0[field]);
	    },

	    firstControlPoint: function(tangent, p0, p3, xField, yField) {
	        var t1 = p0[xField];
	        var t2 = p3[xField];
	        var distance = (t2 - t1) * WEIGHT;

	        return this.point(t1 + distance, p0[yField] + distance * tangent, xField, yField);
	    },

	    secondControlPoint: function(tangent, p0, p3, xField, yField) {
	        var t1 = p0[xField];
	        var t2 = p3[xField];
	        var distance = (t2 - t1) * WEIGHT;

	        return this.point(t2 - distance, p3[yField] - distance * tangent, xField, yField);
	    },

	    point: function(xValue, yValue, xField, yField) {
	        var controlPoint = new geometry.Point();
	        controlPoint[xField] = xValue;
	        controlPoint[yField] = yValue;

	        return controlPoint;
	    },

	    calculateFunction: function(fn, x) {
	        var length = fn.length;
	        var result = 0;

	        for (var i = 0; i < length; i++) {
	            result += Math.pow(x,i) * fn[i];
	        }
	        return result;
	    }
	});

	function numberSign(value) {
	    return value <= 0 ? -1 : 1;
	}

	dataviz.Gradients = GRADIENTS;

	kendo.deepExtend(kendo.dataviz, {
	    constants: constants,
	    services: services,
	    autoMajorUnit: autoMajorUnit,
	    Point: Point,
	    Box: Box,
	    Ring: Ring,
	    Sector: Sector,
	    ShapeBuilder: ShapeBuilder,
	    ShapeElement: ShapeElement,
	    ChartElement: ChartElement,
	    BoxElement: BoxElement,
	    RootElement: RootElement,
	    FloatElement: FloatElement,
	    Text: Text,
	    TextBox: TextBox,
	    Title: Title,
	    AxisLabel: AxisLabel,
	    Axis: Axis,
	    Note: Note,
	    CategoryAxis: CategoryAxis,
	    DateCategoryAxis: DateCategoryAxis,
	    DateValueAxis: DateValueAxis,
	    NumericAxis: NumericAxis,
	    LogarithmicAxis: LogarithmicAxis,
	    PolarAxis: PolarAxis,
	    RadarCategoryAxis: RadarCategoryAxis,
	    RadarNumericAxis: RadarNumericAxis,
	    RadarLogarithmicAxis: RadarLogarithmicAxis,
	    CurveProcessor: CurveProcessor,
	    rectToBox: rectToBox,
	    addClass: addClass,
	    removeClass: removeClass,
	    alignPathToPixel: alignPathToPixel,
	    clockwise: clockwise,
	    convertableToNumber: convertableToNumber,
	    deepExtend: deepExtend,
	    elementStyles: elementStyles,
	    getSpacing: getSpacing,
	    getTemplate: getTemplate,
	    getter: __common_getter_js,
	    grep: grep,
	    hasClasses: hasClasses,
	    inArray: inArray,
	    interpolateValue: interpolateValue,
	    InstanceObserver: InstanceObserver,
	    isArray: isArray,
	    isFunction: isFunction,
	    isNumber: isNumber,
	    isObject: isObject,
	    isString: isString,
	    map: map,
	    mousewheelDelta: mousewheelDelta,
	    FontLoader: FontLoader,
	    setDefaultOptions: setDefaultOptions,
	    sparseArrayLimits: sparseArrayLimits,
	    styleValue: styleValue,
	    append: append,
	    bindEvents: bindEvents,
	    Class: Class,
	    defined: defined,
	    deg: deg,
	    elementOffset: elementOffset,
	    elementSize: elementSize,
	    eventElement: eventElement,
	    eventCoordinates: eventCoordinates,
	    last: last,
	    limitValue: limitValue,
	    logToConsole: kendo.logToConsole,
	    objectKey: objectKey,
	    rad: rad,
	    round: round,
	    unbindEvents: unbindEvents,
	    valueOrDefault: valueOrDefault,
	    absoluteDateDiff: absoluteDateDiff,
	    addDuration: addDuration,
	    addTicks: addTicks,
	    ceilDate: ceilDate,
	    dateComparer: dateComparer,
	    dateDiff: dateDiff,
	    dateEquals: dateEquals,
	    dateIndex: dateIndex,
	    duration: duration,
	    floorDate: floorDate,
	    lteDateIndex: lteDateIndex,
	    startOfWeek: startOfWeek,
	    toDate: toDate,
	    parseDate: parseDate,
	    parseDates: parseDates,
	    toTime: toTime
	});

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ })

/******/ });

/***/ }),

/***/ 470:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1089);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 1041:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(64);

/***/ }),

/***/ 1089:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(1041),
	        __webpack_require__(1090),
	        __webpack_require__(1091),
	        __webpack_require__(1092)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dataviz.themes",
	    name: "Themes",
	    description: "Built-in themes for the DataViz widgets",
	    category: "dataviz",
	    depends: [ "dataviz.core" ],
	    hidden: true
	};

	}, __webpack_require__(3));


/***/ }),

/***/ 1090:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(471);

/***/ }),

/***/ 1091:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(520);

/***/ }),

/***/ 1092:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(521);

/***/ })

/******/ });

/***/ }),

/***/ 471:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(906);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 850:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(64);

/***/ }),

/***/ 906:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	     !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(850) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function () {

	window.kendo.dataviz = window.kendo.dataviz || {};

	var BAR_GAP = 1.5;
	var BAR_SPACING = 0.4;
	var BLACK = '#000';
	var SANS = 'Arial, Helvetica, sans-serif';
	var SANS11 = "11px " + SANS;
	var SANS12 = '12px ' + SANS;
	var SANS16 = '16px ' + SANS;
	var TRANSPARENT = 'transparent';
	var WHITE = '#fff';

	var notes = function () { return ({
	    icon: {
	        border: {
	            width: 1
	        }
	    },
	    label: {
	        font: SANS12,
	        padding: 3
	    },
	    line: {
	        length: 10,
	        width: 2
	    },
	    visible: true
	}); };

	var axisDefaults = function () { return ({
	    labels: {
	        font: SANS12
	    },
	    notes: notes(),
	    title: {
	        font: SANS16,
	        margin: 5
	    }
	}); };

	var areaSeries = function () { return ({
	    highlight: {
	        markers: {
	            border: {}
	        }
	    },
	    line: {
	        opacity: 1,
	        width: 0
	    },
	    markers: {
	        size: 6,
	        visible: false
	    },
	    opacity: 0.4
	}); };

	var rangeAreaSeries = function () { return ({
	    highlight: {
	        markers: {
	            border: {}
	        }
	    },
	    line: {
	        opacity: 1,
	        width: 0
	    },
	    markers: {
	        size: 6,
	        visible: false
	    },
	    opacity: 0.4
	}); };

	var barSeries = function () { return ({
	    gap: BAR_GAP,
	    spacing: BAR_SPACING
	}); };

	var boxPlotSeries = function () { return ({
	    outliersField: "",
	    meanField: "",
	    border: {
	        _brightness: 0.8,
	        width: 1
	    },
	    downColor: WHITE,
	    gap: 1,
	    highlight: {
	        border: {
	            opacity: 1,
	            width: 2
	        },
	        whiskers: {
	            width: 3
	        },
	        mean: {
	            width: 2
	        },
	        median: {
	            width: 2
	        }
	    },
	    mean: {
	        width: 2
	    },
	    median: {
	        width: 2
	    },
	    spacing: 0.3,
	    whiskers: {
	        width: 2
	    }
	}); };

	var bubbleSeries = function () { return ({
	    border: {
	        width: 0
	    },
	    labels: {
	        background: TRANSPARENT
	    },
	    opacity: 0.6
	}); };

	var bulletSeries = function () { return ({
	    gap: BAR_GAP,
	    spacing: BAR_SPACING,
	    target: {
	        color: "#ff0000"
	    }
	}); };

	var candlestickSeries = function () { return ({
	    border: {
	        _brightness: 0.8,
	        width: 1
	    },
	    downColor: WHITE,
	    gap: 1,
	    highlight: {
	        border: {
	            opacity: 1,
	            width: 2
	        },
	        line: {
	            width: 2
	        }
	    },
	    line: {
	        color: BLACK,
	        width: 1
	    },
	    spacing: 0.3
	}); };

	var columnSeries = function () { return ({
	    gap: BAR_GAP,
	    spacing: BAR_SPACING
	}); };

	var donutSeries = function () { return ({
	    margin: 1
	}); };

	var lineSeries = function () { return ({
	    width: 2
	}); };

	var ohlcSeries = function () { return ({
	    gap: 1,
	    highlight: {
	        line: {
	            opacity: 1,
	            width: 3
	        }
	    },
	    line: {
	        width: 1
	    },
	    spacing: 0.3
	}); };

	var radarAreaSeries = function () { return ({
	    line: {
	        opacity: 1,
	        width: 0
	    },
	    markers: {
	        size: 6,
	        visible: false
	    },
	    opacity: 0.5
	}); };

	var radarLineSeries = function () { return ({
	    markers: {
	        visible: false
	    },
	    width: 2
	}); };

	var rangeBarSeries = function () { return ({
	    gap: BAR_GAP,
	    spacing: BAR_SPACING
	}); };

	var rangeColumnSeries = function () { return ({
	    gap: BAR_GAP,
	    spacing: BAR_SPACING
	}); };

	var scatterLineSeries = function () { return ({
	    width: 1
	}); };

	var waterfallSeries = function () { return ({
	    gap: 0.5,
	    line: {
	        color: BLACK,
	        width: 1
	    },
	    spacing: BAR_SPACING
	}); };

	var pieSeries = function () { return ({
	    labels: {
	        background: '',
	        color: '',
	        padding: {
	            top: 5,
	            bottom: 5,
	            left: 7,
	            right: 7
	        }
	    }
	}); };

	var funnelSeries = function () { return ({
	    labels: {
	        background: '',
	        color: '',
	        padding: {
	            top: 5,
	            bottom: 5,
	            left: 7,
	            right: 7
	        }
	    }
	}); };

	var seriesDefaults = function (options) { return ({
	    visible: true,
	    labels: {
	        font: SANS11
	    },
	    overlay: options.gradients ? {} : {
	        gradient: "none"
	    },
	    area: areaSeries(),
	    rangeArea: rangeAreaSeries(),
	    verticalRangeArea: rangeAreaSeries(),
	    bar: barSeries(),
	    boxPlot: boxPlotSeries(),
	    bubble: bubbleSeries(),
	    bullet: bulletSeries(),
	    candlestick: candlestickSeries(),
	    column: columnSeries(),
	    pie: pieSeries(),
	    donut: donutSeries(),
	    funnel: funnelSeries(),
	    horizontalWaterfall: waterfallSeries(),
	    line: lineSeries(),
	    notes: notes(),
	    ohlc: ohlcSeries(),
	    radarArea: radarAreaSeries(),
	    radarLine: radarLineSeries(),
	    polarArea: radarAreaSeries(),
	    polarLine: radarLineSeries(),
	    rangeBar: rangeBarSeries(),
	    rangeColumn: rangeColumnSeries(),
	    scatterLine: scatterLineSeries(),
	    verticalArea: areaSeries(),
	    verticalBoxPlot: boxPlotSeries(),
	    verticalBullet: bulletSeries(),
	    verticalLine: lineSeries(),
	    waterfall: waterfallSeries()
	}); };

	var title = function () { return ({
	    font: SANS16
	}); };

	var legend = function () { return ({
	    labels: {
	        font: SANS12
	    }
	}); };

	var baseTheme = function (options) {
	    if (options === void 0) { options = {}; }

	    return ({
	    axisDefaults: axisDefaults(),
	    categoryAxis: {
	        majorGridLines: {
	            visible: true
	        }
	    },
	    navigator: {
	        pane: {
	            height: 90,
	            margin: {
	                top: 10
	            }
	        }
	    },
	    seriesDefaults: seriesDefaults(options),
	    title: title(),
	    legend: legend()
	});
	};

	kendo.deepExtend(kendo.dataviz, {
	    chartBaseTheme: baseTheme
	});

	})();

	}, __webpack_require__(3));

/***/ })

/******/ });

/***/ }),

/***/ 472:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(854);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 850:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(64);

/***/ }),

/***/ 852:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(168);

/***/ }),

/***/ 854:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(855),
	        __webpack_require__(856),
	        __webpack_require__(852),
	        __webpack_require__(850)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	window.kendo.dataviz = window.kendo.dataviz || {};
	var dataviz = kendo.dataviz;
	var Class = dataviz.Class;
	var isNumber = dataviz.isNumber;
	var datavizConstants = dataviz.constants;
	var MAX_VALUE = datavizConstants.MAX_VALUE;
	var MIN_VALUE = datavizConstants.MIN_VALUE;
	var VALUE = datavizConstants.VALUE;
	var CENTER = datavizConstants.CENTER;
	var TOP = datavizConstants.TOP;
	var BOTTOM = datavizConstants.BOTTOM;
	var LEFT = datavizConstants.LEFT;
	var WHITE = datavizConstants.WHITE;
	var CIRCLE = datavizConstants.CIRCLE;
	var X = datavizConstants.X;
	var Y = datavizConstants.Y;
	var RIGHT = datavizConstants.RIGHT;
	var BLACK = datavizConstants.BLACK;
	var DATE = datavizConstants.DATE;
	var DEFAULT_PRECISION = datavizConstants.DEFAULT_PRECISION;
	var ARC = datavizConstants.ARC;
	var defined = dataviz.defined;
	var getter = dataviz.getter;
	var isArray = dataviz.isArray;
	var ChartElement = dataviz.ChartElement;
	var Point = dataviz.Point;
	var Box = dataviz.Box;
	var alignPathToPixel = dataviz.alignPathToPixel;
	var setDefaultOptions = dataviz.setDefaultOptions;
	var inArray = dataviz.inArray;
	var isFunction = dataviz.isFunction;
	var valueOrDefault = dataviz.valueOrDefault;
	var isObject = dataviz.isObject;
	var deepExtend = dataviz.deepExtend;
	var last = dataviz.last;
	var eventElement = dataviz.eventElement;
	var getTemplate = dataviz.getTemplate;
	var TextBox = dataviz.TextBox;
	var ShapeElement = dataviz.ShapeElement;
	var getSpacing = dataviz.getSpacing;
	var CurveProcessor = dataviz.CurveProcessor;
	var append = dataviz.append;
	var isString = dataviz.isString;
	var parseDate = dataviz.parseDate;
	var styleValue = dataviz.styleValue;
	var CategoryAxis = dataviz.CategoryAxis;
	var BoxElement = dataviz.BoxElement;
	var round = dataviz.round;
	var grep = dataviz.grep;
	var DateCategoryAxis = dataviz.DateCategoryAxis;
	var elementStyles = dataviz.elementStyles;
	var hasClasses = dataviz.hasClasses;
	var bindEvents = dataviz.bindEvents;
	var services = dataviz.services;
	var unbindEvents = dataviz.unbindEvents;
	var limitValue = dataviz.limitValue;
	var support = kendo.support;
	var drawing = kendo.drawing;
	var Path = drawing.Path;
	var Animation = drawing.Animation;
	var AnimationFactory = drawing.AnimationFactory;
	var Group = drawing.Group;
	var Color = kendo.Color;
	var geometry = kendo.geometry;
	var GeometryPoint = geometry.Point;
	var transform = geometry.transform;

	var ChartAxis = Class.extend({
	    init: function(axis) {

	        this._axis = axis;
	        this.options = axis.options;
	    },

	    value: function(point) {
	        var axis = this._axis;
	        var value = axis.getCategory ? axis.getCategory(point) : axis.getValue(point);

	        return value;
	    },

	    slot: function(from, to, limit) {
	        if (limit === void 0) { limit = true; }

	        return this._axis.slot(from, to, limit);
	    },

	    range: function() {
	        return this._axis.range();
	    },

	    valueRange: function() {
	        return this._axis.valueRange();
	    }
	});

	var ChartPane = kendo.Class.extend({
	    init: function(pane) {
	        this.visual = pane.visual;
	        this.chartsVisual = pane.chartContainer.visual;
	    }
	});

	var ChartPlotArea = Class.extend({
	    init: function(plotArea) {

	        this._plotArea = plotArea;
	        this.visual = plotArea.visual;
	        this.backgroundVisual = plotArea._bgVisual;
	    }
	});

	function countNumbers(values) {
	    var length = values.length;
	    var count = 0;

	    for (var i = 0; i < length; i++) {
	        var num = values[i];
	        if (isNumber(num)) {
	            count++;
	        }
	    }

	    return count;
	}

	var Aggregates = {
	    min: function(values) {
	        var length = values.length;
	        var min = MAX_VALUE;

	        for (var i = 0; i < length; i++) {
	            var value = values[i];
	            if (isNumber(value)) {
	                min = Math.min(min, value);
	            }
	        }

	        return min === MAX_VALUE ? values[0] : min;
	    },

	    max: function(values) {
	        var length = values.length;
	        var max = MIN_VALUE;

	        for (var i = 0; i < length; i++) {
	            var value = values[i];
	            if (isNumber(value)) {
	                max = Math.max(max, value);
	            }
	        }

	        return max === MIN_VALUE ? values[0] : max;
	    },

	    sum: function(values) {
	        var length = values.length;
	        var sum = 0;

	        for (var i = 0; i < length; i++) {
	            var value = values[i];
	            if (isNumber(value)) {
	                sum += value;
	            }
	        }

	        return sum;
	    },

	    sumOrNull: function(values) {
	        var result = null;

	        if (countNumbers(values)) {
	            result = Aggregates.sum(values);
	        }

	        return result;
	    },

	    count: function(values) {
	        var length = values.length;
	        var count = 0;

	        for (var i = 0; i < length; i++) {
	            var value = values[i];
	            if (value !== null && defined(value)) {
	                count++;
	            }
	        }

	        return count;
	    },

	    avg: function(values) {
	        var count = countNumbers(values);
	        var result = values[0];

	        if (count > 0) {
	            result = Aggregates.sum(values) / count;
	        }

	        return result;
	    },

	    first: function(values) {
	        var length = values.length;

	        for (var i = 0; i < length; i++) {
	            var value = values[i];
	            if (value !== null && defined(value)) {
	                return value;
	            }
	        }

	        return values[0];
	    }
	};

	function getField(field, row) {
	    if (row === null) {
	        return row;
	    }

	    var get = getter(field, true);
	    return get(row);
	}

	var SeriesBinder = Class.extend({
	    init: function() {

	        this._valueFields = {};
	        this._otherFields = {};
	        this._nullValue = {};
	        this._undefinedValue = {};
	    },

	    register: function(seriesTypes, valueFields, otherFields) {
	        var this$1 = this;
	        if (valueFields === void 0) { valueFields = [ VALUE ]; }
	        if (otherFields === void 0) { otherFields = {}; }

	        for (var i = 0; i < seriesTypes.length; i++) {
	            var type = seriesTypes[i];

	            this$1._valueFields[type] = valueFields;
	            this$1._otherFields[type] = otherFields;
	            this$1._nullValue[type] = this$1._makeValue(valueFields, null);
	            this$1._undefinedValue[type] = this$1._makeValue(valueFields, undefined);
	        }
	    },

	    canonicalFields: function(series) {
	        return this.valueFields(series).concat(this.otherFields(series));
	    },

	    valueFields: function(series) {
	        return this._valueFields[series.type] || [ VALUE ];
	    },

	    otherFields: function(series) {
	        return this._otherFields[series.type] || [ VALUE ];
	    },

	    bindPoint: function(series, pointIx, item) {
	        var data = series.data;
	        var pointData = defined(item) ? item : data[pointIx];
	        var result = { valueFields: { value: pointData } };
	        var valueFields = this.valueFields(series);
	        var otherFields = this._otherFields[series.type];
	        var fields, value;

	        if (pointData === null) {
	            value = this._nullValue[series.type];
	        } else if (!defined(pointData)) {
	            value = this._undefinedValue[series.type];
	        } else if (Array.isArray(pointData)) {
	            var fieldData = pointData.slice(valueFields.length);
	            value = this._bindFromArray(pointData, valueFields);
	            fields = this._bindFromArray(fieldData, otherFields);
	        } else if (typeof pointData === "object") {
	            var srcValueFields = this.sourceFields(series, valueFields);
	            var srcPointFields = this.sourceFields(series, otherFields);

	            value = this._bindFromObject(pointData, valueFields, srcValueFields);
	            fields = this._bindFromObject(pointData, otherFields, srcPointFields);
	        }

	        if (defined(value)) {
	            if (valueFields.length === 1) {
	                result.valueFields.value = value[valueFields[0]];
	            } else {
	                result.valueFields = value;
	            }
	        }

	        result.fields = fields || {};

	        return result;
	    },

	    _makeValue: function(fields, initialValue) {
	        var value = {};
	        var length = fields.length;

	        for (var i = 0; i < length; i++) {
	            var fieldName = fields[i];
	            value[fieldName] = initialValue;
	        }

	        return value;
	    },

	    _bindFromArray: function(array, fields) {
	        var value = {};

	        if (fields) {
	            var length = Math.min(fields.length, array.length);

	            for (var i = 0; i < length; i++) {
	                value[fields[i]] = array[i];
	            }
	        }

	        return value;
	    },

	    _bindFromObject: function(object, fields, srcFields) {
	        if (srcFields === void 0) { srcFields = fields; }

	        var value = {};

	        if (fields) {
	            var length = fields.length;

	            for (var i = 0; i < length; i++) {
	                var fieldName = fields[i];
	                var srcFieldName = srcFields[i];
	                value[fieldName] = getField(srcFieldName, object);
	            }
	        }

	        return value;
	    },

	    sourceFields: function(series, canonicalFields) {
	        var sourceFields = [];

	        if (canonicalFields) {
	            var length = canonicalFields.length;

	            for (var i = 0; i < length; i++) {
	                var fieldName = canonicalFields[i];
	                var sourceFieldName = fieldName === VALUE ? "field" : fieldName + "Field";

	                sourceFields.push(series[sourceFieldName] || fieldName);
	            }
	        }

	        return sourceFields;
	    }
	});

	SeriesBinder.current = new SeriesBinder();

	var STD_ERR = "stderr";
	var STD_DEV = "stddev";
	var percentRegex = /percent(?:\w*)\((\d+)\)/;
	var standardDeviationRegex = new RegExp("^" + STD_DEV + "(?:\\((\\d+(?:\\.\\d+)?)\\))?$");

	var ErrorRangeCalculator = Class.extend({
	    init: function(errorValue, series, field) {

	        this.initGlobalRanges(errorValue, series, field);
	    },

	    initGlobalRanges: function(errorValue, series, field) {
	        var data = series.data;
	        var deviationMatch = standardDeviationRegex.exec(errorValue);

	        if (deviationMatch) {
	            this.valueGetter = this.createValueGetter(series, field);

	            var average = this.getAverage(data);
	            var deviation = this.getStandardDeviation(data, average, false);
	            var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;
	            var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };

	            this.globalRange = function() {
	                return errorRange;
	            };
	        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {
	            this.valueGetter = this.createValueGetter(series, field);
	            var standardError = this.getStandardError(data, this.getAverage(data));

	            this.globalRange = function(value) {
	                return { low: value - standardError, high: value + standardError };
	            };
	        }
	    },

	    createValueGetter: function(series, field) {
	        var data = series.data;
	        var binder = SeriesBinder.current;
	        var valueFields = binder.valueFields(series);
	        var item = defined(data[0]) ? data[0] : {};
	        var valueGetter;

	        if (isArray(item)) {
	            var index = field ? valueFields.indexOf(field) : 0;
	            valueGetter = getter("[" + index + "]");
	        } else if (isNumber(item)) {
	            valueGetter = getter();
	        } else if (typeof item === datavizConstants.OBJECT) {
	            var srcValueFields = binder.sourceFields(series, valueFields);
	            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);
	        }

	        return valueGetter;
	    },

	    getErrorRange: function(pointValue, errorValue) {
	        var low, high, value;

	        if (!defined(errorValue)) {
	            return null;
	        }

	        if (this.globalRange) {
	            return this.globalRange(pointValue);
	        }

	        if (isArray(errorValue)) {
	            low = pointValue - errorValue[0];
	            high = pointValue + errorValue[1];
	        } else if (isNumber(value = parseFloat(errorValue))) {
	            low = pointValue - value;
	            high = pointValue + value;
	        } else if ((value = percentRegex.exec(errorValue))) {
	            var percentValue = pointValue * (parseFloat(value[1]) / 100);
	            low = pointValue - Math.abs(percentValue);
	            high = pointValue + Math.abs(percentValue);
	        } else {
	            throw new Error("Invalid ErrorBar value: " + errorValue);
	        }

	        return { low: low, high: high };
	    },

	    getStandardError: function(data, average) {
	        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);
	    },

	    getStandardDeviation: function(data, average, isSample) {
	        var this$1 = this;

	        var length = data.length;
	        var total = isSample ? average.count - 1 : average.count;
	        var squareDifferenceSum = 0;

	        for (var idx = 0; idx < length; idx++) {
	            var value = this$1.valueGetter(data[idx]);
	            if (isNumber(value)) {
	                squareDifferenceSum += Math.pow(value - average.value, 2);
	            }
	        }

	        return Math.sqrt(squareDifferenceSum / total);
	    },

	    getAverage: function(data) {
	        var this$1 = this;

	        var length = data.length;
	        var sum = 0;
	        var count = 0;

	        for (var idx = 0; idx < length; idx++) {
	            var value = this$1.valueGetter(data[idx]);
	            if (isNumber(value)) {
	                sum += value;
	                count++;
	            }
	        }

	        return {
	            value: sum / count,
	            count: count
	        };
	    }
	});

	var browser = support.browser || {};

	var INITIAL_ANIMATION_DURATION = 600;
	var FADEIN = "fadeIn";

	var GLASS = "glass";
	var BORDER_BRIGHTNESS = 0.8;
	var TOOLTIP_OFFSET = 5;
	var START_SCALE = browser.msie ? 0.001 : 0;
	var ERROR_LOW_FIELD = "errorLow";
	var ERROR_HIGH_FIELD = "errorHigh";
	var X_ERROR_LOW_FIELD = "xErrorLow";
	var X_ERROR_HIGH_FIELD = "xErrorHigh";
	var Y_ERROR_LOW_FIELD = "yErrorLow";
	var Y_ERROR_HIGH_FIELD = "yErrorHigh";
	var LINE_MARKER_SIZE = 8;
	var ZERO = "zero";
	var INTERPOLATE = "interpolate";
	var GAP = "gap";
	var ABOVE = "above";
	var BELOW = "below";

	var SMOOTH = "smooth";
	var STEP = "step";

	var AREA = "area";
	var BAR = "bar";
	var BOX_PLOT = "boxPlot";
	var BUBBLE = "bubble";
	var BULLET = "bullet";
	var CANDLESTICK = "candlestick";
	var COLUMN = "column";
	var DONUT = "donut";
	var FUNNEL = "funnel";
	var HORIZONTAL_WATERFALL = "horizontalWaterfall";
	var LINE = "line";
	var OHLC = "ohlc";
	var PIE = "pie";
	var POLAR_AREA = "polarArea";
	var POLAR_LINE = "polarLine";
	var POLAR_SCATTER = "polarScatter";
	var RADAR_AREA = "radarArea";
	var RADAR_COLUMN = "radarColumn";
	var RADAR_LINE = "radarLine";
	var RANGE_AREA = "rangeArea";
	var RANGE_BAR = "rangeBar";
	var RANGE_COLUMN = "rangeColumn";
	var SCATTER = "scatter";
	var SCATTER_LINE = "scatterLine";
	var VERTICAL_AREA = "verticalArea";
	var VERTICAL_BOX_PLOT = "verticalBoxPlot";
	var VERTICAL_BULLET = "verticalBullet";
	var VERTICAL_LINE = "verticalLine";
	var VERTICAL_RANGE_AREA = "verticalRangeArea";
	var WATERFALL = "waterfall";
	var EQUALLY_SPACED_SERIES = [
	    BAR, COLUMN, OHLC, CANDLESTICK, BOX_PLOT, VERTICAL_BOX_PLOT,
	    BULLET, RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL
	];

	var LEGEND_ITEM_CLICK = "legendItemClick";
	var LEGEND_ITEM_HOVER = "legendItemHover";
	var SERIES_CLICK = "seriesClick";
	var SERIES_HOVER = "seriesHover";
	var PLOT_AREA_CLICK = "plotAreaClick";
	var PLOT_AREA_HOVER = "plotAreaHover";
	var DRAG = "drag";
	var DRAG_END = "dragEnd";
	var DRAG_START = "dragStart";
	var ZOOM_START = "zoomStart";
	var ZOOM = "zoom";
	var ZOOM_END = "zoomEnd";
	var SELECT_START = "selectStart";
	var SELECT = "select";
	var SELECT_END = "selectEnd";
	var RENDER = "render";
	var SHOW_TOOLTIP = "showTooltip";
	var HIDE_TOOLTIP = "hideTooltip";

	var LOGARITHMIC = "log";
	var CATEGORY = "category";

	var INSIDE_END = "insideEnd";
	var INSIDE_BASE = "insideBase";
	var OUTSIDE_END = "outsideEnd";

	var MOUSEWHEEL = "DOMMouseScroll mousewheel";
	var MOUSEWHEEL_DELAY = 150;

	var constants = {
		INITIAL_ANIMATION_DURATION: INITIAL_ANIMATION_DURATION,
		FADEIN: FADEIN,
		LEGEND_ITEM_CLICK: LEGEND_ITEM_CLICK,
		LEGEND_ITEM_HOVER: LEGEND_ITEM_HOVER,
		SERIES_CLICK: SERIES_CLICK,
		SERIES_HOVER: SERIES_HOVER,
		GLASS: GLASS,
		BORDER_BRIGHTNESS: BORDER_BRIGHTNESS,
		TOOLTIP_OFFSET: TOOLTIP_OFFSET,
		START_SCALE: START_SCALE,
		ERROR_LOW_FIELD: ERROR_LOW_FIELD,
		ERROR_HIGH_FIELD: ERROR_HIGH_FIELD,
		X_ERROR_LOW_FIELD: X_ERROR_LOW_FIELD,
		X_ERROR_HIGH_FIELD: X_ERROR_HIGH_FIELD,
		Y_ERROR_LOW_FIELD: Y_ERROR_LOW_FIELD,
		Y_ERROR_HIGH_FIELD: Y_ERROR_HIGH_FIELD,
		LINE_MARKER_SIZE: LINE_MARKER_SIZE,
		INTERPOLATE: INTERPOLATE,
		ZERO: ZERO,
		SMOOTH: SMOOTH,
		STEP: STEP,
		CATEGORY: CATEGORY,
		FUNNEL: FUNNEL,
		BAR: BAR,
		CANDLESTICK: CANDLESTICK,
		PIE: PIE,
		COLUMN: COLUMN,
		AREA: AREA,
		VERTICAL_BULLET: VERTICAL_BULLET,
		BOX_PLOT: BOX_PLOT,
		OHLC: OHLC,
		WATERFALL: WATERFALL,
		LINE: LINE,
		BULLET: BULLET,
		VERTICAL_LINE: VERTICAL_LINE,
		VERTICAL_AREA: VERTICAL_AREA,
		RANGE_AREA: RANGE_AREA,
		VERTICAL_RANGE_AREA: VERTICAL_RANGE_AREA,
		RANGE_COLUMN: RANGE_COLUMN,
		VERTICAL_BOX_PLOT: VERTICAL_BOX_PLOT,
		RANGE_BAR: RANGE_BAR,
		HORIZONTAL_WATERFALL: HORIZONTAL_WATERFALL,
		SCATTER: SCATTER,
		SCATTER_LINE: SCATTER_LINE,
		BUBBLE: BUBBLE,
		RADAR_AREA: RADAR_AREA,
		RADAR_LINE: RADAR_LINE,
		RADAR_COLUMN: RADAR_COLUMN,
		POLAR_LINE: POLAR_LINE,
		POLAR_AREA: POLAR_AREA,
		POLAR_SCATTER: POLAR_SCATTER,
		RENDER: RENDER,
		PLOT_AREA_CLICK: PLOT_AREA_CLICK,
		PLOT_AREA_HOVER: PLOT_AREA_HOVER,
		LOGARITHMIC: LOGARITHMIC,
		DRAG: DRAG,
		DRAG_START: DRAG_START,
		DRAG_END: DRAG_END,
		ZOOM_START: ZOOM_START,
		ZOOM: ZOOM,
		ZOOM_END: ZOOM_END,
		SELECT_START: SELECT_START,
		SELECT: SELECT,
		SELECT_END: SELECT_END,
		GAP: GAP,
		DONUT: DONUT,
		INSIDE_END: INSIDE_END,
		INSIDE_BASE: INSIDE_BASE,
		OUTSIDE_END: OUTSIDE_END,
		MOUSEWHEEL: MOUSEWHEEL,
		MOUSEWHEEL_DELAY: MOUSEWHEEL_DELAY,
		SHOW_TOOLTIP: SHOW_TOOLTIP,
		HIDE_TOOLTIP: HIDE_TOOLTIP,
		EQUALLY_SPACED_SERIES: EQUALLY_SPACED_SERIES,
		ABOVE: ABOVE,
		BELOW: BELOW
	};

	var DEFAULT_ERROR_BAR_WIDTH = 4;

	var ErrorBarBase = ChartElement.extend({
	    init: function(low, high, isVertical, chart, series, options) {
	        ChartElement.fn.init.call(this, options);

	        this.low = low;
	        this.high = high;
	        this.isVertical = isVertical;
	        this.chart = chart;
	        this.series = series;
	    },

	    reflow: function(targetBox) {
	        var endCaps = this.options.endCaps;
	        var isVertical = this.isVertical;
	        var axis = this.getAxis();
	        var valueBox = axis.getSlot(this.low, this.high);
	        var centerBox = targetBox.center();
	        var capsWidth = this.getCapsWidth(targetBox, isVertical);
	        var capValue = isVertical ? centerBox.x : centerBox.y;
	        var capStart = capValue - capsWidth;
	        var capEnd = capValue + capsWidth;
	        var linePoints;

	        if (isVertical) {
	            linePoints = [
	                new Point(centerBox.x, valueBox.y1),
	                new Point(centerBox.x, valueBox.y2)
	            ];
	            if (endCaps) {
	                linePoints.push(new Point(capStart, valueBox.y1),
	                    new Point(capEnd, valueBox.y1),
	                    new Point(capStart, valueBox.y2),
	                    new Point(capEnd, valueBox.y2));
	            }
	            this.box = new Box(capStart, valueBox.y1, capEnd, valueBox.y2);
	        } else {
	            linePoints = [
	                new Point(valueBox.x1, centerBox.y),
	                new Point(valueBox.x2, centerBox.y)
	            ];
	            if (endCaps) {
	                linePoints.push(new Point(valueBox.x1, capStart),
	                    new Point(valueBox.x1, capEnd),
	                    new Point(valueBox.x2, capStart),
	                    new Point(valueBox.x2, capEnd));
	            }
	            this.box = new Box(valueBox.x1, capStart, valueBox.x2, capEnd);
	        }

	        this.linePoints = linePoints;
	    },

	    getCapsWidth: function(box, isVertical) {
	        var boxSize = isVertical ? box.width() : box.height();
	        var capsWidth = Math.min(Math.floor(boxSize / 2), DEFAULT_ERROR_BAR_WIDTH) || DEFAULT_ERROR_BAR_WIDTH;

	        return capsWidth;
	    },

	    createVisual: function() {
	        var this$1 = this;

	        var options = this.options;
	        var visual = options.visual;

	        if (visual) {
	            this.visual = visual({
	                low: this.low,
	                high: this.high,
	                rect: this.box.toRect(),
	                sender: this.getSender(),
	                options: {
	                    endCaps: options.endCaps,
	                    color: options.color,
	                    line: options.line
	                },
	                createVisual: function () {
	                    this$1.createDefaultVisual();
	                    var defaultVisual = this$1.visual;
	                    delete this$1.visual;
	                    return defaultVisual;
	                }
	            });
	        } else {
	            this.createDefaultVisual();
	        }
	    },

	    createDefaultVisual: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var linePoints = ref.linePoints;
	        var lineOptions = {
	            stroke: {
	                color: options.color,
	                width: options.line.width,
	                dashType: options.line.dashType
	            }
	        };

	        ChartElement.fn.createVisual.call(this);

	        for (var idx = 0; idx < linePoints.length; idx += 2) {
	            var line = new Path(lineOptions)
	                .moveTo(linePoints[idx].x, linePoints[idx].y)
	                .lineTo(linePoints[idx + 1].x, linePoints[idx + 1].y);

	            alignPathToPixel(line);
	            this$1.visual.append(line);
	        }
	    }
	});

	setDefaultOptions(ErrorBarBase, {
	    animation: {
	        type: FADEIN,
	        delay: INITIAL_ANIMATION_DURATION
	    },
	    endCaps: true,
	    line: {
	        width: 2
	    },
	    zIndex: 1
	});

	var CategoricalErrorBar = ErrorBarBase.extend({
	    getAxis: function() {
	        var axis = this.chart.seriesValueAxis(this.series);

	        return axis;
	    }
	});

	var MAX_EXPAND_DEPTH = 5;

	function evalOptions(options, context, state, dryRun) {
	    if (state === void 0) { state = {}; }
	    if (dryRun === void 0) { dryRun = false; }

	    var defaults = state.defaults = state.defaults || {};
	    var depth = state.depth = state.depth || 0;
	    var needsEval = false;

	    state.excluded = state.excluded || [];

	    if (depth > MAX_EXPAND_DEPTH) {
	        return null;
	    }

	    for (var property in options) {
	        if (!inArray(property, state.excluded) && options.hasOwnProperty(property)) {
	            var propValue = options[property];
	            if (isFunction(propValue)) {
	                needsEval = true;
	                if (!dryRun) {
	                    options[property] = valueOrDefault(propValue(context), defaults[property]);
	                }
	            } else if (isObject(propValue)) {
	                if (!dryRun) {
	                    state.defaults = defaults[property];
	                }
	                state.depth++;
	                needsEval = evalOptions(propValue, context, state, dryRun) || needsEval;
	                state.depth--;
	            }
	        }
	    }

	    return needsEval;
	}

	function categoriesCount(series) {
	    var seriesCount = series.length;
	    var categories = 0;

	    for (var i = 0; i < seriesCount; i++) {
	        categories = Math.max(categories, series[i].data.length);
	    }

	    return categories;
	}

	var CategoricalChart = ChartElement.extend({
	    init: function(plotArea, options) {
	        ChartElement.fn.init.call(this, options);

	        this.plotArea = plotArea;
	        this.chartService = plotArea.chartService;
	        this.categoryAxis = plotArea.seriesCategoryAxis(options.series[0]);

	        // Value axis ranges grouped by axis name, e.g.:
	        // primary: { min: 0, max: 1 }
	        this.valueAxisRanges = {};

	        this.points = [];
	        this.categoryPoints = [];
	        this.seriesPoints = [];
	        this.seriesOptions = [];
	        this._evalSeries = [];

	        this.render();
	    },

	    render: function() {
	        this.traverseDataPoints(this.addValue.bind(this));
	    },

	    pointOptions: function(series, seriesIx) {
	        var options = this.seriesOptions[seriesIx];
	        if (!options) {
	            var defaults = this.pointType().prototype.defaults;
	            this.seriesOptions[seriesIx] = options = deepExtend({ }, defaults, {
	                vertical: !this.options.invertAxes
	            }, series);
	        }

	        return options;
	    },

	    plotValue: function(point) {
	        if (!point) {
	            return 0;
	        }

	        if (this.options.isStacked100 && isNumber(point.value)) {
	            var categoryIx = point.categoryIx;
	            var categoryPoints = this.categoryPoints[categoryIx];
	            var otherValues = [];
	            var categorySum = 0;

	            for (var i = 0; i < categoryPoints.length; i++) {
	                var other = categoryPoints[i];
	                if (other) {
	                    var stack = point.series.stack;
	                    var otherStack = other.series.stack;

	                    if ((stack && otherStack) && stack.group !== otherStack.group) {
	                        continue;
	                    }

	                    if (isNumber(other.value)) {
	                        categorySum += Math.abs(other.value);
	                        otherValues.push(Math.abs(other.value));
	                    }
	                }
	            }

	            if (categorySum > 0) {
	                return point.value / categorySum;
	            }
	        }

	        return point.value;
	    },

	    plotRange: function(point, startValue) {
	        var this$1 = this;
	        if (startValue === void 0) { startValue = 0; }

	        var categoryPoints = this.categoryPoints[point.categoryIx];

	        if (this.options.isStacked) {
	            var plotValue = this.plotValue(point);
	            var positive = plotValue >= 0;
	            var prevValue = startValue;
	            var isStackedBar = false;

	            for (var i = 0; i < categoryPoints.length; i++) {
	                var other = categoryPoints[i];

	                if (point === other) {
	                    break;
	                }

	                var stack = point.series.stack;
	                var otherStack = other.series.stack;
	                if (stack && otherStack) {
	                    if (typeof stack === datavizConstants.STRING && stack !== otherStack) {
	                        continue;
	                    }

	                    if (stack.group && stack.group !== otherStack.group) {
	                        continue;
	                    }
	                }

	                var otherValue = this$1.plotValue(other);
	                if ((otherValue >= 0 && positive) ||
	                    (otherValue < 0 && !positive)) {
	                    prevValue += otherValue;
	                    plotValue += otherValue;
	                    isStackedBar = true;

	                    if (this$1.options.isStacked100) {
	                        plotValue = Math.min(plotValue, 1);
	                    }
	                }
	            }

	            if (isStackedBar) {
	                prevValue -= startValue;
	            }

	            return [ prevValue, plotValue ];
	        }

	        var series = point.series;
	        var valueAxis = this.seriesValueAxis(series);
	        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);

	        return [ axisCrossingValue, dataviz.convertableToNumber(point.value) ? point.value : axisCrossingValue ];
	    },

	    stackLimits: function(axisName, stackName) {
	        var this$1 = this;

	        var min = MAX_VALUE;
	        var max = MIN_VALUE;

	        for (var i = 0; i < this.categoryPoints.length; i++) {
	            var categoryPoints = this$1.categoryPoints[i];
	            if (!categoryPoints) {
	                continue;
	            }

	            for (var pIx = 0; pIx < categoryPoints.length; pIx++) {
	                var point = categoryPoints[pIx];
	                if (point) {
	                    if (point.series.stack === stackName || point.series.axis === axisName) {
	                        var to = this$1.plotRange(point, 0)[1];
	                        if (defined(to) && isFinite(to)) {
	                            max = Math.max(max, to);
	                            min = Math.min(min, to);
	                        }
	                    }
	                }
	            }
	        }

	        return { min: min, max: max };
	    },

	    updateStackRange: function() {
	        var this$1 = this;

	        var ref = this.options;
	        var isStacked = ref.isStacked;
	        var chartSeries = ref.series;
	        var limitsCache = {};

	        if (isStacked) {
	            for (var i = 0; i < chartSeries.length; i++) {
	                var series = chartSeries[i];
	                var axisName = series.axis;
	                var key = axisName + series.stack;

	                var limits = limitsCache[key];
	                if (!limits) {
	                    limits = this$1.stackLimits(axisName, series.stack);

	                    var errorTotals = this$1.errorTotals;
	                    if (errorTotals) {
	                        if (errorTotals.negative.length) {
	                            limits.min = Math.min(limits.min, dataviz.sparseArrayLimits(errorTotals.negative).min);
	                        }
	                        if (errorTotals.positive.length) {
	                            limits.max = Math.max(limits.max, dataviz.sparseArrayLimits(errorTotals.positive).max);
	                        }
	                    }

	                    if (limits.min !== MAX_VALUE || limits.max !== MIN_VALUE) {
	                        limitsCache[key] = limits;
	                    } else {
	                        limits = null;
	                    }
	                }

	                if (limits) {
	                    this$1.valueAxisRanges[axisName] = limits;
	                }
	            }
	        }
	    },

	    addErrorBar: function(point, data, categoryIx) {
	        var value = point.value;
	        var series = point.series;
	        var seriesIx = point.seriesIx;
	        var errorBars = point.options.errorBars;
	        var lowValue = data.fields[ERROR_LOW_FIELD];
	        var highValue = data.fields[ERROR_HIGH_FIELD];
	        var errorRange;

	        if (isNumber(lowValue) && isNumber(highValue)) {
	            errorRange = { low: lowValue, high: highValue };
	        } else if (errorBars && defined(errorBars.value)) {
	            this.seriesErrorRanges = this.seriesErrorRanges || [];
	            this.seriesErrorRanges[seriesIx] = this.seriesErrorRanges[seriesIx] ||
	                new ErrorRangeCalculator(errorBars.value, series, VALUE);

	            errorRange = this.seriesErrorRanges[seriesIx].getErrorRange(value, errorBars.value);
	        }

	        if (errorRange) {
	            point.low = errorRange.low;
	            point.high = errorRange.high;
	            this.addPointErrorBar(point, categoryIx);
	        }
	    },

	    addPointErrorBar: function(point, categoryIx) {
	        var isVertical = !this.options.invertAxes;
	        var options = point.options.errorBars;
	        var series = point.series;
	        var low = point.low;
	        var high = point.high;

	        if (this.options.isStacked) {
	            var stackedErrorRange = this.stackedErrorRange(point, categoryIx);
	            low = stackedErrorRange.low;
	            high = stackedErrorRange.high;
	        } else {
	            var fields = { categoryIx: categoryIx, series: series };
	            this.updateRange({ value: low }, fields);
	            this.updateRange({ value: high }, fields);
	        }

	        var errorBar = new CategoricalErrorBar(low, high, isVertical, this, series, options);
	        point.errorBars = [ errorBar ];
	        point.append(errorBar);
	    },

	    stackedErrorRange: function(point, categoryIx) {
	        var plotValue = this.plotRange(point, 0)[1] - point.value;
	        var low = point.low + plotValue;
	        var high = point.high + plotValue;

	        this.errorTotals = this.errorTotals || { positive: [], negative: [] };

	        if (low < 0) {
	            this.errorTotals.negative[categoryIx] = Math.min(this.errorTotals.negative[categoryIx] || 0, low);
	        }

	        if (high > 0) {
	            this.errorTotals.positive[categoryIx] = Math.max(this.errorTotals.positive[categoryIx] || 0, high);
	        }

	        return { low: low, high: high };
	    },

	    addValue: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;

	        var categoryPoints = this.categoryPoints[categoryIx];
	        if (!categoryPoints) {
	            this.categoryPoints[categoryIx] = categoryPoints = [];
	        }

	        var seriesPoints = this.seriesPoints[seriesIx];
	        if (!seriesPoints) {
	            this.seriesPoints[seriesIx] = seriesPoints = [];
	        }

	        var point = this.createPoint(data, fields);
	        if (point) {
	            $.extend(point, fields);

	            point.owner = this;
	            point.noteText = data.fields.noteText;
	            if (!defined(point.dataItem)) {
	                point.dataItem = series.data[categoryIx];
	            }
	            this.addErrorBar(point, data, categoryIx);
	        }

	        this.points.push(point);
	        seriesPoints.push(point);
	        categoryPoints.push(point);

	        this.updateRange(data.valueFields, fields);
	    },

	    evalPointOptions: function(options, value, category, categoryIx, series, seriesIx) {
	        var state = { defaults: series._defaults, excluded: [ "data", "aggregate", "_events", "tooltip", "content", "template", "visual", "toggle", "_outOfRangeMinPoint", "_outOfRangeMaxPoint" ] };

	        var doEval = this._evalSeries[seriesIx];
	        if (!defined(doEval)) {
	            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);
	        }

	        var pointOptions = options;
	        if (doEval) {
	            pointOptions = deepExtend({}, pointOptions);
	            evalOptions(pointOptions, {
	                value: value,
	                category: category,
	                index: categoryIx,
	                series: series,
	                dataItem: series.data[categoryIx]
	            }, state);
	        }

	        return pointOptions;
	    },

	    updateRange: function(data, fields) {
	        var axisName = fields.series.axis;
	        var value = data.value;
	        var axisRange = this.valueAxisRanges[axisName];

	        if (isFinite(value) && value !== null) {
	            axisRange = this.valueAxisRanges[axisName] =
	                axisRange || { min: MAX_VALUE, max: MIN_VALUE };

	            axisRange.min = Math.min(axisRange.min, value);
	            axisRange.max = Math.max(axisRange.max, value);
	        }
	    },

	    seriesValueAxis: function(series) {
	        var plotArea = this.plotArea;
	        var axisName = series.axis;
	        var axis = axisName ? plotArea.namedValueAxes[axisName] : plotArea.valueAxis;

	        if (!axis) {
	            throw new Error("Unable to locate value axis with name " + axisName);
	        }

	        return axis;
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        var categorySlots = this.categorySlots = [];
	        var chartPoints = this.points;
	        var categoryAxis = this.categoryAxis;
	        var pointIx = 0;

	        this.traverseDataPoints(function (data, fields) {
	            var categoryIx = fields.categoryIx;
	            var currentSeries = fields.series;

	            var valueAxis = this$1.seriesValueAxis(currentSeries);
	            var point = chartPoints[pointIx++];

	            var categorySlot = categorySlots[categoryIx];
	            if (!categorySlot) {
	                categorySlots[categoryIx] = categorySlot =
	                    this$1.categorySlot(categoryAxis, categoryIx, valueAxis);
	            }

	            if (point) {
	                var plotRange = this$1.plotRange(point, valueAxis.startValue());
	                var valueSlot = this$1.valueSlot(valueAxis, plotRange);
	                if (valueSlot) {
	                    var pointSlot = this$1.pointSlot(categorySlot, valueSlot);

	                    point.aboveAxis = this$1.aboveAxis(point, valueAxis);
	                    point.stackValue = plotRange[1];

	                    if (this$1.options.isStacked100) {
	                        point.percentage = this$1.plotValue(point);
	                    }

	                    this$1.reflowPoint(point, pointSlot);
	                } else {
	                    point.visible = false;
	                }
	            }
	        });

	        this.reflowCategories(categorySlots);
	        if (!this.options.clip && this.options.limitPoints && this.points.length) {
	            this.limitPoints();
	        }

	        this.box = targetBox;
	    },

	    valueSlot: function(valueAxis, plotRange) {
	        return valueAxis.getSlot(plotRange[0], plotRange[1], !this.options.clip);
	    },

	    limitPoints: function() {
	        var this$1 = this;

	        var categoryPoints = this.categoryPoints;
	        var points = categoryPoints[0].concat(last(categoryPoints));
	        for (var idx = 0; idx < points.length; idx++) {
	            if (points[idx]) {
	                this$1.limitPoint(points[idx]);
	            }
	        }
	    },

	    limitPoint: function(point) {
	        var limittedSlot = this.categoryAxis.limitSlot(point.box);
	        if (!limittedSlot.equals(point.box)) {
	            point.reflow(limittedSlot);
	        }
	    },

	    aboveAxis: function(point, valueAxis) {
	        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);
	        var value = point.value;

	        return valueAxis.options.reverse ?
	            value < axisCrossingValue : value >= axisCrossingValue;
	    },

	    categoryAxisCrossingValue: function(valueAxis) {
	        var categoryAxis = this.categoryAxis;
	        var options = valueAxis.options;
	        var crossingValues = [].concat(
	            options.axisCrossingValues || options.axisCrossingValue
	        );

	        return crossingValues[categoryAxis.axisIndex || 0] || 0;
	    },

	    reflowPoint: function(point, pointSlot) {
	        point.reflow(pointSlot);
	    },

	    reflowCategories: function() { },

	    pointSlot: function(categorySlot, valueSlot) {
	        var options = this.options;
	        var invertAxes = options.invertAxes;
	        var slotX = invertAxes ? valueSlot : categorySlot;
	        var slotY = invertAxes ? categorySlot : valueSlot;

	        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);
	    },

	    categorySlot: function(categoryAxis, categoryIx) {
	        return categoryAxis.getSlot(categoryIx);
	    },

	    traverseDataPoints: function(callback) {
	        var this$1 = this;

	        var series = this.options.series;
	        var categories = this.categoryAxis.options.categories || [];
	        var count = categoriesCount(series);
	        var seriesCount = series.length;

	        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
	            this$1._outOfRangeCallback(series[seriesIx], "_outOfRangeMinPoint", seriesIx, callback);
	        }

	        for (var categoryIx = 0; categoryIx < count; categoryIx++) {
	            for (var seriesIx$1 = 0; seriesIx$1 < seriesCount; seriesIx$1++) {
	                var currentSeries = series[seriesIx$1];
	                var currentCategory = categories[categoryIx];
	                var pointData = this$1._bindPoint(currentSeries, seriesIx$1, categoryIx);

	                callback(pointData, {
	                    category: currentCategory,
	                    categoryIx: categoryIx,
	                    series: currentSeries,
	                    seriesIx: seriesIx$1
	                });
	            }
	        }

	        for (var seriesIx$2 = 0; seriesIx$2 < seriesCount; seriesIx$2++) {
	            this$1._outOfRangeCallback(series[seriesIx$2], "_outOfRangeMaxPoint", seriesIx$2, callback);
	        }
	    },

	    _outOfRangeCallback: function(series, field, seriesIx, callback) {
	        var outOfRangePoint = series[field];
	        if (outOfRangePoint) {
	            var categoryIx = outOfRangePoint.categoryIx;
	            var pointData = this._bindPoint(series, seriesIx, categoryIx, outOfRangePoint.item);

	            callback(pointData, {
	                category: outOfRangePoint.category,
	                categoryIx: categoryIx,
	                series: series,
	                seriesIx: seriesIx,
	                dataItem: outOfRangePoint.item
	            });
	        }
	    },

	    _bindPoint: function(series, seriesIx, categoryIx, item) {
	        if (!this._bindCache) {
	            this._bindCache = [];
	        }

	        var bindCache = this._bindCache[seriesIx];
	        if (!bindCache) {
	            bindCache = this._bindCache[seriesIx] = [];
	        }

	        var data = bindCache[categoryIx];
	        if (!data) {
	            data = bindCache[categoryIx] = SeriesBinder.current.bindPoint(series, categoryIx, item);
	        }

	        return data;
	    },

	    formatPointValue: function(point, format) {
	        if (point.value === null) {
	            return "";
	        }

	        return this.chartService.format.auto(format, point.value);
	    },

	    pointValue: function(data) {
	        return data.valueFields.value;
	    }
	});

	setDefaultOptions(CategoricalChart, {
	    series: [],
	    invertAxes: false,
	    isStacked: false,
	    clip: true,
	    limitPoints: true
	});

	var PointEventsMixin = {
	    click: function(chart, e) {
	        return chart.trigger(
	            SERIES_CLICK,
	            this.eventArgs(e)
	        );
	    },

	    hover: function(chart, e) {
	        return chart.trigger(
	            SERIES_HOVER,
	            this.eventArgs(e)
	        );
	    },

	    eventArgs: function(e) {
	        return {
	            value: this.value,
	            percentage: this.percentage,
	            stackValue: this.stackValue,
	            category: this.category,
	            series: this.series,
	            dataItem: this.dataItem,
	            runningTotal: this.runningTotal,
	            total: this.total,
	            element: eventElement(e),
	            originalEvent: e,
	            point: this
	        };
	    }
	};

	var NoteMixin = {
	    createNote: function() {
	        var options = this.options.notes;
	        var text = this.noteText || options.label.text;

	        if (options.visible !== false && defined(text) && text !== null) {
	            this.note = new dataviz.Note({
	                value: this.value,
	                text: text,
	                dataItem: this.dataItem,
	                category: this.category,
	                series: this.series
	            }, this.options.notes, this.owner.chartService);

	            this.append(this.note);
	        }
	    }
	};

	var LinePoint = ChartElement.extend({
	    init: function(value, options) {
	        ChartElement.fn.init.call(this);

	        this.value = value;
	        this.options = options;
	        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
	        this.tooltipTracking = true;
	    },

	    render: function() {
	        var ref = this.options;
	        var markers = ref.markers;
	        var labels = ref.labels;

	        if (this._rendered) {
	            return;
	        }

	        this._rendered = true;

	        if (markers.visible && markers.size) {
	            this.marker = this.createMarker();
	            this.append(this.marker);
	        }

	        if (labels.visible) {
	            var labelTemplate = getTemplate(labels);
	            var labelText = this.value;
	            if (labelTemplate) {
	                labelText = labelTemplate({
	                    dataItem: this.dataItem,
	                    category: this.category,
	                    value: this.value,
	                    percentage: this.percentage,
	                    stackValue: this.stackValue,
	                    series: this.series
	                });
	            } else if (labels.format) {
	                labelText = this.formatValue(labels.format);
	            }
	            this.label = new TextBox(labelText,
	                deepExtend({
	                    align: CENTER,
	                    vAlign: CENTER,
	                    margin: {
	                        left: 5,
	                        right: 5
	                    },
	                    zIndex: valueOrDefault(labels.zIndex, this.series.zIndex)
	                }, labels)
	            );
	            this.append(this.label);
	        }

	        this.createNote();

	        if (this.errorBar) {
	            this.append(this.errorBar);
	        }
	    },

	    markerBorder: function() {
	        var options = this.options.markers;
	        var background = options.background;
	        var border = deepExtend({ color: this.color }, options.border);

	        if (!defined(border.color)) {
	            border.color = new Color(background).brightness(BORDER_BRIGHTNESS).toHex();
	        }

	        return border;
	    },

	    createVisual: function() {},

	    createMarker: function() {
	        var options = this.options.markers;
	        var marker = new ShapeElement({
	            type: options.type,
	            width: options.size,
	            height: options.size,
	            rotation: options.rotation,
	            background: options.background,
	            border: this.markerBorder(),
	            opacity: options.opacity,
	            zIndex: valueOrDefault(options.zIndex, this.series.zIndex),
	            animation: options.animation,
	            visual: options.visual
	        }, {
	            dataItem: this.dataItem,
	            value: this.value,
	            series: this.series,
	            category: this.category
	        });

	        return marker;
	    },

	    markerBox: function() {
	        if (!this.marker) {
	            this.marker = this.createMarker();
	            this.marker.reflow(this._childBox);
	        }

	        return this.marker.box;
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var aboveAxis = ref.aboveAxis;
	        var vertical = options.vertical;

	        this.render();

	        this.box = targetBox;
	        var childBox = targetBox.clone();

	        if (vertical) {
	            if (aboveAxis) {
	                childBox.y1 -= childBox.height();
	            } else {
	                childBox.y2 += childBox.height();
	            }
	        } else {
	            if (aboveAxis) {
	                childBox.x1 += childBox.width();
	            } else {
	                childBox.x2 -= childBox.width();
	            }
	        }

	        this._childBox = childBox;
	        if (this.marker) {
	            this.marker.reflow(childBox);
	        }

	        this.reflowLabel(childBox);

	        if (this.errorBars) {
	            for (var i = 0; i < this.errorBars.length; i++) {
	                this$1.errorBars[i].reflow(childBox);
	            }
	        }

	        if (this.note) {
	            var noteTargetBox = this.markerBox();

	            if (!(options.markers.visible && options.markers.size)) {
	                var center = noteTargetBox.center();
	                noteTargetBox = new Box(center.x, center.y, center.x, center.y);
	            }

	            this.note.reflow(noteTargetBox);
	        }
	    },

	    reflowLabel: function(box) {
	        var ref = this;
	        var options = ref.options;
	        var label = ref.label;
	        var anchor = options.labels.position;

	        if (label) {
	            anchor = anchor === ABOVE ? TOP : anchor;
	            anchor = anchor === BELOW ? BOTTOM : anchor;

	            label.reflow(box);
	            label.box.alignTo(this.markerBox(), anchor);
	            label.reflow(label.box);
	        }
	    },

	    createHighlight: function() {
	        var markers = this.options.highlight.markers;
	        var defaultColor = this.markerBorder().color;
	        var options = this.options.markers;
	        var size = options.size + (options.border.width || 0) + (markers.border.width || 0);

	        var shadow = new ShapeElement({
	            type: options.type,
	            width: size,
	            height: size,
	            rotation: options.rotation,
	            background: markers.color || defaultColor,
	            border: {
	                color: markers.border.color,
	                width: markers.border.width,
	                opacity: valueOrDefault(markers.border.opacity, 1)
	            },
	            opacity: valueOrDefault(markers.opacity, 1)
	        });
	        shadow.reflow(this._childBox);

	        return shadow.getElement();
	    },

	    highlightVisual: function() {
	        return (this.marker || {}).visual;
	    },

	    highlightVisualArgs: function() {
	        var marker = this.marker;
	        var visual, rect;

	        if (marker) {
	            rect = marker.paddingBox.toRect();
	            visual = marker.visual;
	        } else {
	            var size = this.options.markers.size;
	            var halfSize = size / 2;
	            var center = this.box.center();
	            rect = new geometry.Rect([ center.x - halfSize, center.y - halfSize ], [ size, size ]);
	        }

	        return {
	            options: this.options,
	            rect: rect,
	            visual: visual
	        };
	    },

	    tooltipAnchor: function() {
	        var markerBox = this.markerBox();
	        var clipBox = this.owner.pane.clipBox();
	        var showTooltip = !clipBox || clipBox.overlaps(markerBox);

	        if (showTooltip) {
	            var x = markerBox.x2 + TOOLTIP_OFFSET;
	            var horizontalAlign = LEFT;
	            var y, verticalAlign;

	            if (this.aboveAxis) {
	                y = markerBox.y1;
	                verticalAlign = BOTTOM;
	            } else {
	                y = markerBox.y2;
	                verticalAlign = TOP;
	            }

	            return {
	                point: new Point(x, y),
	                align: {
	                    horizontal: horizontalAlign,
	                    vertical: verticalAlign
	                }
	            };
	        }
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    },

	    overlapsBox: function(box) {
	        var markerBox = this.markerBox();
	        return markerBox.overlaps(box);
	    },

	    unclipElements: function() {
	        if (this.label) {
	            this.label.options.noclip = true;
	        }

	        if (this.note) {
	            this.note.options.noclip = true;
	        }
	    }
	});

	LinePoint.prototype.defaults = {
	    vertical: true,
	    markers: {
	        visible: true,
	        background: WHITE,
	        size: LINE_MARKER_SIZE,
	        type: CIRCLE,
	        border: {
	            width: 2
	        },
	        opacity: 1
	    },
	    labels: {
	        visible: false,
	        position: ABOVE,
	        margin: getSpacing(3),
	        padding: getSpacing(4),
	        animation: {
	            type: FADEIN,
	            delay: INITIAL_ANIMATION_DURATION
	        }
	    },
	    notes: {
	        label: {}
	    },
	    highlight: {
	        markers: {
	            border: {
	                color: "#fff",
	                width: 2
	            }
	        },
	        zIndex: datavizConstants.HIGHLIGHT_ZINDEX
	    },
	    errorBars: {
	        line: {
	            width: 1
	        }
	    }
	};

	deepExtend(LinePoint.prototype, PointEventsMixin);
	deepExtend(LinePoint.prototype, NoteMixin);

	var LineSegment = ChartElement.extend({
	    init: function(linePoints, series, seriesIx) {
	        ChartElement.fn.init.call(this);

	        this.linePoints = linePoints;
	        this.series = series;
	        this.seriesIx = seriesIx;
	    },

	    points: function() {
	        return this.toGeometryPoints(this.linePoints);
	    },

	    toGeometryPoints: function(points) {
	        var result = [];
	        for (var i = 0, length = points.length; i < length; i++) {
	            if (points[i] && points[i].visible !== false) {
	                result.push(points[i]._childBox.toRect().center());
	            }
	        }

	        return result;
	    },

	    createVisual: function() {
	        var ref = this;
	        var options = ref.options;
	        var series = ref.series;
	        var color = series.color;
	        var defaults = series._defaults;

	        if (isFunction(color) && defaults) {
	            color = defaults.color;
	        }

	        var line = Path.fromPoints(this.points(), {
	            stroke: {
	                color: color,
	                width: series.width,
	                opacity: series.opacity,
	                dashType: series.dashType
	            },
	            zIndex: series.zIndex
	        });

	        if (options.closed) {
	            line.close();
	        }

	        this.visual = line;
	    },

	    aliasFor: function(e, coords) {
	        return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);
	    }
	});

	setDefaultOptions(LineSegment, {
	    closed: false
	});

	var StepLineMixin = {
	    calculateStepPoints: function(points) {
	        var categoryAxis = this.parent.plotArea.seriesCategoryAxis(this.series);
	        var ref = categoryAxis.options;
	        var justified = ref.justified;
	        var vertical = ref.vertical;
	        var reverse = ref.reverse;

	        var stepAxis = vertical ? X : Y;
	        var axis = vertical ? Y : X;
	        var stepDir = reverse ? 2 : 1;
	        var dir = stepDir;

	        var previousPoint = toGeometryPoint(points[0], stepAxis, stepDir, axis, dir);
	        var result = [ previousPoint ];

	        for (var idx = 1; idx < points.length; idx++) {
	            var point = toGeometryPoint(points[idx], stepAxis, stepDir, axis, dir);

	            if (previousPoint[stepAxis] !== point[stepAxis]) {
	                var stepPoint = new GeometryPoint();
	                stepPoint[stepAxis] = previousPoint[stepAxis];
	                stepPoint[axis] = point[axis];

	                result.push(stepPoint, point);
	            }

	            previousPoint = point;
	        }

	        if (!justified) {
	            result.push(toGeometryPoint(last(points), stepAxis, stepDir, axis, reverse ? 1 : 2));
	        } else if (previousPoint !== last(result)) {
	            result.push(previousPoint);
	        }

	        return result;

	    }
	};

	function toGeometryPoint(lintPoint, stepAxis, stepDir, axis, dir) {
	    var box = lintPoint.box;
	    var result = new GeometryPoint();

	    result[stepAxis] = box[stepAxis + stepDir];
	    result[axis] = box[axis + dir];

	    return result;
	}

	var StepLineSegment = LineSegment.extend({
	    points: function() {
	        return this.calculateStepPoints(this.linePoints);
	    }
	});

	deepExtend(StepLineSegment.prototype, StepLineMixin);

	var SplineSegment = LineSegment.extend({
	    createVisual: function() {
	        var series = this.series;
	        var defaults = series._defaults;
	        var color = series.color;

	        if (isFunction(color) && defaults) {
	            color = defaults.color;
	        }

	        var curveProcessor = new CurveProcessor(this.options.closed);
	        var segments = curveProcessor.process(this.points());
	        var curve = new Path({
	            stroke: {
	                color: color,
	                width: series.width,
	                opacity: series.opacity,
	                dashType: series.dashType
	            },
	            zIndex: series.zIndex
	        });

	        curve.segments.push.apply(curve.segments, segments);

	        this.visual = curve;
	    }
	});

	var LineChartMixin = {
	    renderSegments: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var seriesPoints = ref.seriesPoints;
	        var series = options.series;
	        var seriesCount = seriesPoints.length;
	        var lastSegment;

	        this._segments = [];

	        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var sortedPoints = this$1.sortPoints(seriesPoints[seriesIx]);
	            var pointCount = sortedPoints.length;
	            var linePoints = [];

	            for (var pointIx = 0; pointIx < pointCount; pointIx++) {
	                var point = sortedPoints[pointIx];
	                if (point) {
	                    linePoints.push(point);
	                } else if (this$1.seriesMissingValues(currentSeries) !== INTERPOLATE) {
	                    if (linePoints.length > 1) {
	                        lastSegment = this$1.createSegment(
	                            linePoints, currentSeries, seriesIx, lastSegment
	                        );
	                        this$1._addSegment(lastSegment);
	                    }
	                    linePoints = [];
	                }
	            }

	            if (linePoints.length > 1) {
	                lastSegment = this$1.createSegment(
	                    linePoints, currentSeries, seriesIx, lastSegment
	                );
	                this$1._addSegment(lastSegment);
	            }
	        }

	        this.children.unshift.apply(this.children, this._segments);
	    },

	    _addSegment: function(segment) {
	        this._segments.push(segment);
	        segment.parent = this;
	    },

	    sortPoints: function(points) {
	        return points;
	    },

	    seriesMissingValues: function(series) {
	        var missingValues = series.missingValues;
	        var assumeZero = !missingValues && this.options.isStacked;

	        return assumeZero ? ZERO : missingValues || INTERPOLATE;
	    },

	    getNearestPoint: function(x, y, seriesIx) {
	        var target = new Point(x, y);
	        var allPoints = this.seriesPoints[seriesIx];
	        var nearestPointDistance = MAX_VALUE;
	        var nearestPoint;

	        for (var i = 0; i < allPoints.length; i++) {
	            var point = allPoints[i];

	            if (point && defined(point.value) && point.value !== null && point.visible !== false) {
	                var pointBox = point.box;
	                var pointDistance = pointBox.center().distanceTo(target);

	                if (pointDistance < nearestPointDistance) {
	                    nearestPoint = point;
	                    nearestPointDistance = pointDistance;
	                }
	            }
	        }

	        return nearestPoint;
	    }
	};

	var ClipAnimation = Animation.extend({
	    setup: function() {
	        this._setEnd(this.options.box.x1);
	    },

	    step: function(pos) {
	        var box = this.options.box;
	        this._setEnd(dataviz.interpolateValue(box.x1, box.x2, pos));
	    },

	    _setEnd: function(x) {
	        var element = this.element;
	        var segments = element.segments;
	        var topRight = segments[1].anchor();
	        var bottomRight = segments[2].anchor();

	        element.suspend();
	        topRight.setX(x);
	        element.resume();
	        bottomRight.setX(x);
	    }
	});

	setDefaultOptions(ClipAnimation, {
	    duration: INITIAL_ANIMATION_DURATION
	});

	AnimationFactory.current.register("clip", ClipAnimation);

	function anyHasZIndex(elements) {
	    for (var idx = 0; idx < elements.length; idx++) {
	        if (defined(elements[idx].zIndex)) {
	            return true;
	        }
	    }
	}

	var ClipAnimationMixin = {
	    createAnimation: function() {
	        var root = this.getRoot();
	        if (root && (root.options || {}).transitions !== false) {
	            var box = root.box;
	            var clipPath = Path.fromRect(box.toRect());
	            this.visual.clip(clipPath);
	            this.animation = new ClipAnimation(clipPath, {
	                box: box
	            });
	            if (anyHasZIndex(this.options.series)) {
	                this._setChildrenAnimation(clipPath);
	            }
	        }
	    },

	    _setChildrenAnimation: function(clipPath) {
	        var points = this.animationPoints();

	        for (var idx = 0; idx < points.length; idx++) {
	            var point = points[idx];
	            if (point && point.visual && defined(point.visual.options.zIndex)) {
	                point.visual.clip(clipPath);
	            }
	        }
	    }
	};

	var LineChart = CategoricalChart.extend({
	    render: function() {

	        CategoricalChart.fn.render.call(this);

	        this.updateStackRange();
	        this.renderSegments();
	    },

	    pointType: function() {
	        return LinePoint;
	    },

	    createPoint: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var missingValues = this.seriesMissingValues(series);
	        var value = data.valueFields.value;

	        if (!defined(value) || value === null) {
	            if (missingValues === ZERO) {
	                value = 0;
	            } else {
	                return null;
	            }
	        }

	        var pointOptions = this.pointOptions(series, seriesIx);
	        pointOptions = this.evalPointOptions(
	            pointOptions, value, category, categoryIx, series, seriesIx
	        );

	        var color = data.fields.color || series.color;
	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        var point = new LinePoint(value, pointOptions);
	        point.color = color;

	        this.append(point);

	        return point;
	    },

	    plotRange: function(point) {
	        var this$1 = this;

	        var plotValue = this.plotValue(point);

	        if (this.options.isStacked) {
	            var categoryIx = point.categoryIx;
	            var categoryPoints = this.categoryPoints[categoryIx];

	            for (var i = 0; i < categoryPoints.length; i++) {
	                var other = categoryPoints[i];

	                if (point === other) {
	                    break;
	                }

	                plotValue += this$1.plotValue(other);

	                if (this$1.options.isStacked100) {
	                    plotValue = Math.min(plotValue, 1);
	                }
	            }

	        }

	        return [ plotValue, plotValue ];
	    },

	    createSegment: function(linePoints, currentSeries, seriesIx) {
	        var style = currentSeries.style;
	        var pointType;

	        if (style === STEP) {
	            pointType = StepLineSegment;
	        } else if (style === SMOOTH) {
	            pointType = SplineSegment;
	        } else {
	            pointType = LineSegment;
	        }

	        return new pointType(linePoints, currentSeries, seriesIx);
	    },

	    animationPoints: function() {
	        var points = this.points;
	        var result = [];
	        for (var idx = 0; idx < points.length; idx++) {
	            result.push((points[idx] || {}).marker);
	        }
	        return result.concat(this._segments);
	    }
	});

	deepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);

	var AreaSegment = LineSegment.extend({
	    init: function(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {
	        LineSegment.fn.init.call(this, linePoints, currentSeries, seriesIx);

	        this.prevSegment = prevSegment;
	        this.stackPoints = stackPoints;
	    },

	    createVisual: function() {
	        var series = this.series;
	        var defaults = series._defaults;
	        var lineOptions = series.line || {};
	        var color = series.color;

	        if (isFunction(color) && defaults) {
	            color = defaults.color;
	        }

	        this.visual = new Group({
	            zIndex: series.zIndex
	        });

	        this.createFill({
	            fill: {
	                color: color,
	                opacity: series.opacity
	            },
	            stroke: null
	        });

	        if (lineOptions.width > 0 && lineOptions.visible !== false) {
	            this.createStroke({
	                stroke: deepExtend({
	                    color: color,
	                    opacity: series.opacity,
	                    lineCap: "butt"
	                }, lineOptions)
	            });
	        }
	    },

	    strokeSegments: function() {
	        var segments = this._strokeSegments;

	        if (!segments) {
	            segments = this._strokeSegments = this.createStrokeSegments();
	        }

	        return segments;
	    },

	    createStrokeSegments: function() {
	        return this.segmentsFromPoints(this.points());
	    },

	    stackSegments: function() {
	        if (this.prevSegment) {
	            return this.prevSegment.createStackSegments(this.stackPoints);
	        }

	        return this.createStackSegments(this.stackPoints);
	    },

	    createStackSegments: function(stackPoints) {
	        return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();
	    },

	    segmentsFromPoints: function(points) {
	        return points.map(function (point) { return new geometry.Segment(point); });
	    },

	    createStroke: function(style) {
	        var stroke = new Path(style);
	        stroke.segments.push.apply(stroke.segments, this.strokeSegments());

	        this.visual.append(stroke);
	    },

	    hasStackSegment: function() {
	        return this.prevSegment || (this.stackPoints && this.stackPoints.length);
	    },

	    createFill: function(style) {
	        var strokeSegments = this.strokeSegments();
	        var fillSegments = strokeSegments.slice(0);
	        var hasStackSegments = this.hasStackSegment();

	        if (hasStackSegments) {
	            var stackSegments = this.stackSegments();

	            append(fillSegments, stackSegments);
	        }

	        var fill = new Path(style);
	        fill.segments.push.apply(fill.segments, fillSegments);

	        if (!hasStackSegments && strokeSegments.length > 1) {
	            this.fillToAxes(fill);
	        }

	        this.visual.append(fill);
	    },

	    fillToAxes: function(fillPath) {
	        var chart = this.parent;
	        var invertAxes = chart.options.invertAxes;
	        var valueAxis = chart.seriesValueAxis(this.series);
	        var crossingValue = chart.categoryAxisCrossingValue(valueAxis);
	        var endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);
	        var segments = this.strokeSegments();
	        var firstPoint = segments[0].anchor();
	        var lastPoint = last(segments).anchor();
	        var end = invertAxes ? endSlot.x1 : endSlot.y1;

	        if (invertAxes) {
	            fillPath.lineTo(end, lastPoint.y)
	                    .lineTo(end, firstPoint.y);
	        } else {
	            fillPath.lineTo(lastPoint.x, end)
	                    .lineTo(firstPoint.x, end);
	        }
	    }
	});

	var StepAreaSegment = AreaSegment.extend({
	    createStrokeSegments: function() {
	        return this.segmentsFromPoints(this.calculateStepPoints(this.linePoints));
	    },

	    createStackSegments: function(stackPoints) {
	        return this.segmentsFromPoints(this.calculateStepPoints(stackPoints)).reverse();
	    }
	});

	deepExtend(StepAreaSegment.prototype, StepLineMixin);

	var SplineAreaSegment = AreaSegment.extend({
	    createStrokeSegments: function() {
	        var curveProcessor = new CurveProcessor(this.options.closed);
	        var linePoints = this.points();

	        return curveProcessor.process(linePoints);
	    },

	    createStackSegments: function() {
	        var strokeSegments = this.strokeSegments();
	        var stackSegments = [];
	        for (var idx = strokeSegments.length - 1; idx >= 0; idx--) {
	            var segment = strokeSegments[idx];
	            stackSegments.push(new geometry.Segment(
	                segment.anchor(),
	                segment.controlOut(),
	                segment.controlIn()
	            ));
	        }

	        return stackSegments;
	    }
	});

	var AreaChart = LineChart.extend({
	    createSegment: function(linePoints, currentSeries, seriesIx, prevSegment) {
	        var isStacked = this.options.isStacked;
	        var style = (currentSeries.line || {}).style;
	        var previousSegment;

	        var stackPoints;
	        if (isStacked && seriesIx > 0 && prevSegment) {
	            var missingValues = this.seriesMissingValues(currentSeries);
	            if (missingValues !== "gap") {
	                stackPoints = prevSegment.linePoints;
	                previousSegment = prevSegment;
	            } else {
	                stackPoints = this._gapStackPoints(linePoints, seriesIx, style);
	            }
	        }

	        var pointType;
	        if (style === STEP) {
	            pointType = StepAreaSegment;
	        } else if (style === SMOOTH) {
	            pointType = SplineAreaSegment;
	        } else {
	            pointType = AreaSegment;
	        }

	        return new pointType(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        LineChart.fn.reflow.call(this, targetBox);

	        var stackPoints = this._stackPoints;
	        if (stackPoints) {
	            for (var idx = 0; idx < stackPoints.length; idx++) {
	                var stackPoint = stackPoints[idx];
	                var pointSlot = this$1.categoryAxis.getSlot(stackPoint.categoryIx);
	                stackPoint.reflow(pointSlot);
	            }
	        }
	    },

	    _gapStackPoints: function(linePoints, seriesIx, style) {
	        var this$1 = this;

	        var seriesPoints = this.seriesPoints;
	        var startIdx = linePoints[0].categoryIx;
	        var length = linePoints.length;
	        if (startIdx < 0) {
	            startIdx = 0;
	            length--;
	        }

	        var endIdx = startIdx + length;
	        var pointOffset = this.seriesOptions[0]._outOfRangeMinPoint ? 1 : 0;
	        var stackPoints = [];

	        this._stackPoints = this._stackPoints || [];
	        for (var categoryIx = startIdx; categoryIx < endIdx; categoryIx++) {
	            var pointIx = categoryIx + pointOffset;
	            var currentSeriesIx = seriesIx;
	            var point = (void 0);

	            do {
	                currentSeriesIx--;
	                point = seriesPoints[currentSeriesIx][pointIx];
	            } while (currentSeriesIx > 0 && !point);

	            if (point) {
	                if (style !== STEP && categoryIx > startIdx && !seriesPoints[currentSeriesIx][pointIx - 1]) {
	                    stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx - 1, currentSeriesIx));
	                }

	                stackPoints.push(point);

	                if (style !== STEP && categoryIx + 1 < endIdx && !seriesPoints[currentSeriesIx][pointIx + 1]) {
	                    stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx + 1, currentSeriesIx));
	                }
	            } else {
	                var gapStackPoint = this$1._createGapStackPoint(categoryIx);
	                this$1._stackPoints.push(gapStackPoint);
	                stackPoints.push(gapStackPoint);
	            }
	        }

	        return stackPoints;
	    },

	    _previousSegmentPoint: function(categoryIx, pointIx, segmentIx, seriesIdx) {
	        var seriesPoints = this.seriesPoints;
	        var index = seriesIdx;
	        var point;

	        while (index > 0 && !point) {
	            index--;
	            point = seriesPoints[index][segmentIx];
	        }

	        if (!point) {
	            point = this._createGapStackPoint(categoryIx);
	            this._stackPoints.push(point);
	        } else {
	            point = seriesPoints[index][pointIx];
	        }

	        return point;
	    },

	    _createGapStackPoint: function(categoryIx) {
	        var options = this.pointOptions({}, 0);
	        var point = new LinePoint(0, options);
	        point.categoryIx = categoryIx;
	        point.series = {};

	        return point;
	    },

	    seriesMissingValues: function(series) {
	        return series.missingValues || ZERO;
	    }
	});

	var AxisGroupRangeTracker = Class.extend({
	    init: function() {

	        this.axisRanges = {};
	    },

	    update: function(chartAxisRanges) {
	        var axisRanges = this.axisRanges;

	        for (var axisName in chartAxisRanges) {
	            var chartRange = chartAxisRanges[axisName];
	            var range = axisRanges[axisName];
	            axisRanges[axisName] = range = range || { min: MAX_VALUE, max: MIN_VALUE };

	            range.min = Math.min(range.min, chartRange.min);
	            range.max = Math.max(range.max, chartRange.max);
	        }
	    },

	    reset: function(axisName) {
	        this.axisRanges[axisName] = undefined;
	    },

	    query: function(axisName) {
	        return this.axisRanges[axisName];
	    }
	});

	var BarLabel = ChartElement.extend({
	    init: function(content, options) {
	        ChartElement.fn.init.call(this, options);

	        this.textBox = new TextBox(content, this.options);
	        this.append(this.textBox);
	    },

	    createVisual: function() {
	        this.textBox.options.noclip = this.options.noclip;
	    },

	    reflow: function(targetBox) {
	        var options = this.options;
	        var vertical = options.vertical;
	        var aboveAxis = options.aboveAxis;
	        var text = this.children[0];
	        var textOptions = text.options;
	        var box = text.box;
	        var padding = text.options.padding;
	        var labelBox = targetBox;

	        textOptions.align = vertical ? CENTER : LEFT;
	        textOptions.vAlign = vertical ? TOP : CENTER;

	        if (options.position === INSIDE_END) {
	            if (vertical) {
	                textOptions.vAlign = TOP;

	                if (!aboveAxis && box.height() < targetBox.height()) {
	                    textOptions.vAlign = BOTTOM;
	                }
	            } else {
	                textOptions.align = aboveAxis ? RIGHT : LEFT;
	            }
	        } else if (options.position === CENTER) {
	            textOptions.vAlign = CENTER;
	            textOptions.align = CENTER;
	        } else if (options.position === INSIDE_BASE) {
	            if (vertical) {
	                textOptions.vAlign = aboveAxis ? BOTTOM : TOP;
	            } else {
	                textOptions.align = aboveAxis ? LEFT : RIGHT;
	            }
	        } else if (options.position === OUTSIDE_END) {
	            if (vertical) {
	                if (aboveAxis) {
	                    labelBox = new Box(
	                        targetBox.x1, targetBox.y1 - box.height(),
	                        targetBox.x2, targetBox.y1
	                    );
	                } else {
	                    labelBox = new Box(
	                        targetBox.x1, targetBox.y2,
	                        targetBox.x2, targetBox.y2 + box.height()
	                    );
	                }
	            } else {
	                textOptions.align = CENTER;
	                if (aboveAxis) {
	                    labelBox = new Box(
	                        targetBox.x2, targetBox.y1,
	                        targetBox.x2 + box.width(), targetBox.y2
	                    );
	                } else {
	                    labelBox = new Box(
	                        targetBox.x1 - box.width(), targetBox.y1,
	                        targetBox.x1, targetBox.y2
	                    );
	                }
	            }
	        }

	        if (!options.rotation) {
	            if (vertical) {
	                padding.left = padding.right =
	                    (labelBox.width() - text.contentBox.width()) / 2;
	            } else {
	                padding.top = padding.bottom =
	                    (labelBox.height() - text.contentBox.height()) / 2;
	            }
	        }

	        text.reflow(labelBox);
	    },

	    alignToClipBox: function(clipBox) {
	        var vertical = this.options.vertical;
	        var field = vertical ? Y : X;
	        var start = field + "1";
	        var end = field + "2";
	        var text = this.children[0];
	        var parentBox = this.parent.box;

	        if (parentBox[start] < clipBox[start] || clipBox[end] < parentBox[end]) {
	            var targetBox = text.paddingBox.clone();
	            targetBox[start] = Math.max(parentBox[start], clipBox[start]);
	            targetBox[end] = Math.min(parentBox[end], clipBox[end]);

	            this.reflow(targetBox);
	        }
	    }
	});

	setDefaultOptions(BarLabel, {
	    position: OUTSIDE_END,
	    margin: getSpacing(3),
	    padding: getSpacing(4),
	    color: BLACK,
	    background: "",
	    border: {
	        width: 1,
	        color: ""
	    },
	    aboveAxis: true,
	    vertical: false,
	    animation: {
	        type: FADEIN,
	        delay: INITIAL_ANIMATION_DURATION
	    },
	    zIndex: 2
	});

	function hasGradientOverlay(options) {
	    var overlay = options.overlay;

	    return overlay && overlay.gradient && overlay.gradient !== "none";
	}

	var BAR_ALIGN_MIN_WIDTH = 6;

	var Bar = ChartElement.extend({
	    init: function(value, options) {
	        ChartElement.fn.init.call(this);

	        this.options = options;
	        this.color = options.color || WHITE;
	        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
	        this.value = value;
	    },

	    render: function() {
	        if (this._rendered) {
	            return;
	        }

	        this._rendered = true;

	        this.createLabel();
	        this.createNote();

	        if (this.errorBar) {
	            this.append(this.errorBar);
	        }
	    },

	    createLabel: function() {
	        var options = this.options;
	        var labels = options.labels;

	        if (labels.visible) {
	            var labelTemplate = getTemplate(labels);
	            var labelText;

	            if (labelTemplate) {
	                labelText = labelTemplate({
	                    dataItem: this.dataItem,
	                    category: this.category,
	                    value: this.value,
	                    percentage: this.percentage,
	                    stackValue: this.stackValue,
	                    runningTotal: this.runningTotal,
	                    total: this.total,
	                    series: this.series
	                });
	            } else {
	                labelText = this.formatValue(labels.format);
	            }

	            this.label = new BarLabel(labelText,
	                    deepExtend({
	                        vertical: options.vertical
	                    },
	                    labels
	                ));
	            this.append(this.label);
	        }
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        this.render();

	        var label = this.label;

	        this.box = targetBox;

	        if (label) {
	            label.options.aboveAxis = this.aboveAxis;
	            label.reflow(targetBox);
	        }

	        if (this.note) {
	            this.note.reflow(targetBox);
	        }

	        if (this.errorBars) {
	            for (var i = 0; i < this.errorBars.length; i++) {
	                this$1.errorBars[i].reflow(targetBox);
	            }
	        }
	    },

	    createVisual: function() {
	        var this$1 = this;

	        var ref = this;
	        var box = ref.box;
	        var options = ref.options;
	        var customVisual = options.visual;

	        if (this.visible !== false) {
	            ChartElement.fn.createVisual.call(this);

	            if (customVisual) {
	                var visual = this.rectVisual = customVisual({
	                    category: this.category,
	                    dataItem: this.dataItem,
	                    value: this.value,
	                    sender: this.getSender(),
	                    series: this.series,
	                    percentage: this.percentage,
	                    stackValue: this.stackValue,
	                    runningTotal: this.runningTotal,
	                    total: this.total,
	                    rect: box.toRect(),
	                    createVisual: function () {
	                        var group = new Group();
	                        this$1.createRect(group);
	                        return group;
	                    },
	                    options: options
	                });

	                if (visual) {
	                    this.visual.append(visual);
	                }
	            } else if (box.width() > 0 && box.height() > 0) {
	                this.createRect(this.visual);
	            }
	        }
	    },

	    createRect: function(visual) {
	        var options = this.options;
	        var border = options.border;
	        var strokeOpacity = defined(border.opacity) ? border.opacity : options.opacity;
	        var rect = this.box.toRect();

	        rect.size.width = Math.round(rect.size.width);

	        var path = this.rectVisual = Path.fromRect(rect, {
	            fill: {
	                color: this.color,
	                opacity: options.opacity
	            },
	            stroke: {
	                color: this.getBorderColor(),
	                width: border.width,
	                opacity: strokeOpacity,
	                dashType: border.dashType
	            }
	        });

	        var width = this.box.width();
	        var height = this.box.height();

	        var size = options.vertical ? width : height;

	        if (size > BAR_ALIGN_MIN_WIDTH) {
	            alignPathToPixel(path);

	            // Fixes lineJoin issue in firefox when the joined lines are parallel
	            if (width < 1 || height < 1) {
	                path.options.stroke.lineJoin = "round";
	            }
	        }

	        visual.append(path);

	        if (hasGradientOverlay(options)) {
	            var overlay = this.createGradientOverlay(path, { baseColor: this.color }, deepExtend({
	                end: !options.vertical ? [ 0, 1 ] : undefined
	            }, options.overlay));

	            visual.append(overlay);
	        }
	    },

	    createHighlight: function(style) {
	        var highlight = Path.fromRect(this.box.toRect(), style);

	        return alignPathToPixel(highlight);
	    },

	    highlightVisual: function() {
	        return this.rectVisual;
	    },

	    highlightVisualArgs: function() {
	        return {
	            options: this.options,
	            rect: this.box.toRect(),
	            visual: this.rectVisual
	        };
	    },

	    getBorderColor: function() {
	        var color = this.color;
	        var border = this.options.border;
	        var brightness = border._brightness || BORDER_BRIGHTNESS;
	        var borderColor = border.color;

	        if (!defined(borderColor)) {
	            borderColor = new Color(color).brightness(brightness).toHex();
	        }

	        return borderColor;
	    },

	    tooltipAnchor: function() {
	        var ref = this;
	        var options = ref.options;
	        var box = ref.box;
	        var aboveAxis = ref.aboveAxis;
	        var clipBox = this.owner.pane.clipBox() || box;
	        var horizontalAlign = LEFT;
	        var verticalAlign = TOP;
	        var x, y;

	        if (options.vertical) {
	            x = Math.min(box.x2, clipBox.x2) + TOOLTIP_OFFSET;
	            if (aboveAxis) {
	                y = Math.max(box.y1, clipBox.y1);
	            } else {
	                y = Math.min(box.y2, clipBox.y2);
	                verticalAlign = BOTTOM;
	            }
	        } else {
	            var x1 = Math.max(box.x1, clipBox.x1);
	            var x2 = Math.min(box.x2, clipBox.x2);

	            if (options.isStacked) {
	                verticalAlign = BOTTOM;
	                if (aboveAxis) {
	                    horizontalAlign = RIGHT;
	                    x = x2;
	                } else {
	                    x = x1;
	                }
	                y = Math.max(box.y1, clipBox.y1) - TOOLTIP_OFFSET;
	            } else {
	                if (aboveAxis) {
	                    x = x2 + TOOLTIP_OFFSET;
	                } else {
	                    x = x1 - TOOLTIP_OFFSET;
	                    horizontalAlign = RIGHT;
	                }
	                y = Math.max(box.y1, clipBox.y1);
	            }
	        }

	        return {
	            point: new Point(x, y),
	            align: {
	                horizontal: horizontalAlign,
	                vertical: verticalAlign
	            }
	        };
	    },

	    overlapsBox: function(box) {
	        return this.box.overlaps(box);
	    }
	});

	deepExtend(Bar.prototype, PointEventsMixin);
	deepExtend(Bar.prototype, NoteMixin);

	Bar.prototype.defaults = {
	    border: {
	        width: 1
	    },
	    vertical: true,
	    overlay: {
	        gradient: "glass"
	    },
	    labels: {
	        visible: false,
	        format: "{0}"
	    },
	    opacity: 1,
	    notes: {
	        label: {}
	    }
	};

	function forEach(elements, callback) {
	    elements.forEach(callback);
	}

	function forEachReverse(elements, callback) {
	    var length = elements.length;

	    for (var idx = length - 1; idx >= 0; idx--) {
	        callback(elements[idx], idx - length - 1);
	    }
	}

	var ClusterLayout = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);

	        this.forEach = options.rtl ? forEachReverse : forEach;
	    },

	    reflow: function(box) {
	        var ref = this.options;
	        var vertical = ref.vertical;
	        var gap = ref.gap;
	        var spacing = ref.spacing;
	        var children = this.children;
	        var count = children.length;
	        var axis = vertical ? Y : X;
	        var slots = count + gap + (spacing * (count - 1));
	        var slotSize = (vertical ? box.height() : box.width()) / slots;
	        var position = box[axis + 1] + slotSize * (gap / 2);

	        this.forEach(children, function (child, idx) {
	            var childBox = (child.box || box).clone();

	            childBox[axis + 1] = position;
	            childBox[axis + 2] = position + slotSize;

	            child.reflow(childBox);
	            if (idx < count - 1) {
	                position += (slotSize * spacing);
	            }

	            position += slotSize;
	        });
	    }
	});

	setDefaultOptions(ClusterLayout, {
	    vertical: false,
	    gap: 0,
	    spacing: 0
	});

	var StackWrap = ChartElement.extend({
	    reflow: function(targetBox) {
	        var this$1 = this;

	        var positionAxis = this.options.vertical ? X : Y;
	        var children = this.children;
	        var childrenCount = children.length;
	        var box = this.box = new Box();

	        for (var i = 0; i < childrenCount; i++) {
	            var currentChild = children[i];

	            if (currentChild.visible !== false) {
	                var childBox = currentChild.box.clone();
	                childBox.snapTo(targetBox, positionAxis);

	                if (i === 0) {
	                    box = this$1.box = childBox.clone();
	                }

	                currentChild.reflow(childBox);
	                box.wrap(childBox);
	            }
	        }
	    }
	});

	setDefaultOptions(StackWrap, {
	    vertical: true
	});

	var BarChart = CategoricalChart.extend({
	    render: function() {
	        CategoricalChart.fn.render.call(this);
	        this.updateStackRange();
	    },

	    pointType: function() {
	        return Bar;
	    },

	    clusterType: function() {
	        return ClusterLayout;
	    },

	    stackType: function() {
	        return StackWrap;
	    },

	    stackLimits: function(axisName, stackName) {
	        var limits = CategoricalChart.fn.stackLimits.call(this, axisName, stackName);

	        return limits;
	    },

	    createPoint: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var isStacked = options.isStacked;
	        var value = this.pointValue(data);
	        var pointOptions = this.pointOptions(series, seriesIx);

	        var labelOptions = pointOptions.labels;
	        if (isStacked) {
	            if (labelOptions.position === OUTSIDE_END) {
	                labelOptions.position = INSIDE_END;
	            }
	        }

	        pointOptions.isStacked = isStacked;

	        var color = data.fields.color || series.color;
	        if (value < 0 && pointOptions.negativeColor) {
	            color = pointOptions.negativeColor;
	        }

	        pointOptions = this.evalPointOptions(
	            pointOptions, value, category, categoryIx, series, seriesIx
	        );

	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        var pointType = this.pointType();
	        var point = new pointType(value, pointOptions);
	        point.color = color;

	        var cluster = children[categoryIx];
	        if (!cluster) {
	            var clusterType = this.clusterType();
	            cluster = new clusterType({
	                vertical: options.invertAxes,
	                gap: options.gap,
	                spacing: options.spacing,
	                rtl: !options.invertAxes && (this.chartService || {}).rtl
	            });
	            this.append(cluster);
	        }

	        if (isStacked) {
	            var stackWrap = this.getStackWrap(series, cluster);
	            stackWrap.append(point);
	        } else {
	            cluster.append(point);
	        }

	        return point;
	    },

	    getStackWrap: function(series, cluster) {
	        var stack = series.stack;
	        var stackGroup = stack ? stack.group || stack : stack;
	        var wraps = cluster.children;
	        var stackWrap;

	        if (typeof stackGroup === datavizConstants.STRING) {
	            for (var i = 0; i < wraps.length; i++) {
	                if (wraps[i]._stackGroup === stackGroup) {
	                    stackWrap = wraps[i];
	                    break;
	                }
	            }
	        } else {
	            stackWrap = wraps[0];
	        }

	        if (!stackWrap) {
	            var stackType = this.stackType();
	            stackWrap = new stackType({
	                vertical: !this.options.invertAxes
	            });
	            stackWrap._stackGroup = stackGroup;
	            cluster.append(stackWrap);
	        }

	        return stackWrap;
	    },

	    categorySlot: function(categoryAxis, categoryIx, valueAxis) {
	        var options = this.options;
	        var categorySlot = categoryAxis.getSlot(categoryIx);
	        var startValue = valueAxis.startValue();

	        if (options.isStacked) {
	            var zeroSlot = valueAxis.getSlot(startValue, startValue, true);
	            var stackAxis = options.invertAxes ? X : Y;
	            categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];
	        }

	        return categorySlot;
	    },

	    reflowCategories: function(categorySlots) {
	        var children = this.children;
	        var childrenLength = children.length;

	        for (var i = 0; i < childrenLength; i++) {
	            children[i].reflow(categorySlots[i]);
	        }
	    },

	    createAnimation: function() {
	        this._setAnimationOptions();
	        CategoricalChart.fn.createAnimation.call(this);

	        if (anyHasZIndex(this.options.series)) {
	            this._setChildrenAnimation();
	        }
	    },

	    _setChildrenAnimation: function() {
	        var this$1 = this;

	        var points = this.points;

	        for (var idx = 0; idx < points.length; idx++) {
	            var point = points[idx];
	            var pointVisual = point.visual;
	            if (pointVisual && defined(pointVisual.options.zIndex)) {
	                point.options.animation = this$1.options.animation;
	                point.createAnimation();
	            }
	        }
	    },

	    _setAnimationOptions: function() {
	        var options = this.options;
	        var animation = options.animation || {};
	        var origin;

	        if (options.isStacked) {
	            var valueAxis = this.seriesValueAxis(options.series[0]);
	            origin = valueAxis.getSlot(valueAxis.startValue());
	        } else {
	            origin = this.categoryAxis.getSlot(0);
	        }

	        animation.origin = new GeometryPoint(origin.x1, origin.y1);
	        animation.vertical = !options.invertAxes;
	    }
	});

	setDefaultOptions(BarChart, {
	    animation: {
	        type: BAR
	    }
	});

	var Candlestick = ChartElement.extend({
	    init: function(value, options) {
	        ChartElement.fn.init.call(this, options);
	        this.value = value;
	    },

	    reflow: function(box) {
	        var ref = this;
	        var options = ref.options;
	        var value = ref.value;
	        var chart = ref.owner;
	        var valueAxis = chart.seriesValueAxis(options);
	        var ocSlot = valueAxis.getSlot(value.open, value.close);
	        var lhSlot = valueAxis.getSlot(value.low, value.high);

	        ocSlot.x1 = lhSlot.x1 = box.x1;
	        ocSlot.x2 = lhSlot.x2 = box.x2;

	        this.realBody = ocSlot;

	        var mid = lhSlot.center().x;
	        var points = [];

	        points.push([ [ mid, lhSlot.y1 ], [ mid, ocSlot.y1 ] ]);
	        points.push([ [ mid, ocSlot.y2 ], [ mid, lhSlot.y2 ] ]);

	        this.lines = points;

	        this.box = lhSlot.clone().wrap(ocSlot);

	        if (!this._rendered) {
	            this._rendered = true;
	            this.createNote();
	        }

	        this.reflowNote();
	    },

	    reflowNote: function() {
	        if (this.note) {
	            this.note.reflow(this.box);
	        }
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);
	        this._mainVisual = this.mainVisual(this.options);
	        this.visual.append(
	            this._mainVisual
	        );

	        this.createOverlay();
	    },

	    mainVisual: function(options) {
	        var group = new Group();

	        this.createBody(group, options);
	        this.createLines(group, options);

	        return group;
	    },

	    createBody: function(container, options) {
	        var body = Path.fromRect(this.realBody.toRect(), {
	            fill: {
	                color: this.color,
	                opacity: options.opacity
	            },
	            stroke: null
	        });

	        if (options.border.width > 0) {
	            body.options.set("stroke", {
	                color: this.getBorderColor(),
	                width: options.border.width,
	                dashType: options.border.dashType,
	                opacity: valueOrDefault(options.border.opacity, options.opacity)
	            });
	        }

	        alignPathToPixel(body);
	        container.append(body);

	        if (hasGradientOverlay(options)) {
	            container.append(this.createGradientOverlay(body, { baseColor: this.color }, deepExtend({
	                end: !options.vertical ? [ 0, 1 ] : undefined
	            }, options.overlay)));
	        }
	    },

	    createLines: function(container, options) {
	        this.drawLines(container, options, this.lines, options.line);
	    },

	    drawLines: function(container, options, lines, lineOptions) {
	        if (!lines) {
	            return;
	        }

	        var lineStyle = {
	            stroke: {
	                color: lineOptions.color || this.color,
	                opacity: valueOrDefault(lineOptions.opacity, options.opacity),
	                width: lineOptions.width,
	                dashType: lineOptions.dashType,
	                lineCap: "butt"
	            }
	        };

	        for (var i = 0; i < lines.length; i++) {
	            var line = Path.fromPoints(lines[i], lineStyle);
	            alignPathToPixel(line);
	            container.append(line);
	        }
	    },

	    getBorderColor: function() {
	        var border = this.options.border;
	        var borderColor = border.color;

	        if (!defined(borderColor)) {
	            borderColor = new Color(this.color).brightness(border._brightness).toHex();
	        }

	        return borderColor;
	    },

	    createOverlay: function() {
	        var overlay = Path.fromRect(this.box.toRect(), {
	            fill: {
	                color: WHITE,
	                opacity: 0
	            },
	            stroke: null
	        });

	        this.visual.append(overlay);
	    },

	    createHighlight: function() {
	        var highlight = this.options.highlight;
	        var normalColor = this.color;

	        this.color = highlight.color || this.color;
	        var overlay = this.mainVisual(
	            deepExtend({}, this.options, {
	                line: {
	                    color: this.getBorderColor()
	                }
	            }, highlight)
	        );
	        this.color = normalColor;

	        return overlay;
	    },

	    highlightVisual: function() {
	        return this._mainVisual;
	    },

	    highlightVisualArgs: function() {
	        return {
	            options: this.options,
	            rect: this.box.toRect(),
	            visual: this._mainVisual
	        };
	    },

	    tooltipAnchor: function() {
	        var box = this.box;
	        var clipBox = this.owner.pane.clipBox() || box;

	        return {
	            point: new Point(box.x2 + TOOLTIP_OFFSET, Math.max(box.y1, clipBox.y1) + TOOLTIP_OFFSET),
	            align: {
	                horizontal: LEFT,
	                vertical: TOP
	            }
	        };
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    },

	    overlapsBox: function(box) {
	        return this.box.overlaps(box);
	    }
	});

	setDefaultOptions(Candlestick, {
	    vertical: true,
	    border: {
	        _brightness: 0.8
	    },
	    line: {
	        width: 2
	    },
	    overlay: {
	        gradient: "glass"
	    },
	    tooltip: {
	        format: "<table>" +
	                    "<tr><th colspan='2'>{4:d}</th></tr>" +
	                    "<tr><td>Open:</td><td>{0:C}</td></tr>" +
	                    "<tr><td>High:</td><td>{1:C}</td></tr>" +
	                    "<tr><td>Low:</td><td>{2:C}</td></tr>" +
	                    "<tr><td>Close:</td><td>{3:C}</td></tr>" +
	                "</table>"
	    },
	    highlight: {
	        opacity: 1,
	        border: {
	            width: 1,
	            opacity: 1
	        },
	        line: {
	            width: 1,
	            opacity: 1
	        }
	    },
	    notes: {
	        visible: true,
	        label: {}
	    }
	});

	deepExtend(Candlestick.prototype, PointEventsMixin);
	deepExtend(Candlestick.prototype, NoteMixin);

	function areNumbers(values) {
	    return countNumbers(values) === values.length;
	}

	var CandlestickChart = CategoricalChart.extend({
	    reflowCategories: function(categorySlots) {
	        var children = this.children;
	        var childrenLength = children.length;

	        for (var i = 0; i < childrenLength; i++) {
	            children[i].reflow(categorySlots[i]);
	        }
	    },

	    addValue: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var ref = this;
	        var children = ref.children;
	        var options = ref.options;
	        var value = data.valueFields;
	        var valueParts = this.splitValue(value);
	        var hasValue = areNumbers(valueParts);
	        var dataItem = series.data[categoryIx];
	        var categoryPoints = this.categoryPoints[categoryIx];
	        var point;

	        if (!categoryPoints) {
	            this.categoryPoints[categoryIx] = categoryPoints = [];
	        }

	        if (hasValue) {
	            point = this.createPoint(data, fields);
	        }

	        var cluster = children[categoryIx];
	        if (!cluster) {
	            cluster = new ClusterLayout({
	                vertical: options.invertAxes,
	                gap: options.gap,
	                spacing: options.spacing,
	                rtl: !options.invertAxes && (this.chartService || {}).rtl
	            });
	            this.append(cluster);
	        }

	        if (point) {
	            this.updateRange(value, fields);

	            cluster.append(point);

	            point.categoryIx = categoryIx;
	            point.category = category;
	            point.series = series;
	            point.seriesIx = seriesIx;
	            point.owner = this;
	            point.dataItem = dataItem;
	            point.noteText = data.fields.noteText;
	        }

	        this.points.push(point);
	        categoryPoints.push(point);
	    },

	    pointType: function() {
	        return Candlestick;
	    },

	    createPoint: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var pointType = this.pointType();
	        var value = data.valueFields;
	        var pointOptions = deepExtend({}, series);
	        var color = data.fields.color || series.color;

	        pointOptions = this.evalPointOptions(
	            pointOptions, value, category, categoryIx, series, seriesIx
	        );

	        if (series.type === CANDLESTICK) {
	            if (value.open > value.close) {
	                color = data.fields.downColor || series.downColor || series.color;
	            }
	        }

	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        pointOptions.vertical = !this.options.invertAxes;

	        var point = new pointType(value, pointOptions);
	        point.color = color;

	        return point;
	    },

	    splitValue: function(value) {
	        return [ value.low, value.open, value.close, value.high ];
	    },

	    updateRange: function(value, fields) {
	        var axisName = fields.series.axis;
	        var parts = this.splitValue(value);
	        var axisRange = this.valueAxisRanges[axisName];

	        axisRange = this.valueAxisRanges[axisName] =
	            axisRange || { min: MAX_VALUE, max: MIN_VALUE };

	        axisRange = this.valueAxisRanges[axisName] = {
	            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),
	            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))
	        };
	    },

	    formatPointValue: function(point, format) {
	        var value = point.value;

	        return this.chartService.format.auto(format,
	            value.open, value.high,
	            value.low, value.close, point.category
	        );
	    },

	    animationPoints: function() {
	        return this.points;
	    }
	});

	deepExtend(CandlestickChart.prototype, ClipAnimationMixin);

	var BoxPlot = Candlestick.extend({
	    init: function(value, options) {
	        Candlestick.fn.init.call(this, value, options);

	        this.createNote();
	    },

	    reflow: function(box) {
	        var ref = this;
	        var options = ref.options;
	        var value = ref.value;
	        var chart = ref.owner;
	        var valueAxis = chart.seriesValueAxis(options);
	        var whiskerSlot, boxSlot;

	        this.boxSlot = boxSlot = valueAxis.getSlot(value.q1, value.q3);
	        this.realBody = boxSlot;
	        this.reflowBoxSlot(box);

	        this.whiskerSlot = whiskerSlot = valueAxis.getSlot(value.lower, value.upper);
	        this.reflowWhiskerSlot(box);

	        var medianSlot = valueAxis.getSlot(value.median);

	        if (value.mean) {
	            var meanSlot = valueAxis.getSlot(value.mean);
	            this.meanPoints = this.calcMeanPoints(box, meanSlot);
	        }

	        this.whiskerPoints = this.calcWhiskerPoints(boxSlot, whiskerSlot);
	        this.medianPoints = this.calcMedianPoints(box, medianSlot);

	        this.box = whiskerSlot.clone().wrap(boxSlot);
	        this.reflowNote();
	    },

	    reflowBoxSlot: function(box) {
	        this.boxSlot.x1 = box.x1;
	        this.boxSlot.x2 = box.x2;
	    },

	    reflowWhiskerSlot: function(box) {
	        this.whiskerSlot.x1 = box.x1;
	        this.whiskerSlot.x2 = box.x2;
	    },

	    calcMeanPoints: function(box, meanSlot) {
	        return [
	            [ [ box.x1, meanSlot.y1 ], [ box.x2, meanSlot.y1 ] ]
	        ];
	    },

	    calcWhiskerPoints: function(boxSlot, whiskerSlot) {
	        var mid = whiskerSlot.center().x;
	        return [ [
	            [ mid - 5, whiskerSlot.y1 ], [ mid + 5, whiskerSlot.y1 ],
	            [ mid, whiskerSlot.y1 ], [ mid, boxSlot.y1 ]
	        ], [
	            [ mid - 5, whiskerSlot.y2 ], [ mid + 5, whiskerSlot.y2 ],
	            [ mid, whiskerSlot.y2 ], [ mid, boxSlot.y2 ]
	        ] ];
	    },

	    calcMedianPoints: function(box, medianSlot) {
	        return [
	            [ [ box.x1, medianSlot.y1 ], [ box.x2, medianSlot.y1 ] ]
	        ];
	    },

	    renderOutliers: function(options) {
	        var this$1 = this;

	        var value = this.value;
	        var outliers = value.outliers || [];
	        var outerFence = Math.abs(value.q3 - value.q1) * 3;
	        var elements = [];
	        var markers = options.markers || {};

	        for (var i = 0; i < outliers.length; i++) {
	            var outlierValue = outliers[i];
	            if (outlierValue < value.q3 + outerFence && outlierValue > value.q1 - outerFence) {
	                markers = options.outliers;
	            } else {
	                markers = options.extremes;
	            }
	            var markersBorder = deepExtend({}, markers.border);

	            if (!defined(markersBorder.color)) {
	                if (defined(this$1.color)) {
	                    markersBorder.color = this$1.color;
	                } else {
	                    markersBorder.color =
	                        new Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex();
	                }
	            }

	            var shape = new ShapeElement({
	                type: markers.type,
	                width: markers.size,
	                height: markers.size,
	                rotation: markers.rotation,
	                background: markers.background,
	                border: markersBorder,
	                opacity: markers.opacity
	            });

	            shape.value = outlierValue;

	            elements.push(shape);
	        }

	        this.reflowOutliers(elements);
	        return elements;
	    },

	    reflowOutliers: function(outliers) {
	        var this$1 = this;

	        var valueAxis = this.owner.seriesValueAxis(this.options);
	        var center = this.box.center();

	        for (var i = 0; i < outliers.length; i++) {
	            var outlierValue = outliers[i].value;
	            var markerBox = valueAxis.getSlot(outlierValue);

	            if (this$1.options.vertical) {
	                markerBox.move(center.x);
	            } else {
	                markerBox.move(undefined, center.y);
	            }

	            this$1.box = this$1.box.wrap(markerBox);
	            outliers[i].reflow(markerBox);
	        }
	    },

	    mainVisual: function(options) {
	        var group = Candlestick.fn.mainVisual.call(this, options);
	        var outliers = this.renderOutliers(options);

	        for (var i = 0; i < outliers.length; i++) {
	            var element = outliers[i].getElement();
	            if (element) {
	                group.append(element);
	            }
	        }

	        return group;
	    },

	    createLines: function(container, options) {
	        this.drawLines(container, options, this.whiskerPoints, options.whiskers);
	        this.drawLines(container, options, this.medianPoints, options.median);
	        this.drawLines(container, options, this.meanPoints, options.mean);
	    },

	    getBorderColor: function() {
	        if (this.color) {
	            return this.color;
	        }

	        return Candlestick.fn.getBorderColor.call(this);
	    }
	});

	setDefaultOptions(BoxPlot, {
	    border: {
	        _brightness: 0.8
	    },
	    line: {
	        width: 2
	    },
	    median: {
	        color: "#f6f6f6"
	    },
	    mean: {
	        width: 2,
	        dashType: "dash",
	        color: "#f6f6f6"
	    },
	    overlay: {
	        gradient: "glass"
	    },
	    tooltip: {
	        format: "<table>" +
	                    "<tr><th colspan='2'>{6:d}</th></tr>" +
	                    "<tr><td>Lower:</td><td>{0:C}</td></tr>" +
	                    "<tr><td>Q1:</td><td>{1:C}</td></tr>" +
	                    "<tr><td>Median:</td><td>{2:C}</td></tr>" +
	                    "<tr><td>Mean:</td><td>{5:C}</td></tr>" +
	                    "<tr><td>Q3:</td><td>{3:C}</td></tr>" +
	                    "<tr><td>Upper:</td><td>{4:C}</td></tr>" +
	                "</table>"
	    },
	    highlight: {
	        opacity: 1,
	        border: {
	            width: 1,
	            opacity: 1
	        },
	        line: {
	            width: 1,
	            opacity: 1
	        }
	    },
	    notes: {
	        visible: true,
	        label: {}
	    },
	    outliers: {
	        visible: true,
	        size: LINE_MARKER_SIZE,
	        type: datavizConstants.CROSS,
	        background: WHITE,
	        border: {
	            width: 2,
	            opacity: 1
	        },
	        opacity: 0
	    },
	    extremes: {
	        visible: true,
	        size: LINE_MARKER_SIZE,
	        type: CIRCLE,
	        background: WHITE,
	        border: {
	            width: 2,
	            opacity: 1
	        },
	        opacity: 0
	    }
	});

	deepExtend(BoxPlot.prototype, PointEventsMixin);

	var VerticalBoxPlot = BoxPlot.extend({
	    reflowBoxSlot: function(box) {
	        this.boxSlot.y1 = box.y1;
	        this.boxSlot.y2 = box.y2;
	    },

	    reflowWhiskerSlot: function(box) {
	        this.whiskerSlot.y1 = box.y1;
	        this.whiskerSlot.y2 = box.y2;
	    },

	    calcMeanPoints: function(box, meanSlot) {
	        return [
	            [ [ meanSlot.x1, box.y1 ], [ meanSlot.x1, box.y2 ] ]
	        ];
	    },

	    calcWhiskerPoints: function(boxSlot, whiskerSlot) {
	        var mid = whiskerSlot.center().y;
	        return [ [
	            [ whiskerSlot.x1, mid - 5 ], [ whiskerSlot.x1, mid + 5 ],
	            [ whiskerSlot.x1, mid ], [ boxSlot.x1, mid ]
	        ], [
	            [ whiskerSlot.x2, mid - 5 ], [ whiskerSlot.x2, mid + 5 ],
	            [ whiskerSlot.x2, mid ], [ boxSlot.x2, mid ]
	        ] ];
	    },

	    calcMedianPoints: function(box, medianSlot) {
	        return [
	            [ [ medianSlot.x1, box.y1 ], [ medianSlot.x1, box.y2 ] ]
	        ];
	    }
	});

	var BoxPlotChart = CandlestickChart.extend({
	    addValue: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var ref = this;
	        var children = ref.children;
	        var options = ref.options;
	        var value = data.valueFields;
	        var valueParts = this.splitValue(value);
	        var hasValue = areNumbers(valueParts);
	        var dataItem = series.data[categoryIx];
	        var categoryPoints = this.categoryPoints[categoryIx];
	        var point;

	        if (!categoryPoints) {
	            this.categoryPoints[categoryIx] = categoryPoints = [];
	        }

	        if (hasValue) {
	            point = this.createPoint(data, fields);
	        }

	        var cluster = children[categoryIx];
	        if (!cluster) {
	            cluster = new ClusterLayout({
	                vertical: options.invertAxes,
	                gap: options.gap,
	                spacing: options.spacing,
	                rtl: !options.invertAxes && (this.chartService || {}).rtl
	            });
	            this.append(cluster);
	        }

	        if (point) {
	            this.updateRange(value, fields);

	            cluster.append(point);

	            point.categoryIx = categoryIx;
	            point.category = category;
	            point.series = series;
	            point.seriesIx = seriesIx;
	            point.owner = this;
	            point.dataItem = dataItem;
	        }

	        this.points.push(point);
	        categoryPoints.push(point);
	    },

	    pointType: function() {
	        if (this.options.invertAxes) {
	            return VerticalBoxPlot;
	        }

	        return BoxPlot;
	    },

	    splitValue: function(value) {
	        return [
	            value.lower, value.q1, value.median,
	            value.q3, value.upper
	        ];
	    },

	    updateRange: function(value, fields) {
	        var axisName = fields.series.axis;
	        var axisRange = this.valueAxisRanges[axisName];
	        var parts = this.splitValue(value).concat(this.filterOutliers(value.outliers));

	        if (defined(value.mean)) {
	            parts = parts.concat(value.mean);
	        }

	        axisRange = this.valueAxisRanges[axisName] =
	            axisRange || { min: MAX_VALUE, max: MIN_VALUE };

	        axisRange = this.valueAxisRanges[axisName] = {
	            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),
	            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))
	        };
	    },

	    formatPointValue: function(point, format) {
	        var value = point.value;

	        return this.chartService.format.auto(format,
	            value.lower, value.q1, value.median,
	            value.q3, value.upper, value.mean, point.category
	        );
	    },

	    filterOutliers: function(items) {
	        var length = (items || []).length;
	        var result = [];

	        for (var i = 0; i < length; i++) {
	            var item = items[i];
	            if (defined(item) && item !== null) {
	                result.push(item);
	            }
	        }

	        return result;
	    }
	});

	var ScatterErrorBar = ErrorBarBase.extend({
	    getAxis: function() {
	        var axes = this.chart.seriesAxes(this.series);
	        var axis = this.isVertical ? axes.y : axes.x;

	        return axis;
	    }
	});

	function hasValue(value) {
	    return defined(value) && value !== null;
	}

	var ScatterChart = ChartElement.extend({
	    init: function(plotArea, options) {

	        ChartElement.fn.init.call(this, options);

	        this.plotArea = plotArea;
	        this.chartService = plotArea.chartService;
	        this._initFields();

	        this.render();
	    },

	    _initFields: function() {
	        // X and Y axis ranges grouped by name, e.g.:
	        // primary: { min: 0, max: 1 }
	        this.xAxisRanges = {};
	        this.yAxisRanges = {};

	        this.points = [];
	        this.seriesPoints = [];
	        this.seriesOptions = [];
	        this._evalSeries = [];
	    },

	    render: function() {
	        this.traverseDataPoints(this.addValue.bind(this));
	    },

	    addErrorBar: function(point, field, fields) {
	        var value = point.value[field];
	        var valueErrorField = field + "Value";
	        var lowField = field + "ErrorLow";
	        var highField = field + "ErrorHigh";
	        var seriesIx = fields.seriesIx;
	        var series = fields.series;
	        var errorBars = point.options.errorBars;
	        var lowValue = fields[lowField];
	        var highValue = fields[highField];

	        if (isNumber(value)) {
	            var errorRange;
	            if (isNumber(lowValue) && isNumber(highValue)) {
	                errorRange = { low: lowValue, high: highValue };
	            }

	            if (errorBars && defined(errorBars[valueErrorField])) {
	                this.seriesErrorRanges = this.seriesErrorRanges || { x: [], y: [] };
	                this.seriesErrorRanges[field][seriesIx] = this.seriesErrorRanges[field][seriesIx] ||
	                    new ErrorRangeCalculator(errorBars[valueErrorField], series, field);

	                errorRange = this.seriesErrorRanges[field][seriesIx].getErrorRange(value, errorBars[valueErrorField]);
	            }

	            if (errorRange) {
	                this.addPointErrorBar(errorRange, point, field);
	            }
	        }
	    },

	    addPointErrorBar: function(errorRange, point, field) {
	        var low = errorRange.low;
	        var high = errorRange.high;
	        var series = point.series;
	        var options = point.options.errorBars;
	        var isVertical = field === Y;
	        var item = {};

	        point[field + "Low"] = low;
	        point[field + "High"] = high;

	        point.errorBars = point.errorBars || [];
	        var errorBar = new ScatterErrorBar(low, high, isVertical, this, series, options);
	        point.errorBars.push(errorBar);
	        point.append(errorBar);

	        item[field] = low;
	        this.updateRange(item, series);
	        item[field] = high;
	        this.updateRange(item, series);
	    },

	    addValue: function(value, fields) {
	        var x = value.x;
	        var y = value.y;
	        var seriesIx = fields.seriesIx;
	        var series = this.options.series[seriesIx];
	        var missingValues = this.seriesMissingValues(series);
	        var seriesPoints = this.seriesPoints[seriesIx];

	        var pointValue = value;
	        if (!(hasValue(x) && hasValue(y))) {
	            pointValue = this.createMissingValue(pointValue, missingValues);
	        }

	        var point;
	        if (pointValue) {
	            point = this.createPoint(pointValue, fields);
	            if (point) {
	                $.extend(point, fields);
	                this.addErrorBar(point, X, fields);
	                this.addErrorBar(point, Y, fields);
	            }
	            this.updateRange(pointValue, fields.series);
	        }

	        this.points.push(point);
	        seriesPoints.push(point);
	    },

	    seriesMissingValues: function(series) {
	        return series.missingValues;
	    },

	    createMissingValue: function() {},

	    updateRange: function(value, series) {
	        var intlService = this.chartService.intl;
	        var xAxisName = series.xAxis;
	        var yAxisName = series.yAxis;
	        var x = value.x;
	        var y = value.y;
	        var xAxisRange = this.xAxisRanges[xAxisName];
	        var yAxisRange = this.yAxisRanges[yAxisName];

	        if (hasValue(x)) {
	            xAxisRange = this.xAxisRanges[xAxisName] =
	                xAxisRange || { min: MAX_VALUE, max: MIN_VALUE };

	            if (isString(x)) {
	                x = parseDate(intlService, x);
	            }

	            xAxisRange.min = Math.min(xAxisRange.min, x);
	            xAxisRange.max = Math.max(xAxisRange.max, x);
	        }

	        if (hasValue(y)) {
	            yAxisRange = this.yAxisRanges[yAxisName] =
	                yAxisRange || { min: MAX_VALUE, max: MIN_VALUE };

	            if (isString(y)) {
	                y = parseDate(intlService, y);
	            }

	            yAxisRange.min = Math.min(yAxisRange.min, y);
	            yAxisRange.max = Math.max(yAxisRange.max, y);
	        }
	    },

	    evalPointOptions: function(options, value, fields) {
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var state = { defaults: series._defaults, excluded: [ "data", "tooltip", "content", "template", "visual", "toggle", "_outOfRangeMinPoint", "_outOfRangeMaxPoint" ] };

	        var doEval = this._evalSeries[seriesIx];
	        if (!defined(doEval)) {
	            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);
	        }

	        var pointOptions = options;
	        if (doEval) {
	            pointOptions = deepExtend({}, options);
	            evalOptions(pointOptions, {
	                value: value,
	                series: series,
	                dataItem: fields.dataItem
	            }, state);
	        }

	        return pointOptions;
	    },

	    pointType: function() {
	        return LinePoint;
	    },

	    pointOptions: function(series, seriesIx) {
	        var options = this.seriesOptions[seriesIx];
	        if (!options) {
	            var defaults = this.pointType().prototype.defaults;
	            this.seriesOptions[seriesIx] = options = deepExtend({}, defaults, {
	                markers: {
	                    opacity: series.opacity
	                },
	                tooltip: {
	                    format: this.options.tooltip.format
	                },
	                labels: {
	                    format: this.options.labels.format
	                }
	            }, series);
	        }

	        return options;
	    },

	    createPoint: function(value, fields) {
	        var series = fields.series;
	        var pointOptions = this.pointOptions(series, fields.seriesIx);
	        var color = fields.color || series.color;

	        pointOptions = this.evalPointOptions(pointOptions, value, fields);

	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        var point = new LinePoint(value, pointOptions);
	        point.color = color;

	        this.append(point);

	        return point;
	    },

	    seriesAxes: function(series) {
	        var xAxisName = series.xAxis;
	        var yAxisName = series.yAxis;
	        var plotArea = this.plotArea;
	        var xAxis = xAxisName ? plotArea.namedXAxes[xAxisName] : plotArea.axisX;
	        var yAxis = yAxisName ? plotArea.namedYAxes[yAxisName] : plotArea.axisY;

	        if (!xAxis) {
	            throw new Error("Unable to locate X axis with name " + xAxisName);
	        }

	        if (!yAxis) {
	            throw new Error("Unable to locate Y axis with name " + yAxisName);
	        }

	        return {
	            x: xAxis,
	            y: yAxis
	        };
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        var chartPoints = this.points;
	        var limit = !this.options.clip;
	        var pointIx = 0;

	        this.traverseDataPoints(function (value, fields) {
	            var point = chartPoints[pointIx++];
	            var seriesAxes = this$1.seriesAxes(fields.series);
	            var slotX = seriesAxes.x.getSlot(value.x, value.x, limit);
	            var slotY = seriesAxes.y.getSlot(value.y, value.y, limit);

	            if (point) {
	                if (slotX && slotY) {
	                    var pointSlot = this$1.pointSlot(slotX, slotY);
	                    point.reflow(pointSlot);
	                } else {
	                    point.visible = false;
	                }
	            }
	        });

	        this.box = targetBox;
	    },

	    pointSlot: function(slotX, slotY) {
	        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);
	    },

	    traverseDataPoints: function(callback) {
	        var this$1 = this;

	        var ref = this;
	        var series = ref.options.series;
	        var seriesPoints = ref.seriesPoints;

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var currentSeriesPoints = seriesPoints[seriesIx];
	            if (!currentSeriesPoints) {
	                seriesPoints[seriesIx] = [];
	            }

	            for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {
	                var ref$1 = this$1._bindPoint(currentSeries, seriesIx, pointIx);
	                var value = ref$1.valueFields;
	                var fields = ref$1.fields;

	                callback(value, deepExtend({
	                    pointIx: pointIx,
	                    series: currentSeries,
	                    seriesIx: seriesIx,
	                    dataItem: currentSeries.data[pointIx],
	                    owner: this$1
	                }, fields));
	            }
	        }
	    },

	    formatPointValue: function(point, format) {
	        var value = point.value;
	        return this.chartService.format.auto(format, value.x, value.y);
	    },

	    animationPoints: function() {
	        var points = this.points;
	        var result = [];
	        for (var idx = 0; idx < points.length; idx++) {
	            result.push((points[idx] || {}).marker);
	        }
	        return result;
	    }
	});
	setDefaultOptions(ScatterChart, {
	    series: [],
	    tooltip: {
	        format: "{0}, {1}"
	    },
	    labels: {
	        format: "{0}, {1}"
	    },
	    clip: true
	});
	deepExtend(ScatterChart.prototype, ClipAnimationMixin, {
	    _bindPoint: CategoricalChart.prototype._bindPoint
	});

	var Bubble = LinePoint.extend({
	    init: function(value, options) {
	        LinePoint.fn.init.call(this, value, options);

	        this.category = value.category;
	    },

	    createHighlight: function() {
	        var highlight = this.options.highlight;
	        var border = highlight.border;
	        var markers = this.options.markers;
	        var center = this.box.center();
	        var radius = (markers.size + markers.border.width + border.width) / 2;
	        var highlightGroup = new Group();
	        var shadow = new drawing.Circle(new geometry.Circle([ center.x, center.y + radius / 5 + border.width / 2 ], radius + border.width / 2), {
	            stroke: {
	                color: 'none'
	            },
	            fill: this.createGradient({
	                gradient: 'bubbleShadow',
	                color: markers.background,
	                stops: [ {
	                    offset: 0,
	                    color: markers.background,
	                    opacity: 0.3
	                }, {
	                    offset: 1,
	                    color: markers.background,
	                    opacity: 0
	                } ]
	            })
	        });
	        var overlay = new drawing.Circle(new geometry.Circle([ center.x, center.y ], radius), {
	            stroke: {
	                color: border.color ||
	                    new Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex(),
	                width: border.width,
	                opacity: border.opacity
	            },
	            fill: {
	                color: markers.background,
	                opacity: highlight.opacity
	            }
	        });

	        highlightGroup.append(shadow, overlay);

	        return highlightGroup;
	    }
	});

	Bubble.prototype.defaults = deepExtend({}, Bubble.prototype.defaults, {
	    labels: {
	        position: CENTER
	    },
	    highlight: {
	        opacity: 1,
	        border: {
	            color: "#fff",
	            width: 2,
	            opacity: 1
	        }
	    }
	});

	Bubble.prototype.defaults.highlight.zIndex = undefined;

	var BubbleChart = ScatterChart.extend({
	    _initFields: function() {
	        this._maxSize = MIN_VALUE;
	        ScatterChart.fn._initFields.call(this);
	    },

	    addValue: function(value, fields) {
	        if (value.size !== null && (value.size > 0 || (value.size < 0 && fields.series.negativeValues.visible))) {
	            this._maxSize = Math.max(this._maxSize, Math.abs(value.size));
	            ScatterChart.fn.addValue.call(this, value, fields);
	        } else {
	            this.points.push(null);
	            this.seriesPoints[fields.seriesIx].push(null);
	        }
	    },

	    reflow: function(box) {
	        this.updateBubblesSize(box);
	        ScatterChart.fn.reflow.call(this, box);
	    },

	    pointType: function() {
	        return Bubble;
	    },

	    createPoint: function(value, fields) {
	        var series = fields.series;
	        var pointsCount = series.data.length;
	        var delay = fields.pointIx * (INITIAL_ANIMATION_DURATION / pointsCount);
	        var animationOptions = {
	            delay: delay,
	            duration: INITIAL_ANIMATION_DURATION - delay,
	            type: BUBBLE
	        };

	        var color = fields.color || series.color;
	        if (value.size < 0 && series.negativeValues.visible) {
	            color = valueOrDefault(
	                series.negativeValues.color, color
	            );
	        }

	        var pointOptions = deepExtend({
	            labels: {
	                animation: {
	                    delay: delay,
	                    duration: INITIAL_ANIMATION_DURATION - delay
	                }
	            }
	        }, this.pointOptions(series, fields.seriesIx), {
	            markers: {
	                type: CIRCLE,
	                border: series.border,
	                opacity: series.opacity,
	                animation: animationOptions
	            }
	        });

	        pointOptions = this.evalPointOptions(pointOptions, value, fields);
	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        pointOptions.markers.background = color;

	        var point = new Bubble(value, pointOptions);
	        point.color = color;

	        this.append(point);

	        return point;
	    },

	    updateBubblesSize: function(box) {
	        var this$1 = this;

	        var ref = this;
	        var series = ref.options.series;
	        var boxSize = Math.min(box.width(), box.height());

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var seriesPoints = this$1.seriesPoints[seriesIx];
	            var minSize = currentSeries.minSize || Math.max(boxSize * 0.02, 10);
	            var maxSize = currentSeries.maxSize || boxSize * 0.2;
	            var minR = minSize / 2;
	            var maxR = maxSize / 2;
	            var minArea = Math.PI * minR * minR;
	            var maxArea = Math.PI * maxR * maxR;
	            var areaRange = maxArea - minArea;
	            var areaRatio = areaRange / this$1._maxSize;

	            for (var pointIx = 0; pointIx < seriesPoints.length; pointIx++) {
	                var point = seriesPoints[pointIx];
	                if (point) {
	                    var area = Math.abs(point.value.size) * areaRatio;
	                    var radius = Math.sqrt((minArea + area) / Math.PI);
	                    var baseZIndex = valueOrDefault(point.options.zIndex, 0);
	                    var zIndex = baseZIndex + (1 - radius / maxR);

	                    deepExtend(point.options, {
	                        zIndex: zIndex,
	                        markers: {
	                            size: radius * 2,
	                            zIndex: zIndex
	                        },
	                        labels: {
	                            zIndex: zIndex + 1
	                        }
	                    });
	                }
	            }
	        }
	    },

	    formatPointValue: function(point, format) {
	        var value = point.value;
	        return this.chartService.format.auto(format, value.x, value.y, value.size, point.category);
	    },

	    createAnimation: function() {},

	    createVisual: function() {}
	});

	setDefaultOptions(BubbleChart, {
	    tooltip: {
	        format: "{3}"
	    },
	    labels: {
	        format: "{3}"
	    }
	});

	var Target = ShapeElement.extend({

	});

	deepExtend(Target.prototype, PointEventsMixin);

	var Bullet = ChartElement.extend({
	    init: function(value, options) {
	        ChartElement.fn.init.call(this, options);

	        this.aboveAxis = this.options.aboveAxis;
	        this.color = options.color || WHITE;
	        this.value = value;
	    },

	    render: function() {
	        var options = this.options;

	        if (!this._rendered) {
	            this._rendered = true;

	            if (defined(this.value.target)) {
	                this.target = new Target({
	                    type: options.target.shape,
	                    background: options.target.color || this.color,
	                    opacity: options.opacity,
	                    zIndex: options.zIndex,
	                    border: options.target.border,
	                    vAlign: TOP,
	                    align: RIGHT
	                });

	                this.target.value = this.value;
	                this.target.dataItem = this.dataItem;
	                this.target.series = this.series;

	                this.append(this.target);
	            }

	            this.createNote();
	        }
	    },

	    reflow: function(box) {
	        this.render();

	        var ref = this;
	        var options = ref.options;
	        var target = ref.target;
	        var chart = ref.owner;
	        var invertAxes = options.invertAxes;
	        var valueAxis = chart.seriesValueAxis(this.options);
	        var categorySlot = chart.categorySlot(chart.categoryAxis, options.categoryIx, valueAxis);
	        var targetValueSlot = valueAxis.getSlot(this.value.target);
	        var targetSlotX = invertAxes ? targetValueSlot : categorySlot;
	        var targetSlotY = invertAxes ? categorySlot : targetValueSlot;

	        if (target) {
	            var targetSlot = new Box(
	                targetSlotX.x1, targetSlotY.y1,
	                targetSlotX.x2, targetSlotY.y2
	            );
	            target.options.height = invertAxes ? targetSlot.height() : options.target.line.width;
	            target.options.width = invertAxes ? options.target.line.width : targetSlot.width();
	            target.reflow(targetSlot);
	        }

	        if (this.note) {
	            this.note.reflow(box);
	        }

	        this.box = box;
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        var options = this.options;
	        var body = Path.fromRect(this.box.toRect(), {
	            fill: {
	                color: this.color,
	                opacity: options.opacity
	            },
	            stroke: null
	        });

	        if (options.border.width > 0) {
	            body.options.set("stroke", {
	                color: options.border.color || this.color,
	                width: options.border.width,
	                dashType: options.border.dashType,
	                opacity: valueOrDefault(options.border.opacity, options.opacity)
	            });
	        }

	        this.bodyVisual = body;

	        alignPathToPixel(body);
	        this.visual.append(body);
	    },

	    createAnimation: function() {
	        if (this.bodyVisual) {
	            this.animation = Animation.create(
	                this.bodyVisual, this.options.animation
	            );
	        }
	    },

	    createHighlight: function(style) {
	        return Path.fromRect(this.box.toRect(), style);
	    },

	    highlightVisual: function() {
	        return this.bodyVisual;
	    },

	    highlightVisualArgs: function() {
	        return {
	            rect: this.box.toRect(),
	            visual: this.bodyVisual,
	            options: this.options
	        };
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    }
	});

	Bullet.prototype.tooltipAnchor = Bar.prototype.tooltipAnchor;

	setDefaultOptions(Bullet, {
	    border: {
	        width: 1
	    },
	    vertical: false,
	    opacity: 1,
	    target: {
	        shape: "",
	        border: {
	            width: 0,
	            color: "green"
	        },
	        line: {
	            width: 2
	        }
	    },
	    tooltip: {
	        format: "Current: {0}<br />Target: {1}"
	    }
	});

	deepExtend(Bullet.prototype, PointEventsMixin);
	deepExtend(Bullet.prototype, NoteMixin);

	var BulletChart = CategoricalChart.extend({
	    init: function(plotArea, options) {

	        wrapData(options);

	        CategoricalChart.fn.init.call(this, plotArea, options);
	    },

	    reflowCategories: function(categorySlots) {
	        var children = this.children;
	        var childrenLength = children.length;

	        for (var i = 0; i < childrenLength; i++) {
	            children[i].reflow(categorySlots[i]);
	        }
	    },

	    plotRange: function(point) {
	        var series = point.series;
	        var valueAxis = this.seriesValueAxis(series);
	        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);

	        return [ axisCrossingValue, point.value.current || axisCrossingValue ];
	    },

	    createPoint: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var value = data.valueFields;

	        var bulletOptions = deepExtend({
	            vertical: !options.invertAxes,
	            overlay: series.overlay,
	            categoryIx: categoryIx,
	            invertAxes: options.invertAxes
	        }, series);

	        var color = data.fields.color || series.color;
	        bulletOptions = this.evalPointOptions(
	            bulletOptions, value, category, categoryIx, series, seriesIx
	        );

	        if (isFunction(series.color)) {
	            color = bulletOptions.color;
	        }

	        var bullet = new Bullet(value, bulletOptions);
	        bullet.color = color;

	        var cluster = children[categoryIx];
	        if (!cluster) {
	            cluster = new ClusterLayout({
	                vertical: options.invertAxes,
	                gap: options.gap,
	                spacing: options.spacing,
	                rtl: !options.invertAxes && (this.chartService || {}).rtl
	            });
	            this.append(cluster);
	        }

	        cluster.append(bullet);

	        return bullet;
	    },

	    updateRange: function(value, fields) {
	        var current = value.current;
	        var target = value.target;
	        var axisName = fields.series.axis;
	        var axisRange = this.valueAxisRanges[axisName];

	        if (defined(current) && !isNaN(current) && defined(target && !isNaN(target))) {
	            axisRange = this.valueAxisRanges[axisName] =
	                axisRange || { min: MAX_VALUE, max: MIN_VALUE };

	            axisRange.min = Math.min(axisRange.min, current, target);
	            axisRange.max = Math.max(axisRange.max, current, target);
	        }
	    },

	    formatPointValue: function(point, format) {
	        return this.chartService.format.auto(format, point.value.current, point.value.target);
	    },

	    pointValue: function(data) {
	        return data.valueFields.current;
	    },

	    aboveAxis: function(point) {
	        var value = point.value.current;

	        return value > 0;
	    },

	    createAnimation: function() {
	        var this$1 = this;

	        var points = this.points;

	        this._setAnimationOptions();

	        for (var idx = 0; idx < points.length; idx++) {
	            var point = points[idx];
	            point.options.animation = this$1.options.animation;
	            point.createAnimation();
	        }
	    }
	});

	BulletChart.prototype._setAnimationOptions = BarChart.prototype._setAnimationOptions;

	setDefaultOptions(BulletChart, {
	    animation: {
	        type: BAR
	    }
	});

	function wrapData(options) {
	    var series = options.series;

	    for (var i = 0; i < series.length; i++) {
	        var seriesItem = series[i];
	        var data = seriesItem.data;
	        if (data && !isArray(data[0]) && !isObject(data[0])) {
	            seriesItem.data = [ data ];
	        }
	    }
	}

	var BaseTooltip = Class.extend({
	    init: function(chartService, options) {

	        this.chartService = chartService;
	        this.options = deepExtend({}, this.options, options);
	    },

	    getStyle: function(options, point) {
	        var background = options.background;
	        var border = options.border.color;

	        if (point) {
	            var pointColor = point.color || point.options.color;
	            background = valueOrDefault(background, pointColor);
	            border = valueOrDefault(border, pointColor);
	        }

	        var padding = getSpacing(options.padding || {}, "auto");

	        return {
	            backgroundColor: background,
	            borderColor: border,
	            font: options.font,
	            color: options.color,
	            opacity: options.opacity,
	            borderWidth: styleValue(options.border.width),
	            paddingTop: styleValue(padding.top),
	            paddingBottom: styleValue(padding.bottom),
	            paddingLeft: styleValue(padding.left),
	            paddingRight: styleValue(padding.right)
	        };
	    },

	    show: function(options, tooltipOptions, point) {
	        options.format = tooltipOptions.format;

	        var style = this.getStyle(tooltipOptions, point);
	        options.style = style;

	        if (!defined(tooltipOptions.color) && new Color(style.backgroundColor).percBrightness() > 180) {
	            options.className = "k-chart-tooltip-inverse";
	        }

	        this.chartService.notify(SHOW_TOOLTIP, options);
	    },

	    hide: function() {
	        if (this.chartService) {
	            this.chartService.notify(HIDE_TOOLTIP);
	        }
	    },

	    destroy: function() {
	        delete this.chartService;
	    }
	});

	setDefaultOptions(BaseTooltip, {
	    border: {
	        width: 1
	    },
	    opacity: 1
	});

	var CrosshairTooltip = BaseTooltip.extend({
	    init: function(chartService, crosshair, options) {
	        BaseTooltip.fn.init.call(this, chartService, options);

	        this.crosshair = crosshair;
	        this.formatService = chartService.format;
	        this.initAxisName();
	    },

	    initAxisName: function() {
	        var axis = this.crosshair.axis;
	        var plotArea = axis.plotArea;
	        var name;
	        if (plotArea.categoryAxis) {
	            name = axis.getCategory ? "categoryAxis" : "valueAxis";
	        } else {
	            name = axis.options.vertical ? "yAxis" : "xAxis";
	        }
	        this.axisName = name;
	    },

	    showAt: function(point) {
	        var ref = this;
	        var axis = ref.crosshair.axis;
	        var options = ref.options;
	        var value = axis[options.stickyMode ? "getCategory" : "getValue"](point);
	        var formattedValue = value;

	        if (options.format) {
	            formattedValue = this.formatService.auto(options.format, value);
	        } else if (axis.options.type === DATE) {
	            formattedValue = this.formatService.auto(axis.options.labels.dateFormats[axis.options.baseUnit], value);
	        }

	        this.show({
	            point: point,
	            anchor: this.getAnchor(),
	            crosshair: this.crosshair,
	            value: formattedValue,
	            axisName: this.axisName,
	            axisIndex: this.crosshair.axis.axisIndex
	        }, this.options);
	    },

	    hide: function() {
	        this.chartService.notify(HIDE_TOOLTIP, {
	            crosshair: this.crosshair,
	            axisName: this.axisName,
	            axisIndex: this.crosshair.axis.axisIndex
	        });
	    },

	    getAnchor: function() {
	        var ref = this;
	        var crosshair = ref.crosshair;
	        var ref_options = ref.options;
	        var position = ref_options.position;
	        var padding = ref_options.padding;
	        var vertical = !crosshair.axis.options.vertical;
	        var lineBox = crosshair.line.bbox();
	        var horizontalAlign, verticalAlign, point;

	        if (vertical) {
	            horizontalAlign = CENTER;
	            if (position === BOTTOM) {
	                verticalAlign = TOP;
	                point = lineBox.bottomLeft().translate(0, padding);
	            } else {
	                verticalAlign = BOTTOM;
	                point = lineBox.topLeft().translate(0, -padding);
	            }
	        } else {
	            verticalAlign = CENTER;
	            if (position === LEFT) {
	                horizontalAlign = RIGHT;
	                point = lineBox.topLeft().translate(-padding, 0);
	            } else {
	                horizontalAlign = LEFT;
	                point = lineBox.topRight().translate(padding, 0);
	            }
	        }

	        return {
	            point: point,
	            align: {
	                horizontal: horizontalAlign,
	                vertical: verticalAlign
	            }
	        };
	    }
	});

	setDefaultOptions(CrosshairTooltip, {
	    padding: 10
	});

	var Crosshair = ChartElement.extend({
	    init: function(chartService, axis, options) {
	        ChartElement.fn.init.call(this, options);

	        this.axis = axis;
	        this.stickyMode = axis instanceof CategoryAxis;

	        var tooltipOptions = this.options.tooltip;

	        if (tooltipOptions.visible) {
	            this.tooltip = new CrosshairTooltip(chartService, this,
	                deepExtend({}, tooltipOptions, { stickyMode: this.stickyMode })
	            );
	        }
	    },

	    showAt: function(point) {
	        this.point = point;
	        this.moveLine();
	        this.line.visible(true);

	        if (this.tooltip) {
	            this.tooltip.showAt(point);
	        }
	    },

	    hide: function() {
	        this.line.visible(false);

	        if (this.tooltip) {
	            this.tooltip.hide();
	        }
	    },

	    moveLine: function() {
	        var ref = this;
	        var axis = ref.axis;
	        var point = ref.point;
	        var vertical = axis.options.vertical;
	        var box = this.getBox();
	        var dim = vertical ? Y : X;
	        var lineStart = new GeometryPoint(box.x1, box.y1);
	        var lineEnd;

	        if (vertical) {
	            lineEnd = new GeometryPoint(box.x2, box.y1);
	        } else {
	            lineEnd = new GeometryPoint(box.x1, box.y2);
	        }

	        if (point) {
	            if (this.stickyMode) {
	                var slot = axis.getSlot(axis.pointCategoryIndex(point));
	                lineStart[dim] = lineEnd[dim] = slot.center()[dim];
	            } else {
	                lineStart[dim] = lineEnd[dim] = point[dim];
	            }
	        }

	        this.box = box;

	        this.line.moveTo(lineStart).lineTo(lineEnd);
	    },

	    getBox: function() {
	        var axis = this.axis;
	        var axes = axis.pane.axes;
	        var length = axes.length;
	        var vertical = axis.options.vertical;
	        var box = axis.lineBox().clone();
	        var dim = vertical ? X : Y;
	        var axisLineBox;

	        for (var i = 0; i < length; i++) {
	            var currentAxis = axes[i];
	            if (currentAxis.options.vertical !== vertical) {
	                if (!axisLineBox) {
	                    axisLineBox = currentAxis.lineBox().clone();
	                } else {
	                    axisLineBox.wrap(currentAxis.lineBox());
	                }
	            }
	        }

	        box[dim + 1] = axisLineBox[dim + 1];
	        box[dim + 2] = axisLineBox[dim + 2];

	        return box;
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        var options = this.options;
	        this.line = new Path({
	            stroke: {
	                color: options.color,
	                width: options.width,
	                opacity: options.opacity,
	                dashType: options.dashType
	            },
	            visible: false
	        });

	        this.moveLine();
	        this.visual.append(this.line);
	    },

	    destroy: function() {
	        if (this.tooltip) {
	            this.tooltip.destroy();
	        }

	        ChartElement.fn.destroy.call(this);
	    }
	});

	setDefaultOptions(Crosshair, {
	    color: BLACK,
	    width: 2,
	    zIndex: -1,
	    tooltip: {
	        visible: false
	    }
	});

	var ChartContainer = ChartElement.extend({
	    init: function(options, pane) {
	        ChartElement.fn.init.call(this, options);
	        this.pane = pane;
	    },

	    shouldClip: function() {
	        var children = this.children;
	        var length = children.length;

	        for (var i = 0; i < length; i++) {
	            if (children[i].options.clip === true) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _clipBox: function() {
	        return this.pane.chartsBox();
	    },

	    createVisual: function() {
	        this.visual = new Group({
	            zIndex: 0
	        });

	        if (this.shouldClip()) {
	            var clipBox = this.clipBox = this._clipBox();
	            var clipRect = clipBox.toRect();
	            var clipPath = Path.fromRect(clipRect);

	            this.visual.clip(clipPath);
	            this.unclipLabels();
	        }
	    },

	    stackRoot: function() {
	        return this;
	    },

	    unclipLabels: function() {
	        var ref = this;
	        var charts = ref.children;
	        var clipBox = ref.clipBox;

	        for (var i = 0; i < charts.length; i++) {
	            var points = charts[i].points || {};
	            var length = points.length;

	            for (var j = 0; j < length; j++) {
	                var point = points[j];
	                if (point && point.visible !== false && point.overlapsBox && point.overlapsBox(clipBox)) {
	                    if (point.unclipElements) {
	                        point.unclipElements();
	                    } else {
	                        var label = point.label;
	                        var note = point.note;

	                        if (label && label.options.visible) {
	                            if (label.alignToClipBox) {
	                                label.alignToClipBox(clipBox);
	                            }
	                            label.options.noclip = true;
	                        }

	                        if (note && note.options.visible) {
	                            note.options.noclip = true;
	                        }
	                    }
	                }
	            }
	        }
	    },

	    destroy: function() {
	        ChartElement.fn.destroy.call(this);

	        delete this.parent;
	    }
	});

	ChartContainer.prototype.isStackRoot = true;

	var Pane = BoxElement.extend({
	    init: function(options) {
	        BoxElement.fn.init.call(this, options);

	        this.id = paneID();

	        this.createTitle();

	        this.content = new ChartElement();

	        this.chartContainer = new ChartContainer({}, this);
	        this.append(this.content);

	        this.axes = [];
	        this.charts = [];
	    },

	    createTitle: function() {
	        var titleOptions = this.options.title;
	        if (isObject(titleOptions)) {
	            titleOptions = deepExtend({}, titleOptions, {
	                align: titleOptions.position,
	                position: TOP
	            });
	        }

	        this.title = dataviz.Title.buildTitle(titleOptions, this, Pane.prototype.options.title);
	    },

	    appendAxis: function(axis) {
	        this.content.append(axis);
	        this.axes.push(axis);
	        axis.pane = this;
	    },

	    appendChart: function(chart) {
	        if (this.chartContainer.parent !== this.content) {
	            this.content.append(this.chartContainer);
	        }

	        this.charts.push(chart);
	        this.chartContainer.append(chart);
	        chart.pane = this;
	    },

	    empty: function() {
	        var this$1 = this;

	        var plotArea = this.parent;

	        if (plotArea) {
	            for (var i = 0; i < this.axes.length; i++) {
	                plotArea.removeAxis(this$1.axes[i]);
	            }

	            for (var i$1 = 0; i$1 < this.charts.length; i$1++) {
	                plotArea.removeChart(this$1.charts[i$1]);
	            }
	        }

	        this.axes = [];
	        this.charts = [];

	        this.content.destroy();
	        this.content.children = [];
	        this.chartContainer.children = [];
	    },

	    reflow: function(targetBox) {
	        // Content (such as charts) is rendered, but excluded from reflows
	        var content;
	        if (last(this.children) === this.content) {
	            content = this.children.pop();
	        }

	        BoxElement.fn.reflow.call(this, targetBox);

	        if (content) {
	            this.children.push(content);
	        }

	        if (this.title) {
	            this.contentBox.y1 += this.title.box.height();
	        }
	    },

	    visualStyle: function() {
	        var style = BoxElement.fn.visualStyle.call(this);
	        style.zIndex = -10;

	        return style;
	    },

	    renderComplete: function() {
	        if (this.options.visible) {
	            this.createGridLines();
	        }
	    },

	    stackRoot: function() {
	        return this;
	    },

	    clipRoot: function() {
	        return this;
	    },

	    createGridLines: function() {
	        var axes = this.axes;
	        var allAxes = axes.concat(this.parent.axes);
	        var vGridLines = [];
	        var hGridLines = [];

	        // TODO
	        // Is full combination really necessary?
	        for (var i = 0; i < axes.length; i++) {
	            var axis = axes[i];
	            var vertical = axis.options.vertical;
	            var gridLines = vertical ? vGridLines : hGridLines;
	            for (var j = 0; j < allAxes.length; j++) {
	                if (gridLines.length === 0) {
	                    var altAxis = allAxes[j];
	                    if (vertical !== altAxis.options.vertical) {
	                        append(gridLines, axis.createGridLines(altAxis));
	                    }
	                }
	            }
	        }
	    },

	    refresh: function() {
	        this.visual.clear();

	        this.content.parent = null;
	        this.content.createGradient = this.createGradient.bind(this);
	        this.content.renderVisual();
	        this.content.parent = this;

	        if (this.title) {
	            this.visual.append(this.title.visual);
	        }

	        this.visual.append(this.content.visual);

	        this.renderComplete();
	    },

	    chartsBox: function() {
	        var axes = this.axes;
	        var length = axes.length;
	        var chartsBox = new Box();

	        for (var idx = 0; idx < length; idx++) {
	            var axis = axes[idx];
	            var axisValueField = axis.options.vertical ? Y : X;
	            var lineBox = axis.lineBox();
	            chartsBox[axisValueField + 1] = lineBox[axisValueField + 1];
	            chartsBox[axisValueField + 2] = lineBox[axisValueField + 2];
	        }

	        if (chartsBox.x2 === 0) {
	            var allAxes = this.parent.axes;
	            var length$1 = allAxes.length;

	            for (var idx$1 = 0; idx$1 < length$1; idx$1++) {
	                var axis$1 = allAxes[idx$1];
	                if (!axis$1.options.vertical) {
	                    var lineBox$1 = axis$1.lineBox();
	                    chartsBox.x1 = lineBox$1.x1;
	                    chartsBox.x2 = lineBox$1.x2;
	                }
	            }
	        }
	        return chartsBox;
	    },

	    clipBox: function() {
	        return this.chartContainer.clipBox;
	    }
	});

	var ID = 1;

	function paneID() {
	    return "pane" + ID++;
	}

	Pane.prototype.isStackRoot = true;

	setDefaultOptions(Pane, {
	    zIndex: -1,
	    shrinkToFit: true,
	    title: {
	        align: LEFT
	    },
	    visible: true
	});

	function segmentVisible(series, fields, index) {
	    var visible = fields.visible;
	    if (defined(visible)) {
	        return visible;
	    }

	    var pointVisibility = series.pointVisibility;
	    if (pointVisibility) {
	        return pointVisibility[index];
	    }
	}

	function bindSegments(series) {
	    var data = series.data;
	    var points = [];
	    var sum = 0;
	    var count = 0;

	    for (var idx = 0; idx < data.length; idx++) {
	        var pointData = SeriesBinder.current.bindPoint(series, idx);
	        var value = pointData.valueFields.value;

	        if (isString(value)) {
	            value = parseFloat(value);
	        }

	        if (isNumber(value)) {
	            pointData.visible = segmentVisible(series, pointData.fields, idx) !== false;

	            pointData.value = Math.abs(value);
	            points.push(pointData);

	            if (pointData.visible) {
	                sum += pointData.value;
	            }

	            if (value !== 0) {
	                count++;
	            }
	        } else {
	            points.push(null);
	        }
	    }

	    return {
	        total: sum,
	        points: points,
	        count: count
	    };
	}

	function equalsIgnoreCase(a, b) {
	    if (a && b) {
	        return a.toLowerCase() === b.toLowerCase();
	    }

	    return a === b;
	}

	function filterSeriesByType(series, types) {
	    var result = [];

	    var seriesTypes = [].concat(types);
	    for (var idx = 0; idx < series.length; idx++) {
	        var currentSeries = series[idx];
	        if (inArray(currentSeries.type, seriesTypes)) {
	            result.push(currentSeries);
	        }
	    }

	    return result;
	}

	function getDateField(field, row, intlService) {
	    if (row === null) {
	        return row;
	    }

	    var key = "_date_" + field;
	    var value = row[key];

	    if (!value) {
	        value = parseDate(intlService, getter(field, true)(row));
	        row[key] = value;
	    }

	    return value;
	}

	function isDateAxis(axisOptions, sampleCategory) {
	    var type = axisOptions.type;
	    var dateCategory = sampleCategory instanceof Date;

	    return (!type && dateCategory) || equalsIgnoreCase(type, DATE);
	}

	function singleItemOrArray(array) {
	    return array.length === 1 ? array[0] : array;
	}

	var PlotAreaBase = ChartElement.extend({
	    init: function(series, options, chartService) {
	        ChartElement.fn.init.call(this, options);

	        this.initFields(series, options);
	        this.series = series;
	        this.initSeries();
	        this.charts = [];
	        this.options.legend.items = [];
	        this.axes = [];
	        this.crosshairs = [];
	        this.chartService = chartService;
	        this.originalOptions = options;

	        this.createPanes();
	        this.render();
	        this.createCrosshairs();
	    },

	    initFields: function() { },

	    initSeries: function() {
	        var series = this.series;

	        for (var i = 0; i < series.length; i++) {
	            series[i].index = i;
	        }
	    },

	    createPanes: function() {
	        var this$1 = this;

	        var defaults = { title: { color: (this.options.title || {}).color } };
	        var panes = [];
	        var paneOptions = this.options.panes || [];
	        var panesLength = Math.max(paneOptions.length, 1);

	        function setTitle(options, defaults) {
	            if (isString(options.title)) {
	                options.title = {
	                    text: options.title
	                };
	            }

	            options.title = deepExtend({}, defaults.title, options.title);
	        }

	        for (var i = 0; i < panesLength; i++) {
	            var options = paneOptions[i] || {};
	            setTitle(options, defaults);

	            var currentPane = new Pane(options);
	            currentPane.paneIndex = i;

	            panes.push(currentPane);
	            this$1.append(currentPane);
	        }

	        this.panes = panes;
	    },

	    createCrosshairs: function(panes) {
	        var this$1 = this;
	        if (panes === void 0) { panes = this.panes; }

	        for (var i = 0; i < panes.length; i++) {
	            var pane = panes[i];
	            for (var j = 0; j < pane.axes.length; j++) {
	                var axis = pane.axes[j];
	                if (axis.options.crosshair && axis.options.crosshair.visible) {
	                    var currentCrosshair = new Crosshair(this$1.chartService, axis, axis.options.crosshair);

	                    this$1.crosshairs.push(currentCrosshair);
	                    pane.content.append(currentCrosshair);
	                }
	            }
	        }
	    },

	    removeCrosshairs: function(pane) {
	        var crosshairs = this.crosshairs;
	        var axes = pane.axes;

	        for (var i = crosshairs.length - 1; i >= 0; i--) {
	            for (var j = 0; j < axes.length; j++) {
	                if (crosshairs[i].axis === axes[j]) {
	                    crosshairs.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    },

	    hideCrosshairs: function() {
	        var crosshairs = this.crosshairs;
	        for (var idx = 0; idx < crosshairs.length; idx++) {
	            crosshairs[idx].hide();
	        }
	    },

	    findPane: function(name) {
	        var panes = this.panes;
	        var matchingPane;

	        for (var i = 0; i < panes.length; i++) {
	            if (panes[i].options.name === name) {
	                matchingPane = panes[i];
	                break;
	            }
	        }

	        return matchingPane || panes[0];
	    },

	    findPointPane: function(point) {
	        var panes = this.panes;
	        var matchingPane;

	        for (var i = 0; i < panes.length; i++) {
	            if (panes[i].box.containsPoint(point)) {
	                matchingPane = panes[i];
	                break;
	            }
	        }

	        return matchingPane;
	    },

	    appendAxis: function(axis) {
	        var pane = this.findPane(axis.options.pane);

	        pane.appendAxis(axis);
	        this.axes.push(axis);
	        axis.plotArea = this;
	    },

	    removeAxis: function(axisToRemove) {
	        var this$1 = this;

	        var filteredAxes = [];

	        for (var i = 0; i < this.axes.length; i++) {
	            var axis = this$1.axes[i];
	            if (axisToRemove !== axis) {
	                filteredAxes.push(axis);
	            } else {
	                axis.destroy();
	            }
	        }

	        this.axes = filteredAxes;
	    },

	    appendChart: function(chart, pane) {
	        this.charts.push(chart);
	        if (pane) {
	            pane.appendChart(chart);
	        } else {
	            this.append(chart);
	        }
	    },

	    removeChart: function(chartToRemove) {
	        var this$1 = this;

	        var filteredCharts = [];

	        for (var i = 0; i < this.charts.length; i++) {
	            var chart = this$1.charts[i];
	            if (chart !== chartToRemove) {
	                filteredCharts.push(chart);
	            } else {
	                chart.destroy();
	            }
	        }

	        this.charts = filteredCharts;
	    },

	    addToLegend: function(series) {
	        var count = series.length;
	        var legend = this.options.legend;
	        var labels = legend.labels || {};
	        var inactiveItems = legend.inactiveItems || {};
	        var inactiveItemsLabels = inactiveItems.labels || {};
	        var data = [];

	        for (var i = 0; i < count; i++) {
	            var currentSeries = series[i];
	            var seriesVisible = currentSeries.visible !== false;
	            if (currentSeries.visibleInLegend === false) {
	                continue;
	            }

	            var text = currentSeries.name;
	            var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);
	            if (labelTemplate) {
	                text = labelTemplate({
	                    text: hasValue(text) ? text : "",
	                    series: currentSeries
	                });
	            }

	            var defaults = currentSeries._defaults;
	            var color = currentSeries.color;
	            if (isFunction(color) && defaults) {
	                color = defaults.color;
	            }

	            var itemLabelOptions = (void 0), markerColor = (void 0);
	            if (seriesVisible) {
	                itemLabelOptions = {};
	                markerColor = color;
	            } else {
	                itemLabelOptions = {
	                    color: inactiveItemsLabels.color,
	                    font: inactiveItemsLabels.font
	                };
	                markerColor = inactiveItems.markers.color;
	            }

	            if (hasValue(text) && text !== "") {
	                data.push({
	                    text: text,
	                    labels: itemLabelOptions,
	                    markerColor: markerColor,
	                    series: currentSeries,
	                    active: seriesVisible
	                });
	            }
	        }

	        append(legend.items, data);
	    },

	    groupAxes: function(panes) {
	        var xAxes = [];
	        var yAxes = [];

	        for (var paneIx = 0; paneIx < panes.length; paneIx++) {
	            var paneAxes = panes[paneIx].axes;
	            for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {
	                var axis = paneAxes[axisIx];
	                if (axis.options.vertical) {
	                    yAxes.push(axis);
	                } else {
	                    xAxes.push(axis);
	                }
	            }
	        }

	        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };
	    },

	    groupSeriesByPane: function() {
	        var this$1 = this;

	        var series = this.series;
	        var seriesByPane = {};

	        for (var i = 0; i < series.length; i++) {
	            var currentSeries = series[i];
	            var pane = this$1.seriesPaneName(currentSeries);

	            if (seriesByPane[pane]) {
	                seriesByPane[pane].push(currentSeries);
	            } else {
	                seriesByPane[pane] = [ currentSeries ];
	            }
	        }

	        return seriesByPane;
	    },

	    filterVisibleSeries: function(series) {
	        var result = [];

	        for (var i = 0; i < series.length; i++) {
	            var currentSeries = series[i];
	            if (currentSeries.visible !== false) {
	                result.push(currentSeries);
	            }
	        }

	        return result;
	    },

	    reflow: function(targetBox) {
	        var options = this.options.plotArea;
	        var panes = this.panes;
	        var margin = getSpacing(options.margin);

	        this.box = targetBox.clone().unpad(margin);
	        this.reflowPanes();

	        this.reflowAxes(panes);
	        this.reflowCharts(panes);
	    },

	    redraw: function(panes) {
	        var this$1 = this;

	        var panesArray = [].concat(panes);
	        this.initSeries();

	        for (var i = 0; i < panesArray.length; i++) {
	            this$1.removeCrosshairs(panesArray[i]);
	            panesArray[i].empty();
	        }

	        this.render(panesArray);
	        this.reflowAxes(this.panes);
	        this.reflowCharts(panesArray);

	        this.createCrosshairs(panesArray);

	        for (var i$1 = 0; i$1 < panesArray.length; i$1++) {
	            panesArray[i$1].refresh();
	        }
	    },

	    axisCrossingValues: function(axis, crossingAxes) {
	        var options = axis.options;
	        var crossingValues = [].concat(
	            options.axisCrossingValues || options.axisCrossingValue
	        );
	        var valuesToAdd = crossingAxes.length - crossingValues.length;
	        var defaultValue = crossingValues[0] || 0;

	        for (var i = 0; i < valuesToAdd; i++) {
	            crossingValues.push(defaultValue);
	        }

	        return crossingValues;
	    },

	    alignAxisTo: function(axis, targetAxis, crossingValue, targetCrossingValue) {
	        var slot = axis.getSlot(crossingValue, crossingValue, true);
	        var slotEdge = axis.options.reverse ? 2 : 1;
	        var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);
	        var targetEdge = targetAxis.options.reverse ? 2 : 1;
	        var axisBox = axis.box.translate(
	            targetSlot[X + targetEdge] - slot[X + slotEdge],
	            targetSlot[Y + targetEdge] - slot[Y + slotEdge]
	        );

	        if (axis.pane !== targetAxis.pane) {
	            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);
	        }

	        axis.reflow(axisBox);
	    },

	    alignAxes: function(xAxes, yAxes) {
	        var this$1 = this;

	        var xAnchor = xAxes[0];
	        var yAnchor = yAxes[0];
	        var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);
	        var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);
	        var leftAnchors = {};
	        var rightAnchors = {};
	        var topAnchors = {};
	        var bottomAnchors = {};

	        for (var i = 0; i < yAxes.length; i++) {
	            var axis = yAxes[i];
	            var pane = axis.pane;
	            var paneId = pane.id;
	            var visible = axis.options.visible !== false;

	            // Locate pane anchor, if any, and use its axisCrossingValues
	            var anchor = paneAnchor(xAxes, pane) || xAnchor;
	            var anchorCrossings = xAnchorCrossings;

	            if (anchor !== xAnchor) {
	                anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);
	            }

	            this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);

	            if (axis.options._overlap) {
	                continue;
	            }

	            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {
	                // Push the axis to the left the previous y-axis so they don't overlap
	                if (leftAnchors[paneId]) {
	                    axis.reflow(axis.box
	                        .alignTo(leftAnchors[paneId].box, LEFT)
	                        .translate(-axis.options.margin, 0)
	                    );
	                }

	                if (visible) {
	                    leftAnchors[paneId] = axis;
	                }
	            }

	            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {
	                // Flip the labels on the right if we're at the right end of the pane
	                if (!axis._mirrored) {
	                    axis.options.labels.mirror = !axis.options.labels.mirror;
	                    axis._mirrored = true;
	                }
	                this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);

	                // Push the axis to the right the previous y-axis so they don't overlap
	                if (rightAnchors[paneId]) {
	                    axis.reflow(axis.box
	                        .alignTo(rightAnchors[paneId].box, RIGHT)
	                        .translate(axis.options.margin, 0)
	                    );
	                }

	                if (visible) {
	                    rightAnchors[paneId] = axis;
	                }
	            }

	            if (i !== 0 && yAnchor.pane === axis.pane) {
	                axis.alignTo(yAnchor);
	                axis.reflow(axis.box);
	            }
	        }

	        for (var i$1 = 0; i$1 < xAxes.length; i$1++) {
	            var axis$1 = xAxes[i$1];
	            var pane$1 = axis$1.pane;
	            var paneId$1 = pane$1.id;
	            var visible$1 = axis$1.options.visible !== false;

	            // Locate pane anchor and use its axisCrossingValues
	            var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;
	            var anchorCrossings$1 = yAnchorCrossings;
	            if (anchor$1 !== yAnchor) {
	                anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);
	            }

	            this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);

	            if (axis$1.options._overlap) {
	                continue;
	            }

	            if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {
	                // Flip the labels on top if we're at the top of the pane
	                if (!axis$1._mirrored) {
	                    axis$1.options.labels.mirror = !axis$1.options.labels.mirror;
	                    axis$1._mirrored = true;
	                }
	                this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);

	                // Push the axis above the previous x-axis so they don't overlap
	                if (topAnchors[paneId$1]) {
	                    axis$1.reflow(axis$1.box
	                        .alignTo(topAnchors[paneId$1].box, TOP)
	                        .translate(0, -axis$1.options.margin)
	                    );
	                }

	                if (visible$1) {
	                    topAnchors[paneId$1] = axis$1;
	                }
	            }

	            if (round(axis$1.lineBox().y2, datavizConstants.COORD_PRECISION) === round(anchor$1.lineBox().y2, datavizConstants.COORD_PRECISION)) {
	                // Push the axis below the previous x-axis so they don't overlap
	                if (bottomAnchors[paneId$1]) {
	                    axis$1.reflow(axis$1.box
	                        .alignTo(bottomAnchors[paneId$1].box, BOTTOM)
	                        .translate(0, axis$1.options.margin)
	                    );
	                }

	                if (visible$1) {
	                    bottomAnchors[paneId$1] = axis$1;
	                }
	            }

	            if (i$1 !== 0) {
	                axis$1.alignTo(xAnchor);
	                axis$1.reflow(axis$1.box);
	            }
	        }
	    },

	    shrinkAxisWidth: function(panes) {
	        var axes = this.groupAxes(panes).any;
	        var axisBox = axisGroupBox(axes);
	        var overflowX = 0;

	        for (var i = 0; i < panes.length; i++) {
	            var currentPane = panes[i];

	            if (currentPane.axes.length > 0) {
	                overflowX = Math.max(
	                    overflowX,
	                    axisBox.width() - currentPane.contentBox.width()
	                );
	            }
	        }

	        if (overflowX !== 0) {
	            for (var i$1 = 0; i$1 < axes.length; i$1++) {
	                var currentAxis = axes[i$1];

	                if (!currentAxis.options.vertical) {
	                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));
	                }
	            }
	        }
	    },

	    shrinkAxisHeight: function(panes) {
	        var shrinked;

	        for (var i = 0; i < panes.length; i++) {
	            var currentPane = panes[i];
	            var axes = currentPane.axes;
	            var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());

	            if (overflowY !== 0) {
	                for (var j = 0; j < axes.length; j++) {
	                    var currentAxis = axes[j];

	                    if (currentAxis.options.vertical) {
	                        currentAxis.reflow(
	                            currentAxis.box.shrink(0, overflowY)
	                        );
	                    }
	                }
	                shrinked = true;
	            }
	        }

	        return shrinked;
	    },

	    fitAxes: function(panes) {
	        var axes = this.groupAxes(panes).any;
	        var offsetX = 0;

	        for (var i = 0; i < panes.length; i++) {
	            var currentPane = panes[i];
	            var paneAxes = currentPane.axes;
	            var paneBox = currentPane.contentBox;

	            if (paneAxes.length > 0) {
	                var axisBox = axisGroupBox(paneAxes);
	                // OffsetY is calculated and applied per pane
	                var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);

	                // OffsetX is calculated and applied globally
	                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);

	                for (var j = 0; j < paneAxes.length; j++) {
	                    var currentAxis = paneAxes[j];

	                    currentAxis.reflow(
	                        currentAxis.box.translate(0, offsetY)
	                    );
	                }
	            }
	        }

	        for (var i$1 = 0; i$1 < axes.length; i$1++) {
	            var currentAxis$1 = axes[i$1];

	            currentAxis$1.reflow(
	                currentAxis$1.box.translate(offsetX, 0)
	            );
	        }
	    },

	    reflowAxes: function(panes) {
	        var this$1 = this;

	        var axes = this.groupAxes(panes);

	        for (var i = 0; i < panes.length; i++) {
	            this$1.reflowPaneAxes(panes[i]);
	        }

	        if (axes.x.length > 0 && axes.y.length > 0) {
	            this.alignAxes(axes.x, axes.y);
	            this.shrinkAxisWidth(panes);

	            this.autoRotateAxisLabels(axes);

	            this.alignAxes(axes.x, axes.y);
	            if (this.shrinkAxisWidth(panes)) {
	                this.alignAxes(axes.x, axes.y);
	            }

	            this.shrinkAxisHeight(panes);
	            this.alignAxes(axes.x, axes.y);

	            if (this.shrinkAxisHeight(panes)) {
	                this.alignAxes(axes.x, axes.y);
	            }

	            this.fitAxes(panes);
	        }
	    },

	    autoRotateAxisLabels: function(groupedAxes) {
	        var this$1 = this;

	        var ref = this;
	        var axes = ref.axes;
	        var panes = ref.panes;
	        var rotated;

	        for (var idx = 0; idx < axes.length; idx++) {
	            var axis = axes[idx];
	            if (axis.autoRotateLabels()) {
	                rotated = true;
	            }
	        }

	        if (rotated) {
	            for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {
	                this$1.reflowPaneAxes(panes[idx$1]);
	            }

	            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {
	                this.alignAxes(groupedAxes.x, groupedAxes.y);
	                this.shrinkAxisWidth(panes);
	            }
	        }
	    },

	    reflowPaneAxes: function(pane) {
	        var axes = pane.axes;
	        var length = axes.length;

	        if (length > 0) {
	            for (var i = 0; i < length; i++) {
	                axes[i].reflow(pane.contentBox);
	            }
	        }
	    },

	    reflowCharts: function(panes) {
	        var charts = this.charts;
	        var count = charts.length;
	        var box = this.box;

	        for (var i = 0; i < count; i++) {
	            var chartPane = charts[i].pane;
	            if (!chartPane || inArray(chartPane, panes)) {
	                charts[i].reflow(box);
	            }
	        }
	    },

	    reflowPanes: function() {
	        var ref = this;
	        var box = ref.box;
	        var panes = ref.panes;
	        var panesLength = panes.length;
	        var remainingHeight = box.height();
	        var remainingPanes = panesLength;
	        var autoHeightPanes = 0;
	        var top = box.y1;

	        for (var i = 0; i < panesLength; i++) {
	            var currentPane = panes[i];
	            var height = currentPane.options.height;

	            currentPane.options.width = box.width();

	            if (!currentPane.options.height) {
	                autoHeightPanes++;
	            } else {
	                if (height.indexOf && height.indexOf("%")) {
	                    var percents = parseInt(height, 10) / 100;
	                    currentPane.options.height = percents * box.height();
	                }

	                currentPane.reflow(box.clone());

	                remainingHeight -= currentPane.options.height;
	            }
	        }

	        for (var i$1 = 0; i$1 < panesLength; i$1++) {
	            var currentPane$1 = panes[i$1];

	            if (!currentPane$1.options.height) {
	                currentPane$1.options.height = remainingHeight / autoHeightPanes;
	            }
	        }

	        for (var i$2 = 0; i$2 < panesLength; i$2++) {
	            var currentPane$2 = panes[i$2];
	            var paneBox = box
	                .clone()
	                .move(box.x1, top);

	            currentPane$2.reflow(paneBox);

	            remainingPanes--;
	            top += currentPane$2.options.height;
	        }
	    },

	    backgroundBox: function() {
	        var axes = this.axes;
	        var axesCount = axes.length;
	        var box;

	        for (var i = 0; i < axesCount; i++) {
	            var axisA = axes[i];

	            for (var j = 0; j < axesCount; j++) {
	                var axisB = axes[j];

	                if (axisA.options.vertical !== axisB.options.vertical) {
	                    var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());

	                    if (!box) {
	                        box = lineBox;
	                    } else {
	                        box = box.wrap(lineBox);
	                    }
	                }
	            }
	        }

	        return box || this.box;
	    },

	    chartsBoxes: function() {
	        var panes = this.panes;
	        var boxes = [];

	        for (var idx = 0; idx < panes.length; idx++) {
	            boxes.push(panes[idx].chartsBox());
	        }

	        return boxes;
	    },

	    addBackgroundPaths: function(multipath) {
	        var boxes = this.chartsBoxes();
	        for (var idx = 0; idx < boxes.length; idx++) {
	            multipath.paths.push(Path.fromRect(boxes[idx].toRect()));
	        }
	    },

	    backgroundContainsPoint: function(point) {
	        var boxes = this.chartsBoxes();
	        for (var idx = 0; idx < boxes.length; idx++) {
	            if (boxes[idx].containsPoint(point)) {
	                return true;
	            }
	        }
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        var options = this.options.plotArea;
	        var opacity = options.opacity;
	        var background = options.background;
	        var border = options.border; if (border === void 0) { border = {}; }
	        if (isTransparent(background)) {
	            background = WHITE;
	            opacity = 0;
	        }

	        var bg = this._bgVisual = new drawing.MultiPath({
	            fill: {
	                color: background,
	                opacity: opacity
	            },
	            stroke: {
	                color: border.width ? border.color : "",
	                width: border.width,
	                dashType: border.dashType
	            },
	            zIndex: -1
	        });

	        this.addBackgroundPaths(bg);

	        this.appendVisual(bg);
	    },

	    pointsByCategoryIndex: function(categoryIndex) {
	        var charts = this.charts;
	        var result = [];

	        if (categoryIndex !== null) {
	            for (var i = 0; i < charts.length; i++) {
	                var chart = charts[i];
	                if (chart.pane.options.name === "_navigator") {
	                    continue;
	                }

	                var points = charts[i].categoryPoints[categoryIndex];
	                if (points && points.length) {
	                    for (var j = 0; j < points.length; j++) {
	                        var point = points[j];
	                        if (point && defined(point.value) && point.value !== null) {
	                            result.push(point);
	                        }
	                    }
	                }
	            }
	        }

	        return result;
	    },

	    pointsBySeriesIndex: function(seriesIndex) {
	        return this.filterPoints(function(point) {
	            return point.series.index === seriesIndex;
	        });
	    },

	    pointsBySeriesName: function(name) {
	        return this.filterPoints(function(point) {
	            return point.series.name === name;
	        });
	    },

	    filterPoints: function(callback) {
	        var charts = this.charts;
	        var result = [];

	        for (var i = 0; i < charts.length; i++) {
	            var chart = charts[i];
	            var points = chart.points;
	            for (var j = 0; j < points.length; j++) {
	                var point = points[j];
	                if (point && callback(point)) {
	                    result.push(point);
	                }
	            }
	        }

	        return result;
	    },

	    findPoint: function(callback) {
	        var charts = this.charts;

	        for (var i = 0; i < charts.length; i++) {
	            var chart = charts[i];
	            var points = chart.points;
	            for (var j = 0; j < points.length; j++) {
	                var point = points[j];
	                if (point && callback(point)) {
	                    return point;
	                }
	            }
	        }
	    },

	    paneByPoint: function(point) {
	        var panes = this.panes;

	        for (var i = 0; i < panes.length; i++) {
	            var pane = panes[i];
	            if (pane.box.containsPoint(point)) {
	                return pane;
	            }
	        }
	    }
	});

	function axisGroupBox(axes) {
	    var length = axes.length;
	    var box;

	    if (length > 0) {
	        for (var i = 0; i < length; i++) {
	            var axisBox = axes[i].contentBox();

	            if (!box) {
	                box = axisBox.clone();
	            } else {
	                box.wrap(axisBox);
	            }
	        }
	    }

	    return box || new Box();
	}

	function paneAnchor(axes, pane) {
	    for (var i = 0; i < axes.length; i++) {
	        var anchor = axes[i];
	        if (anchor && anchor.pane === pane) {
	            return anchor;
	        }
	    }
	}

	function isTransparent(color) {
	    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
	}

	setDefaultOptions(PlotAreaBase, {
	    series: [],
	    plotArea: {
	        margin: {}
	    },
	    background: "",
	    border: {
	        color: BLACK,
	        width: 0
	    },
	    legend: {
	        inactiveItems: {
	            labels: {
	                color: "#919191"
	            },
	            markers: {
	                color: "#919191"
	            }
	        }
	    }
	});

	var PlotAreaEventsMixin = {
	    hover: function(chart, e) {
	        this._dispatchEvent(chart, e, PLOT_AREA_HOVER);
	    },

	    click: function(chart, e) {
	        this._dispatchEvent(chart, e, PLOT_AREA_CLICK);
	    }
	};

	var SeriesAggregator = Class.extend({
	    init: function(series, binder, defaultAggregates) {

	        var canonicalFields = binder.canonicalFields(series);
	        var valueFields = binder.valueFields(series);
	        var sourceFields = binder.sourceFields(series, canonicalFields);
	        var seriesFields = this._seriesFields = [];
	        var defaults = defaultAggregates.query(series.type);
	        var rootAggregate = series.aggregate || defaults;

	        this._series = series;
	        this._binder = binder;

	        for (var i = 0; i < canonicalFields.length; i++) {
	            var field = canonicalFields[i];
	            var fieldAggregate = (void 0);

	            if (isObject(rootAggregate)) {
	                fieldAggregate = rootAggregate[field];
	            } else if (i === 0 || inArray(field, valueFields)) {
	                fieldAggregate = rootAggregate;
	            } else {
	                break;
	            }

	            if (fieldAggregate) {
	                seriesFields.push({
	                    canonicalName: field,
	                    name: sourceFields[i],
	                    transform: isFunction(fieldAggregate) ? fieldAggregate : Aggregates[fieldAggregate]
	                });
	            }
	        }
	    },

	    aggregatePoints: function(srcPoints, group) {
	        var this$1 = this;

	        var ref = this;
	        var series = ref._series;
	        var seriesFields = ref._seriesFields;
	        var data = this._bindPoints(srcPoints || []);
	        var firstDataItem = data.dataItems[0];
	        var result = {};

	        if (firstDataItem && !isNumber(firstDataItem) && !isArray(firstDataItem)) {
	            var fn = function() {};
	            fn.prototype = firstDataItem;
	            result = new fn();
	        }

	        for (var i = 0; i < seriesFields.length; i++) {
	            var field = seriesFields[i];
	            var srcValues = this$1._bindField(data.values, field.canonicalName);
	            var value = field.transform(srcValues, series, data.dataItems, group);

	            if (value !== null && isObject(value) && !defined(value.length) && !(value instanceof Date)) {
	                result = value;
	                break;
	            } else {
	                if (defined(value)) {
	                    setValue(field.name, result, value);
	                }
	            }
	        }

	        return result;
	    },

	    _bindPoints: function(points) {
	        var ref = this;
	        var binder = ref._binder;
	        var series = ref._series;
	        var values = [];
	        var dataItems = [];

	        for (var i = 0; i < points.length; i++) {
	            var pointIx = points[i];

	            values.push(binder.bindPoint(series, pointIx));
	            dataItems.push(series.data[pointIx]);
	        }

	        return {
	            values: values,
	            dataItems: dataItems
	        };
	    },

	    _bindField: function(data, field) {
	        var values = [];
	        var count = data.length;

	        for (var i = 0; i < count; i++) {
	            var item = data[i];
	            var valueFields = item.valueFields;
	            var value = (void 0);

	            if (defined(valueFields[field])) {
	                value = valueFields[field];
	            } else {
	                value = item.fields[field];
	            }

	            values.push(value);
	        }

	        return values;
	    }
	});

	function setValue(fieldName, target, value) {
	    var parentObj = target;
	    var field = fieldName;

	    if (fieldName.indexOf(".") > -1) {
	        var parts = fieldName.split(".");

	        while (parts.length > 1) {
	            field = parts.shift();
	            if (!defined(parentObj[field])) {
	                parentObj[field] = {};
	            }
	            parentObj = parentObj[field];
	        }
	        field = parts.shift();
	    }

	    parentObj[field] = value;
	}

	var DefaultAggregates = Class.extend({
	    init: function() {

	        this._defaults = {};
	    },

	    register: function(seriesTypes, aggregates) {
	        var this$1 = this;

	        for (var i = 0; i < seriesTypes.length; i++) {
	            this$1._defaults[seriesTypes[i]] = aggregates;
	        }
	    },

	    query: function(seriesType) {
	        return this._defaults[seriesType];
	    }
	});

	DefaultAggregates.current = new DefaultAggregates();

	var RangeBar = Bar.extend({
	    createLabel: function() {
	        var labels = this.options.labels;
	        var fromOptions = deepExtend({}, labels, labels.from);
	        var toOptions = deepExtend({}, labels, labels.to);

	        if (fromOptions.visible) {
	            this.labelFrom = this._createLabel(fromOptions);
	            this.append(this.labelFrom);
	        }

	        if (toOptions.visible) {
	            this.labelTo = this._createLabel(toOptions);
	            this.append(this.labelTo);
	        }
	    },

	    _createLabel: function(options) {
	        var labelTemplate = getTemplate(options);
	        var labelText;

	        if (labelTemplate) {
	            labelText = labelTemplate({
	                dataItem: this.dataItem,
	                category: this.category,
	                value: this.value,
	                percentage: this.percentage,
	                runningTotal: this.runningTotal,
	                total: this.total,
	                series: this.series
	            });
	        } else {
	            labelText = this.formatValue(options.format);
	        }

	        return new BarLabel(labelText,
	            deepExtend({
	                vertical: this.options.vertical
	            },
	            options
	        ));
	    },

	    reflow: function(targetBox) {
	        this.render();

	        var ref = this;
	        var labelFrom = ref.labelFrom;
	        var labelTo = ref.labelTo;
	        var value = ref.value;

	        this.box = targetBox;

	        if (labelFrom) {
	            labelFrom.options.aboveAxis = value.from > value.to;
	            labelFrom.reflow(targetBox);
	        }

	        if (labelTo) {
	            labelTo.options.aboveAxis = value.to > value.from;
	            labelTo.reflow(targetBox);
	        }

	        if (this.note) {
	            this.note.reflow(targetBox);
	        }
	    }
	});

	RangeBar.prototype.defaults = deepExtend({}, RangeBar.prototype.defaults, {
	    labels: {
	        format: "{0} - {1}"
	    },
	    tooltip: {
	        format: "{1}"
	    }
	});

	var RangeBarChart = BarChart.extend({
	    pointType: function() {
	        return RangeBar;
	    },

	    pointValue: function(data) {
	        return data.valueFields;
	    },

	    formatPointValue: function(point, format) {
	        if (point.value.from === null && point.value.to === null) {
	            return "";
	        }

	        return this.chartService.format.auto(format, point.value.from, point.value.to);
	    },

	    plotRange: function(point) {
	        if (!point) {
	            return 0;
	        }

	        return [ point.value.from, point.value.to ];
	    },

	    updateRange: function(value, fields) {
	        var axisName = fields.series.axis;
	        var from = value.from;
	        var to = value.to;
	        var axisRange = this.valueAxisRanges[axisName];

	        if (value !== null && isNumber(from) && isNumber(to)) {
	            axisRange = this.valueAxisRanges[axisName] = axisRange || { min: MAX_VALUE, max: MIN_VALUE };

	            axisRange.min = Math.min(axisRange.min, from);
	            axisRange.max = Math.max(axisRange.max, from);

	            axisRange.min = Math.min(axisRange.min, to);
	            axisRange.max = Math.max(axisRange.max, to);
	        }
	    },

	    aboveAxis: function(point) {
	        var value = point.value;
	        return value.from < value.to;
	    }
	});

	RangeBarChart.prototype.plotLimits = CategoricalChart.prototype.plotLimits;

	var RangeLinePoint = LinePoint.extend({
	    aliasFor: function() {
	        return this.parent;
	    }
	});

	var AUTO = 'auto';
	var DEFAULT_FROM_FORMAT = '{0}';
	var DEFAULT_TO_FORMAT = '{1}';

	var RangeAreaPoint = ChartElement.extend({
	    init: function(value, options) {
	        ChartElement.fn.init.call(this);

	        this.value = value;
	        this.options = options;
	        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
	        this.tooltipTracking = true;
	        this.initLabelsFormat();
	    },

	    render: function() {
	        if (this._rendered) {
	            return;
	        }

	        this._rendered = true;

	        var ref = this.options;
	        var markers = ref.markers;
	        var labels = ref.labels;
	        var value = this.value;

	        var fromPoint = this.fromPoint = new RangeLinePoint(value, deepExtend({}, this.options, {
	            labels: labels.from,
	            markers: markers.from
	        }));

	        var toPoint = this.toPoint = new RangeLinePoint(value, deepExtend({}, this.options, {
	            labels: labels.to,
	            markers: markers.to
	        }));

	        this.copyFields(fromPoint);
	        this.copyFields(toPoint);

	        this.append(fromPoint);
	        this.append(toPoint);
	    },

	    reflow: function(targetBox) {
	        this.render();

	        var fromBox = targetBox.from;
	        var toBox = targetBox.to;

	        this.positionLabels(fromBox, toBox);

	        this.fromPoint.reflow(fromBox);
	        this.toPoint.reflow(toBox);

	        this.box = this.fromPoint.markerBox().clone().wrap(this.toPoint.markerBox());
	    },

	    createHighlight: function() {
	        var group = new Group();
	        group.append(this.fromPoint.createHighlight());
	        group.append(this.toPoint.createHighlight());

	        return group;
	    },

	    highlightVisual: function() {
	        return this.visual;
	    },

	    highlightVisualArgs: function() {
	        return {
	            options: this.options,
	            from: this.fromPoint.highlightVisualArgs(),
	            to: this.toPoint.highlightVisualArgs()
	        };
	    },

	    tooltipAnchor: function() {
	        var clipBox = this.owner.pane.clipBox();
	        var showTooltip = !clipBox || clipBox.overlaps(this.box);

	        if (showTooltip) {
	            var box = this.box;
	            var center = box.center();
	            var horizontalAlign = LEFT;
	            var x, y, verticalAlign;

	            if (this.options.vertical) {
	                x = center.x;
	                y = box.y1 - TOOLTIP_OFFSET;
	                verticalAlign = BOTTOM;
	            } else {
	                x = box.x2 + TOOLTIP_OFFSET;
	                y = center.y;
	                verticalAlign = CENTER;
	            }

	            return {
	                point: new Point(x, y),
	                align: {
	                    horizontal: horizontalAlign,
	                    vertical: verticalAlign
	                }
	            };
	        }
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    },

	    overlapsBox: function(box) {
	        return this.box.overlaps(box);
	    },

	    unclipElements: function() {
	        this.fromPoint.unclipElements();
	        this.toPoint.unclipElements();
	    },

	    initLabelsFormat: function() {
	        var labels = this.options.labels;
	        if (!labels.format) {
	            if (!labels.from || !labels.from.format) {
	                labels.from = $.extend({}, labels.from, {
	                    format: DEFAULT_FROM_FORMAT
	                });
	            }

	            if (!labels.to || !labels.to.format) {
	                labels.to = $.extend({}, labels.to, {
	                    format: DEFAULT_TO_FORMAT
	                });
	            }
	        }
	    },

	    positionLabels: function(fromBox, toBox) {
	        var ref = this.options;
	        var labels = ref.labels;
	        var vertical = ref.vertical;

	        if (labels.position === AUTO) {
	            var fromLabelPosition, toLabelPosition;
	            if (vertical) {
	                if (toBox.y1 <= fromBox.y1) {
	                    toLabelPosition = ABOVE;
	                    fromLabelPosition = BELOW;
	                } else {
	                    toLabelPosition = BELOW;
	                    fromLabelPosition = ABOVE;
	                }
	            } else {
	                if (toBox.x1 <= fromBox.x1) {
	                    toLabelPosition = LEFT;
	                    fromLabelPosition = RIGHT;
	                } else {
	                    toLabelPosition = RIGHT;
	                    fromLabelPosition = LEFT;
	                }
	            }

	            if (!labels.from || !labels.from.position) {
	                this.fromPoint.options.labels.position = fromLabelPosition;
	            }

	            if (!labels.to || !labels.to.position) {
	                this.toPoint.options.labels.position = toLabelPosition;
	            }
	        }
	    },

	    copyFields: function(point) {
	        point.dataItem = this.dataItem;
	        point.category = this.category;
	        point.series = this.series;
	        point.color = this.color;
	        point.owner = this.owner;
	    }
	});

	deepExtend(RangeAreaPoint.prototype, PointEventsMixin);
	deepExtend(RangeAreaPoint.prototype, NoteMixin);

	RangeAreaPoint.prototype.defaults = {
	    markers: {
	        visible: false,
	        background: WHITE,
	        size: LINE_MARKER_SIZE,
	        type: CIRCLE,
	        border: {
	            width: 2
	        },
	        opacity: 1
	    },
	    labels: {
	        visible: false,
	        margin: getSpacing(3),
	        padding: getSpacing(4),
	        animation: {
	            type: FADEIN,
	            delay: INITIAL_ANIMATION_DURATION
	        },
	        position: AUTO
	    },
	    notes: {
	        label: {}
	    },
	    highlight: {
	        markers: {
	            border: {
	                color: WHITE,
	                width: 2
	            }
	        },
	        zIndex: datavizConstants.HIGHLIGHT_ZINDEX
	    },
	    tooltip: {
	        format: '{0} - {1}'
	    }
	};

	var RangeAreaSegment = AreaSegment.extend({
	    createStrokeSegments: function() {
	        return this.segmentsFromPoints(this.toGeometryPoints(this.toPoints()));
	    },

	    stackSegments: function() {
	        var fromSegments = this.fromSegments;
	        if (!this.fromSegments) {
	            fromSegments = this.fromSegments = this.segmentsFromPoints(this.toGeometryPoints(this.fromPoints().reverse()));
	        }

	        return fromSegments;
	    },

	    createStroke: function(style) {
	        var toPath = new Path(style);
	        var fromPath = new Path(style);

	        toPath.segments.push.apply(toPath.segments, this.strokeSegments());
	        fromPath.segments.push.apply(fromPath.segments, this.stackSegments());

	        this.visual.append(toPath);
	        this.visual.append(fromPath);
	    },

	    hasStackSegment: function() {
	        return true;
	    },

	    fromPoints: function() {
	        return this.linePoints.map(function (point) { return point.fromPoint; });
	    },

	    toPoints: function() {
	        return this.linePoints.map(function (point) { return point.toPoint; });
	    }
	});

	var SplineRangeAreaSegment = RangeAreaSegment.extend({
	    createStrokeSegments: function() {
	        return this.createCurveSegments(this.toPoints());
	    },

	    stackSegments: function() {
	        var fromSegments = this.fromSegments;
	        if (!this.fromSegments) {
	            fromSegments = this.fromSegments = this.createCurveSegments(this.fromPoints().reverse());
	        }

	        return fromSegments;
	    },

	    createCurveSegments: function(points) {
	        var curveProcessor = new CurveProcessor();

	        return curveProcessor.process(this.toGeometryPoints(points));
	    }
	});

	var StepRangeAreaSegment = RangeAreaSegment.extend({
	    createStrokeSegments: function() {
	        return this.segmentsFromPoints(this.calculateStepPoints(this.toPoints()));
	    },

	    stackSegments: function() {
	        var fromSegments = this.fromSegments;
	        if (!this.fromSegments) {
	            fromSegments = this.fromSegments = this.segmentsFromPoints(this.calculateStepPoints(this.fromPoints()));
	            fromSegments.reverse();
	        }

	        return fromSegments;
	    }
	});

	deepExtend(StepRangeAreaSegment.prototype, StepLineMixin);

	var RangeAreaChart = CategoricalChart.extend({
	    render: function() {
	        CategoricalChart.fn.render.call(this);

	        this.renderSegments();
	    },

	    pointType: function() {
	        return RangeAreaPoint;
	    },

	    createPoint: function(data, fields) {
	        var categoryIx = fields.categoryIx;
	        var category = fields.category;
	        var series = fields.series;
	        var seriesIx = fields.seriesIx;
	        var value = data.valueFields;

	        if (!hasValue(value.from) && !hasValue(value.to)) {
	            if (this.seriesMissingValues(series) === ZERO) {
	                value = {
	                    from: 0,
	                    to: 0
	                };
	            } else {
	                return null;
	            }
	        }

	        var pointOptions = this.pointOptions(series, seriesIx);
	        pointOptions = this.evalPointOptions(
	            pointOptions, value, category, categoryIx, series, seriesIx
	        );

	        var color = data.fields.color || series.color;
	        if (isFunction(series.color)) {
	            color = pointOptions.color;
	        }

	        var point = new RangeAreaPoint(value, pointOptions);
	        point.color = color;

	        this.append(point);

	        return point;
	    },

	    createSegment: function(linePoints, currentSeries, seriesIx) {
	        var style = (currentSeries.line || {}).style;
	        var segmentType;
	        if (style === "smooth") {
	            segmentType = SplineRangeAreaSegment;
	        } else if (style === "step") {
	            segmentType = StepRangeAreaSegment;
	        } else {
	            segmentType = RangeAreaSegment;
	        }

	        return new segmentType(linePoints, currentSeries, seriesIx);
	    },

	    plotRange: function(point, startValue) {
	        if (!point) {
	            return [ startValue, startValue ];
	        }

	        return [ point.value.from, point.value.to ];
	    },

	    valueSlot: function(valueAxis, plotRange) {
	        var fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);
	        var toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);
	        if (fromSlot && toSlot) {
	            return {
	                from: fromSlot,
	                to: toSlot
	            };
	        }
	    },

	    pointSlot: function(categorySlot, valueSlot) {
	        var from = valueSlot.from;
	        var to = valueSlot.to;
	        var fromSlot, toSlot;

	        if (this.options.invertAxes) {
	            fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);
	            toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);
	        } else {
	            fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);
	            toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);
	        }

	        return {
	            from: fromSlot,
	            to: toSlot
	        };
	    },

	    addValue: function(data, fields) {
	        var valueFields = data.valueFields;
	        if (!isNumber(valueFields.from)) {
	            valueFields.from = valueFields.to;
	        }

	        if (!isNumber(valueFields.to)) {
	            valueFields.to = valueFields.from;
	        }

	        CategoricalChart.fn.addValue.call(this, data, fields);
	    },

	    updateRange: function(value, fields) {
	        if (value !== null && isNumber(value.from) && isNumber(value.to)) {
	            var axisName = fields.series.axis;
	            var axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };
	            var from = value.from;
	            var to = value.to;

	            axisRange.min = Math.min(axisRange.min, from, to);
	            axisRange.max = Math.max(axisRange.max, from, to);
	        }
	    },

	    formatPointValue: function(point, format) {
	        var value = point.value;

	        return this.chartService.format.auto(format, value.from, value.to);
	    },

	    animationPoints: function() {
	        var points = this.points;
	        var result = [];
	        for (var idx = 0; idx < points.length; idx++) {
	            var point = points[idx];
	            if (point) {
	                result.push((point.fromPoint || {}).marker);
	                result.push((point.toPoint || {}).marker);
	            }
	        }

	        return result.concat(this._segments);
	    }
	});

	deepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);

	var OHLCPoint = Candlestick.extend({
	    reflow: function(box) {
	        var ref = this;
	        var options = ref.options;
	        var value = ref.value;
	        var chart = ref.owner;
	        var valueAxis = chart.seriesValueAxis(options);
	        var oPoints = [];
	        var cPoints = [];
	        var lhPoints = [];

	        var lhSlot = valueAxis.getSlot(value.low, value.high);
	        var oSlot = valueAxis.getSlot(value.open, value.open);
	        var cSlot = valueAxis.getSlot(value.close, value.close);

	        oSlot.x1 = cSlot.x1 = lhSlot.x1 = box.x1;
	        oSlot.x2 = cSlot.x2 = lhSlot.x2 = box.x2;

	        var mid = lhSlot.center().x;

	        oPoints.push([ oSlot.x1, oSlot.y1 ]);
	        oPoints.push([ mid, oSlot.y1 ]);
	        cPoints.push([ mid, cSlot.y1 ]);
	        cPoints.push([ cSlot.x2, cSlot.y1 ]);
	        lhPoints.push([ mid, lhSlot.y1 ]);
	        lhPoints.push([ mid, lhSlot.y2 ]);

	        this.lines = [
	            oPoints, cPoints, lhPoints
	        ];

	        this.box = lhSlot.clone().wrap(oSlot.clone().wrap(cSlot));

	        this.reflowNote();
	    },

	    createBody: function() {}
	});

	var OHLCChart = CandlestickChart.extend({
	    pointType: function() {
	        return OHLCPoint;
	    }
	});

	var WaterfallSegment = ChartElement.extend({
	    init: function(from, to, series) {
	        ChartElement.fn.init.call(this);

	        this.from = from;
	        this.to = to;
	        this.series = series;
	    },

	    linePoints: function() {
	        var from = this.from;
	        var ref = this;
	        var fromBox = ref.from.box;
	        var toBox = ref.to.box;
	        var points = [];

	        if (from.isVertical) {
	            var y = from.aboveAxis ? fromBox.y1 : fromBox.y2;
	            points.push(
	                [ fromBox.x1, y ],
	                [ toBox.x2, y ]
	            );
	        } else {
	            var x = from.aboveAxis ? fromBox.x2 : fromBox.x1;
	            points.push(
	                [ x, fromBox.y1 ],
	                [ x, toBox.y2 ]
	            );
	        }

	        return points;
	    },

	    createVisual: function() {
	        ChartElement.fn.createVisual.call(this);

	        var line = this.series.line || {};

	        var path = Path.fromPoints(this.linePoints(), {
	            stroke: {
	                color: line.color,
	                width: line.width,
	                opacity: line.opacity,
	                dashType: line.dashType
	            }
	        });

	        alignPathToPixel(path);
	        this.visual.append(path);
	    }
	});

	setDefaultOptions(WaterfallSegment, {
	    animation: {
	        type: FADEIN,
	        delay: INITIAL_ANIMATION_DURATION
	    }
	});

	var WaterfallChart = BarChart.extend({
	    render: function() {
	        BarChart.fn.render.call(this);
	        this.createSegments();
	    },

	    traverseDataPoints: function(callback) {
	        var series = this.options.series;
	        var categories = this.categoryAxis.options.categories || [];
	        var totalCategories = categoriesCount(series);
	        var isVertical = !this.options.invertAxes;

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var total = 0;
	            var runningTotal = 0;

	            for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {
	                var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);
	                var value = data.valueFields.value;
	                var summary = data.fields.summary;
	                var from = total;
	                var to = (void 0);

	                if (summary) {
	                    if (summary.toLowerCase() === "total") {
	                        data.valueFields.value = total;
	                        from = 0;
	                        to = total;
	                    } else {
	                        data.valueFields.value = runningTotal;
	                        to = from - runningTotal;
	                        runningTotal = 0;
	                    }
	                } else if (isNumber(value)) {
	                    runningTotal += value;
	                    total += value;
	                    to = total;
	                }

	                callback(data, {
	                    category: categories[categoryIx],
	                    categoryIx: categoryIx,
	                    series: currentSeries,
	                    seriesIx: seriesIx,
	                    total: total,
	                    runningTotal: runningTotal,
	                    from: from,
	                    to: to,
	                    isVertical: isVertical
	                });
	            }
	        }
	    },

	    updateRange: function(value, fields) {
	        BarChart.fn.updateRange.call(this, { value: fields.to }, fields);
	    },

	    aboveAxis: function(point) {
	        return point.value >= 0;
	    },

	    plotRange: function(point) {
	        return [ point.from, point.to ];
	    },

	    createSegments: function() {
	        var this$1 = this;

	        var series = this.options.series;
	        var seriesPoints = this.seriesPoints;
	        var segments = this.segments = [];

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var points = seriesPoints[seriesIx];

	            if (points) {
	                var prevPoint = (void 0);
	                for (var pointIx = 0; pointIx < points.length; pointIx++) {
	                    var point = points[pointIx];

	                    if (point && prevPoint) {
	                        var segment = new WaterfallSegment(prevPoint, point, currentSeries);
	                        segments.push(segment);
	                        this$1.append(segment);
	                    }

	                    prevPoint = point;
	                }
	            }
	        }
	    }
	});

	function appendIfNotNull(array, element) {
	    if (element !== null) {
	        array.push(element);
	    }
	}

	var AREA_SERIES = [ AREA, VERTICAL_AREA, RANGE_AREA, VERTICAL_RANGE_AREA ];
	var OUT_OF_RANGE_SERIES = [ LINE, VERTICAL_LINE ].concat(AREA_SERIES);

	var CategoricalPlotArea = PlotAreaBase.extend({
	    initFields: function(series) {
	        var this$1 = this;

	        this.namedCategoryAxes = {};
	        this.namedValueAxes = {};
	        this.valueAxisRangeTracker = new AxisGroupRangeTracker();

	        if (series.length > 0) {
	            this.invertAxes = inArray(
	                series[0].type, [ BAR, BULLET, VERTICAL_LINE, VERTICAL_AREA, VERTICAL_RANGE_AREA,
	                                 RANGE_BAR, HORIZONTAL_WATERFALL, VERTICAL_BOX_PLOT ]
	            );

	            for (var i = 0; i < series.length; i++) {
	                var stack = series[i].stack;
	                if (stack && stack.type === "100%") {
	                    this$1.stack100 = true;
	                    break;
	                }
	            }
	        }

	    },

	    render: function(panes) {
	        if (panes === void 0) { panes = this.panes; }

	        this.createCategoryAxes(panes);
	        this.aggregateCategories(panes);
	        this.createCategoryAxesLabels(panes);
	        this.createCharts(panes);
	        this.createValueAxes(panes);
	    },

	    removeAxis: function(axis) {
	        var axisName = axis.options.name;

	        PlotAreaBase.fn.removeAxis.call(this, axis);

	        if (axis instanceof CategoryAxis) {
	            delete this.namedCategoryAxes[axisName];
	        } else {
	            this.valueAxisRangeTracker.reset(axisName);
	            delete this.namedValueAxes[axisName];
	        }

	        if (axis === this.categoryAxis) {
	            delete this.categoryAxis;
	        }

	        if (axis === this.valueAxis) {
	            delete this.valueAxis;
	        }
	    },

	    createCharts: function(panes) {
	        var this$1 = this;

	        var seriesByPane = this.groupSeriesByPane();

	        for (var i = 0; i < panes.length; i++) {
	            var pane = panes[i];
	            var paneSeries = seriesByPane[pane.options.name || "default"] || [];
	            this$1.addToLegend(paneSeries);

	            var visibleSeries = this$1.filterVisibleSeries(paneSeries);
	            if (!visibleSeries) {
	                continue;
	            }

	            var groups = this$1.groupSeriesByCategoryAxis(visibleSeries);
	            for (var groupIx = 0; groupIx < groups.length; groupIx++) {
	                this$1.createChartGroup(groups[groupIx], pane);
	            }
	        }
	    },

	    createChartGroup: function(series, pane) {
	        this.createAreaChart(
	            filterSeriesByType(series, [ AREA, VERTICAL_AREA ]), pane
	        );

	        this.createRangeAreaChart(
	            filterSeriesByType(series, [ RANGE_AREA, VERTICAL_RANGE_AREA ]), pane
	        );

	        this.createBarChart(
	            filterSeriesByType(series, [ COLUMN, BAR ]), pane
	        );

	        this.createRangeBarChart(
	            filterSeriesByType(series, [ RANGE_COLUMN, RANGE_BAR ]), pane
	        );

	        this.createBulletChart(
	            filterSeriesByType(series, [ BULLET, VERTICAL_BULLET ]), pane
	        );

	        this.createCandlestickChart(
	            filterSeriesByType(series, CANDLESTICK), pane
	        );

	        this.createBoxPlotChart(
	            filterSeriesByType(series, [ BOX_PLOT, VERTICAL_BOX_PLOT ]), pane
	        );

	        this.createOHLCChart(
	            filterSeriesByType(series, OHLC), pane
	        );

	        this.createWaterfallChart(
	            filterSeriesByType(series, [ WATERFALL, HORIZONTAL_WATERFALL ]), pane
	        );

	        this.createLineChart(
	            filterSeriesByType(series, [ LINE, VERTICAL_LINE ]), pane
	        );
	    },

	    aggregateCategories: function(panes) {
	        var this$1 = this;

	        var series = this.srcSeries || this.series;
	        var processedSeries = [];

	        for (var i = 0; i < series.length; i++) {
	            var currentSeries = series[i];
	            var categoryAxis = this$1.seriesCategoryAxis(currentSeries);
	            var axisPane = this$1.findPane(categoryAxis.options.pane);
	            var dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);

	            if ((dateAxis || currentSeries.categoryField) && inArray(axisPane, panes)) {
	                currentSeries = this$1.aggregateSeries(currentSeries, categoryAxis);
	            } else if (isNumber(categoryAxis.options.min) || isNumber(categoryAxis.options.max)) {
	                currentSeries = this$1.filterSeries(currentSeries, categoryAxis);
	            }

	            processedSeries.push(currentSeries);
	        }

	        this.srcSeries = series;
	        this.series = processedSeries;
	    },

	    filterSeries: function(series, categoryAxis) {
	        var range = categoryAxis.totalRangeIndices();
	        var justified = categoryAxis.options.justified;
	        var outOfRangePoints = inArray(series.type, OUT_OF_RANGE_SERIES);

	        range.min = isNumber(categoryAxis.options.min) ? Math.floor(range.min) : 0;
	        if (isNumber(categoryAxis.options.max)) {
	            range.max = justified ? Math.floor(range.max) + 1 : Math.ceil(range.max);
	        } else {
	            range.max = series.data.length;
	        }

	        var currentSeries = deepExtend({}, series);

	        if (outOfRangePoints) {
	            var minCategory = range.min - 1;
	            var srcCategories = categoryAxis.options.srcCategories || [];
	            if (minCategory >= 0 && minCategory < currentSeries.data.length) {
	                currentSeries._outOfRangeMinPoint = {
	                    item: currentSeries.data[minCategory],
	                    category: srcCategories[minCategory],
	                    categoryIx: -1
	                };
	            }

	            if (range.max < currentSeries.data.length) {
	                currentSeries._outOfRangeMaxPoint = {
	                    item: currentSeries.data[range.max],
	                    category: srcCategories[range.max],
	                    categoryIx: range.max - range.min
	                };
	            }
	        }

	        categoryAxis._seriesMax = Math.max(categoryAxis._seriesMax || 0, currentSeries.data.length);

	        currentSeries.data = (currentSeries.data || []).slice(range.min, range.max);

	        return currentSeries;
	    },

	    aggregateSeries: function(series, categoryAxis) {
	        var this$1 = this;

	        var outOfRangePoints = inArray(series.type, OUT_OF_RANGE_SERIES);
	        var ref = categoryAxis.options;
	        var categories = ref.categories;
	        var srcCategories = ref.srcCategories; if (srcCategories === void 0) { srcCategories = categories; }
	        var dataItems = ref.dataItems; if (dataItems === void 0) { dataItems = []; }
	        var dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);
	        var aggregatorSeries = deepExtend({}, series);
	        var result = deepExtend({}, series);
	        var srcData = series.data;
	        var srcPoints = [];
	        var outOfRangeMinIdx = MIN_VALUE;
	        var outOfRangeMaxIdx = MAX_VALUE;
	        var getFn = getField;
	        var outOfRangeMinCategory, outOfRangeMaxCategory;

	        if (dateAxis) {
	            getFn = getDateField;
	        }

	        for (var i = 0; i < srcData.length; i++) {
	            var category = (void 0);
	            if (series.categoryField) {
	                category = getFn(series.categoryField, srcData[i], this$1.chartService.intl);
	            } else {
	                category = srcCategories[i];
	            }

	            if (defined(category)) {
	                var categoryIx = categoryAxis.categoryIndex(category);
	                if (0 <= categoryIx && categoryIx < categories.length) {
	                    srcPoints[categoryIx] = srcPoints[categoryIx] || [];
	                    srcPoints[categoryIx].push(i);
	                } else if (outOfRangePoints) {
	                    if (categoryIx < 0) {
	                        if (categoryIx === outOfRangeMinIdx) {
	                            outOfRangeMinCategory.points.push(i);
	                        } else if (categoryIx > outOfRangeMinIdx) {
	                            outOfRangeMinIdx = categoryIx;
	                            outOfRangeMinCategory = {
	                                category: category,
	                                points: [ i ]
	                            };
	                        }
	                    } else if (categoryIx >= categories.length) {
	                        if (categoryIx === outOfRangeMaxIdx) {
	                            outOfRangeMaxCategory.points.push(i);
	                        } else if (categoryIx < outOfRangeMaxIdx) {
	                            outOfRangeMaxIdx = categoryIx;
	                            outOfRangeMaxCategory = {
	                                category: category,
	                                points: [ i ]
	                            };
	                        }
	                    }
	                }
	            }
	        }

	        var aggregator = new SeriesAggregator(aggregatorSeries, SeriesBinder.current, DefaultAggregates.current);
	        var data = result.data = [];
	        for (var i$1 = 0; i$1 < categories.length; i$1++) {
	            data[i$1] = aggregator.aggregatePoints(
	                srcPoints[i$1], categories[i$1]
	            );
	            if (srcPoints[i$1]) {
	                dataItems[i$1] = data[i$1];
	            }
	        }

	        if (outOfRangeMinCategory && data.length) {
	            result._outOfRangeMinPoint = {
	                item: aggregator.aggregatePoints(
	                    outOfRangeMinCategory.points, outOfRangeMinCategory.category
	                ),
	                categoryIx: outOfRangeMinIdx,
	                category: outOfRangeMinCategory.category
	            };
	        }

	        if (outOfRangeMaxCategory && data.length) {
	            result._outOfRangeMaxPoint = {
	                item: aggregator.aggregatePoints(
	                    outOfRangeMaxCategory.points, outOfRangeMaxCategory.category
	                ),
	                categoryIx: outOfRangeMaxIdx,
	                category: outOfRangeMaxCategory.category
	            };
	        }
	        categoryAxis.options.dataItems = dataItems;

	        return result;
	    },

	    appendChart: function(chart, pane) {
	        var series = chart.options.series;
	        var categoryAxis = this.seriesCategoryAxis(series[0]);
	        var categories = categoryAxis.options.categories;
	        var categoriesToAdd = Math.max(0, categoriesCount(series) - categories.length);

	        while (categoriesToAdd--) {
	            categories.push("");
	        }

	        this.valueAxisRangeTracker.update(chart.valueAxisRanges);

	        PlotAreaBase.fn.appendChart.call(this, chart, pane);
	    },

	    seriesPaneName: function(series) {
	        var options = this.options;
	        var axisName = series.axis;
	        var axisOptions = [].concat(options.valueAxis);
	        var axis = grep(axisOptions, function(a) { return a.name === axisName; })[0];
	        var panes = options.panes || [ {} ];
	        var defaultPaneName = (panes[0] || {}).name || "default";
	        var paneName = (axis || {}).pane || defaultPaneName;

	        return paneName;
	    },

	    seriesCategoryAxis: function(series) {
	        var axisName = series.categoryAxis;
	        var axis = axisName ? this.namedCategoryAxes[axisName] : this.categoryAxis;

	        if (!axis) {
	            throw new Error("Unable to locate category axis with name " + axisName);
	        }

	        return axis;
	    },

	    stackableChartOptions: function(firstSeries, pane) {
	        var stack = firstSeries.stack;
	        var isStacked100 = stack && stack.type === "100%";
	        var clip = pane.options.clip;

	        return {
	            isStacked: stack,
	            isStacked100: isStacked100,
	            clip: clip
	        };
	    },

	    groupSeriesByCategoryAxis: function(series) {
	        var categoryAxes = [];
	        var unique = {};
	        for (var idx = 0; idx < series.length; idx++) {
	            var name = series[idx].categoryAxis || "$$default$$";
	            if (!unique.hasOwnProperty(name)) {
	                unique[name] = true;
	                categoryAxes.push(name);
	            }
	        }

	        var groups = [];
	        for (var axisIx = 0; axisIx < categoryAxes.length; axisIx++) {
	            var axis = categoryAxes[axisIx];
	            var axisSeries = groupSeries(series, axis, axisIx);
	            if (axisSeries.length === 0) {
	                continue;
	            }

	            groups.push(axisSeries);
	        }

	        return groups;
	    },

	    createBarChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var barChart = new BarChart(this, $.extend({
	            series: series,
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            spacing: firstSeries.spacing
	        }, this.stackableChartOptions(firstSeries, pane)));

	        this.appendChart(barChart, pane);
	    },

	    createRangeBarChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var rangeColumnChart = new RangeBarChart(this, {
	            series: series,
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            spacing: firstSeries.spacing
	        });

	        this.appendChart(rangeColumnChart, pane);
	    },

	    createBulletChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var bulletChart = new BulletChart(this, {
	            series: series,
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            spacing: firstSeries.spacing,
	            clip: pane.options.clip
	        });

	        this.appendChart(bulletChart, pane);
	    },

	    createLineChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var lineChart = new LineChart(this, $.extend({
	            invertAxes: this.invertAxes,
	            series: series
	        }, this.stackableChartOptions(firstSeries, pane)));

	        this.appendChart(lineChart, pane);
	    },

	    createAreaChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var areaChart = new AreaChart(this, $.extend({
	            invertAxes: this.invertAxes,
	            series: series
	        }, this.stackableChartOptions(firstSeries, pane)));

	        this.appendChart(areaChart, pane);
	    },

	    createRangeAreaChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var rangeAreaChart = new RangeAreaChart(this, {
	            invertAxes: this.invertAxes,
	            series: series,
	            clip: pane.options.clip
	        });

	        this.appendChart(rangeAreaChart, pane);
	    },

	    createOHLCChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var chart = new OHLCChart(this, {
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            series: series,
	            spacing: firstSeries.spacing,
	            clip: pane.options.clip
	        });

	        this.appendChart(chart, pane);
	    },

	    createCandlestickChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var chart = new CandlestickChart(this, {
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            series: series,
	            spacing: firstSeries.spacing,
	            clip: pane.options.clip
	        });

	        this.appendChart(chart, pane);
	    },

	    createBoxPlotChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var chart = new BoxPlotChart(this, {
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            series: series,
	            spacing: firstSeries.spacing,
	            clip: pane.options.clip
	        });

	        this.appendChart(chart, pane);
	    },

	    createWaterfallChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var waterfallChart = new WaterfallChart(this, {
	            series: series,
	            invertAxes: this.invertAxes,
	            gap: firstSeries.gap,
	            spacing: firstSeries.spacing
	        });

	        this.appendChart(waterfallChart, pane);
	    },

	    axisRequiresRounding: function(categoryAxisName, categoryAxisIndex) {
	        var this$1 = this;

	        var centeredSeries = filterSeriesByType(this.series, EQUALLY_SPACED_SERIES);

	        for (var seriesIx = 0; seriesIx < this.series.length; seriesIx++) {
	            var currentSeries = this$1.series[seriesIx];
	            if (inArray(currentSeries.type, AREA_SERIES)) {
	                var line = currentSeries.line;
	                if (line && line.style === STEP) {
	                    centeredSeries.push(currentSeries);
	                }
	            }
	        }

	        for (var seriesIx$1 = 0; seriesIx$1 < centeredSeries.length; seriesIx$1++) {
	            var seriesAxis = centeredSeries[seriesIx$1].categoryAxis || "";
	            if (seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) {
	                return true;
	            }
	        }
	    },

	    aggregatedAxis: function(categoryAxisName, categoryAxisIndex) {
	        var series = this.series;

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var seriesAxis = series[seriesIx].categoryAxis || "";
	            if ((seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) && series[seriesIx].categoryField) {
	                return true;
	            }
	        }
	    },

	    createCategoryAxesLabels: function() {
	        var axes = this.axes;
	        for (var i = 0; i < axes.length; i++) {
	            if (axes[i] instanceof CategoryAxis) {
	                axes[i].createLabels();
	            }
	        }
	    },

	    createCategoryAxes: function(panes) {
	        var this$1 = this;

	        var invertAxes = this.invertAxes;
	        var definitions = [].concat(this.options.categoryAxis);
	        var axes = [];

	        for (var i = 0; i < definitions.length; i++) {
	            var axisOptions = definitions[i];
	            var axisPane = this$1.findPane(axisOptions.pane);

	            if (inArray(axisPane, panes)) {
	                var name = axisOptions.name;
	                var categories = axisOptions.categories; if (categories === void 0) { categories = []; }
	                axisOptions = deepExtend({
	                    vertical: invertAxes,
	                    reverse: !invertAxes && this$1.chartService.rtl,
	                    axisCrossingValue: invertAxes ? MAX_VALUE : 0
	                }, axisOptions);

	                if (!defined(axisOptions.justified)) {
	                    axisOptions.justified = this$1.isJustified();
	                }

	                if (this$1.axisRequiresRounding(name, i)) {
	                    axisOptions.justified = false;
	                }

	                var categoryAxis = (void 0);

	                if (isDateAxis(axisOptions, categories[0])) {
	                    categoryAxis = new DateCategoryAxis(axisOptions, this$1.chartService);
	                } else {
	                    categoryAxis = new CategoryAxis(axisOptions, this$1.chartService);
	                }

	                if (name) {
	                    if (this$1.namedCategoryAxes[name]) {
	                        throw new Error(("Category axis with name " + name + " is already defined"));
	                    }
	                    this$1.namedCategoryAxes[name] = categoryAxis;
	                }

	                categoryAxis.axisIndex = i;
	                axes.push(categoryAxis);
	                this$1.appendAxis(categoryAxis);
	            }
	        }

	        var primaryAxis = this.categoryAxis || axes[0];
	        this.categoryAxis = primaryAxis;

	        if (invertAxes) {
	            this.axisY = primaryAxis;
	        } else {
	            this.axisX = primaryAxis;
	        }
	    },

	    isJustified: function() {
	        var series = this.series;

	        for (var i = 0; i < series.length; i++) {
	            var currentSeries = series[i];
	            if (!inArray(currentSeries.type, AREA_SERIES)) {
	                return false;
	            }
	        }

	        return true;
	    },

	    createValueAxes: function(panes) {
	        var this$1 = this;

	        var tracker = this.valueAxisRangeTracker;
	        var defaultRange = tracker.query();
	        var definitions = [].concat(this.options.valueAxis);
	        var invertAxes = this.invertAxes;
	        var baseOptions = { vertical: !invertAxes, reverse: invertAxes && this.chartService.rtl };
	        var axes = [];

	        if (this.stack100) {
	            baseOptions.roundToMajorUnit = false;
	            baseOptions.labels = { format: "P0" };
	        }

	        for (var i = 0; i < definitions.length; i++) {
	            var axisOptions = definitions[i];
	            var axisPane = this$1.findPane(axisOptions.pane);

	            if (inArray(axisPane, panes)) {
	                var name = axisOptions.name;
	                var defaultAxisRange = equalsIgnoreCase(axisOptions.type, LOGARITHMIC) ? { min: 0.1, max: 1 } : { min: 0, max: 1 };
	                var range = tracker.query(name) || defaultRange || defaultAxisRange;

	                if (i === 0 && range && defaultRange) {
	                    range.min = Math.min(range.min, defaultRange.min);
	                    range.max = Math.max(range.max, defaultRange.max);
	                }

	                var axisType = (void 0);
	                if (equalsIgnoreCase(axisOptions.type, LOGARITHMIC)) {
	                    axisType = dataviz.LogarithmicAxis;
	                } else {
	                    axisType = dataviz.NumericAxis;
	                }

	                var valueAxis = new axisType(range.min, range.max,
	                    deepExtend({}, baseOptions, axisOptions),
	                    this$1.chartService
	                );

	                if (name) {
	                    if (this$1.namedValueAxes[name]) {
	                        throw new Error(("Value axis with name " + name + " is already defined"));
	                    }
	                    this$1.namedValueAxes[name] = valueAxis;
	                }
	                valueAxis.axisIndex = i;

	                axes.push(valueAxis);
	                this$1.appendAxis(valueAxis);
	            }
	        }

	        var primaryAxis = this.valueAxis || axes[0];
	        this.valueAxis = primaryAxis;

	        if (invertAxes) {
	            this.axisX = primaryAxis;
	        } else {
	            this.axisY = primaryAxis;
	        }
	    },

	    _dispatchEvent: function(chart, e, eventType) {
	        var coords = chart._eventCoordinates(e);
	        var point = new Point(coords.x, coords.y);
	        var pane = this.pointPane(point);
	        var categories = [];
	        var values = [];

	        if (!pane) {
	            return;
	        }

	        var allAxes = pane.axes;
	        for (var i = 0; i < allAxes.length; i++) {
	            var axis = allAxes[i];
	            if (axis.getValue) {
	                appendIfNotNull(values, axis.getValue(point));
	            } else {
	                appendIfNotNull(categories, axis.getCategory(point));
	            }
	        }

	        if (categories.length === 0) {
	            appendIfNotNull(categories, this.categoryAxis.getCategory(point));
	        }

	        if (categories.length > 0 && values.length > 0) {
	            chart.trigger(eventType, {
	                element: eventElement(e),
	                originalEvent: e,
	                category: singleItemOrArray(categories),
	                value: singleItemOrArray(values)
	            });
	        }
	    },

	    pointPane: function(point) {
	        var panes = this.panes;

	        for (var i = 0; i < panes.length; i++) {
	            var currentPane = panes[i];
	            if (currentPane.contentBox.containsPoint(point)) {
	                return currentPane;
	            }
	        }
	    },

	    updateAxisOptions: function(axis, options) {
	        updateAxisOptions(this.options, axis, options);
	        updateAxisOptions(this.originalOptions, axis, options);
	    }
	});

	function updateAxisOptions(targetOptions, axis, options) {
	    var axesOptions = axis instanceof CategoryAxis ? [].concat(targetOptions.categoryAxis) : [].concat(targetOptions.valueAxis);
	    deepExtend(axesOptions[axis.axisIndex], options);
	}

	function groupSeries(series, axis, axisIx) {
	    return grep(series, function(s) {
	        return (axisIx === 0 && !s.categoryAxis) || (s.categoryAxis === axis);
	    });
	}

	setDefaultOptions(CategoricalPlotArea, {
	    categoryAxis: {
	        categories: []
	    },
	    valueAxis: {}
	});

	deepExtend(CategoricalPlotArea.prototype, PlotAreaEventsMixin);

	var Highlight = Class.extend({
	    init: function() {

	        this._points = [];
	    },

	    destroy: function() {
	        this._points = [];
	    },

	    show: function(points) {
	        var this$1 = this;

	        var arrayPoints = [].concat(points);
	        this.hide();

	        for (var i = 0; i < arrayPoints.length; i++) {
	            var point = arrayPoints[i];
	            if (point && point.toggleHighlight && point.hasHighlight()) {
	                this$1.togglePointHighlight(point, true);
	                this$1._points.push(point);
	            }
	        }
	    },

	    togglePointHighlight: function(point, show) {
	        var toggleHandler = (point.options.highlight || {}).toggle;
	        if (toggleHandler) {
	            var eventArgs = {
	                category: point.category,
	                series: point.series,
	                dataItem: point.dataItem,
	                value: point.value,
	                stackValue: point.stackValue,
	                preventDefault: preventDefault,
	                visual: point.highlightVisual(),
	                show: show
	            };
	            toggleHandler(eventArgs);
	            if (!eventArgs._defaultPrevented) {
	                point.toggleHighlight(show);
	            }
	        } else {
	            point.toggleHighlight(show);
	        }
	    },

	    hide: function() {
	        var this$1 = this;

	        var points = this._points;
	        while (points.length) {
	            this$1.togglePointHighlight(points.pop(), false);
	        }
	    },

	    isHighlighted: function(element) {
	        var points = this._points;

	        for (var i = 0; i < points.length; i++) {
	            var point = points[i];
	            if (element === point) {
	                return true;
	            }
	        }

	        return false;
	    }
	});

	function preventDefault() {
	    this._defaultPrevented = true;
	}

	function acceptKey(e, mouseKey) {
	    var key = (mouseKey || "").toLowerCase();
	    var event = e.event;
	    var accept = (key === "none" && !(event.ctrlKey || event.shiftKey || event.altKey)) || event[key + "Key"];

	    return accept;
	}

	function toChartAxisRanges(axisRanges) {
	    var ranges = {};
	    for (var idx = 0; idx < axisRanges.length; idx++) {
	        var axisRange = axisRanges[idx];
	        if (axisRange.axis.options.name) {
	            ranges[axisRange.axis.options.name] = {
	                min: axisRange.range.min,
	                max: axisRange.range.max
	            };
	        }
	    }
	    return ranges;
	}

	var Pannable = Class.extend({
	    init: function(plotArea, options) {

	        this.plotArea = plotArea;
	        this.options = deepExtend({}, this.options, options);
	    },

	    start: function(e) {
	        this._active = acceptKey(e, this.options.key);
	        return this._active;
	    },

	    move: function(e) {
	        if (this._active) {
	            var axisRanges = this.axisRanges = this._panAxes(e, X).concat(this._panAxes(e, Y));
	            if (axisRanges.length) {
	                this.axisRanges = axisRanges;
	                return toChartAxisRanges(axisRanges);
	            }
	        }
	    },

	    end: function() {
	        var active = this._active;
	        this._active = false;

	        return active;
	    },

	    pan: function() {
	        var ref = this;
	        var plotArea = ref.plotArea;
	        var axisRanges = ref.axisRanges;
	        if (axisRanges.length) {
	            for (var idx = 0; idx < axisRanges.length; idx++) {
	                var range = axisRanges[idx];
	                plotArea.updateAxisOptions(range.axis, range.range);
	            }
	            plotArea.redraw(plotArea.panes);
	        }
	    },

	    destroy: function() {
	        delete this.plotArea;
	    },

	    _panAxes: function(e, position) {
	        var plotArea = this.plotArea;
	        var delta = -e[position].delta;
	        var lock = (this.options.lock || "").toLowerCase();
	        var updatedAxes = [];

	        if (delta !== 0 && (lock || "").toLowerCase() !== position) {
	            var axes = plotArea.axes;
	            for (var idx = 0; idx < axes.length; idx++) {
	                var axis = axes[idx];

	                if (position === X && !axis.options.vertical || position === Y && axis.options.vertical) {
	                    var range = axis.pan(delta);

	                    if (range) {
	                        range.limitRange = true;
	                        updatedAxes.push({
	                            axis: axis,
	                            range: range
	                        });
	                    }
	                }
	            }
	        }

	        return updatedAxes;
	    }
	});

	Pannable.prototype.options = {
	    key: "none",
	    lock: "none"
	};

	var ZoomSelection = Class.extend({
	    init: function(chart, options) {

	        this.chart = chart;
	        this.options = deepExtend({}, this.options, options);
	        this.createElement();
	    },

	    createElement: function() {
	        var marquee = this._marquee = document.createElement("div");
	        marquee.className = "k-marquee";
	        var marqueeColor = document.createElement("div");
	        marqueeColor.className = "k-marquee-color";
	        marquee.appendChild(marqueeColor);
	    },

	    removeElement: function() {
	        if (this._marquee.parentNode) {
	            this._marquee.parentNode.removeChild(this._marquee);
	        }
	    },

	    setStyles: function(styles) {
	        elementStyles(this._marquee, styles);
	    },

	    start: function(e) {
	        if (acceptKey(e, this.options.key)) {
	            var chart = this.chart;
	            var point = chart._eventCoordinates(e);
	            var zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);
	            if (zoomPane && zoomPane.clipBox()) {
	                var clipBox = zoomPane.clipBox().clone();
	                var offset = this._elementOffset();

	                clipBox.translate(offset.left, offset.top);
	                this._zoomPaneClipBox = clipBox;

	                document.body.appendChild(this._marquee);
	                this.setStyles({
	                    left: e.pageX + 1,
	                    top: e.pageY + 1,
	                    width: 0,
	                    height: 0
	                });

	                return true;
	            }
	        }
	        return false;
	    },

	    _elementOffset: function() {
	        var chartElement = this.chart.element;
	        var ref = elementStyles(chartElement, [ "paddingLeft", "paddingTop" ]);
	        var paddingLeft = ref.paddingLeft;
	        var paddingTop = ref.paddingTop;
	        var offset = dataviz.elementOffset(chartElement);

	        return {
	            left: paddingLeft + offset.left,
	            top: paddingTop + offset.top
	        };
	    },

	    move: function(e) {
	        var zoomPane = this._zoomPane;
	        if (zoomPane) {
	            this.setStyles(this._selectionPosition(e));
	        }
	    },

	    end: function(e) {
	        var zoomPane = this._zoomPane;
	        if (zoomPane) {
	            var elementOffset$$1 = this._elementOffset();
	            var selectionPosition = this._selectionPosition(e);
	            selectionPosition.left -= elementOffset$$1.left;
	            selectionPosition.top -= elementOffset$$1.top;

	            var start = { x: selectionPosition.left, y: selectionPosition.top };
	            var end = { x: selectionPosition.left + selectionPosition.width, y: selectionPosition.top + selectionPosition.height };
	            this._updateAxisRanges(start, end);

	            this.removeElement();
	            delete this._zoomPane;

	            return toChartAxisRanges(this.axisRanges);
	        }
	    },

	    zoom: function() {
	        var axisRanges = this.axisRanges;
	        if (axisRanges && axisRanges.length) {
	            var plotArea = this.chart._plotArea;
	            for (var idx = 0; idx < axisRanges.length; idx++) {
	                var axisRange = axisRanges[idx];
	                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);
	            }
	            plotArea.redraw(plotArea.panes);
	        }
	    },

	    destroy: function() {
	        this.removeElement();
	        delete this._marquee;
	        delete this.chart;
	    },

	    _updateAxisRanges: function(start, end) {
	        var lock = (this.options.lock || "").toLowerCase();
	        var axisRanges = [];

	        var axes = this._zoomPane.axes;
	        for (var idx = 0; idx < axes.length; idx++) {
	            var axis = axes[idx];
	            var vertical = axis.options.vertical;
	            if (!(lock === X && !vertical) && !(lock === Y && vertical)) {
	                var range = axis.pointsRange(start, end);
	                if (range) {
	                    axisRanges.push({
	                        axis: axis,
	                        range: range
	                    });
	                }
	            }
	        }

	        this.axisRanges = axisRanges;
	    },

	    _selectionPosition: function(e) {
	        var clipBox = this._zoomPaneClipBox;
	        var startLocation = {
	            x: e.x.startLocation,
	            y: e.y.startLocation
	        };
	        var pageX = e.x.location;
	        var pageY = e.y.location;
	        var lock = (this.options.lock || "").toLowerCase();
	        var left = Math.min(startLocation.x, pageX);
	        var top = Math.min(startLocation.y, pageY);
	        var width = Math.abs(startLocation.x - pageX);
	        var height = Math.abs(startLocation.y - pageY);

	        if (lock === X) {
	            left = clipBox.x1;
	            width = clipBox.width();
	        }
	        if (lock === Y) {
	            top = clipBox.y1;
	            height = clipBox.height();
	        }

	        if (pageX > clipBox.x2) {
	            width = clipBox.x2 - startLocation.x;
	        }

	        if (pageX < clipBox.x1) {
	            width = startLocation.x - clipBox.x1;
	        }

	        if (pageY > clipBox.y2) {
	            height = clipBox.y2 - startLocation.y;
	        }

	        if (pageY < clipBox.y1) {
	            height = startLocation.y - clipBox.y1;
	        }

	        return {
	            left: Math.max(left, clipBox.x1),
	            top: Math.max(top, clipBox.y1),
	            width: width,
	            height: height
	        };
	    }
	});

	ZoomSelection.prototype.options = {
	    key: "shift",
	    lock: "none"
	};

	var MousewheelZoom = Class.extend({
	    init: function(chart, options) {

	        this.chart = chart;
	        this.options = deepExtend({}, this.options, options);
	    },

	    updateRanges: function(delta) {
	        var lock = (this.options.lock || "").toLowerCase();
	        var axisRanges = [];
	        var axes = this.chart._plotArea.axes;

	        for (var idx = 0; idx < axes.length; idx++) {
	            var axis = axes[idx];
	            var vertical = axis.options.vertical;

	            if (!(lock === X && !vertical) && !(lock === Y && vertical)) {
	                var range = axis.zoomRange(-delta);

	                if (range) {
	                    axisRanges.push({
	                        axis: axis,
	                        range: range
	                    });
	                }
	            }
	        }

	        this.axisRanges = axisRanges;
	        return toChartAxisRanges(axisRanges);
	    },

	    zoom: function() {
	        var axisRanges = this.axisRanges;
	        if (axisRanges && axisRanges.length) {
	            var plotArea = this.chart._plotArea;
	            for (var idx = 0; idx < axisRanges.length; idx++) {
	                var axisRange = axisRanges[idx];
	                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);
	            }
	            plotArea.redraw(plotArea.panes);
	        }
	    },

	    destroy: function() {
	        delete this.chart;
	    }
	});

	var LegendLayout = ChartElement.extend({
	    init: function(options, chartService) {
	        ChartElement.fn.init.call(this, options);

	        this.chartService = chartService;
	    },

	    render: function() {
	        var ref = this;
	        var children = ref.children;
	        var options = ref.options;
	        var vertical = options.vertical;

	        this.visual = new drawing.Layout(null, {
	            spacing: vertical ? 0 : options.spacing,
	            lineSpacing: vertical ? options.spacing : 0,
	            orientation: vertical ? "vertical" : "horizontal",
	            reverse: options.rtl,
	            alignItems: vertical ? "start" : "center"
	        });

	        for (var idx = 0; idx < children.length; idx++) {
	            var legendItem = children[idx];
	            legendItem.reflow(new Box());
	            legendItem.renderVisual();
	        }
	    },

	    reflow: function(box) {
	        this.visual.rect(box.toRect());
	        this.visual.reflow();
	        var bbox = this.visual.clippedBBox();

	        if (bbox) {
	            this.box = dataviz.rectToBox(bbox);
	        } else {
	            this.box = new Box();
	        }
	    },

	    renderVisual: function() {
	        this.addVisual();
	    },

	    createVisual: function() {}
	});

	var LegendItem = BoxElement.extend({
	    init: function(options) {
	        BoxElement.fn.init.call(this, options);

	        this.createContainer();
	        if (!options.rtl) {
	            this.createMarker();
	            this.createLabel();
	        } else {
	            this.createLabel();
	            this.createMarker();
	        }
	    },

	    createContainer: function() {
	        this.container = new dataviz.FloatElement({ vertical: false, wrap: false, align: CENTER, spacing: this.options.spacing });
	        this.append(this.container);
	    },

	    createMarker: function() {
	        this.container.append(new ShapeElement(this.markerOptions()));
	    },

	    markerOptions: function() {
	        var options = this.options;
	        var markerColor = options.markerColor;
	        return deepExtend({}, options.markers, {
	            background: markerColor,
	            border: {
	                color: markerColor
	            }
	        });
	    },

	    createLabel: function() {
	        var options = this.options;
	        var labelOptions = deepExtend({}, options.labels);

	        this.container.append(new TextBox(options.text, labelOptions));
	    },

	    renderComplete: function() {
	        BoxElement.fn.renderComplete.call(this);

	        var cursor = this.options.cursor || {};
	        var eventSink = this._itemOverlay = Path.fromRect(this.container.box.toRect(), {
	            fill: {
	                color: WHITE,
	                opacity: 0
	            },
	            stroke: null,
	            cursor: cursor.style || cursor
	        });

	        this.appendVisual(eventSink);
	    },

	    click: function(widget, e) {
	        var args = this.eventArgs(e);

	        if (!widget.trigger(LEGEND_ITEM_CLICK, args)) {
	            e.preventDefault();
	        }
	    },

	    hover: function(widget, e) {
	        var args = this.eventArgs(e);

	        if (!widget.trigger(LEGEND_ITEM_HOVER, args)) {
	            e.preventDefault();
	            widget._legendItemHover(args.seriesIndex, args.pointIndex);
	        }

	        // Don't trigger point hover for legend items
	        return true;
	    },

	    leave: function(widget) {
	        widget._unsetActivePoint();
	    },

	    eventArgs: function(e) {
	        var options = this.options;

	        return {
	            element: eventElement(e),
	            text: options.text,
	            series: options.series,
	            seriesIndex: options.series.index,
	            pointIndex: options.pointIndex
	        };
	    },

	    renderVisual: function() {
	        var this$1 = this;

	        var options = this.options;
	        var customVisual = options.visual;

	        if (customVisual) {
	            this.visual = customVisual({
	                active: options.active,
	                series: options.series,
	                sender: this.getSender(),
	                pointIndex: options.pointIndex,
	                options: {
	                    markers: this.markerOptions(),
	                    labels: options.labels
	                },
	                createVisual: function () {
	                    this$1.createVisual();
	                    this$1.renderChildren();
	                    this$1.renderComplete();

	                    var defaultVisual = this$1.visual;

	                    delete this$1.visual;

	                    return defaultVisual;
	                }
	            });
	            this.addVisual();
	        } else {
	            BoxElement.fn.renderVisual.call(this);
	        }
	    }
	});

	var HORIZONTAL = "horizontal";
	var POINTER = "pointer";
	var CUSTOM = "custom";

	var Legend = ChartElement.extend({
	    init: function(options, chartService) {
	        if (chartService === void 0) { chartService = {}; }

	        ChartElement.fn.init.call(this, options);

	        this.chartService = chartService;

	        if (!inArray(this.options.position, [ TOP, RIGHT, BOTTOM, LEFT, CUSTOM ])) {
	            this.options.position = RIGHT;
	        }

	        this.createContainer();

	        this.createItems();
	    },

	    createContainer: function() {
	        var options = this.options;
	        var position = options.position;
	        var userAlign = options.align;
	        var align = position;
	        var vAlign = CENTER;

	        if (position === CUSTOM) {
	            align = LEFT;
	        } else if (inArray(position, [ TOP, BOTTOM ])) {
	            if (userAlign === "start") {
	                align = LEFT;
	            } else if (userAlign === "end") {
	                align = RIGHT;
	            } else {
	                align = CENTER;
	            }
	            vAlign = position;
	        } else if (userAlign) {
	            if (userAlign === "start") {
	                vAlign = TOP;
	            } else if (userAlign === "end") {
	                vAlign = BOTTOM;
	            }
	        }

	        this.container = new BoxElement({
	            margin: options.margin,
	            padding: options.padding,
	            background: options.background,
	            border: options.border,
	            vAlign: vAlign,
	            align: align,
	            zIndex: options.zIndex,
	            shrinkToFit: true
	        });

	        this.append(this.container);
	    },

	    createItems: function() {
	        var chartService = this.getService();
	        var options = this.options;
	        var vertical = this.isVertical();
	        var innerElement = new LegendLayout({
	            vertical: vertical,
	            spacing: options.spacing,
	            rtl: chartService.rtl
	        }, chartService);
	        var items = options.items;

	        if (options.reverse) {
	            items = items.slice(0).reverse();
	        }

	        var count = items.length;

	        for (var i = 0; i < count; i++) {
	            var item = items[i];

	            innerElement.append(new LegendItem(deepExtend({}, {
	                markers: options.markers,
	                labels: options.labels,
	                rtl: chartService.rtl
	            }, options.item, item)));
	        }

	        innerElement.render();

	        this.container.append(innerElement);
	    },

	    isVertical: function() {
	        var ref = this.options;
	        var orientation = ref.orientation;
	        var position = ref.position;
	        var vertical = (position === CUSTOM && orientation !== HORIZONTAL) ||
	               (defined(orientation) ? orientation !== HORIZONTAL : inArray(position, [ LEFT, RIGHT ]));

	        return vertical;
	    },

	    hasItems: function() {
	        return this.container.children[0].children.length > 0;
	    },

	    reflow: function(targetBox) {
	        var options = this.options;
	        var legendBox = targetBox.clone();

	        if (!this.hasItems()) {
	            this.box = legendBox;
	            return;
	        }

	        if (options.position === CUSTOM) {
	            this.containerCustomReflow(legendBox);
	            this.box = legendBox;
	        } else {
	            this.containerReflow(legendBox);
	        }
	    },

	    containerReflow: function(targetBox) {
	        var ref = this;
	        var options = ref.options;
	        var container = ref.container;
	        var position = options.position;
	        var width = options.width;
	        var height = options.height;
	        var pos = position === TOP || position === BOTTOM ? X : Y;
	        var vertical = this.isVertical();
	        var alignTarget = targetBox.clone();
	        var containerBox = targetBox.clone();

	        if (position === LEFT || position === RIGHT) {
	            containerBox.y1 = alignTarget.y1 = 0;
	        }

	        if (vertical && height) {
	            containerBox.y2 = containerBox.y1 + height;
	            containerBox.align(alignTarget, Y, container.options.vAlign);
	        } else if (!vertical && width) {
	            containerBox.x2 = containerBox.x1 + width;
	            containerBox.align(alignTarget, X, container.options.align);
	        }

	        container.reflow(containerBox);
	        containerBox = container.box;

	        var box = containerBox.clone();

	        if (options.offsetX || options.offsetY) {
	            containerBox.translate(options.offsetX, options.offsetY);
	            this.container.reflow(containerBox);
	        }

	        box[pos + 1] = targetBox[pos + 1];
	        box[pos + 2] = targetBox[pos + 2];

	        this.box = box;
	    },

	    containerCustomReflow: function(targetBox) {
	        var ref = this;
	        var options = ref.options;
	        var container = ref.container;
	        var offsetX = options.offsetX;
	        var offsetY = options.offsetY;
	        var width = options.width;
	        var height = options.height;
	        var vertical = this.isVertical();
	        var containerBox = targetBox.clone();

	        if (vertical && height) {
	            containerBox.y2 = containerBox.y1 + height;
	        } else if (!vertical && width) {
	            containerBox.x2 = containerBox.x1 + width;
	        }
	        container.reflow(containerBox);
	        containerBox = container.box;

	        container.reflow(new Box(
	            offsetX, offsetY,
	            offsetX + containerBox.width(), offsetY + containerBox.height()
	        ));
	    },

	    renderVisual: function() {
	        if (this.hasItems()) {
	            ChartElement.fn.renderVisual.call(this);
	        }
	    }
	});

	setDefaultOptions(Legend, {
	    position: RIGHT,
	    items: [],
	    offsetX: 0,
	    offsetY: 0,
	    margin: getSpacing(5),
	    padding: getSpacing(5),
	    border: {
	        color: BLACK,
	        width: 0
	    },
	    item: {
	        cursor: POINTER,
	        spacing: 6
	    },
	    spacing: 6,
	    background: "",
	    zIndex: 1,
	    markers: {
	        border: {
	            width: 0
	        },
	        width: 15,
	        height: 3,
	        type: "rect",
	        align: LEFT,
	        vAlign: CENTER
	    }
	});

	var PlotAreaFactory = Class.extend({
	    init: function() {

	        this._registry = [];
	    },

	    register: function(type, seriesTypes) {
	        this._registry.push({
	            type: type,
	            seriesTypes: seriesTypes
	        });
	    },

	    create: function(srcSeries, options, chartService) {
	        var registry = this._registry;
	        var match = registry[0];
	        var series;

	        for (var idx = 0; idx < registry.length; idx++) {
	            var entry = registry[idx];
	            series = filterSeriesByType(srcSeries, entry.seriesTypes);

	            if (series.length > 0) {
	                match = entry;
	                break;
	            }
	        }

	        return new match.type(series, options, chartService);
	    }
	});

	PlotAreaFactory.current = new PlotAreaFactory();

	var ZOOM_ACCELERATION = 3;
	var SELECTOR_HEIGHT_ADJUST = 0.1;

	function createDiv(className) {
	    var element = document.createElement("div");
	    if (className) {
	        element.className = className;
	    }

	    return element;
	}

	function closestHandle(element) {
	    var current = element;
	    while (current && !hasClasses(current, "k-handle")) {
	        current = current.parentNode;
	    }

	    return current;
	}

	var Selection = Class.extend({
	    init: function(chart, categoryAxis, options, observer) {

	        var chartElement = chart.element;

	        this.options = deepExtend({}, this.options, options);
	        this.chart = chart;
	        this.observer = observer;
	        this.chartElement = chartElement;
	        this.categoryAxis = categoryAxis;
	        this._dateAxis = this.categoryAxis instanceof DateCategoryAxis;

	        this.initOptions();

	        if (this.options.visible) {
	            this.createElements();

	            this.set(this._index(this.options.from), this._index(this.options.to));

	            this.bindEvents();
	        }
	    },

	    createElements: function() {
	        var options = this.options;
	        var wrapper = this.wrapper = createDiv("k-selector");
	        elementStyles(wrapper, {
	            top: options.offset.top,
	            left: options.offset.left,
	            width: options.width,
	            height: options.height,
	            direction: 'ltr'
	        });
	        var selection = this.selection = createDiv("k-selection");
	        this.leftMask = createDiv("k-mask");
	        this.rightMask = createDiv("k-mask");

	        wrapper.appendChild(this.leftMask);
	        wrapper.appendChild(this.rightMask);
	        wrapper.appendChild(selection);

	        selection.appendChild(createDiv("k-selection-bg"));

	        var leftHandle = this.leftHandle = createDiv("k-handle k-left-handle");
	        var rightHandle = this.rightHandle = createDiv("k-handle k-right-handle");
	        leftHandle.appendChild(createDiv());
	        rightHandle.appendChild(createDiv());

	        selection.appendChild(leftHandle);
	        selection.appendChild(rightHandle);

	        this.chartElement.appendChild(wrapper);
	        var selectionStyles = elementStyles(selection, [ "borderLeftWidth", "borderRightWidth", "height" ]);
	        var leftHandleHeight = elementStyles(leftHandle, "height").height;
	        var rightHandleHeight = elementStyles(rightHandle, "height").height;

	        options.selection = {
	            border: {
	                left: selectionStyles.borderLeftWidth,
	                right: selectionStyles.borderRightWidth
	            }
	        };

	        elementStyles(leftHandle, {
	            top: (selectionStyles.height - leftHandleHeight) / 2
	        });

	        elementStyles(rightHandle, {
	            top: (selectionStyles.height - rightHandleHeight) / 2
	        });

	        wrapper.style.cssText = wrapper.style.cssText;
	    },

	    bindEvents: function() {
	        this._mousewheelHandler = this.options.mousewheel !== false ? this._mousewheel.bind(this) : stopPropagation;

	        var obj;
	        bindEvents(this.wrapper, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));

	        this._domEvents = services.DomEventsBuilder.create(this.wrapper, {
	            start: this._start.bind(this),
	            move: this._move.bind(this),
	            end: this._end.bind(this),
	            tap: this._tap.bind(this),
	            press: this._press.bind(this),
	            gesturestart: this._gesturestart.bind(this),
	            gesturechange: this._gesturechange.bind(this),
	            gestureend: this._gestureend.bind(this)
	        });
	    },

	    initOptions: function() {
	        var ref = this;
	        var options = ref.options;
	        var categoryAxis = ref.categoryAxis;
	        var box = categoryAxis.pane.chartsBox();
	        var intlService = this.chart.chartService.intl;

	        if (this._dateAxis) {
	            deepExtend(options, {
	                min: parseDate(intlService, options.min),
	                max: parseDate(intlService, options.max),
	                from: parseDate(intlService, options.from),
	                to: parseDate(intlService, options.to)
	            });
	        }

	        var ref$1 = elementStyles(this.chartElement, [ "paddingLeft", "paddingTop" ]);
	        var paddingLeft = ref$1.paddingLeft;
	        var paddingTop = ref$1.paddingTop;

	        this.options = deepExtend({}, {
	            width: box.width(),
	            height: box.height() + SELECTOR_HEIGHT_ADJUST, //workaround for sub-pixel hover on the paths in chrome
	            padding: {
	                left: paddingLeft,
	                top: paddingTop
	            },
	            offset: {
	                left: box.x1 + paddingLeft,
	                top: box.y1 + paddingTop
	            },
	            from: options.min,
	            to: options.max
	        }, options);
	    },

	    destroy: function() {
	        if (this._domEvents) {
	            this._domEvents.destroy();
	            delete this._domEvents;
	        }

	        clearTimeout(this._mwTimeout);
	        this._state = null;

	        if (this.wrapper) {
	            var obj;
	            unbindEvents(this.wrapper, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));
	            this.chartElement.removeChild(this.wrapper);
	        }
	    },

	    _rangeEventArgs: function(range) {

	        return {
	            axis: this.categoryAxis.options,
	            from: this._value(range.from),
	            to: this._value(range.to)
	        };
	    },

	    _start: function(e) {
	        var options = this.options;
	        var target = eventElement(e);

	        if (this._state || !target) {
	            return;
	        }

	        this.chart._unsetActivePoint();
	        this._state = {
	            moveTarget: closestHandle(target) || target,
	            startLocation: e.x ? e.x.location : 0,
	            range: {
	                from: this._index(options.from),
	                to: this._index(options.to)
	            }
	        };

	        var args = this._rangeEventArgs({
	            from: this._index(options.from),
	            to: this._index(options.to)
	        });

	        if (this.trigger(SELECT_START, args)) {
	            this._state = null;
	        }
	    },

	    _press: function(e) {
	        var handle;
	        if (this._state) {
	            handle = this._state.moveTarget;
	        } else {
	            handle = closestHandle(eventElement(e));
	        }
	        if (handle) {
	            dataviz.addClass(handle, "k-handle-active");
	        }
	    },

	    _move: function(e) {
	        if (!this._state) {
	            return;
	        }

	        var ref = this;
	        var state = ref._state;
	        var options = ref.options;
	        var axisOptions = ref.categoryAxis.options;
	        var range = state.range;
	        var target = state.moveTarget;
	        var reverse = axisOptions.reverse;
	        var from = this._index(options.from);
	        var to = this._index(options.to);
	        var min = this._index(options.min);
	        var max = this._index(options.max);
	        var delta = state.startLocation - e.x.location;
	        var oldRange = { from: range.from, to: range.to };
	        var span = range.to - range.from;
	        var scale = elementStyles(this.wrapper, "width").width / (axisOptions.categories.length - 1);
	        var offset = Math.round(delta / scale) * (reverse ? -1 : 1);

	        if (!target) {
	            return;
	        }

	        var leftHandle = hasClasses(target, "k-left-handle");
	        var rightHandle = hasClasses(target, "k-right-handle");

	        if (hasClasses(target, "k-selection k-selection-bg")) {
	            range.from = Math.min(
	                Math.max(min, from - offset),
	                max - span
	            );
	            range.to = Math.min(
	                range.from + span,
	                max
	            );
	        } else if ((leftHandle && !reverse) || (rightHandle && reverse)) {
	            range.from = Math.min(
	                Math.max(min, from - offset),
	                max - 1
	            );
	            range.to = Math.max(range.from + 1, range.to);
	        } else if ((leftHandle && reverse) || (rightHandle && !reverse)) {
	            range.to = Math.min(
	                Math.max(min + 1, to - offset),
	                max
	            );
	            range.from = Math.min(range.to - 1, range.from);
	        }

	        if (range.from !== oldRange.from || range.to !== oldRange.to) {
	            this.move(range.from, range.to);
	            this.trigger(SELECT, this._rangeEventArgs(range));
	        }
	    },

	    _end: function() {
	        if (this._state) {
	            var moveTarget = this._state.moveTarget;
	            if (moveTarget) {
	                dataviz.removeClass(moveTarget, "k-handle-active");
	            }

	            var range = this._state.range;
	            this.set(range.from, range.to);
	            this.trigger(SELECT_END, this._rangeEventArgs(range));

	            delete this._state;
	        }
	    },

	    _tap: function(e) {
	        var ref = this;
	        var options = ref.options;
	        var categoryAxis = ref.categoryAxis;
	        var coords = this.chart._eventCoordinates(e);
	        var categoryIx = categoryAxis.pointCategoryIndex(new Point(coords.x, categoryAxis.box.y1));
	        var from = this._index(options.from);
	        var to = this._index(options.to);
	        var min = this._index(options.min);
	        var max = this._index(options.max);
	        var span = to - from;
	        var mid = from + span / 2;
	        var range = {};
	        var rightClick = e.event.which === 3;
	        var offset = Math.round(mid - categoryIx);

	        if (this._state || rightClick) {
	            return;
	        }

	        this.chart._unsetActivePoint();

	        if (!categoryAxis.options.justified) {
	            offset--;
	        }

	        range.from = Math.min(
	            Math.max(min, from - offset),
	            max - span
	        );

	        range.to = Math.min(range.from + span, max);

	        this._start(e);
	        if (this._state) {
	            this._state.range = range;
	            this.trigger(SELECT, this._rangeEventArgs(range));
	            this._end();
	        }
	    },

	    _mousewheel: function(e) {
	        var this$1 = this;

	        var delta = dataviz.mousewheelDelta(e);

	        this._start({ target: this.selection });

	        if (this._state) {
	            var range = this._state.range;

	            e.preventDefault();
	            e.stopPropagation();

	            if (Math.abs(delta) > 1) {
	                delta *= ZOOM_ACCELERATION;
	            }

	            if (this.options.mousewheel.reverse) {
	                delta *= -1;
	            }

	            if (this.expand(delta)) {
	                this.trigger(SELECT, {
	                    axis: this.categoryAxis.options,
	                    delta: delta,
	                    originalEvent: e,
	                    from: this._value(range.from),
	                    to: this._value(range.to)
	                });
	            }

	            if (this._mwTimeout) {
	                clearTimeout(this._mwTimeout);
	            }

	            this._mwTimeout = setTimeout(function () {
	                this$1._end();
	            }, MOUSEWHEEL_DELAY);
	        }
	    },

	    _gesturestart: function(e) {
	        var options = this.options;

	        this._state = {
	            range: {
	                from: this._index(options.from),
	                to: this._index(options.to)
	            }
	        };
	        var args = this._rangeEventArgs(this._state.range);

	        if (this.trigger(SELECT_START, args)) {
	            this._state = null;
	        } else {
	            e.preventDefault();
	        }
	    },

	    _gestureend: function() {
	        if (this._state) {
	            this.trigger(SELECT_END, this._rangeEventArgs(this._state.range));
	            delete this._state;
	        }
	    },

	    _gesturechange: function(e) {
	        var ref = this;
	        var chart = ref.chart;
	        var state = ref._state;
	        var options = ref.options;
	        var categoryAxis = ref.categoryAxis;
	        var range = state.range;
	        var p0 = chart._toModelCoordinates(e.touches[0].x.location).x;
	        var p1 = chart._toModelCoordinates(e.touches[1].x.location).x;
	        var left = Math.min(p0, p1);
	        var right = Math.max(p0, p1);

	        e.preventDefault();

	        range.from = categoryAxis.pointCategoryIndex(new Point(left)) || options.min;

	        range.to = categoryAxis.pointCategoryIndex(new Point(right)) || options.max;

	        this.move(range.from, range.to);

	        this.trigger(SELECT, this._rangeEventArgs(range));
	    },

	    _index: function(value) {
	        var index = value;

	        if (value instanceof Date) {
	            index = this.categoryAxis.categoryIndex(value);
	        }

	        return index;
	    },

	    _value: function(index) {
	        var categories = this.categoryAxis.options.categories;
	        var value = index;

	        if (this._dateAxis) {
	            if (index > categories.length - 1) {
	                value = this.options.max;
	            } else {
	                value = categories[Math.ceil(index)];
	            }
	        }

	        return value;
	    },

	    _slot: function(value) {
	        var categoryAxis = this.categoryAxis;
	        var index = this._index(value);

	        return categoryAxis.getSlot(index, index, true);
	    },

	    move: function(from, to) {
	        var options = this.options;
	        var reverse = this.categoryAxis.options.reverse;
	        var offset = options.offset;
	        var padding = options.padding;
	        var border = options.selection.border;
	        var left = reverse ? to : from;
	        var right = reverse ? from : to;
	        var edge = 'x' + (reverse ? 2 : 1);

	        var box = this._slot(left);
	        var leftMaskWidth = round(box[edge] - offset.left + padding.left);

	        elementStyles(this.leftMask, {
	            width: leftMaskWidth
	        });
	        elementStyles(this.selection, {
	            left: leftMaskWidth
	        });

	        box = this._slot(right);

	        var rightMaskWidth = round(options.width - (box[edge] - offset.left + padding.left));
	        elementStyles(this.rightMask, {
	            width: rightMaskWidth
	        });

	        var distance = options.width - rightMaskWidth;
	        if (distance !== options.width) {
	            distance += border.right;
	        }

	        elementStyles(this.rightMask, {
	            left: distance
	        });
	        elementStyles(this.selection, {
	            width: Math.max(options.width - (leftMaskWidth + rightMaskWidth) - border.right, 0)
	        });
	    },

	    set: function(from, to) {
	        var options = this.options;
	        var min = this._index(options.min);
	        var max = this._index(options.max);
	        var fromValue = limitValue(this._index(from), min, max);
	        var toValue = limitValue(this._index(to), fromValue + 1, max);

	        if (options.visible) {
	            this.move(fromValue, toValue);
	        }

	        options.from = this._value(fromValue);
	        options.to = this._value(toValue);
	    },

	    expand: function(delta) {
	        var options = this.options;
	        var min = this._index(options.min);
	        var max = this._index(options.max);
	        var zDir = options.mousewheel.zoom;
	        var from = this._index(options.from);
	        var to = this._index(options.to);
	        var range = { from: from, to: to };
	        var oldRange = deepExtend({}, range);

	        if (this._state) {
	            range = this._state.range;
	        }

	        if (zDir !== RIGHT) {
	            range.from = limitValue(
	                limitValue(from - delta, 0, to - 1),
	                min, max
	            );
	        }

	        if (zDir !== LEFT) {
	            range.to = limitValue(
	                limitValue(to + delta, range.from + 1, max),
	                min,
	                max
	             );
	        }

	        if (range.from !== oldRange.from || range.to !== oldRange.to) {
	            this.set(range.from, range.to);
	            return true;
	        }
	    },

	    trigger: function(name, args) {
	        return (this.observer || this.chart).trigger(name, args);
	    }
	});

	function stopPropagation(e) {
	    e.stopPropagation();
	}

	setDefaultOptions(Selection, {
	    visible: true,
	    mousewheel: {
	        zoom: "both"
	    },
	    min: MIN_VALUE,
	    max: MAX_VALUE
	});

	var Tooltip = BaseTooltip.extend({
	    show: function(point) {
	        if (!point || !point.tooltipAnchor || (this._current && this._current === point)) {
	            return;
	        }

	        var options = deepExtend({}, this.options, point.options.tooltip);
	        var anchor = point.tooltipAnchor();

	        if (anchor) {
	            this._current = point;
	            BaseTooltip.fn.show.call(this, {
	                point: point,
	                anchor: anchor
	            }, options, point);
	        } else {
	            this.hide();
	        }
	    },

	    hide: function() {
	        delete this._current;
	        BaseTooltip.fn.hide.call(this);
	    }
	});

	var SharedTooltip = BaseTooltip.extend({
	    init: function(plotArea, options) {
	        BaseTooltip.fn.init.call(this, plotArea.chartService, options);

	        this.plotArea = plotArea;
	        this.formatService = plotArea.chartService.format;
	    },

	    showAt: function(points, coords) {
	        var tooltipPoints = grep(points, function(point) {
	            var tooltip = point.series.tooltip;
	            var excluded = tooltip && tooltip.visible === false;

	            return !excluded;
	        });

	        if (tooltipPoints.length > 0) {
	            var point = tooltipPoints[0];
	            var slot = this.plotArea.categoryAxis.getSlot(point.categoryIx);

	            var anchor = coords ? this._slotAnchor(coords, slot) : this._defaultAnchor(point, slot);

	            this.show({
	                anchor: anchor,
	                shared: true,
	                points: points,
	                category: point.category,
	                categoryText: this.formatService.auto(this.options.categoryFormat, point.category),
	                series: this.plotArea.series
	            }, this.options);
	        }
	    },

	    _slotAnchor: function(point, slot) {
	        var axis = this.plotArea.categoryAxis;
	        var align = {
	            horizontal: "left",
	            vertical: "center"
	        };

	        if (!axis.options.vertical) {
	            point.x = slot.center().x;
	        }

	        return {
	            point: point,
	            align: align
	        };
	    },

	    _defaultAnchor: function(point, slot) {
	        var box = point.owner.pane.chartsBox();
	        var vertical = this.plotArea.categoryAxis.options.vertical;
	        var center = box.center();
	        var slotCenter = slot.center();
	        var align = {
	            horizontal: "center",
	            vertical: "center"
	        };

	        var centerPoint;
	        if (vertical) {
	            centerPoint = new Point(center.x, slotCenter.y);
	        } else {
	            centerPoint = new Point(slotCenter.x, center.y);
	        }

	        return {
	            point: centerPoint,
	            align: align
	        };
	    }
	});

	setDefaultOptions(SharedTooltip, {
	    categoryFormat: '{0:d}'
	});

	var BarChartAnimation = Animation.extend({
	    setup: function() {
	        var ref = this;
	        var element = ref.element;
	        var options = ref.options;
	        var bbox = element.bbox();

	        if (bbox) {
	            this.origin = options.origin;
	            var axis = options.vertical ? Y : X;

	            var fromScale = this.fromScale = new GeometryPoint(1, 1);
	            fromScale[axis] = START_SCALE;

	            element.transform(transform()
	                .scale(fromScale.x, fromScale.y)
	            );
	        } else {
	            this.abort();
	        }
	    },

	    step: function(pos) {
	        var scaleX = dataviz.interpolateValue(this.fromScale.x, 1, pos);
	        var scaleY = dataviz.interpolateValue(this.fromScale.y, 1, pos);

	        this.element.transform(transform()
	            .scale(scaleX, scaleY, this.origin)
	        );
	    },

	    abort: function() {
	        Animation.fn.abort.call(this);
	        this.element.transform(null);
	    }
	});

	setDefaultOptions(BarChartAnimation, {
	    duration: INITIAL_ANIMATION_DURATION
	});

	AnimationFactory.current.register(BAR, BarChartAnimation);

	var BubbleAnimation = Animation.extend({
	    setup: function() {
	        var center = this.center = this.element.bbox().center();
	        this.element.transform(transform()
	            .scale(START_SCALE, START_SCALE, center)
	        );
	    },

	    step: function(pos) {
	        this.element.transform(transform()
	            .scale(pos, pos, this.center)
	        );
	    }
	});

	setDefaultOptions(BubbleAnimation, {
	    easing: "easeOutElastic"
	});

	AnimationFactory.current.register(BUBBLE, BubbleAnimation);

	var FadeInAnimation = Animation.extend({
	    setup: function() {
	        this.fadeTo = this.element.opacity();
	        this.element.opacity(0);
	    },

	    step: function(pos) {
	        this.element.opacity(pos * this.fadeTo);
	    }
	});

	setDefaultOptions(FadeInAnimation, {
	    duration: 200,
	    easing: "linear"
	});

	AnimationFactory.current.register(FADEIN, FadeInAnimation);

	var PieAnimation = Animation.extend({
	    setup: function() {
	        this.element.transform(transform()
	            .scale(START_SCALE, START_SCALE, this.options.center)
	        );
	    },

	    step: function(pos) {
	        this.element.transform(transform()
	            .scale(pos, pos, this.options.center)
	        );
	    }
	});

	setDefaultOptions(PieAnimation, {
	    easing: "easeOutElastic",
	    duration: INITIAL_ANIMATION_DURATION
	});

	AnimationFactory.current.register(PIE, PieAnimation);

	var ScatterLineChart = ScatterChart.extend({
	    render: function() {
	        ScatterChart.fn.render.call(this);

	        this.renderSegments();
	    },

	    createSegment: function(linePoints, currentSeries, seriesIx) {
	        var style = currentSeries.style;
	        var pointType;

	        if (style === SMOOTH) {
	            pointType = SplineSegment;
	        } else {
	            pointType = LineSegment;
	        }

	        return new pointType(linePoints, currentSeries, seriesIx);
	    },

	    animationPoints: function() {
	        var points = ScatterChart.fn.animationPoints.call(this);
	        return points.concat(this._segments);
	    },

	    createMissingValue: function(value, missingValues) {
	        if (missingValues === ZERO) {
	            var missingValue = {
	                x: value.x,
	                y: value.y
	            };
	            if (!hasValue(missingValue.x)) {
	                missingValue.x = 0;
	            }
	            if (!hasValue(missingValue.y)) {
	                missingValue.y = 0;
	            }
	            return missingValue;
	        }
	    }
	});

	deepExtend(ScatterLineChart.prototype, LineChartMixin);

	var XYPlotArea = PlotAreaBase.extend({
	    initFields: function() {
	        this.namedXAxes = {};
	        this.namedYAxes = {};

	        this.xAxisRangeTracker = new AxisGroupRangeTracker();
	        this.yAxisRangeTracker = new AxisGroupRangeTracker();
	    },

	    render: function(panes) {
	        var this$1 = this;
	        if (panes === void 0) { panes = this.panes; }

	        var seriesByPane = this.groupSeriesByPane();

	        for (var i = 0; i < panes.length; i++) {
	            var pane = panes[i];
	            var paneSeries = seriesByPane[pane.options.name || "default"] || [];
	            this$1.addToLegend(paneSeries);
	            var filteredSeries = this$1.filterVisibleSeries(paneSeries);

	            if (!filteredSeries) {
	                continue;
	            }

	            this$1.createScatterChart(
	                filterSeriesByType(filteredSeries, SCATTER),
	                pane
	            );

	            this$1.createScatterLineChart(
	                filterSeriesByType(filteredSeries, SCATTER_LINE),
	                pane
	            );

	            this$1.createBubbleChart(
	                filterSeriesByType(filteredSeries, BUBBLE),
	                pane
	            );
	        }

	        this.createAxes(panes);
	    },

	    appendChart: function(chart, pane) {
	        this.xAxisRangeTracker.update(chart.xAxisRanges);
	        this.yAxisRangeTracker.update(chart.yAxisRanges);

	        PlotAreaBase.fn.appendChart.call(this, chart, pane);
	    },

	    removeAxis: function(axis) {
	        var axisName = axis.options.name;

	        PlotAreaBase.fn.removeAxis.call(this, axis);

	        if (axis.options.vertical) {
	            this.yAxisRangeTracker.reset(axisName);
	            delete this.namedYAxes[axisName];
	        } else {
	            this.xAxisRangeTracker.reset(axisName);
	            delete this.namedXAxes[axisName];
	        }

	        if (axis === this.axisX) {
	            delete this.axisX;
	        }

	        if (axis === this.axisY) {
	            delete this.axisY;
	        }
	    },

	    seriesPaneName: function(series) {
	        var options = this.options;
	        var xAxisName = series.xAxis;
	        var xAxisOptions = [].concat(options.xAxis);
	        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];
	        var yAxisName = series.yAxis;
	        var yAxisOptions = [].concat(options.yAxis);
	        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];
	        var panes = options.panes || [ {} ];
	        var defaultPaneName = panes[0].name || "default";
	        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;

	        return paneName;
	    },

	    createScatterChart: function(series, pane) {
	        if (series.length > 0) {
	            this.appendChart(
	                new ScatterChart(this, { series: series, clip: pane.options.clip }),
	                pane
	            );
	        }
	    },

	    createScatterLineChart: function(series, pane) {
	        if (series.length > 0) {
	            this.appendChart(
	                new ScatterLineChart(this, { series: series, clip: pane.options.clip }),
	                pane
	            );
	        }
	    },

	    createBubbleChart: function(series, pane) {
	        if (series.length > 0) {
	            this.appendChart(
	                new BubbleChart(this, { series: series, clip: pane.options.clip }),
	                pane
	            );
	        }
	    },

	    createXYAxis: function(options, vertical, axisIndex) {
	        var axisName = options.name;
	        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;
	        var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;
	        var axisOptions = deepExtend({ reverse: !vertical && this.chartService.rtl }, options, { vertical: vertical });
	        var isLog = equalsIgnoreCase(axisOptions.type, LOGARITHMIC);
	        var defaultRange = tracker.query();
	        var defaultAxisRange = isLog ? { min: 0.1, max: 1 } : { min: 0, max: 1 };
	        var range = tracker.query(axisName) || defaultRange || defaultAxisRange;
	        var typeSamples = [ axisOptions.min, axisOptions.max ];
	        var series = this.series;

	        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var seriesAxisName = currentSeries[vertical ? "yAxis" : "xAxis"];
	            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {
	                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;
	                typeSamples.push(firstPointValue[vertical ? "y" : "x"]);

	                break;
	            }
	        }

	        if (axisIndex === 0 && defaultRange) {
	            range.min = Math.min(range.min, defaultRange.min);
	            range.max = Math.max(range.max, defaultRange.max);
	        }

	        var inferredDate;

	        for (var i = 0; i < typeSamples.length; i++) {
	            if (typeSamples[i] instanceof Date) {
	                inferredDate = true;
	                break;
	            }
	        }

	        var axisType;
	        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {
	            axisType = dataviz.DateValueAxis;
	        } else if (isLog) {
	            axisType = dataviz.LogarithmicAxis;
	        } else {
	            axisType = dataviz.NumericAxis;
	        }

	        var axis = new axisType(range.min, range.max, axisOptions, this.chartService);
	        axis.axisIndex = axisIndex;

	        if (axisName) {
	            if (namedAxes[axisName]) {
	                throw new Error(((vertical ? "Y" : "X") + " axis with name " + axisName + " is already defined"));
	            }
	            namedAxes[axisName] = axis;
	        }

	        this.appendAxis(axis);

	        return axis;
	    },

	    createAxes: function(panes) {
	        var this$1 = this;

	        var options = this.options;
	        var xAxesOptions = [].concat(options.xAxis);
	        var xAxes = [];
	        var yAxesOptions = [].concat(options.yAxis);
	        var yAxes = [];

	        for (var idx = 0; idx < xAxesOptions.length; idx++) {
	            var axisPane = this$1.findPane(xAxesOptions[idx].pane);
	            if (inArray(axisPane, panes)) {
	                xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));
	            }
	        }

	        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {
	            var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);
	            if (inArray(axisPane$1, panes)) {
	                yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));
	            }
	        }

	        this.axisX = this.axisX || xAxes[0];
	        this.axisY = this.axisY || yAxes[0];
	    },

	    _dispatchEvent: function(chart, e, eventType) {
	        var coords = chart._eventCoordinates(e);
	        var point = new Point(coords.x, coords.y);
	        var allAxes = this.axes;
	        var length = allAxes.length;
	        var xValues = [];
	        var yValues = [];

	        for (var i = 0; i < length; i++) {
	            var axis = allAxes[i];
	            var values = axis.options.vertical ? yValues : xValues;
	            var currentValue = axis.getValue(point);
	            if (currentValue !== null) {
	                values.push(currentValue);
	            }
	        }

	        if (xValues.length > 0 && yValues.length > 0) {
	            chart.trigger(eventType, {
	                element: eventElement(e),
	                originalEvent: e,
	                x: singleItemOrArray(xValues),
	                y: singleItemOrArray(yValues)
	            });
	        }
	    },

	    updateAxisOptions: function(axis, options) {
	        var vertical = axis.options.vertical;
	        var axes = this.groupAxes(this.panes);
	        var index = (vertical ? axes.y : axes.x).indexOf(axis);

	        updateAxisOptions$1(this.options, index, vertical, options);
	        updateAxisOptions$1(this.originalOptions, index, vertical, options);
	    }
	});

	function updateAxisOptions$1(targetOptions, axisIndex, vertical, options) {
	    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];
	    deepExtend(axisOptions, options);
	}

	setDefaultOptions(XYPlotArea, {
	    xAxis: {},
	    yAxis: {}
	});

	deepExtend(XYPlotArea.prototype, PlotAreaEventsMixin);

	var PieSegment = ChartElement.extend({
	    init: function(value, sector, options) {
	        ChartElement.fn.init.call(this, options);

	        this.value = value;
	        this.sector = sector;
	    },

	    render: function() {
	        var labels = this.options.labels;
	        var chartService = this.owner.chartService;
	        var labelText = this.value;

	        if (this._rendered || this.visible === false) {
	            return;
	        }
	        this._rendered = true;

	        var labelTemplate = getTemplate(labels);
	        if (labelTemplate) {
	            labelText = labelTemplate({
	                dataItem: this.dataItem,
	                category: this.category,
	                value: this.value,
	                series: this.series,
	                percentage: this.percentage
	            });
	        } else if (labels.format) {
	            labelText = chartService.format.auto(labels.format, labelText);
	        }

	        if (labels.visible && (labelText || labelText === 0)) {
	            if (labels.position === CENTER || labels.position === INSIDE_END) {
	                if (!labels.color) {
	                    var brightnessValue = new Color(this.options.color).percBrightness();
	                    if (brightnessValue > 180) {
	                        labels.color = BLACK;
	                    } else {
	                        labels.color = WHITE;
	                    }
	                }
	                if (!labels.background) {
	                    labels.background = this.options.color;
	                }
	            } else {
	                var themeLabels = chartService.theme.seriesDefaults.labels;
	                labels.color = labels.color || themeLabels.color;
	                labels.background = labels.background || themeLabels.background;
	            }

	            this.label = new TextBox(labelText, deepExtend({}, labels, {
	                align: CENTER,
	                vAlign: "",
	                animation: {
	                    type: FADEIN,
	                    delay: this.animationDelay
	                }
	            }));

	            this.append(this.label);
	        }
	    },

	    reflow: function(targetBox) {
	        this.render();
	        this.box = targetBox;
	        this.reflowLabel();
	    },

	    reflowLabel: function() {
	        var ref = this;
	        var labelsOptions = ref.options.labels;
	        var label = ref.label;
	        var sector = this.sector.clone();
	        var labelsDistance = labelsOptions.distance;
	        var angle = sector.middle();

	        if (label) {
	            var labelHeight = label.box.height();
	            var labelWidth = label.box.width();
	            var lp;

	            if (labelsOptions.position === CENTER) {
	                sector.radius = Math.abs((sector.radius - labelHeight) / 2) + labelHeight;
	                lp = sector.point(angle);
	                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
	            } else if (labelsOptions.position === INSIDE_END) {
	                sector.radius = sector.radius - labelHeight / 2;
	                lp = sector.point(angle);
	                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
	            } else {
	                var x1;
	                lp = sector.clone().expand(labelsDistance).point(angle);
	                if (lp.x >= sector.center.x) {
	                    x1 = lp.x + labelWidth;
	                    label.orientation = RIGHT;
	                } else {
	                    x1 = lp.x - labelWidth;
	                    label.orientation = LEFT;
	                }
	                label.reflow(new Box(x1, lp.y - labelHeight, lp.x, lp.y));
	            }
	        }
	    },

	    createVisual: function() {
	        var this$1 = this;

	        var ref = this;
	        var sector = ref.sector;
	        var options = ref.options;

	        ChartElement.fn.createVisual.call(this);

	        if (this.value) {
	            if (options.visual) {
	                var startAngle = (sector.startAngle + 180) % 360;
	                var visual = options.visual({
	                    category: this.category,
	                    dataItem: this.dataItem,
	                    value: this.value,
	                    series: this.series,
	                    percentage: this.percentage,
	                    center: new GeometryPoint(sector.center.x, sector.center.y),
	                    radius: sector.radius,
	                    innerRadius: sector.innerRadius,
	                    startAngle: startAngle,
	                    endAngle: startAngle + sector.angle,
	                    options: options,
	                    sender: this.getSender(),
	                    createVisual: function () {
	                        var group = new Group();
	                        this$1.createSegmentVisual(group);

	                        return group;
	                    }
	                });

	                if (visual) {
	                    this.visual.append(visual);
	                }
	            } else {
	                this.createSegmentVisual(this.visual);
	            }
	        }
	    },

	    createSegmentVisual: function(group) {
	        var ref = this;
	        var sector = ref.sector;
	        var options = ref.options;
	        var borderOptions = options.border || {};
	        var border = borderOptions.width > 0 ? {
	            stroke: {
	                color: borderOptions.color,
	                width: borderOptions.width,
	                opacity: borderOptions.opacity,
	                dashType: borderOptions.dashType
	            }
	        } : {};
	        var color = options.color;
	        var fill = {
	            color: color,
	            opacity: options.opacity
	        };
	        var visual = this.createSegment(sector, deepExtend({
	            fill: fill,
	            stroke: {
	                opacity: options.opacity
	            },
	            zIndex: options.zIndex
	        }, border));

	        group.append(visual);

	        if (hasGradientOverlay(options)) {
	            group.append(this.createGradientOverlay(visual, {
	                baseColor: color,
	                fallbackFill: fill
	            }, deepExtend({
	                center: [ sector.center.x, sector.center.y ],
	                innerRadius: sector.innerRadius,
	                radius: sector.radius,
	                userSpace: true
	            }, options.overlay)));
	        }
	    },

	    createSegment: function(sector, options) {
	        if (options.singleSegment) {
	            return new drawing.Circle(new geometry.Circle(new GeometryPoint(sector.center.x, sector.center.y), sector.radius), options);
	        }

	        return dataviz.ShapeBuilder.current.createRing(sector, options);
	    },

	    createAnimation: function() {
	        var ref = this;
	        var options = ref.options;
	        var center = ref.sector.center;

	        deepExtend(options, {
	            animation: {
	                center: [ center.x, center.y ],
	                delay: this.animationDelay
	            }
	        });

	        ChartElement.fn.createAnimation.call(this);
	    },

	    createHighlight: function(options) {
	        var highlight = this.options.highlight || {};
	        var border = highlight.border || {};

	        return this.createSegment(this.sector, deepExtend({}, options, {
	            fill: {
	                color: highlight.color,
	                opacity: highlight.opacity
	            },
	            stroke: {
	                opacity: border.opacity,
	                width: border.width,
	                color: border.color
	            }
	        }));
	    },

	    highlightVisual: function() {
	        return this.visual.children[0];
	    },

	    highlightVisualArgs: function() {
	        var sector = this.sector;

	        return {
	            options: this.options,
	            radius: sector.radius,
	            innerRadius: sector.innerRadius,
	            center: new GeometryPoint(sector.center.x, sector.center.y),
	            startAngle: sector.startAngle,
	            endAngle: sector.angle + sector.startAngle,
	            visual: this.visual
	        };
	    },

	    tooltipAnchor: function() {
	        var sector = this.sector.clone().expand(TOOLTIP_OFFSET);
	        var midAndle = sector.middle();
	        var midPoint = sector.point(midAndle);

	        return {
	            point: midPoint,
	            align: tooltipAlignment(midAndle + 180)
	        };
	    },

	    formatValue: function(format) {
	        return this.owner.formatPointValue(this, format);
	    }
	});

	var RAD_30 = round(dataviz.rad(30), DEFAULT_PRECISION);
	var RAD_60 = round(dataviz.rad(60), DEFAULT_PRECISION);

	function tooltipAlignment(angle) {
	    var radians = dataviz.rad(angle);
	    var sine = round(Math.sin(radians), DEFAULT_PRECISION);
	    var cosine = round(Math.cos(radians), DEFAULT_PRECISION);

	    var horizontal;
	    if (Math.abs(sine) > RAD_60) {
	        horizontal = CENTER;
	    } else if (cosine < 0) {
	        horizontal = RIGHT;
	    } else {
	        horizontal = LEFT;
	    }

	    var vertical;
	    if (Math.abs(sine) < RAD_30) {
	        vertical = CENTER;
	    } else if (sine < 0) {
	        vertical = BOTTOM;
	    } else {
	        vertical = TOP;
	    }

	    return {
	        horizontal: horizontal,
	        vertical: vertical
	    };
	}

	setDefaultOptions(PieSegment, {
	    color: WHITE,
	    overlay: {
	        gradient: "roundedBevel"
	    },
	    border: {
	        width: 0.5
	    },
	    labels: {
	        visible: false,
	        distance: 35,
	        font: datavizConstants.DEFAULT_FONT,
	        margin: getSpacing(0.5),
	        align: CIRCLE,
	        zIndex: 1,
	        position: OUTSIDE_END
	    },
	    animation: {
	        type: PIE
	    },
	    highlight: {
	        visible: true,
	        border: {
	            width: 1
	        }
	    },
	    visible: true
	});

	deepExtend(PieSegment.prototype, PointEventsMixin);

	var PieChartMixin = {
	    createLegendItem: function(value, point, options) {
	        var legendOptions = this.options.legend || {};
	        var labelsOptions = legendOptions.labels || {};
	        var inactiveItems = legendOptions.inactiveItems || {};
	        var inactiveItemsLabels = inactiveItems.labels || {};

	        if (options && options.visibleInLegend !== false) {
	            var pointVisible = options.visible !== false;
	            var labelTemplate = pointVisible ? getTemplate(labelsOptions) :
	                getTemplate(inactiveItemsLabels) || getTemplate(labelsOptions);
	            var text = options.category;

	            if (labelTemplate) {
	                text = labelTemplate({
	                    text: text,
	                    series: options.series,
	                    dataItem: options.dataItem,
	                    percentage: options.percentage,
	                    value: value
	                });
	            }

	            var itemLabelOptions, markerColor;
	            if (pointVisible) {
	                itemLabelOptions = {};
	                markerColor = point.color;
	            } else {
	                itemLabelOptions = {
	                    color: inactiveItemsLabels.color,
	                    font: inactiveItemsLabels.font
	                };
	                markerColor = (inactiveItems.markers || {}).color;
	            }

	            if (hasValue(text) && text !== "") {
	                this.legendItems.push({
	                    pointIndex: options.index,
	                    text: text,
	                    series: options.series,
	                    markerColor: markerColor,
	                    labels: itemLabelOptions
	                });
	            }
	        }
	    }
	};

	var PIE_SECTOR_ANIM_DELAY = 70;

	var PieChart = ChartElement.extend({
	    init: function(plotArea, options) {
	        ChartElement.fn.init.call(this, options);

	        this.plotArea = plotArea;
	        this.chartService = plotArea.chartService;
	        this.points = [];
	        this.legendItems = [];
	        this.render();
	    },

	    render: function() {
	        this.traverseDataPoints(this.addValue.bind(this));
	    },

	    traverseDataPoints: function(callback) {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var seriesColors = ref.plotArea.options.seriesColors; if (seriesColors === void 0) { seriesColors = []; }
	        var colorsCount = seriesColors.length;
	        var series = options.series;
	        var seriesCount = series.length;

	        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
	            var currentSeries = series[seriesIx];
	            var data = currentSeries.data;
	            var ref$1 = bindSegments(currentSeries);
	            var total = ref$1.total;
	            var points = ref$1.points;
	            var count = ref$1.count;
	            var anglePerValue = 360 / total;
	            var constantAngle = (void 0);
	            if (!isFinite(anglePerValue)) {
	                constantAngle = 360 / count;
	            }
	            var currentAngle = (void 0);

	            if (defined(currentSeries.startAngle)) {
	                currentAngle = currentSeries.startAngle;
	            } else {
	                currentAngle = options.startAngle;
	            }

	            if (seriesIx !== seriesCount - 1) {
	                if (currentSeries.labels.position === OUTSIDE_END) {
	                    currentSeries.labels.position = CENTER;
	                }
	            }

	            for (var i = 0; i < points.length; i++) {
	                var pointData = points[i];
	                if (!pointData) {
	                    continue;
	                }

	                var fields = pointData.fields;
	                var value = pointData.value;
	                var visible = pointData.visible;
	                var angle = value !== 0 ? (constantAngle || (value * anglePerValue)) : 0;
	                var explode = data.length !== 1 && Boolean(fields.explode);

	                if (!isFunction(currentSeries.color)) {
	                    currentSeries.color = fields.color || seriesColors[i % colorsCount];
	                }

	                callback(pointData.valueFields.value, new dataviz.Ring(null, 0, 0, currentAngle, angle), {
	                    owner: this$1,
	                    category: defined(fields.category) ? fields.category : "",
	                    index: i,
	                    series: currentSeries,
	                    seriesIx: seriesIx,
	                    dataItem: data[i],
	                    percentage: total !== 0 ? value / total : 0,
	                    explode: explode,
	                    visibleInLegend: fields.visibleInLegend,
	                    visible: visible,
	                    zIndex: seriesCount - seriesIx,
	                    animationDelay: this$1.animationDelay(i, seriesIx, seriesCount)
	                });

	                if (visible !== false) {
	                    currentAngle += angle;
	                }
	            }
	        }
	    },

	    evalSegmentOptions: function(options, value, fields) {
	        var series = fields.series;

	        evalOptions(options, {
	            value: value,
	            series: series,
	            dataItem: fields.dataItem,
	            category: fields.category,
	            percentage: fields.percentage
	        }, { defaults: series._defaults, excluded: [ "data", "content", "template", "visual", "toggle" ] });
	    },

	    addValue: function(value, sector, fields) {
	        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });
	        this.evalSegmentOptions(segmentOptions, value, fields);

	        this.createLegendItem(value, segmentOptions, fields);

	        if (fields.visible === false) {
	            return;
	        }

	        var segment = new PieSegment(value, sector, segmentOptions);
	        $.extend(segment, fields);
	        this.append(segment);
	        this.points.push(segment);
	    },

	    reflow: function(targetBox) {
	        var ref = this;
	        var options = ref.options;
	        var points = ref.points;
	        var seriesConfigs = ref.seriesConfigs; if (seriesConfigs === void 0) { seriesConfigs = []; }
	        var count = points.length;
	        var box = targetBox.clone();
	        var space = 5;
	        var minWidth = Math.min(box.width(), box.height());
	        var halfMinWidth = minWidth / 2;
	        var defaultPadding = minWidth - minWidth * 0.85;
	        var newBox = new Box(box.x1, box.y1, box.x1 + minWidth, box.y1 + minWidth);
	        var newBoxCenter = newBox.center();
	        var boxCenter = box.center();
	        var seriesCount = options.series.length;
	        var leftSideLabels = [];
	        var rightSideLabels = [];
	        var padding = valueOrDefault(options.padding, defaultPadding);

	        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;
	        newBox.translate(boxCenter.x - newBoxCenter.x, boxCenter.y - newBoxCenter.y);

	        var radius = halfMinWidth - padding;
	        var center = new Point(
	            radius + newBox.x1 + padding,
	            radius + newBox.y1 + padding
	        );

	        for (var i = 0; i < count; i++) {
	            var segment = points[i];
	            var sector = segment.sector;
	            var seriesIndex = segment.seriesIx;
	            sector.radius = radius;
	            sector.center = center;

	            if (seriesConfigs.length) {
	                var seriesConfig = seriesConfigs[seriesIndex];
	                sector.innerRadius = seriesConfig.innerRadius;
	                sector.radius = seriesConfig.radius;
	            }

	            if (seriesIndex === seriesCount - 1 && segment.explode) {
	                sector.center = sector.clone().setRadius(sector.radius * 0.15).point(sector.middle());
	            }

	            segment.reflow(newBox);

	            var label = segment.label;
	            if (label) {
	                if (label.options.position === OUTSIDE_END) {
	                    if (seriesIndex === seriesCount - 1) {
	                        if (label.orientation === RIGHT) {
	                            rightSideLabels.push(label);
	                        } else {
	                            leftSideLabels.push(label);
	                        }
	                    }
	                }
	            }
	        }

	        if (leftSideLabels.length > 0) {
	            leftSideLabels.sort(this.labelComparator(true));
	            this.leftLabelsReflow(leftSideLabels);
	        }

	        if (rightSideLabels.length > 0) {
	            rightSideLabels.sort(this.labelComparator(false));
	            this.rightLabelsReflow(rightSideLabels);
	        }

	        this.box = newBox;
	    },

	    leftLabelsReflow: function(labels) {
	        var distances = this.distanceBetweenLabels(labels);

	        this.distributeLabels(distances, labels);
	    },

	    rightLabelsReflow: function(labels) {
	        var distances = this.distanceBetweenLabels(labels);

	        this.distributeLabels(distances, labels);
	    },

	    distanceBetweenLabels: function(labels) {
	        var segment = last(this.points);
	        var sector = segment.sector;
	        var count = labels.length - 1;
	        var lr = sector.radius + segment.options.labels.distance;
	        var distances = [];
	        var firstBox = labels[0].box;
	        var distance = round(firstBox.y1 - (sector.center.y - lr - firstBox.height() - firstBox.height() / 2));

	        distances.push(distance);

	        for (var i = 0; i < count; i++) {
	            var secondBox = labels[i + 1].box;

	            firstBox = labels[i].box;
	            distance = round(secondBox.y1 - firstBox.y2);
	            distances.push(distance);
	        }
	        distance = round(sector.center.y + lr - labels[count].box.y2 - labels[count].box.height() / 2);
	        distances.push(distance);

	        return distances;
	    },

	    distributeLabels: function(distances, labels) {
	        var this$1 = this;

	        var count = distances.length;
	        var left, right, remaining;

	        for (var i = 0; i < count; i++) {
	            remaining = -distances[i];
	            left = right = i;

	            while (remaining > 0 && (left >= 0 || right < count)) {
	                remaining = this$1._takeDistance(distances, i, --left, remaining);
	                remaining = this$1._takeDistance(distances, i, ++right, remaining);
	            }
	        }

	        this.reflowLabels(distances, labels);
	    },

	    _takeDistance: function(distances, anchor, position, amount) {
	        var result = amount;
	        if (distances[position] > 0) {
	            var available = Math.min(distances[position], result);
	            result -= available;
	            distances[position] -= available;
	            distances[anchor] += available;
	        }

	        return result;
	    },

	    reflowLabels: function(distances, labels) {
	        var this$1 = this;

	        var segment = last(this.points);
	        var sector = segment.sector;
	        var labelOptions = segment.options.labels;
	        var labelsCount = labels.length;
	        var labelDistance = labelOptions.distance;
	        var boxY = sector.center.y - (sector.radius + labelDistance) - labels[0].box.height();
	        var boxX;

	        distances[0] += 2;
	        for (var i = 0; i < labelsCount; i++) {
	            var label = labels[i];
	            var box = label.box;

	            boxY += distances[i];
	            boxX = this$1.hAlignLabel(
	                box.x2,
	                sector.clone().expand(labelDistance),
	                boxY,
	                boxY + box.height(),
	                label.orientation === RIGHT);

	            if (label.orientation === RIGHT) {
	                if (labelOptions.align !== CIRCLE) {
	                    boxX = sector.radius + sector.center.x + labelDistance;
	                }
	                label.reflow(new Box(boxX + box.width(), boxY, boxX, boxY));
	            } else {
	                if (labelOptions.align !== CIRCLE) {
	                    boxX = sector.center.x - sector.radius - labelDistance;
	                }
	                label.reflow(new Box(boxX - box.width(), boxY, boxX, boxY));
	            }

	            boxY += box.height();
	        }
	    },

	    createVisual: function() {
	        var this$1 = this;

	        var ref = this;
	        var connectors = ref.options.connectors;
	        var points = ref.points;
	        var count = points.length;
	        var space = 4;

	        ChartElement.fn.createVisual.call(this);

	        this._connectorLines = [];

	        for (var i = 0; i < count; i++) {
	            var segment = points[i];
	            var sector = segment.sector;
	            var label = segment.label;
	            var angle = sector.middle();
	            var connectorsColor = (segment.options.connectors || {}).color || connectors.color;

	            if (label) {
	                var connectorLine = new Path({
	                    stroke: {
	                        color: connectorsColor,
	                        width: connectors.width
	                    },
	                    animation: {
	                        type: FADEIN,
	                        delay: segment.animationDelay
	                    }
	                });

	                if (label.options.position === OUTSIDE_END) {
	                    var box = label.box;
	                    var centerPoint = sector.center;
	                    var start = sector.point(angle);
	                    var middle = new Point(box.x1, box.center().y);
	                    var sr = (void 0), end = (void 0), crossing = (void 0);

	                    start = sector.clone().expand(connectors.padding).point(angle);
	                    connectorLine.moveTo(start.x, start.y);
	                    // TODO: Extract into a method to remove duplication
	                    if (label.orientation === RIGHT) {
	                        end = new Point(box.x1 - connectors.padding, box.center().y);
	                        crossing = intersection(centerPoint, start, middle, end);
	                        middle = new Point(end.x - space, end.y);
	                        crossing = crossing || middle;
	                        crossing.x = Math.min(crossing.x, middle.x);

	                        if (this$1.pointInCircle(crossing, sector.center, sector.radius + space) ||
	                            crossing.x < sector.center.x) {
	                            sr = sector.center.x + sector.radius + space;
	                            if (segment.options.labels.align !== COLUMN) {
	                                if (sr < middle.x) {
	                                    connectorLine.lineTo(sr, start.y);
	                                } else {
	                                    connectorLine.lineTo(start.x + space * 2, start.y);
	                                }
	                            } else {
	                                connectorLine.lineTo(sr, start.y);
	                            }
	                            connectorLine.lineTo(middle.x, end.y);
	                        } else {
	                            crossing.y = end.y;
	                            connectorLine.lineTo(crossing.x, crossing.y);
	                        }
	                    } else {
	                        end = new Point(box.x2 + connectors.padding, box.center().y);
	                        crossing = intersection(centerPoint, start, middle, end);
	                        middle = new Point(end.x + space, end.y);
	                        crossing = crossing || middle;
	                        crossing.x = Math.max(crossing.x, middle.x);

	                        if (this$1.pointInCircle(crossing, sector.center, sector.radius + space) ||
	                            crossing.x > sector.center.x) {
	                            sr = sector.center.x - sector.radius - space;
	                            if (segment.options.labels.align !== COLUMN) {
	                                if (sr > middle.x) {
	                                    connectorLine.lineTo(sr, start.y);
	                                } else {
	                                    connectorLine.lineTo(start.x - space * 2, start.y);
	                                }
	                            } else {
	                                connectorLine.lineTo(sr, start.y);
	                            }
	                            connectorLine.lineTo(middle.x, end.y);
	                        } else {
	                            crossing.y = end.y;
	                            connectorLine.lineTo(crossing.x, crossing.y);
	                        }
	                    }

	                    connectorLine.lineTo(end.x, end.y);

	                    this$1._connectorLines.push(connectorLine);
	                    this$1.visual.append(connectorLine);
	                }
	            }
	        }
	    },

	    labelComparator: function(reverse) {
	        var reverseValue = reverse ? -1 : 1;

	        return function(a, b) {
	            var first = (a.parent.sector.middle() + 270) % 360;
	            var second = (b.parent.sector.middle() + 270) % 360;
	            return (first - second) * reverseValue;
	        };
	    },

	    hAlignLabel: function(originalX, sector, y1, y2, direction) {
	        var radius = sector.radius;
	        var sector_center = sector.center;
	        var cx = sector_center.x;
	        var cy = sector_center.y;
	        var t = Math.min(Math.abs(cy - y1), Math.abs(cy - y2));

	        if (t > radius) {
	            return originalX;
	        }

	        return cx + Math.sqrt((radius * radius) - (t * t)) * (direction ? 1 : -1);
	    },

	    pointInCircle: function(point, center, radius) {
	        return Math.pow(center.x - point.x, 2) + Math.pow(center.y - point.y, 2) < Math.pow(radius, 2);
	    },

	    formatPointValue: function(point, format) {
	        return this.chartService.format.auto(format, point.value);
	    },

	    animationDelay: function(categoryIndex) {
	        return categoryIndex * PIE_SECTOR_ANIM_DELAY;
	    }
	});

	function intersection(a1, a2, b1, b2) {
	    var uat = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
	    var ub = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

	    var result;
	    if (ub !== 0) {
	        var ua = (uat / ub);

	        result = new Point(
	            a1.x + ua * (a2.x - a1.x),
	            a1.y + ua * (a2.y - a1.y)
	        );
	    }

	    return result;
	}

	setDefaultOptions(PieChart, {
	    startAngle: 90,
	    connectors: {
	        width: 2,
	        color: "#939393",
	        padding: 8
	    },
	    inactiveItems: {
	        markers: {},
	        labels: {}
	    }
	});

	deepExtend(PieChart.prototype, PieChartMixin);

	var PiePlotArea = PlotAreaBase.extend({
	    render: function() {
	        this.createPieChart(this.series);
	    },

	    createPieChart: function(series) {
	        var firstSeries = series[0];
	        var pieChart = new PieChart(this, {
	            series: series,
	            padding: firstSeries.padding,
	            startAngle: firstSeries.startAngle,
	            connectors: firstSeries.connectors,
	            legend: this.options.legend
	        });

	        this.appendChart(pieChart);
	    },

	    appendChart: function(chart, pane) {
	        PlotAreaBase.fn.appendChart.call(this, chart, pane);
	        append(this.options.legend.items, chart.legendItems);
	    }
	});

	var DonutSegment = PieSegment.extend({
	    reflowLabel: function() {
	        var ref = this;
	        var labelsOptions = ref.options.labels;
	        var label = ref.label;
	        var sector = this.sector.clone();
	        var angle = sector.middle();

	        if (label) {
	            var labelHeight = label.box.height();
	            if (labelsOptions.position === CENTER) {
	                sector.radius -= (sector.radius - sector.innerRadius) / 2;

	                var lp = sector.point(angle);

	                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
	            } else {
	                PieSegment.fn.reflowLabel.call(this);
	            }
	        }
	    },

	    createSegment: function(sector, options) {
	        return dataviz.ShapeBuilder.current.createRing(sector, options);
	    }
	});

	setDefaultOptions(DonutSegment, {
	    overlay: {
	        gradient: "roundedGlass"
	    },
	    labels: {
	        position: CENTER
	    },
	    animation: {
	        type: PIE
	    }
	});

	deepExtend(DonutSegment.prototype, PointEventsMixin);

	var DONUT_SECTOR_ANIM_DELAY = 50;

	var DonutChart = PieChart.extend({
	    addValue: function(value, sector, fields) {
	        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });
	        this.evalSegmentOptions(segmentOptions, value, fields);

	        this.createLegendItem(value, segmentOptions, fields);

	        if (!value || fields.visible === false) {
	            return;
	        }

	        var segment = new DonutSegment(value, sector, segmentOptions);

	        $.extend(segment, fields);
	        this.append(segment);
	        this.points.push(segment);
	    },

	    reflow: function(targetBox) {
	        var this$1 = this;

	        var options = this.options;
	        var box = targetBox.clone();
	        var space = 5;
	        var minWidth = Math.min(box.width(), box.height());
	        var halfMinWidth = minWidth / 2;
	        var defaultPadding = minWidth - minWidth * 0.85;
	        var series = options.series;
	        var seriesCount = series.length;

	        var padding = valueOrDefault(options.padding, defaultPadding);
	        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;

	        var totalSize = halfMinWidth - padding;
	        var seriesWithoutSize = 0;
	        var holeSize;

	        for (var i = 0; i < seriesCount; i++) {
	            var currentSeries = series[i];
	            if (i === 0) {
	                if (defined(currentSeries.holeSize)) {
	                    holeSize = currentSeries.holeSize;
	                    totalSize -= currentSeries.holeSize;
	                }
	            }

	            if (defined(currentSeries.size)) {
	                totalSize -= currentSeries.size;
	            } else {
	                seriesWithoutSize++;
	            }

	            if (defined(currentSeries.margin) && i !== seriesCount - 1) {
	                totalSize -= currentSeries.margin;
	            }
	        }

	        if (!defined(holeSize)) {
	            var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);
	            holeSize = currentSize * 0.75;
	            totalSize -= holeSize;
	        }

	        var innerRadius = holeSize;
	        var margin = 0;
	        var size, radius;

	        this.seriesConfigs = [];

	        for (var i$1 = 0; i$1 < seriesCount; i$1++) {
	            var currentSeries$1 = series[i$1];
	            size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);
	            innerRadius += margin;
	            radius = innerRadius + size;
	            this$1.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });
	            margin = currentSeries$1.margin || 0;
	            innerRadius = radius;
	        }

	        PieChart.fn.reflow.call(this, targetBox);
	    },

	    animationDelay: function(categoryIndex, seriesIndex, seriesCount) {
	        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +
	            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));
	    }
	});

	setDefaultOptions(DonutChart, {
	    startAngle: 90,
	    connectors: {
	        width: 2,
	        color: "#939393",
	        padding: 8
	    }
	});

	var DonutPlotArea = PiePlotArea.extend({
	    render: function() {
	        this.createDonutChart(this.series);
	    },

	    createDonutChart: function(series) {
	        var firstSeries = series[0];
	        var donutChart = new DonutChart(this, {
	            series: series,
	            padding: firstSeries.padding,
	            connectors: firstSeries.connectors,
	            legend: this.options.legend
	        });

	        this.appendChart(donutChart);
	    }
	});

	var DEFAULT_PADDING = 0.15;

	var PolarPlotAreaBase = PlotAreaBase.extend({
	    initFields: function() {
	        this.valueAxisRangeTracker = new AxisGroupRangeTracker();
	    },

	    render: function() {
	        this.addToLegend(this.series);
	        this.createPolarAxis();
	        this.createCharts();
	        this.createValueAxis();
	    },

	    alignAxes: function() {
	        var axis = this.valueAxis;
	        var range = axis.range();
	        var crossingValue = axis.options.reverse ? range.max : range.min;
	        var slot = axis.getSlot(crossingValue);
	        var center = this.polarAxis.getSlot(0).center;
	        var axisBox = axis.box.translate(
	            center.x - slot.x1,
	            center.y - slot.y1
	        );

	        axis.reflow(axisBox);
	    },

	    createValueAxis: function() {
	        var tracker = this.valueAxisRangeTracker;
	        var defaultRange = tracker.query();
	        var axisOptions = this.valueAxisOptions({
	            roundToMajorUnit: false,
	            zIndex: -1
	        });
	        var axisType, axisDefaultRange;

	        if (axisOptions.type === LOGARITHMIC) {
	            axisType = dataviz.RadarLogarithmicAxis;
	            axisDefaultRange = { min: 0.1, max: 1 };
	        } else {
	            axisType = dataviz.RadarNumericAxis;
	            axisDefaultRange = { min: 0, max: 1 };
	        }

	        var range = tracker.query(name) || defaultRange || axisDefaultRange;

	        if (range && defaultRange) {
	            range.min = Math.min(range.min, defaultRange.min);
	            range.max = Math.max(range.max, defaultRange.max);
	        }

	        var valueAxis = new axisType(
	            range.min, range.max,
	            axisOptions,
	            this.chartService
	        );

	        this.valueAxis = valueAxis;
	        this.appendAxis(valueAxis);
	    },

	    reflowAxes: function() {
	        var ref = this;
	        var options = ref.options.plotArea;
	        var valueAxis = ref.valueAxis;
	        var polarAxis = ref.polarAxis;
	        var box = ref.box;
	        var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;
	        var padding = getSpacing(options.padding || {}, defaultPadding);
	        var paddingBox = box.clone().unpad(padding);
	        var axisBox = paddingBox.clone();

	        axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());
	        axisBox.align(paddingBox, Y, CENTER);

	        var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);

	        polarAxis.reflow(axisBox);
	        valueAxis.reflow(valueAxisBox);
	        var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();
	        valueAxis.reflow(valueAxis.box.unpad({ top: heightDiff }));

	        this.axisBox = axisBox;
	        this.alignAxes(axisBox);
	    },

	    backgroundBox: function() {
	        return this.box;
	    }
	});

	var PolarScatterChart = ScatterChart.extend({
	    pointSlot: function(slotX, slotY) {
	        var valueRadius = slotX.center.y - slotY.y1;
	        var slot = Point.onCircle(slotX.center, slotX.startAngle, valueRadius);

	        return new Box(slot.x, slot.y, slot.x, slot.y);
	    }
	});

	setDefaultOptions(PolarScatterChart, {
	    clip: false
	});

	var PolarLineChart = ScatterLineChart.extend({

	});

	PolarLineChart.prototype.pointSlot = PolarScatterChart.prototype.pointSlot;

	setDefaultOptions(PolarLineChart, {
	    clip: false
	});

	var SplinePolarAreaSegment = SplineAreaSegment.extend({
	    fillToAxes: function(fillPath) {
	        var center = this._polarAxisCenter();
	        fillPath.lineTo(center.x, center.y);
	    },

	    _polarAxisCenter: function() {
	        var polarAxis = this.parent.plotArea.polarAxis;
	        var center = polarAxis.box.center();
	        return center;
	    },

	    strokeSegments: function() {
	        var segments = this._strokeSegments;

	        if (!segments) {
	            var center = this._polarAxisCenter();
	            var curveProcessor = new CurveProcessor(false);
	            var linePoints = this.points();

	            linePoints.push(center);
	            segments = this._strokeSegments = curveProcessor.process(linePoints);
	            segments.pop();
	        }

	        return segments;
	    }
	});

	var PolarAreaSegment = AreaSegment.extend({
	    fillToAxes: function(fillPath) {
	        var polarAxis = this.parent.plotArea.polarAxis;
	        var center = polarAxis.box.center();
	        var centerSegment = new geometry.Segment([ center.x, center.y ]);

	        fillPath.segments.unshift(centerSegment);
	        fillPath.segments.push(centerSegment);
	    }
	});

	var PolarAreaChart = PolarLineChart.extend({
	    createSegment: function(linePoints, currentSeries, seriesIx) {
	        var style = (currentSeries.line || {}).style;
	        var segment;

	        if (style === SMOOTH) {
	            segment = new SplinePolarAreaSegment(linePoints, currentSeries, seriesIx);
	        } else {
	            segment = new PolarAreaSegment(linePoints, currentSeries, seriesIx);
	        }
	        return segment;
	    },

	    createMissingValue: function(value, missingValues) {
	        var missingValue;

	        if (hasValue(value.x) && missingValues !== INTERPOLATE) {
	            missingValue = {
	                x: value.x,
	                y: value.y
	            };
	            if (missingValues === ZERO) {
	                missingValue.y = 0;
	            }
	        }

	        return missingValue;
	    },

	    seriesMissingValues: function(series) {
	        return series.missingValues || ZERO;
	    },

	    _hasMissingValuesGap: function() {
	        var this$1 = this;

	        var series = this.options.series;

	        for (var idx = 0; idx < series.length; idx++) {
	            if (this$1.seriesMissingValues(series[idx]) === GAP) {
	                return true;
	            }
	        }
	    },

	    sortPoints: function(points) {
	        var this$1 = this;

	        points.sort(xComparer);

	        if (this._hasMissingValuesGap()) {
	            for (var idx = 0; idx < points.length; idx++) {
	                var point = points[idx];
	                if (point) {
	                    var value = point.value;
	                    if (!hasValue(value.y) && this$1.seriesMissingValues(point.series) === GAP) {
	                        delete points[idx];
	                    }
	                }
	            }
	        }

	        return points;
	    }
	});

	function xComparer(a, b) {
	    return a.value.x - b.value.x;
	}

	var PolarPlotArea = PolarPlotAreaBase.extend({
	    createPolarAxis: function() {
	        var polarAxis = new dataviz.PolarAxis(this.options.xAxis, this.chartService);

	        this.polarAxis = polarAxis;
	        this.axisX = polarAxis;
	        this.appendAxis(polarAxis);
	    },

	    valueAxisOptions: function(defaults) {
	        return deepExtend(defaults, {
	            majorGridLines: { type: ARC },
	            minorGridLines: { type: ARC }
	        }, this.options.yAxis);
	    },

	    createValueAxis: function() {
	        PolarPlotAreaBase.fn.createValueAxis.call(this);
	        this.axisY = this.valueAxis;
	    },

	    appendChart: function(chart, pane) {
	        this.valueAxisRangeTracker.update(chart.yAxisRanges);

	        PlotAreaBase.prototype.appendChart.call(this, chart, pane);
	    },

	    createCharts: function() {
	        var series = this.filterVisibleSeries(this.series);
	        var pane = this.panes[0];

	        this.createLineChart(
	            filterSeriesByType(series, [ POLAR_LINE ]),
	            pane
	        );

	        this.createScatterChart(
	            filterSeriesByType(series, [ POLAR_SCATTER ]),
	            pane
	        );

	        this.createAreaChart(
	            filterSeriesByType(series, [ POLAR_AREA ]),
	            pane
	        );
	    },

	    createLineChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var lineChart = new PolarLineChart(this, { series: series });

	        this.appendChart(lineChart, pane);
	    },

	    createScatterChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var scatterChart = new PolarScatterChart(this, { series: series });

	        this.appendChart(scatterChart, pane);
	    },

	    createAreaChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var areaChart = new PolarAreaChart(this, { series: series });

	        this.appendChart(areaChart, pane);
	    },

	    _dispatchEvent: function(chart, e, eventType) {
	        var coords = chart._eventCoordinates(e);
	        var point = new Point(coords.x, coords.y);
	        var xValue = this.axisX.getValue(point);
	        var yValue = this.axisY.getValue(point);

	        if (xValue !== null && yValue !== null) {
	            chart.trigger(eventType, {
	                element: eventElement(e),
	                x: xValue,
	                y: yValue
	            });
	        }
	    },

	    createCrosshairs: function() {}
	});

	setDefaultOptions(PolarPlotArea, {
	    xAxis: {},
	    yAxis: {}
	});

	deepExtend(PolarPlotArea.prototype, PlotAreaEventsMixin);

	var RadarLineChart = LineChart.extend({
	    pointSlot: function(categorySlot, valueSlot) {
	        var valueRadius = categorySlot.center.y - valueSlot.y1;
	        var slot = Point.onCircle(categorySlot.center, categorySlot.middle(), valueRadius);

	        return new Box(slot.x, slot.y, slot.x, slot.y);
	    },

	    createSegment: function(linePoints, currentSeries, seriesIx) {
	        var style = currentSeries.style;
	        var pointType;

	        if (style === SMOOTH) {
	            pointType = SplineSegment;
	        } else {
	            pointType = LineSegment;
	        }

	        var segment = new pointType(linePoints, currentSeries, seriesIx);

	        if (linePoints.length === currentSeries.data.length) {
	            segment.options.closed = true;
	        }

	        return segment;
	    }
	});

	setDefaultOptions(RadarLineChart, {
	    clip: false,
	    limitPoints: false
	});

	var SplineRadarAreaSegment = SplineAreaSegment.extend({
	    fillToAxes: function() {}
	});

	var RadarAreaSegment = AreaSegment.extend({
	    fillToAxes: function() {}
	});

	var RadarAreaChart = RadarLineChart.extend({
	    createSegment: function(linePoints, currentSeries, seriesIx, prevSegment) {
	        var isStacked = this.options.isStacked;
	        var style = (currentSeries.line || {}).style;
	        var previousSegment;
	        var stackPoints;
	        var segment;

	        if (isStacked && seriesIx > 0 && prevSegment) {
	            stackPoints = prevSegment.linePoints.slice(0);
	            previousSegment = prevSegment;
	        }

	        if (style === SMOOTH) {
	            segment = new SplineRadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
	            segment.options.closed = true;
	        } else {
	            linePoints.push(linePoints[0]);
	            segment = new RadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
	        }

	        return segment;
	    },

	    seriesMissingValues: function(series) {
	        return series.missingValues || ZERO;
	    }
	});

	var RadarSegment = DonutSegment.extend({
	    init: function(value, options) {
	        DonutSegment.fn.init.call(this, value, null, options);
	    }
	});

	setDefaultOptions(RadarSegment, {
	    overlay: {
	        gradient: "none"
	    },
	    labels: {
	        distance: 10
	    }
	});

	var RadarClusterLayout = ChartElement.extend({
	    init: function(options) {
	        ChartElement.fn.init.call(this, options);

	        this.forEach = options.rtl ? forEachReverse : forEach;
	    },

	    reflow: function(sector) {
	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var gap = options.gap;
	        var spacing = options.spacing;
	        var count = children.length;
	        var slots = count + gap + (spacing * (count - 1));
	        var slotAngle = sector.angle / slots;
	        var angle = sector.startAngle + slotAngle * (gap / 2);

	        this.forEach(children, function (child) {
	            var slotSector = sector.clone();
	            slotSector.startAngle = angle;
	            slotSector.angle = slotAngle;

	            if (child.sector) {
	                slotSector.radius = child.sector.radius;
	            }

	            child.reflow(slotSector);
	            child.sector = slotSector;

	            angle += slotAngle + (slotAngle * spacing);
	        });
	    }
	});

	setDefaultOptions(RadarClusterLayout, {
	    gap: 1,
	    spacing: 0
	});

	var RadarStackLayout = ChartElement.extend({
	    reflow: function(sector) {
	        var ref = this;
	        var reverse = ref.options.reverse;
	        var children = ref.children;
	        var childrenCount = children.length;
	        var first = reverse ? childrenCount - 1 : 0;
	        var step = reverse ? -1 : 1;

	        this.box = new Box();

	        for (var i = first; i >= 0 && i < childrenCount; i += step) {
	            var childSector = children[i].sector;
	            childSector.startAngle = sector.startAngle;
	            childSector.angle = sector.angle;
	        }
	    }
	});

	var RadarBarChart = BarChart.extend({
	    pointType: function() {
	        return RadarSegment;
	    },

	    clusterType: function() {
	        return RadarClusterLayout;
	    },

	    stackType: function() {
	        return RadarStackLayout;
	    },

	    categorySlot: function(categoryAxis, categoryIx) {
	        return categoryAxis.getSlot(categoryIx);
	    },

	    pointSlot: function(categorySlot, valueSlot) {
	        var slot = categorySlot.clone();
	        var y = categorySlot.center.y;

	        slot.radius = y - valueSlot.y1;
	        slot.innerRadius = y - valueSlot.y2;

	        return slot;
	    },

	    reflowPoint: function(point, pointSlot) {
	        point.sector = pointSlot;
	        point.reflow();
	    },

	    createAnimation: function() {
	        this.options.animation.center = this.box.toRect().center();
	        BarChart.fn.createAnimation.call(this);
	    }
	});

	RadarBarChart.prototype.reflow = CategoricalChart.prototype.reflow;

	setDefaultOptions(RadarBarChart, {
	    clip: false,
	    limitPoints: false,
	    animation: {
	        type: "pie"
	    }
	});

	var RadarPlotArea = PolarPlotAreaBase.extend({
	    createPolarAxis: function() {
	        var categoryAxis = new dataviz.RadarCategoryAxis(this.options.categoryAxis, this.chartService);

	        this.polarAxis = categoryAxis;
	        this.categoryAxis = categoryAxis;
	        this.appendAxis(categoryAxis);
	        this.aggregateCategories();
	        this.createCategoryAxesLabels();
	    },

	    valueAxisOptions: function(defaults) {
	        if (this._hasBarCharts) {
	            deepExtend(defaults, {
	                majorGridLines: { type: ARC },
	                minorGridLines: { type: ARC }
	            });
	        }

	        if (this._isStacked100) {
	            deepExtend(defaults, {
	                roundToMajorUnit: false,
	                labels: { format: "P0" }
	            });
	        }

	        return deepExtend(defaults, this.options.valueAxis);
	    },

	    aggregateCategories: function() {
	        // No separate panes in radar charts
	        CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);
	    },

	    createCategoryAxesLabels: function() {
	        CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);
	    },

	    filterSeries: function(currentSeries) {
	        // Not supported for radar charts
	        return currentSeries;
	    },

	    createCharts: function() {
	        var series = this.filterVisibleSeries(this.series);
	        var pane = this.panes[0];

	        this.createAreaChart(
	            filterSeriesByType(series, [ RADAR_AREA ]),
	            pane
	        );

	        this.createLineChart(
	            filterSeriesByType(series, [ RADAR_LINE ]),
	            pane
	        );

	        this.createBarChart(
	            filterSeriesByType(series, [ RADAR_COLUMN ]),
	            pane
	        );
	    },

	    chartOptions: function(series) {
	        var options = { series: series };
	        var firstSeries = series[0];
	        if (firstSeries) {
	            var filteredSeries = this.filterVisibleSeries(series);
	            var stack = firstSeries.stack;
	            options.isStacked = stack && filteredSeries.length > 1;
	            options.isStacked100 = stack && stack.type === "100%" && filteredSeries.length > 1;

	            if (options.isStacked100) {
	                this._isStacked100 = true;
	            }
	        }

	        return options;
	    },

	    createAreaChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var areaChart = new RadarAreaChart(this, this.chartOptions(series));
	        this.appendChart(areaChart, pane);
	    },

	    createLineChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var lineChart = new RadarLineChart(this, this.chartOptions(series));
	        this.appendChart(lineChart, pane);
	    },

	    createBarChart: function(series, pane) {
	        if (series.length === 0) {
	            return;
	        }

	        var firstSeries = series[0];
	        var options = this.chartOptions(series);
	        options.gap = firstSeries.gap;
	        options.spacing = firstSeries.spacing;

	        var barChart = new RadarBarChart(this, options);
	        this.appendChart(barChart, pane);

	        this._hasBarCharts = true;
	    },

	    seriesCategoryAxis: function() {
	        return this.categoryAxis;
	    },

	    _dispatchEvent: function(chart, e, eventType) {
	        var coords = chart._eventCoordinates(e);
	        var point = new Point(coords.x, coords.y);
	        var category = this.categoryAxis.getCategory(point);
	        var value = this.valueAxis.getValue(point);

	        if (category !== null && value !== null) {
	            chart.trigger(eventType, {
	                element: eventElement(e),
	                category: category,
	                value: value
	            });
	        }
	    },

	    createCrosshairs: function() {}
	});

	deepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {
	    appendChart: CategoricalPlotArea.prototype.appendChart,
	    aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries
	});

	setDefaultOptions(RadarPlotArea, {
	    categoryAxis: {
	        categories: []
	    },
	    valueAxis: {}
	});

	var FunnelSegment = ChartElement.extend({
	    init: function(value, options, segmentOptions) {
	        ChartElement.fn.init.call(this, options);

	        this.value = value;
	        this.options.index = segmentOptions.index;
	    },

	    reflow: function(chartBox) {
	        var points = this.points;
	        var label = this.children[0];

	        this.box = new Box(points[0].x, points[0].y, points[1].x, points[2].y);

	        if (label) {
	            label.reflow(new Box(chartBox.x1, points[0].y, chartBox.x2, points[2].y));
	        }
	    },

	    createVisual: function() {
	        var this$1 = this;

	        var options = this.options;
	        var visual;

	        ChartElement.fn.createVisual.call(this);

	        if (options.visual) {
	            visual = options.visual({
	                category: this.category,
	                dataItem: this.dataItem,
	                value: this.value,
	                series: this.series,
	                percentage: this.percentage,
	                points: this.points,
	                options: options,
	                sender: this.getSender(),
	                createVisual: function () { return this$1.createPath(); }
	            });
	        } else {
	            visual = this.createPath();
	        }

	        if (visual) {
	            this.visual.append(visual);
	        }
	    },

	    createPath: function() {
	        var options = this.options;
	        var border = options.border;
	        var path = Path.fromPoints(this.points, {
	            fill: {
	                color: options.color,
	                opacity: options.opacity
	            },
	            stroke: {
	                color: border.color,
	                opacity: border.opacity,
	                width: border.width
	            }
	        }).close();

	        return path;
	    },

	    createHighlight: function(style) {
	        return Path.fromPoints(this.points, style);
	    },

	    highlightVisual: function() {
	        return this.visual.children[0];
	    },

	    highlightVisualArgs: function() {
	        var path = Path.fromPoints(this.points).close();

	        return {
	            options: this.options,
	            path: path
	        };
	    },

	    tooltipAnchor: function() {
	        var box = this.box;
	        return {
	            point: new Point(box.center().x, box.y1),
	            align: {
	                horizontal: "center",
	                vertical: "top"
	            }
	        };
	    },

	    formatValue: function(format) {
	        var point = this;
	        return point.owner.formatPointValue(point, format);
	    }
	});

	setDefaultOptions(FunnelSegment, {
	    color: WHITE,
	    border: {
	        width: 1
	    }
	});

	deepExtend(FunnelSegment.prototype, PointEventsMixin);

	var FunnelChart = ChartElement.extend({
	    init: function(plotArea, options) {
	        ChartElement.fn.init.call(this, options);

	        this.plotArea = plotArea;
	        this.points = [];
	        this.labels = [];
	        this.legendItems = [];
	        this.render();
	    },

	    formatPointValue: function(point, format) {
	        return this.chartService.format.auto(format,point.value);
	    },

	    render: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var seriesColors = ref.plotArea.options.seriesColors; if (seriesColors === void 0) { seriesColors = []; }
	        var series = options.series[0];
	        var data = series.data;

	        if (!data) {
	            return;
	        }

	        var ref$1 = bindSegments(series);
	        var total = ref$1.total;
	        var points = ref$1.points;

	        for (var i = 0; i < points.length; i++) {
	            var pointData = points[i];

	            if (!pointData) {
	                continue;
	            }

	            var fields = pointData.fields;

	            if (!isFunction(series.color)) {
	                series.color = fields.color || seriesColors[i % seriesColors.length];
	            }

	            fields = deepExtend({
	                index: i,
	                owner: this$1,
	                series: series,
	                dataItem: data[i],
	                percentage: pointData.value / total
	            }, fields, { visible: pointData.visible });

	            var value = pointData.valueFields.value;
	            var segment = this$1.createSegment(value, fields);
	            var label = this$1.createLabel(value, fields);

	            if (segment && label) {
	                segment.append(label);
	            }
	        }
	    },

	    evalSegmentOptions: function(options, value, fields) {
	        var series = fields.series;

	        evalOptions(options, {
	            value: value,
	            series: series,
	            dataItem: fields.dataItem,
	            index: fields.index
	        }, { defaults: series._defaults, excluded: [ "data", "content", "template", "toggle", "visual" ] });
	    },

	    createSegment: function(value, fields) {
	        var seriesOptions = deepExtend({}, fields.series);
	        this.evalSegmentOptions(seriesOptions, value, fields);

	        this.createLegendItem(value, seriesOptions, fields);

	        if (fields.visible !== false) {

	            var segment = new FunnelSegment(value, seriesOptions, fields);
	            $.extend(segment, fields);

	            this.append(segment);
	            this.points.push(segment);

	            return segment;
	        }
	    },

	    createLabel: function(value, fields) {
	        var series = fields.series;
	        var dataItem = fields.dataItem;
	        var labels = deepExtend({}, this.options.labels, series.labels);
	        var text = value;

	        if (labels.visible) {
	            var labelTemplate = getTemplate(labels);
	            if (labelTemplate) {
	                text = labelTemplate({
	                    dataItem: dataItem,
	                    value: value,
	                    percentage: fields.percentage,
	                    category: fields.category,
	                    series: series
	                });
	            } else if (labels.format) {
	                text = this.plotArea.chartService.format.auto(labels.format, text);
	            }

	            if (!labels.color) {
	                var brightnessValue = new Color(series.color).percBrightness();
	                if (brightnessValue > 180) {
	                    labels.color = BLACK;
	                } else {
	                    labels.color = WHITE;
	                }
	                if (!labels.background) {
	                    labels.background = series.color;
	                }
	            }

	            this.evalSegmentOptions(labels, value, fields);
	            var textBox = new TextBox(text, deepExtend({
	                vAlign: labels.position
	            }, labels));

	            this.labels.push(textBox);

	            return textBox;
	        }
	    },

	    labelPadding: function() {
	        var labels = this.labels;
	        var padding = { left: 0, right: 0 };

	        for (var i = 0; i < labels.length; i++) {
	            var label = labels[i];
	            var align = label.options.align;
	            if (align !== CENTER) {
	                var width = labels[i].box.width();

	                if (align === LEFT) {
	                    padding.left = Math.max(padding.left, width);
	                } else {
	                    padding.right = Math.max(padding.right, width);
	                }
	            }
	        }

	        return padding;
	    },

	    dynamicSlopeReflow: function(box, width, totalHeight) {
	        var ref = this;
	        var options = ref.options;
	        var segments = ref.points;
	        var count = segments.length;
	        var firstSegment = segments[0];
	        var maxSegment = firstSegment;

	        for (var idx = 0; idx < segments.length; idx++) {
	            if (segments[idx].percentage > maxSegment.percentage) {
	                maxSegment = segments[idx];
	            }
	        }

	        var lastUpperSide = (firstSegment.percentage / maxSegment.percentage) * width;
	        var previousOffset = (width - lastUpperSide) / 2;
	        var previousHeight = 0;

	        for (var idx$1 = 0; idx$1 < count; idx$1++) {
	            var percentage = segments[idx$1].percentage;
	            var nextSegment = segments[idx$1 + 1];
	            var nextPercentage = (nextSegment ? nextSegment.percentage : percentage);
	            var points = segments[idx$1].points = [];
	            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);
	            var offset = (void 0);

	            if (!percentage) {
	                offset = nextPercentage ? 0 : width / 2;
	            } else {
	                offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;
	            }

	            offset = limitValue(offset, 0, width);

	            points.push(new GeometryPoint(box.x1 + previousOffset, box.y1 + previousHeight));
	            points.push(new GeometryPoint(box.x1 + width - previousOffset, box.y1 + previousHeight));
	            points.push(new GeometryPoint(box.x1 + width - offset, box.y1 + height + previousHeight));
	            points.push(new GeometryPoint(box.x1 + offset, box.y1 + height + previousHeight));

	            previousOffset = offset;
	            previousHeight += height + options.segmentSpacing;
	            lastUpperSide = limitValue(width - 2 * offset, 0, width);
	        }
	    },

	    constantSlopeReflow: function(box, width, totalHeight) {
	        var ref = this;
	        var options = ref.options;
	        var segments = ref.points;
	        var count = segments.length;
	        var decreasingWidth = options.neckRatio <= 1;
	        var neckRatio = decreasingWidth ? options.neckRatio * width : width;
	        var previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;
	        var topMostWidth = decreasingWidth ? width : width - previousOffset * 2;
	        var finalNarrow = (topMostWidth - neckRatio) / 2;
	        var previousHeight = 0;

	        for (var idx = 0; idx < count; idx++) {
	            var points = segments[idx].points = [];
	            var percentage = segments[idx].percentage;
	            var offset = (options.dynamicHeight) ? (finalNarrow * percentage) : (finalNarrow / count);
	            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);

	            points.push(new GeometryPoint(box.x1 + previousOffset, box.y1 + previousHeight));
	            points.push(new GeometryPoint(box.x1 + width - previousOffset, box.y1 + previousHeight));
	            points.push(new GeometryPoint(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));
	            points.push(new GeometryPoint(box.x1 + previousOffset + offset,box.y1 + height + previousHeight));
	            previousOffset += offset;
	            previousHeight += height + options.segmentSpacing;
	        }
	    },

	    reflow: function(chartBox) {
	        var points = this.points;
	        var count = points.length;

	        if (!count) {
	            return;
	        }

	        var options = this.options;
	        var box = chartBox.clone().unpad(this.labelPadding());
	        var totalHeight = box.height() - options.segmentSpacing * (count - 1);
	        var width = box.width();

	        if (options.dynamicSlope) {
	            this.dynamicSlopeReflow(box, width, totalHeight);
	        } else {
	            this.constantSlopeReflow(box, width, totalHeight);
	        }

	        for (var idx = 0; idx < count; idx++) {
	            points[idx].reflow(chartBox);
	        }
	    }
	});

	setDefaultOptions(FunnelChart, {
	    neckRatio: 0.3,
	    width: 300,
	    dynamicSlope: false,
	    dynamicHeight: true,
	    segmentSpacing: 0,
	    labels: {
	        visible: false,
	        align: CENTER,
	        position: CENTER,
	        zIndex: 1
	    }
	});

	deepExtend(FunnelChart.prototype, PieChartMixin);

	var FunnelPlotArea = PlotAreaBase.extend({
	    render: function() {
	        this.createFunnelChart(this.series);
	    },

	    createFunnelChart: function(series) {
	        var firstSeries = series[0];
	        var funnelChart = new FunnelChart(this, {
	            series: series,
	            legend: this.options.legend,
	            neckRatio: firstSeries.neckRatio,
	            dynamicHeight: firstSeries.dynamicHeight,
	            dynamicSlope: firstSeries.dynamicSlope,
	            segmentSpacing: firstSeries.segmentSpacing,
	            highlight: firstSeries.highlight
	        });

	        this.appendChart(funnelChart);
	    },

	    appendChart: function(chart, pane) {
	        PlotAreaBase.fn.appendChart.call(this, chart, pane);
	        append(this.options.legend.items, chart.legendItems);
	    }
	});

	var COLOR = "color";
	var FIRST = "first";
	var FROM = "from";
	var MAX = "max";
	var MIN = "min";
	var NOTE_TEXT = "noteText";
	var SUMMARY_FIELD = "summary";
	var TO = "to";

	PlotAreaFactory.current.register(CategoricalPlotArea, [
	    BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA,
	    CANDLESTICK, OHLC, BULLET, VERTICAL_BULLET, BOX_PLOT, VERTICAL_BOX_PLOT,
	    RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL, RANGE_AREA, VERTICAL_RANGE_AREA
	]);

	PlotAreaFactory.current.register(XYPlotArea, [
	    SCATTER, SCATTER_LINE, BUBBLE
	]);

	PlotAreaFactory.current.register(PiePlotArea, [ PIE ]);
	PlotAreaFactory.current.register(DonutPlotArea, [ DONUT ]);
	PlotAreaFactory.current.register(FunnelPlotArea, [ FUNNEL ]);

	PlotAreaFactory.current.register(PolarPlotArea, [ POLAR_AREA, POLAR_LINE, POLAR_SCATTER ]);
	PlotAreaFactory.current.register(RadarPlotArea, [ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ]);

	SeriesBinder.current.register(
	    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA ],
	    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, ERROR_LOW_FIELD, ERROR_HIGH_FIELD ]
	);

	SeriesBinder.current.register(
	    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],
	    [ FROM, TO ], [ CATEGORY, COLOR, NOTE_TEXT ]
	);

	SeriesBinder.current.register(
	    [ WATERFALL, HORIZONTAL_WATERFALL ],
	    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, SUMMARY_FIELD ]
	);

	SeriesBinder.current.register([ POLAR_AREA, POLAR_LINE, POLAR_SCATTER ], [ X, Y ], [ COLOR ]);
	SeriesBinder.current.register([ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ], [ VALUE ], [ COLOR ]);

	SeriesBinder.current.register(
	    [ FUNNEL ],
	    [ VALUE ], [ CATEGORY, COLOR, "visibleInLegend", "visible" ]
	);

	DefaultAggregates.current.register(
	    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA, WATERFALL, HORIZONTAL_WATERFALL ],
	    { value: MAX, color: FIRST, noteText: FIRST, errorLow: MIN, errorHigh: MAX }
	);

	DefaultAggregates.current.register(
	    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],
	    { from: MIN, to: MAX, color: FIRST, noteText: FIRST }
	);

	DefaultAggregates.current.register(
	    [ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ],
	    { value: MAX, color: FIRST }
	);

	SeriesBinder.current.register(
	    [ SCATTER, SCATTER_LINE, BUBBLE ],
	    [ X, Y ], [ COLOR, NOTE_TEXT, X_ERROR_LOW_FIELD, X_ERROR_HIGH_FIELD, Y_ERROR_LOW_FIELD, Y_ERROR_HIGH_FIELD ]
	);

	SeriesBinder.current.register(
	    [ BUBBLE ], [ X, Y, "size" ], [ COLOR, CATEGORY, NOTE_TEXT ]
	);

	SeriesBinder.current.register(
	    [ CANDLESTICK, OHLC ],
	    [ "open", "high", "low", "close" ], [ CATEGORY, COLOR, "downColor", NOTE_TEXT ]
	);

	DefaultAggregates.current.register(
	    [ CANDLESTICK, OHLC ],
	    { open: MAX, high: MAX, low: MIN, close: MAX,
	      color: FIRST, downColor: FIRST, noteText: FIRST }
	);

	SeriesBinder.current.register(
	    [ BOX_PLOT, VERTICAL_BOX_PLOT ],
	    [ "lower", "q1", "median", "q3", "upper", "mean", "outliers" ], [ CATEGORY, COLOR, NOTE_TEXT ]
	);

	DefaultAggregates.current.register(
	    [ BOX_PLOT, VERTICAL_BOX_PLOT ],
	    { lower: MAX, q1: MAX, median: MAX, q3: MAX, upper: MAX, mean: MAX, outliers: FIRST,
	      color: FIRST, noteText: FIRST }
	);

	SeriesBinder.current.register(
	    [ BULLET, VERTICAL_BULLET ],
	    [ "current", "target" ], [ CATEGORY, COLOR, "visibleInLegend", NOTE_TEXT ]
	);

	DefaultAggregates.current.register(
	    [ BULLET, VERTICAL_BULLET ],
	    { current: MAX, target: MAX, color: FIRST, noteText: FIRST }
	);

	SeriesBinder.current.register(
	    [ PIE, DONUT ],
	    [ VALUE ], [ CATEGORY, COLOR, "explode", "visibleInLegend", "visible" ]
	);

	var AXIS_NAMES = [ CATEGORY, VALUE, X, Y ];

	var MOUSEMOVE = "mousemove";
	var CONTEXTMENU = "contextmenu";
	var MOUSEMOVE_DELAY = 20;

	var Chart = Class.extend({
	    init: function(element, userOptions, themeOptions, context) {
	        var this$1 = this;
	        if (context === void 0) { context = {}; }

	        this.observers = [];
	        this.addObserver(context.observer);
	        this.chartService = new services.ChartService(this, context);
	        this.chartService.theme = themeOptions;

	        this._initElement(element);

	        var options = deepExtend({}, this.options, userOptions);
	        this._originalOptions = deepExtend({}, options);
	        this._theme = themeOptions;
	        this._initTheme(options, themeOptions);

	        this._initSurface();

	        this._initHandlers();

	        this.bindCategories();
	        dataviz.FontLoader.preloadFonts(userOptions, function () {
	            if (!this$1._destroyed) {
	                this$1.trigger('init');
	                this$1._redraw();
	                this$1._attachEvents();
	            }
	        });
	    },

	    _initElement: function(element) {
	        this._setElementClass(element);
	        element.style.position = "relative";
	        while (element.firstChild) {
	            element.removeChild(element.firstChild);
	        }
	        this.element = element;
	    },

	    _setElementClass: function(element) {
	        dataviz.addClass(element, "k-chart");
	    },

	    _initTheme: function(options, themeOptions) {
	        var seriesCopies = [];
	        var series = options.series || [];

	        for (var i = 0; i < series.length; i++) {
	            seriesCopies.push($.extend({}, series[i]));
	        }
	        options.series = seriesCopies;

	        resolveAxisAliases(options);
	        this.applyDefaults(options, themeOptions);

	        // Clean up default if not overriden by data attributes
	        if (options.seriesColors === null) {
	            delete options.seriesColors;
	        }

	        this.options = deepExtend({}, themeOptions, options);
	        this.applySeriesColors();
	    },

	    getSize: function() {
	        return { width: this.element.offsetWidth, height: this.element.offsetHeight };
	        // return kendo.dimensions(this.element);
	    },

	    resize: function(force) {
	        var size = this.getSize();
	        var currentSize = this._size;

	        if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	            this._size = size;
	            this._resize(size, force);
	            this.trigger("resize", size);
	        }
	    },

	    _resize: function() {
	        this._noTransitionsRedraw();
	    },

	    redraw: function(paneName) {
	        this.applyDefaults(this.options);
	        this.applySeriesColors();

	        if (paneName) {
	            var plotArea = this._model._plotArea;
	            var pane = plotArea.findPane(paneName);
	            plotArea.redraw(pane);
	        } else {
	            this._redraw();
	        }
	    },

	    getAxis: function(name) {
	        var axes = this._plotArea.axes;

	        for (var idx = 0; idx < axes.length; idx++) {
	            if (axes[idx].options.name === name) {
	                return new ChartAxis(axes[idx]);
	            }
	        }
	    },

	    findAxisByName: function(name) {
	        return this.getAxis(name);
	    },

	    findPaneByName: function(name) {
	        var panes = this._plotArea.panes;

	        for (var idx = 0; idx < panes.length; idx++) {
	            if (panes[idx].options.name === name) {
	                return new ChartPane(panes[idx]);
	            }
	        }
	    },

	    findPaneByIndex: function(idx) {
	        var panes = this._plotArea.panes;
	        if (panes[idx]) {
	            return new ChartPane(panes[idx]);
	        }
	    },

	    plotArea: function() {
	        return new ChartPlotArea(this._plotArea);
	    },

	    toggleHighlight: function(show, filter) {
	        var plotArea = this._plotArea;
	        var firstSeries = (plotArea.srcSeries || plotArea.series || [])[0];
	        var points;

	        if (isFunction(filter)) {
	            points = plotArea.filterPoints(filter);
	        } else {
	            var seriesName, categoryName;
	            if (isObject(filter)) {
	                seriesName = filter.series;
	                categoryName = filter.category;
	            } else {
	                seriesName = categoryName = filter;
	            }

	            if (firstSeries.type === DONUT) {
	                points = pointByCategoryName(plotArea.pointsBySeriesName(seriesName), categoryName);
	            } else if (firstSeries.type === PIE || firstSeries.type === FUNNEL) {
	                points = pointByCategoryName((plotArea.charts[0] || {}).points, categoryName);
	            } else {
	                points = plotArea.pointsBySeriesName(seriesName);
	            }
	        }

	        if (points) {
	            this.togglePointsHighlight(show, points);
	        }
	    },

	    togglePointsHighlight: function(show, points) {
	        var highlight = this._highlight;
	        for (var idx = 0; idx < points.length; idx++) {
	            highlight.togglePointHighlight(points[idx], show);
	        }
	    },

	    showTooltip: function(filter) {
	        var shared = this._sharedTooltip();
	        var ref = this;
	        var tooltip = ref._tooltip;
	        var plotArea = ref._plotArea;
	        var point, categoryIndex;

	        if (isFunction(filter)) {
	            point = plotArea.findPoint(filter);
	            if (point && shared) {
	                categoryIndex = point.categoryIx;
	            }
	        } else if (shared && defined(filter)) {
	            categoryIndex = plotArea.categoryAxis.categoryIndex(filter);
	        }

	        if (shared) {
	            if (categoryIndex >= 0) {
	                var points = this._plotArea.pointsByCategoryIndex(categoryIndex);
	                tooltip.showAt(points);
	            }
	        } else if (point) {
	            tooltip.show(point);
	        }
	    },

	    hideTooltip: function() {
	        this._tooltip.hide();
	    },

	    _initSurface: function() {
	        var surface = this.surface;
	        var wrap = this._surfaceWrap();

	        var chartArea = this.options.chartArea;
	        if (chartArea.width) {
	            dataviz.elementSize(wrap, { width: chartArea.width });
	        }
	        if (chartArea.height) {
	            dataviz.elementSize(wrap, { height: chartArea.height });
	        }

	        if (!surface || surface.options.type !== this.options.renderAs) {
	            if (surface) {
	                surface.destroy();
	            }

	            this.surface = drawing.Surface.create(wrap, {
	                type: this.options.renderAs
	            });

	        } else {
	            this.surface.clear();
	            this.surface.resize();
	        }
	    },

	    _surfaceWrap: function() {
	        return this.element;
	    },

	    _redraw: function() {
	        var model = this._getModel();

	        this._destroyView();

	        this._model = model;
	        this._plotArea = model._plotArea;

	        model.renderVisual();

	        if (this.options.transitions !== false) {
	            model.traverse(function(element) {
	                if (element.animation) {
	                    element.animation.setup();
	                }
	            });
	        }

	        this._initSurface();
	        this.surface.draw(model.visual);

	        if (this.options.transitions !== false) {
	            model.traverse(function(element) {
	                if (element.animation) {
	                    element.animation.play();
	                }
	            });
	        }

	        this._tooltip = this._createTooltip();
	        this._highlight = new Highlight();
	        this._setupSelection();
	        this._createPannable();
	        this._createZoomSelection();
	        this._createMousewheelZoom();

	        this.trigger(RENDER);

	        if (!this._navState) {
	            this._cancelDomEvents();
	        }
	    },

	    exportVisual: function(exportOptions) {
	        var visual;
	        if (exportOptions && (exportOptions.width || exportOptions.height || exportOptions.options)) {
	            var currentOptions = this.options;
	            var options = deepExtend({}, exportOptions.options, {
	                chartArea: {
	                    width: exportOptions.width,
	                    height: exportOptions.height
	                }
	            });

	            clearMissingValues(this._originalOptions, options);
	            this.options = deepExtend({}, this._originalOptions, options);
	            this._initTheme(this.options, this._theme);
	            this.bindCategories();

	            var model = this._getModel();

	            model.renderVisual();
	            visual = model.visual;

	            this.options = currentOptions;
	        } else {
	            visual = this.surface.exportVisual();
	        }

	        return visual;
	    },

	    _sharedTooltip: function() {
	        return this._plotArea instanceof CategoricalPlotArea && this.options.tooltip.shared;
	    },

	    _createPannable: function() {
	        var options = this.options;
	        if (options.pannable !== false) {
	            this._pannable = new Pannable(this._plotArea, options.pannable);
	        }
	    },

	    _createZoomSelection: function() {
	        var zoomable = this.options.zoomable;
	        var selection = (zoomable || {}).selection;
	        if (zoomable !== false && selection !== false) {
	            this._zoomSelection = new ZoomSelection(this, selection);
	        }
	    },

	    _toggleDomDrag: function() {
	        if (!this.domEvents || !this.domEvents.toggleDrag) {
	            return;
	        }

	        var pannable = this.options.pannable;
	        var zoomable = this.options.zoomable;
	        var selection = (zoomable || {}).selection;
	        if (!pannable && (zoomable === false || selection === false) && !this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ])) {
	            this.domEvents.toggleDrag(false);
	        } else {
	            this.domEvents.toggleDrag(true);
	        }
	    },

	    _createMousewheelZoom: function() {
	        var zoomable = this.options.zoomable;
	        var mousewheel = (zoomable || {}).mousewheel;
	        if (zoomable !== false && mousewheel !== false) {
	            this._mousewheelZoom = new MousewheelZoom(this, mousewheel);
	        }
	    },

	    _toggleDomZoom: function() {
	        if (!this.domEvents || !this.domEvents.toggleZoom) {
	            return;
	        }

	        var zoomable = this.options.zoomable;
	        var mousewheel = (zoomable || {}).mousewheel;
	        if ((zoomable === false || mousewheel === false) && !this.requiresHandlers([ ZOOM_START, ZOOM, ZOOM_END ])) {
	            this.domEvents.toggleZoom(false);
	        } else {
	            this.domEvents.toggleZoom(true);
	        }
	    },

	    _createTooltip: function() {
	        var ref = this;
	        var tooltipOptions = ref.options.tooltip;
	        var tooltip;

	        if (this._sharedTooltip()) {
	            tooltip = this._createSharedTooltip(tooltipOptions);
	        } else {
	            tooltip = new Tooltip(this.chartService, tooltipOptions);
	        }

	        return tooltip;
	    },

	    _createSharedTooltip: function(options) {
	        return new SharedTooltip(this._plotArea, options);
	    },

	    applyDefaults: function(options, themeOptions) {
	        applyAxisDefaults(options, themeOptions);
	        applySeriesDefaults(options, themeOptions);
	    },

	    applySeriesColors: function() {
	        var options = this.options;
	        var series = options.series;
	        var colors = options.seriesColors || [];

	        for (var i = 0; i < series.length; i++) {
	            var currentSeries = series[i];
	            var seriesColor = colors[i % colors.length];
	            var defaults = currentSeries._defaults;

	            currentSeries.color = currentSeries.color || seriesColor;
	            if (defaults) {
	                defaults.color = defaults.color || seriesColor;
	            }
	        }
	    },

	    _getModel: function() {
	        var options = this.options;
	        var plotArea = this._createPlotArea();
	        var model = new dataviz.RootElement(this._modelOptions());
	        model.chart = this;
	        model._plotArea = plotArea;

	        dataviz.Title.buildTitle(options.title, model);

	        if (options.legend.visible) {
	            model.append(new Legend(plotArea.options.legend, this.chartService));
	        }
	        model.append(plotArea);
	        model.reflow();

	        return model;
	    },

	    _modelOptions: function() {
	        var ref = this;
	        var options = ref.options;
	        var element = ref.element;
	        var size = dataviz.elementSize(element);

	        this._size = null;

	        return deepExtend({
	            width: Math.floor(size.width) || datavizConstants.DEFAULT_WIDTH,
	            height: Math.floor(size.height) || datavizConstants.DEFAULT_HEIGHT,
	            transitions: options.transitions
	        }, options.chartArea);
	    },

	    _createPlotArea: function(skipSeries) {
	        var options = this.options;

	        var plotArea = PlotAreaFactory.current.create(skipSeries ? [] : options.series, options, this.chartService);

	        return plotArea;
	    },

	    _hasSelection: function() {
	        return this._selections && this._selections.length;
	    },

	    _setupSelection: function() {
	        var this$1 = this;

	        var ref = this;
	        var axes = ref._plotArea.axes;
	        var selections = this._selections = [];

	        for (var i = 0; i < axes.length; i++) {
	            var axis = axes[i];
	            var options = axis.options;
	            if (axis instanceof CategoryAxis && options.select && !options.vertical) {
	                var min = 0;
	                var max = options.categories.length - 1;

	                if (axis instanceof DateCategoryAxis) {
	                    min = options.categories[min];
	                    max = options.categories[max];
	                }

	                if (!options.justified) {
	                    if (axis instanceof DateCategoryAxis) {
	                        max = dataviz.addDuration(max, 1, options.baseUnit, options.weekStartDay);
	                    } else {
	                        max++;
	                    }
	                }

	                var selection = new Selection(this$1, axis,
	                    deepExtend({ min: min, max: max }, options.select)
	                );

	                selections.push(selection);
	            }
	        }
	    },

	    _selectStart: function(e) {
	        return this.trigger(SELECT_START, e);
	    },

	    _select: function(e) {
	        return this.trigger(SELECT, e);
	    },

	    _selectEnd: function(e) {
	        return this.trigger(SELECT_END, e);
	    },

	    _initHandlers: function() {
	        this._clickHandler = this._click.bind(this);
	        this._mousewheelHandler = this._mousewheel.bind(this);
	        this._surfaceMouseenterHandler = this._mouseover.bind(this);
	        this._surfaceMouseleaveHandler = this._mouseout.bind(this);

	        this._mousemove = kendo.throttle(
	            this._mousemove.bind(this),
	            MOUSEMOVE_DELAY
	        );
	    },

	    addObserver: function(observer) {
	        if (observer) {
	            this.observers.push(observer);
	        }
	    },

	    removeObserver: function(observer) {
	        var index = this.observers.indexOf(observer);
	        if (index >= 0) {
	            this.observers.splice(index, 1);
	        }
	    },

	    requiresHandlers: function(eventNames) {
	        var observers = this.observers;
	        for (var idx = 0; idx < observers.length; idx++) {
	            if (observers[idx].requiresHandlers(eventNames)) {
	                return true;
	            }
	        }
	    },

	    trigger: function(name, args) {
	        if (args === void 0) { args = {}; }

	        if (name === SHOW_TOOLTIP) {
	            args.anchor.point = this._toDocumentCoordinates(args.anchor.point);
	        }
	        args.sender = this;

	        var observers = this.observers;
	        var isDefaultPrevented = false;
	        for (var idx = 0; idx < observers.length; idx++) {
	            if (observers[idx].trigger(name, args)) {
	                isDefaultPrevented = true;
	            }
	        }

	        return isDefaultPrevented;
	    },

	    _attachEvents: function() {
	        var ref = this;
	        var element = ref.element;
	        var surface = ref.surface;

	        surface.bind("mouseenter", this._surfaceMouseenterHandler);
	        surface.bind("mouseleave", this._surfaceMouseleaveHandler);
	        var obj;
	        bindEvents(element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));

	        if (this._shouldAttachMouseMove()) {
	            var obj$1;
	            bindEvents(element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));
	        }

	        this.domEvents = services.DomEventsBuilder.create(this.element, {
	            start: this._start.bind(this),
	            move: this._move.bind(this),
	            end: this._end.bind(this),
	            tap: this._tap.bind(this),
	            gesturestart: this._gesturestart.bind(this),
	            gesturechange: this._gesturechange.bind(this),
	            gestureend: this._gestureend.bind(this)
	        });

	        this._toggleDomDrag();
	        this._toggleDomZoom();
	    },

	    _cancelDomEvents: function() {
	        if (this.domEvents && this.domEvents.cancel) {
	            this.domEvents.cancel();
	        }
	    },

	    _gesturestart: function(e) {
	        if (this._mousewheelZoom && !this._stopDragEvent(e)) {
	            this._gestureDistance = e.distance;
	            this._unsetActivePoint();
	            this.surface.suspendTracking();
	        }
	    },

	    _gestureend: function(e) {
	        if (this._zooming && !this._stopDragEvent(e)) {
	            if (this.surface) {
	                this.surface.resumeTracking();
	            }
	            this._zooming = false;
	            this.trigger(ZOOM_END, {});
	        }
	    },

	    _gesturechange: function(e) {
	        var mousewheelZoom = this._mousewheelZoom;

	        if (mousewheelZoom && !this._stopDragEvent(e)) {
	            e.preventDefault();
	            var previousGestureDistance = this._gestureDistance;
	            var scaleDelta = -e.distance / previousGestureDistance + 1;

	            if (Math.abs(scaleDelta) >= 0.1) {
	                scaleDelta = Math.round(scaleDelta * 10);

	                this._gestureDistance = e.distance;
	                var args = { delta: scaleDelta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };
	                if (this._zooming || !this.trigger(ZOOM_START, args)) {

	                    if (!this._zooming) {
	                        this._zooming = true;
	                    }

	                    var ranges = args.axisRanges = mousewheelZoom.updateRanges(scaleDelta);
	                    if (ranges && !this.trigger(ZOOM, args)) {
	                        mousewheelZoom.zoom();
	                    }
	                }
	            }
	        }
	    },

	    _mouseout: function(e) {
	        if (e.element) {
	            var element = this._drawingChartElement(e.element, e);

	            if (element && element.leave) {
	                element.leave(this, e.originalEvent);
	            }
	        }
	    },

	    _start: function(e) {
	        var coords = this._eventCoordinates(e);

	        if (this._stopDragEvent(e) || !this._plotArea.backgroundContainsPoint(coords)) {
	            return;
	        }

	        if (this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ])) {
	            this._startNavigation(e, coords, DRAG_START);
	        }

	        if (this._pannable && this._pannable.start(e)) {
	            this.surface.suspendTracking();
	            this._unsetActivePoint();
	            this._suppressHover = true;
	        }

	        if (this._zoomSelection) {
	            if (this._zoomSelection.start(e)) {
	                this.trigger(ZOOM_START, { axisRanges: axisRanges(this._plotArea.axes), originalEvent: e });
	            }
	        }
	    },

	    _move: function(e) {
	        var ref = this;
	        var state = ref._navState;
	        var pannable = ref._pannable;

	        if (this._stopDragEvent(e)) {
	            return;
	        }

	        if (pannable) {
	            var ranges = pannable.move(e);

	            if (ranges && !this.trigger(DRAG, { axisRanges: ranges, originalEvent: e })) {
	                pannable.pan();
	            }
	        } else if (state) {
	            var ranges$1 = {};
	            var axes = state.axes;

	            for (var i = 0; i < axes.length; i++) {
	                var currentAxis = axes[i];
	                var axisName = currentAxis.options.name;
	                if (axisName) {
	                    var axis = currentAxis.options.vertical ? e.y : e.x;
	                    var delta = axis.startLocation - axis.location;

	                    if (delta !== 0) {
	                        ranges$1[currentAxis.options.name] = currentAxis.translateRange(delta);
	                    }
	                }
	            }

	            state.axisRanges = ranges$1;
	            this.trigger(DRAG, {
	                axisRanges: ranges$1,
	                originalEvent: e
	            });
	        }

	        if (this._zoomSelection) {
	            this._zoomSelection.move(e);
	        }
	    },

	    _end: function(e) {
	        if (this._stopDragEvent(e)) {
	            return;
	        }

	        var pannable = this._pannable;
	        if (pannable && pannable.end(e)) {
	            this.surface.resumeTracking();
	            this.trigger(DRAG_END, {
	                axisRanges: axisRanges(this._plotArea.axes),
	                originalEvent: e
	            });
	            this._suppressHover = false;
	        } else {
	            this._endNavigation(e, DRAG_END);
	        }

	        if (this._zoomSelection) {
	            var ranges = this._zoomSelection.end(e);
	            if (ranges && !this.trigger(ZOOM, { axisRanges: ranges, originalEvent: e })) {
	                this._zoomSelection.zoom();
	                this.trigger(ZOOM_END, { axisRanges: ranges, originalEvent: e });
	            }
	        }
	    },

	    _stopDragEvent: function() {
	        return this._hasSelection();
	    },

	    _mousewheel: function(e) {
	        var this$1 = this;

	        var delta = dataviz.mousewheelDelta(e);
	        var mousewheelZoom = this._mousewheelZoom;
	        var coords = this._eventCoordinates(e);

	        if (!this._plotArea.backgroundContainsPoint(coords)) {
	            return;
	        }

	        if (mousewheelZoom) {
	            var args = { delta: delta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };
	            if (this._zooming || !this.trigger(ZOOM_START, args)) {
	                e.preventDefault();

	                if (!this._zooming) {
	                    this._unsetActivePoint();
	                    this.surface.suspendTracking();
	                    this._zooming = true;
	                }

	                if (this._mwTimeout) {
	                    clearTimeout(this._mwTimeout);
	                }

	                args.axisRanges = mousewheelZoom.updateRanges(delta);
	                if (args.axisRanges && !this.trigger(ZOOM, args)) {
	                    mousewheelZoom.zoom();
	                }

	                this._mwTimeout = setTimeout(function () {
	                    this$1.trigger(ZOOM_END, args);
	                    this$1._zooming = false;
	                    if (this$1.surface) {
	                        this$1.surface.resumeTracking();
	                    }
	                }, MOUSEWHEEL_DELAY);
	            }
	        } else {
	            var state = this._navState;
	            if (!state) {
	                var prevented = this._startNavigation(e, coords, ZOOM_START);
	                if (!prevented) {
	                    state = this._navState;
	                }
	            }

	            if (state) {
	                var totalDelta = state.totalDelta || delta;
	                state.totalDelta = totalDelta + delta;

	                var axes = this._navState.axes;
	                var ranges = {};

	                for (var i = 0; i < axes.length; i++) {
	                    var currentAxis = axes[i];
	                    var axisName = currentAxis.options.name;
	                    if (axisName) {
	                        ranges[axisName] = currentAxis.scaleRange(-totalDelta);
	                    }
	                }

	                this.trigger(ZOOM, {
	                    delta: delta,
	                    axisRanges: ranges,
	                    originalEvent: e
	                });

	                if (this._mwTimeout) {
	                    clearTimeout(this._mwTimeout);
	                }

	                this._mwTimeout = setTimeout(function () {
	                    this$1._endNavigation(e, ZOOM_END);
	                }, MOUSEWHEEL_DELAY);
	            }
	        }
	    },

	    _startNavigation: function(e, coords, chartEvent) {
	        var plotArea = this._model._plotArea;
	        var pane = plotArea.findPointPane(coords);
	        var axes = plotArea.axes.slice(0);

	        if (!pane) {
	            return;
	        }

	        var ranges = axisRanges(axes);

	        var prevented = this.trigger(chartEvent, {
	            axisRanges: ranges,
	            originalEvent: e
	        });

	        if (prevented) {
	            this._cancelDomEvents();
	        } else {
	            this._suppressHover = true;
	            this._unsetActivePoint();
	            this._navState = {
	                axisRanges: ranges,
	                pane: pane,
	                axes: axes
	            };
	        }
	    },

	    _endNavigation: function(e, chartEvent) {
	        if (this._navState) {
	            this.trigger(chartEvent, {
	                axisRanges: this._navState.axisRanges,
	                originalEvent: e
	            });
	            this._suppressHover = false;
	            this._navState = null;
	        }
	    },

	    _getChartElement: function(e, match) {
	        var element = this.surface.eventTarget(e);
	        if (element) {
	            return this._drawingChartElement(element, e, match);
	        }
	    },

	    _drawingChartElement: function(element, e, match) {
	        var current = element;
	        var chartElement;
	        while (current && !chartElement) {
	            chartElement = current.chartElement;
	            current = current.parent;
	        }

	        if (chartElement) {
	            if (chartElement.aliasFor) {
	                chartElement = chartElement.aliasFor(e, this._eventCoordinates(e));
	            }

	            if (match) {
	                chartElement = chartElement.closest(match);
	                if (chartElement && chartElement.aliasFor) {
	                    chartElement = chartElement.aliasFor();
	                }
	            }

	            return chartElement;
	        }
	    },

	    _eventCoordinates: function(e) {
	        var coordinates = dataviz.eventCoordinates(e);
	        return this._toModelCoordinates(coordinates.x, coordinates.y);
	    },

	    _elementPadding: function() {
	        if (!this._padding) {
	            var ref = elementStyles(this.element, [ "paddingLeft", "paddingTop" ]);
	            var paddingLeft = ref.paddingLeft;
	            var paddingTop = ref.paddingTop;
	            this._padding = {
	                top: paddingTop,
	                left: paddingLeft
	            };
	        }

	        return this._padding;
	    },

	    _toDocumentCoordinates: function(point) {
	        var padding = this._elementPadding();
	        var offset = dataviz.elementOffset(this.element);

	        return {
	            left: round(point.x + padding.left + offset.left),
	            top: round(point.y + padding.top + offset.top)
	        };
	    },

	    _toModelCoordinates: function(clientX, clientY) {
	        var element = this.element;
	        var offset = dataviz.elementOffset(element);
	        var padding = this._elementPadding();

	        return new Point(
	            clientX - offset.left - padding.left,
	            clientY - offset.top - padding.top
	        );
	    },

	    _tap: function(e) {
	        var this$1 = this;

	        var drawingElement = this.surface.eventTarget(e);
	        var element = this._drawingChartElement(drawingElement, e);

	        if (this._activePoint === element) {
	            this._propagateClick(element, e);
	        } else {
	            if (!this._startHover(drawingElement, e)) {
	                this._unsetActivePoint();
	            }

	            this._propagateClick(element, e);
	        }

	        //part of fix for hover issue on windows touch
	        this.handlingTap = true;
	        setTimeout(function () {
	            this$1.handlingTap = false;
	        }, 0);
	    },

	    _click: function(e) {
	        var element = this._getChartElement(e);
	        this._propagateClick(element, e);
	    },

	    _propagateClick: function(element, e) {
	        var this$1 = this;

	        var current = element;
	        while (current) {
	            if (current.click) {
	                current.click(this$1, e);
	            }

	            current = current.parent;
	        }
	    },

	    _startHover: function(element, e) {
	        var chartElement = this._drawingChartElement(element, e);
	        var ref = this;
	        var tooltip = ref._tooltip;
	        var highlight = ref._highlight;

	        if (this._suppressHover || !highlight || highlight.isHighlighted(chartElement) || this._sharedTooltip()) {
	            return false;
	        }

	        var point = this._drawingChartElement(element, e, function(element) {
	            return element.hover && !(element instanceof PlotAreaBase);
	        });

	        if (point && !point.hover(this, e)) {
	            this._activePoint = point;

	            var tooltipOptions = deepExtend({}, tooltipOptions, point.options.tooltip);
	            if (tooltipOptions.visible) {
	                tooltip.show(point);
	            }

	            highlight.show(point);

	            return point;
	        }
	    },

	    _mouseover: function(e) {
	        var point = this._startHover(e.element, e.originalEvent);

	        if (point && point.tooltipTracking) {
	            this._mouseMoveTrackHandler = this._mouseMoveTrackHandler || this._mouseMoveTracking.bind(this);
	            var obj;
	            bindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));
	        }
	    },

	    _mouseMoveTracking: function(e) {
	        var ref = this;
	        var options = ref.options;
	        var tooltip = ref._tooltip;
	        var highlight = ref._highlight;
	        var point = ref._activePoint;
	        var coords = this._eventCoordinates(e);

	        if (this._plotArea.box.containsPoint(coords)) {
	            if (point && point.tooltipTracking && point.series && point.parent.getNearestPoint) {
	                var seriesPoint = point.parent.getNearestPoint(coords.x, coords.y, point.seriesIx);
	                if (seriesPoint && seriesPoint !== point) {
	                    seriesPoint.hover(this, e);
	                    this._activePoint = seriesPoint;

	                    var tooltipOptions = deepExtend({}, options.tooltip, point.options.tooltip);
	                    if (tooltipOptions.visible) {
	                        tooltip.show(seriesPoint);
	                    }

	                    highlight.show(seriesPoint);
	                }
	            }
	        } else {
	            var obj;
	            unbindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));
	            this._unsetActivePoint();
	        }
	    },

	    _mousemove: function(e) {
	        var coords = this._eventCoordinates(e);

	        this._trackCrosshairs(coords);

	        if (this._plotArea.hover) {
	            this._plotArea.hover(this, e);
	        }

	        if (this._sharedTooltip()) {
	            this._trackSharedTooltip(coords, e);
	        }
	    },

	    _trackCrosshairs: function(coords) {
	        var crosshairs = this._plotArea.crosshairs;

	        for (var i = 0; i < crosshairs.length; i++) {
	            var current = crosshairs[i];

	            if (current.box.containsPoint(coords)) {
	                current.showAt(coords);
	            } else {
	                current.hide();
	            }
	        }
	    },

	    _trackSharedTooltip: function(coords, e) {
	        var ref = this;
	        var tooltipOptions = ref.options.tooltip;
	        var plotArea = ref._plotArea;
	        var categoryAxis = ref._plotArea.categoryAxis;
	        var tooltip = ref._tooltip;
	        var highlight = ref._highlight;

	        if (plotArea.box.containsPoint(coords)) {
	            var index = categoryAxis.pointCategoryIndex(coords);
	            if (index !== this._tooltipCategoryIx) {
	                var points = plotArea.pointsByCategoryIndex(index);

	                var pointArgs = points.map(function(point) {
	                    return point.eventArgs(e);
	                });

	                var hoverArgs = pointArgs[0] || {};
	                hoverArgs.categoryPoints = pointArgs;

	                if (points.length > 0 && !this.trigger(SERIES_HOVER, hoverArgs)) {
	                    if (tooltipOptions.visible) {
	                        tooltip.showAt(points, coords);
	                    }

	                    highlight.show(points);
	                } else {
	                    tooltip.hide();
	                }

	                this._tooltipCategoryIx = index;
	            }
	        }
	    },

	    hideElements: function() {
	        var ref = this;
	        var plotArea = ref._plotArea;
	        var tooltip = ref._tooltip;
	        var highlight = ref._highlight;
	        this._mousemove.cancel();

	        plotArea.hideCrosshairs();

	        highlight.hide();

	        tooltip.hide();

	        delete this._tooltipCategoryIx;
	    },

	    _unsetActivePoint: function() {
	        var ref = this;
	        var tooltip = ref._tooltip;
	        var highlight = ref._highlight;

	        this._activePoint = null;

	        if (tooltip) {
	            tooltip.hide();
	        }

	        if (highlight) {
	            highlight.hide();
	        }
	    },

	    _deferRedraw: function() {
	        this._redraw();
	    },

	    _clearRedrawTimeout: function() {
	        if (this._redrawTimeout) {
	            clearInterval(this._redrawTimeout);
	            this._redrawTimeout = null;
	        }
	    },

	    bindCategories: function() {
	        var this$1 = this;

	        var options = this.options;
	        var definitions = [].concat(options.categoryAxis);

	        for (var axisIx = 0; axisIx < definitions.length; axisIx++) {
	            var axis = definitions[axisIx];
	            if (axis.autoBind !== false) {
	                this$1.bindCategoryAxisFromSeries(axis, axisIx);
	            }
	        }
	    },

	    bindCategoryAxisFromSeries: function(axis, axisIx) {
	        var this$1 = this;

	        var series = this.options.series;
	        var seriesLength = series.length;
	        var uniqueCategories = {};
	        var items = [];
	        var dateAxis;

	        for (var seriesIx = 0; seriesIx < seriesLength; seriesIx++) {
	            var s = series[seriesIx];
	            var onAxis = s.categoryAxis === axis.name || (!s.categoryAxis && axisIx === 0);
	            var data = s.data;
	            var dataLength = data.length;

	            if (s.categoryField && onAxis && dataLength > 0) {
	                dateAxis = isDateAxis(axis, getField(s.categoryField, data[0]));

	                var getFn = dateAxis ? getDateField : getField;

	                for (var dataIx = 0; dataIx < dataLength; dataIx++) {
	                    var dataRow = data[dataIx];
	                    var category = getFn(s.categoryField, dataRow, this$1.chartService.intl);

	                    if (dateAxis || !uniqueCategories[category]) {
	                        items.push([ category, dataRow ]);

	                        if (!dateAxis) {
	                            uniqueCategories[category] = true;
	                        }
	                    }
	                }
	            }
	        }

	        if (items.length > 0) {
	            if (dateAxis) {
	                items = uniqueDates(items, function(a, b) {
	                    return dataviz.dateComparer(a[0], b[0]);
	                });
	            }

	            var result = transpose(items);
	            axis.categories = result[0];
	        }
	    },

	    _isBindable: function(series) {
	        var valueFields = SeriesBinder.current.valueFields(series);
	        var result = true;

	        for (var i = 0; i < valueFields.length; i++) {
	            var field = valueFields[i];
	            if (field === VALUE) {
	                field = "field";
	            } else {
	                field = field + "Field";
	            }

	            if (!defined(series[field])) {
	                result = false;
	                break;
	            }
	        }

	        return result;
	    },

	    _noTransitionsRedraw: function() {
	        var options = this.options;
	        var transitionsState;

	        if (options.transitions) {
	            options.transitions = false;
	            transitionsState = true;
	        }

	        this._redraw();

	        if (transitionsState) {
	            options.transitions = true;
	        }
	    },

	    _legendItemHover: function(seriesIndex, pointIndex) {
	        var ref = this;
	        var plotArea = ref._plotArea;
	        var highlight = ref._highlight;
	        var currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];
	        var items;

	        if (inArray(currentSeries.type, [ PIE, DONUT, FUNNEL ])) {
	            items = plotArea.findPoint(function(point) {
	                return point.series.index === seriesIndex && point.index === pointIndex;
	            });
	        } else {
	            items = plotArea.pointsBySeriesIndex(seriesIndex);
	        }

	        highlight.show(items);
	    },

	    _shouldAttachMouseMove: function() {
	        return this._plotArea.crosshairs.length || (this._tooltip && this._sharedTooltip()) || this.requiresHandlers([ PLOT_AREA_HOVER ]);
	    },

	    updateMouseMoveHandler: function() {
	        var obj;
	        unbindEvents(this.element, ( obj = {}, obj[ MOUSEMOVE ] = this._mousemove, obj ));

	        if (this._shouldAttachMouseMove()) {
	            var obj$1;
	            bindEvents(this.element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));
	        }
	    },

	    applyOptions: function(options, theme) {
	        clearMissingValues(this._originalOptions, options);
	        this._originalOptions = deepExtend(this._originalOptions, options);
	        this.options = deepExtend({}, this._originalOptions);

	        if (theme) {
	            this._theme = theme;
	            this.chartService.theme = theme;
	        }
	        this._initTheme(this.options, this._theme);
	    },

	    setOptions: function(options, theme) {
	        this.applyOptions(options, theme);
	        this.bindCategories();
	        this.redraw();
	        this.updateMouseMoveHandler();

	        this._toggleDomDrag();
	        this._toggleDomZoom();
	    },

	    destroy: function() {
	        this._destroyed = true;

	        var obj;
	        unbindEvents(this.element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj[ MOUSEMOVE ] = this._mousemove, obj ));

	        if (this.domEvents) {
	            this.domEvents.destroy();
	            delete this.domEvents;
	        }

	        var obj$1;
	        unbindEvents(document, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj$1 ));

	        this._destroyView();

	        if (this.surface) {
	            this.surface.destroy();
	            this.surface = null;
	        }

	        this._clearRedrawTimeout();
	    },

	    _destroyView: function() {
	        var ref = this;
	        var model = ref._model;
	        var selections = ref._selections;

	        if (model) {
	            model.destroy();
	            this._model = null;
	        }

	        if (selections) {
	            while (selections.length > 0) {
	                selections.shift().destroy();
	            }
	        }

	        this._unsetActivePoint();

	        if (this._tooltip) {
	            this._tooltip.destroy();
	        }

	        if (this._highlight) {
	            this._highlight.destroy();
	        }

	        if (this._zoomSelection) {
	            this._zoomSelection.destroy();
	            delete this._zoomSelection;
	        }

	        if (this._pannable) {
	            this._pannable.destroy();
	            delete this._pannable;
	        }

	        if (this._mousewheelZoom) {
	            this._mousewheelZoom.destroy();
	            delete this._mousewheelZoom;
	        }
	    }
	});

	function resolveAxisAliases(options) {
	    var aliases = AXIS_NAMES;

	    for (var idx = 0; idx < aliases.length; idx++) {
	        var alias = aliases[idx] + "Axes";
	        if (options[alias]) {
	            options[aliases[idx] + "Axis"] = options[alias];
	            delete options[alias];
	        }
	    }
	}

	function pointByCategoryName(points, name) {
	    if (points) {
	        for (var idx = 0; idx < points.length; idx++) {
	            if (points[idx].category === name) {
	                return [ points[idx] ];
	            }
	        }
	    }
	}

	function applyAxisDefaults(options, themeOptions) {
	    var themeAxisDefaults = ((themeOptions || {}).axisDefaults) || {};
	    var axisName, axisDefaults, axes;

	    function mapAxisOptions(axisOptions) {
	        var axisColor = (axisOptions || {}).color || axisDefaults.color;
	        var result = deepExtend({},
	            themeAxisDefaults,
	            themeAxisDefaults[axisName],
	            axisDefaults,
	            axisDefaults[axisName], {
	                line: { color: axisColor },
	                labels: { color: axisColor },
	                title: { color: axisColor }
	            },
	            axisOptions
	        );

	        delete result[axisName];

	        return result;
	    }

	    for (var idx = 0; idx < AXIS_NAMES.length; idx++) {
	        axisName = AXIS_NAMES[idx] + "Axis";
	        axisDefaults = options.axisDefaults || {};
	        axes = [].concat(options[axisName]);

	        axes = axes.map(mapAxisOptions);

	        options[axisName] = axes.length > 1 ? axes : axes[0];
	    }
	}

	function applySeriesDefaults(options, themeOptions) {
	    var series = options.series;
	    var seriesLength = series.length;
	    var seriesDefaults = options.seriesDefaults;
	    var commonDefaults = deepExtend({}, options.seriesDefaults);
	    var themeSeriesDefaults = themeOptions ? deepExtend({}, themeOptions.seriesDefaults) : {};
	    var commonThemeDefaults = deepExtend({}, themeSeriesDefaults);

	    cleanupNestedSeriesDefaults(commonDefaults);
	    cleanupNestedSeriesDefaults(commonThemeDefaults);

	    for (var i = 0; i < seriesLength; i++) {
	        var seriesType = series[i].type || options.seriesDefaults.type;

	        var baseOptions = deepExtend(
	            { data: [] },
	            commonThemeDefaults,
	            themeSeriesDefaults[seriesType],
	            { tooltip: options.tooltip },
	            commonDefaults,
	            seriesDefaults[seriesType]
	        );

	        series[i]._defaults = baseOptions;
	        series[i] = deepExtend({}, baseOptions, series[i]);
	    }
	}

	function cleanupNestedSeriesDefaults(seriesDefaults) {
	    delete seriesDefaults.bar;
	    delete seriesDefaults.column;
	    delete seriesDefaults.rangeColumn;
	    delete seriesDefaults.line;
	    delete seriesDefaults.verticalLine;
	    delete seriesDefaults.pie;
	    delete seriesDefaults.donut;
	    delete seriesDefaults.area;
	    delete seriesDefaults.verticalArea;
	    delete seriesDefaults.scatter;
	    delete seriesDefaults.scatterLine;
	    delete seriesDefaults.bubble;
	    delete seriesDefaults.candlestick;
	    delete seriesDefaults.ohlc;
	    delete seriesDefaults.boxPlot;
	    delete seriesDefaults.bullet;
	    delete seriesDefaults.verticalBullet;
	    delete seriesDefaults.polarArea;
	    delete seriesDefaults.polarLine;
	    delete seriesDefaults.radarArea;
	    delete seriesDefaults.radarLine;
	    delete seriesDefaults.waterfall;
	}

	function axisRanges(axes) {
	    var ranges = {};

	    for (var i = 0; i < axes.length; i++) {
	        var axis = axes[i];
	        var axisName = axis.options.name;
	        if (axisName) {
	            ranges[axisName] = axis.range();
	        }
	    }

	    return ranges;
	}

	function sortDates(dates, comparer) {
	    if (comparer === void 0) { comparer = dataviz.dateComparer; }

	    for (var i = 1, length = dates.length; i < length; i++) {
	        if (comparer(dates[i], dates[i - 1]) < 0) {
	            dates.sort(comparer);
	            break;
	        }
	    }

	    return dates;
	}

	function uniqueDates(srcDates, comparer) {
	    if (comparer === void 0) { comparer = dataviz.dateComparer; }

	    var dates = sortDates(srcDates, comparer);
	    var length = dates.length;
	    var result = length > 0 ? [ dates[0] ] : [];

	    for (var i = 1; i < length; i++) {
	        if (comparer(dates[i], last(result)) !== 0) {
	            result.push(dates[i]);
	        }
	    }

	    return result;
	}

	function transpose(rows) {
	    var rowCount = rows.length;
	    var result = [];

	    for (var rowIx = 0; rowIx < rowCount; rowIx++) {
	        var row = rows[rowIx];
	        var colCount = row.length;

	        for (var colIx = 0; colIx < colCount; colIx++) {
	            result[colIx] = result[colIx] || [];
	            result[colIx].push(row[colIx]);
	        }
	    }

	    return result;
	}

	function clearMissingValues(originalOptions, options) {
	    for (var field in options) {
	        var fieldValue = options[field];
	        var originalValue = originalOptions[field];
	        if (defined(originalValue)) {
	            var nullValue = fieldValue === null;
	            if ((nullValue || !defined(fieldValue))) {
	                delete originalOptions[field];
	                if (nullValue) {
	                    delete options[field];
	                }
	            } else if (originalValue && isObject(fieldValue)) {
	                if (isObject(originalValue)) {
	                    clearMissingValues(originalValue, fieldValue);
	                }
	            }
	        }
	    }
	}

	setDefaultOptions(Chart, {
	    renderAs: "",
	    chartArea: {},
	    legend: {
	        visible: true,
	        labels: {}
	    },
	    categoryAxis: {},
	    seriesDefaults: {
	        type: COLUMN,
	        data: [],
	        highlight: {
	            visible: true
	        },
	        labels: {},
	        negativeValues: {
	            visible: false
	        }
	    },
	    series: [],
	    seriesColors: null,
	    tooltip: {
	        visible: false
	    },
	    transitions: true,
	    valueAxis: {},
	    plotArea: {},
	    title: {},
	    xAxis: {},
	    yAxis: {},
	    panes: [ {} ],
	    pannable: false,
	    zoomable: false
	});

	kendo.deepExtend(kendo.dataviz, {
	    constants: constants,
	    Aggregates: Aggregates,
	    AreaChart: AreaChart,
	    AreaSegment: AreaSegment,
	    AxisGroupRangeTracker: AxisGroupRangeTracker,
	    Bar: Bar,
	    BarChart: BarChart,
	    BarLabel: BarLabel,
	    BoxPlotChart: BoxPlotChart,
	    BoxPlot: BoxPlot,
	    BubbleChart: BubbleChart,
	    Bullet: Bullet,
	    BulletChart: BulletChart,
	    CandlestickChart: CandlestickChart,
	    Candlestick: Candlestick,
	    CategoricalChart: CategoricalChart,
	    CategoricalErrorBar: CategoricalErrorBar,
	    CategoricalPlotArea: CategoricalPlotArea,
	    Chart: Chart,
	    ChartContainer: ChartContainer,
	    ClipAnimation: ClipAnimation,
	    ClusterLayout: ClusterLayout,
	    Crosshair: Crosshair,
	    CrosshairTooltip: CrosshairTooltip,
	    DefaultAggregates: DefaultAggregates,
	    DonutChart: DonutChart,
	    DonutPlotArea: DonutPlotArea,
	    DonutSegment: DonutSegment,
	    ErrorBarBase: ErrorBarBase,
	    ErrorRangeCalculator: ErrorRangeCalculator,
	    Highlight: Highlight,
	    SharedTooltip: SharedTooltip,
	    Legend: Legend,
	    LegendItem: LegendItem,
	    LegendLayout: LegendLayout,
	    LineChart: LineChart,
	    LinePoint: LinePoint,
	    LineSegment: LineSegment,
	    Pane: Pane,
	    PieAnimation: PieAnimation,
	    PieChart: PieChart,
	    PieChartMixin: PieChartMixin,
	    PiePlotArea: PiePlotArea,
	    PieSegment: PieSegment,
	    PlotAreaBase: PlotAreaBase,
	    PlotAreaEventsMixin: PlotAreaEventsMixin,
	    PlotAreaFactory: PlotAreaFactory,
	    PointEventsMixin: PointEventsMixin,
	    RangeBar: RangeBar,
	    RangeBarChart: RangeBarChart,
	    RangeAreaPoint: RangeAreaPoint,
	    RangeAreaChart: RangeAreaChart,
	    ScatterChart: ScatterChart,
	    ScatterErrorBar: ScatterErrorBar,
	    ScatterLineChart: ScatterLineChart,
	    Selection: Selection,
	    SeriesAggregator: SeriesAggregator,
	    SeriesBinder: SeriesBinder,
	    SplineSegment: SplineSegment,
	    SplineAreaSegment: SplineAreaSegment,
	    StackWrap: StackWrap,
	    Tooltip: Tooltip,
	    OHLCChart: OHLCChart,
	    OHLCPoint: OHLCPoint,
	    WaterfallChart: WaterfallChart,
	    WaterfallSegment: WaterfallSegment,
	    XYPlotArea: XYPlotArea,
	    MousewheelZoom: MousewheelZoom,
	    ZoomSelection: ZoomSelection,
	    Pannable: Pannable,
	    ChartAxis: ChartAxis,
	    ChartPane: ChartPane,
	    ChartPlotArea: ChartPlotArea,
	    anyHasZIndex: anyHasZIndex,
	    appendIfNotNull: areNumbers,
	    areNumbers: areNumbers,
	    bindSegments: bindSegments,
	    categoriesCount: categoriesCount,
	    countNumbers: countNumbers,
	    equalsIgnoreCase: equalsIgnoreCase,
	    evalOptions: evalOptions,
	    filterSeriesByType: filterSeriesByType,
	    getDateField: getDateField,
	    getField: getField,
	    hasGradientOverlay: hasGradientOverlay,
	    hasValue: hasValue,
	    isDateAxis: isDateAxis,
	    segmentVisible: segmentVisible,
	    singleItemOrArray: singleItemOrArray
	});

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }),

/***/ 855:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 856:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(170);

/***/ })

/******/ });

/***/ }),

/***/ 512:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(513);


/***/ }),

/***/ 513:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(24);
__webpack_require__(464);
__webpack_require__(465);
__webpack_require__(170);
__webpack_require__(466);
__webpack_require__(168);
__webpack_require__(64);
__webpack_require__(470);
__webpack_require__(522);
const $ = __webpack_require__(463);
class AvlXyChartImpl extends Polymer.Element {
    constructor() {
        super();
        this.refreshRate = 100; // 100 ms TODO debouncing
        this.sequences = [];
    }
    static get is() { return 'avl-xy-chart'; }
    connectedCallback() {
        super.connectedCallback();
        const chartDiv = this.shadowRoot.querySelector('#chart');
        const options = {
            chartArea: {
                height: 500
            },
            legend: {
                position: 'bottom'
            },
            seriesDefaults: {
                type: 'scatterLine'
            },
            renderAs: 'canvas',
            series: [],
            yAxis: [],
            tooltip: {
                visible: true
            },
            pannable: true,
            zoomable: true,
            transitions: false
        };
        this.chart = $(chartDiv).kendoChart(options).data("kendoChart");
        setTimeout(() => this.setChartStyles(), 0);
    }
    initialize(title, xAxis, height, width) {
        this.chart.options.title.text = title;
        this.chart.options.xAxis.min = xAxis.min !== undefined ? xAxis.min : 0;
        this.chart.options.xAxis.max = xAxis.min !== undefined ? xAxis.max : 100;
        // Sorry about anys. Kendo  sometimes puts an object for xAxis, sometimes array. 
        // I set it to object immediately so it doesn't cause problems later, but the types declare it as an array              
        this.xAxis = xAxis;
        if (height)
            this.chart.options.chartArea.height = height;
        if (width)
            this.chart.options.chartArea.width = width;
    }
    addSequence(sequence) {
        //if sequence with same label already exists
        if (this.chart.options.series.find(oneSeries => oneSeries.name === sequence.label) != undefined)
            throw new Error(`Sequence label already exists: ${sequence.label}`);
        //keep track of sequences
        this.sequences.push(sequence);
        this.assignYAxesToSeries(sequence.yAxis);
        this.chart.options.series.push(this.createSeriesFromSequence(sequence));
        this.subscribeToSequenceChange(sequence);
        this.chart.refresh();
    }
    setChartStyles() {
        const style = window.getComputedStyle(this);
        const backgroundColor = style.backgroundColor || '#FFFFFF';
        const textColor = style.color || '#3E3D3D';
        const newOptions = Object.assign({}, this.chart.options, { axisDefaults: Object.assign({}, this.chart.options.axisDefaults, { color: textColor }), chartArea: Object.assign({}, this.chart.options.chartArea, { background: backgroundColor }), legend: Object.assign({}, this.chart.options.legend, { labels: {
                    color: textColor,
                } }), title: Object.assign({}, this.chart.options.title, { color: textColor }) });
        this.chart.setOptions(newOptions);
    }
    assignYAxesToSeries(yAxis) {
        // check if already exists; ? n sequences - 1 y axes? TODO
        let yAxes = this.sequences.map(seq => ({
            name: seq.yAxis.name,
            color: seq.yAxis.color,
            labels: { color: seq.yAxis.color }
        }));
        this.chart.options.yAxis = yAxes;
    }
    subscribeToSequenceChange(sequence) {
        let handler = (points) => {
            let oneSeries = this.chart.options.series.find(s => s.name == sequence.label);
            let transformedPoints = points.map(point => [point.x, point.y]);
            oneSeries.data.push(...transformedPoints);
            this.adjustXAxes(points);
            this.chart.refresh();
        };
        sequence.newPoints.subscribe(points => handler(points));
    }
    createSeriesFromSequence(sequence) {
        let series = {
            name: sequence.label,
            data: [],
            yAxis: sequence.yAxis.name,
            color: sequence.yAxis.color
        };
        return series;
    }
    adjustXAxes(points) {
        if (!this.xAxis.automaticallyAdjustRange)
            return;
        let xs = points.map(point => point.x);
        let min = Math.min(this.chart.options.xAxis.min, ...xs);
        let max = Math.max(this.chart.options.xAxis.max, ...xs);
        this.chart.options.xAxis.min = Math.min(this.chart.options.xAxis.min, ...xs);
        this.chart.options.xAxis.max = Math.max(this.chart.options.xAxis.max, ...xs);
        // Sorry about anys. Kendo  sometimes puts an object for xAxis, sometimes array. 
        // I set it to object immediately so it doesn't cause problems later, but the types declare it as an array
        //TODO
        // if (!this.xAxis.centerLineInTheMiddleOfGraph) return;
        // let center = (max - min) / 2;
        // if (max>center)
        // (this.chart.options.xAxis as any).max+=((this.chart.options.xAxis as any).max -(this.chart.options.xAxis as any).min)/2;     
    }
    getSequence(label) {
        return this.sequences.find(sequence => sequence.label === label);
    }
    removeSequence(label) {
        throw Error('NotImplemented');
    }
}
exports.AvlXyChartImpl = AvlXyChartImpl;
customElements.define(AvlXyChartImpl.is, AvlXyChartImpl);


/***/ }),

/***/ 514:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1030);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1030:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.odata",
	    name: "OData",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        extend = $.extend,
	        odataFilters = {
	            eq: "eq",
	            neq: "ne",
	            gt: "gt",
	            gte: "ge",
	            lt: "lt",
	            lte: "le",
	            contains : "substringof",
	            doesnotcontain: "substringof",
	            endswith: "endswith",
	            startswith: "startswith",
	            isnull: "eq",
	            isnotnull: "ne",
	            isempty: "eq",
	            isnotempty: "ne"
	        },
	        odataFiltersVersionFour = extend({}, odataFilters, {
	            contains: "contains"
	        }),
	        mappers = {
	            pageSize: $.noop,
	            page: $.noop,
	            filter: function(params, filter, useVersionFour) {
	                if (filter) {
	                    filter = toOdataFilter(filter, useVersionFour);
	                    if (filter) {
	                        params.$filter = filter;
	                    }
	                }
	            },
	            sort: function(params, orderby) {
	                var expr = $.map(orderby, function(value) {
	                    var order = value.field.replace(/\./g, "/");

	                    if (value.dir === "desc") {
	                        order += " desc";
	                    }

	                    return order;
	                }).join(",");

	                if (expr) {
	                    params.$orderby = expr;
	                }
	            },
	            skip: function(params, skip) {
	                if (skip) {
	                    params.$skip = skip;
	                }
	            },
	            take: function(params, take) {
	                if (take) {
	                    params.$top = take;
	                }
	            }
	        },
	        defaultDataType = {
	            read: {
	                dataType: "jsonp"
	            }
	        };

	    function toOdataFilter(filter, useOdataFour) {
	        var result = [],
	            logic = filter.logic || "and",
	            idx,
	            length,
	            field,
	            type,
	            format,
	            operator,
	            value,
	            ignoreCase,
	            filters = filter.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            value = filter.value;
	            operator = filter.operator;

	            if (filter.filters) {
	                filter = toOdataFilter(filter, useOdataFour);
	            } else {
	                ignoreCase = filter.ignoreCase;
	                field = field.replace(/\./g, "/");
	                filter = odataFilters[operator];
	                if (useOdataFour) {
	                    filter = odataFiltersVersionFour[operator];
	                }

	                if (operator === "isnull" || operator === "isnotnull") {
	                    filter = kendo.format("{0} {1} null", field, filter);
	                } else if (operator === "isempty" || operator === "isnotempty") {
	                    filter = kendo.format("{0} {1} ''", field, filter);
	                } else if (filter && value !== undefined) {
	                    type = $.type(value);
	                    if (type === "string") {
	                        format = "'{1}'";
	                        value = value.replace(/'/g, "''");

	                        if (ignoreCase === true) {
	                            field = "tolower(" + field + ")";
	                        }

	                    } else if (type === "date") {
	                        if (useOdataFour) {
	                            format = "{1:yyyy-MM-ddTHH:mm:ss+00:00}";
	                            value = kendo.timezone.apply(value, 'Etc/UTC');
	                        } else {
	                            format = "datetime'{1:yyyy-MM-ddTHH:mm:ss}'";
	                        }
	                    } else {
	                        format = "{1}";
	                    }

	                    if (filter.length > 3) {
	                        if (filter !== "substringof") {
	                            format = "{0}({2}," + format + ")";
	                        } else {
	                            format = "{0}(" + format + ",{2})";
	                            if (operator === "doesnotcontain") {
	                                if (useOdataFour) {
	                                    format = "{0}({2},'{1}') eq -1";
	                                    filter = "indexof";
	                                } else {
	                                    format += " eq false";
	                                }
	                            }
	                        }
	                    } else {
	                        format = "{2} {0} " + format;
	                    }

	                    filter = kendo.format(format, filter, value, field);
	                }
	            }

	            result.push(filter);
	        }

	        filter = result.join(" " + logic + " ");

	        if (result.length > 1) {
	            filter = "(" + filter + ")";
	        }

	        return filter;
	    }

	    function stripMetadata(obj) {
	        for (var name in obj) {
	            if(name.indexOf("@odata") === 0) {
	                delete obj[name];
	            }
	        }
	    }

	    extend(true, kendo.data, {
	        schemas: {
	            odata: {
	                type: "json",
	                data: function(data) {
	                    return data.d.results || [data.d];
	                },
	                total: "d.__count"
	            }
	        },
	        transports: {
	            odata: {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "jsonp",
	                    jsonp: "$callback"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type, useVersionFour) {
	                    var params,
	                        value,
	                        option,
	                        dataType;

	                    options = options || {};
	                    type = type || "read";
	                    dataType = (this.options || defaultDataType)[type];
	                    dataType = dataType ? dataType.dataType : "json";

	                    if (type === "read") {
	                        params = {
	                            $inlinecount: "allpages"
	                        };

	                        if (dataType != "json") {
	                            params.$format = "json";
	                        }

	                        for (option in options) {
	                            if (mappers[option]) {
	                                mappers[option](params, options[option], useVersionFour);
	                            } else {
	                                params[option] = options[option];
	                            }
	                        }
	                    } else {
	                        if (dataType !== "json") {
	                            throw new Error("Only json dataType can be used for " + type + " operation.");
	                        }

	                        if (type !== "destroy") {
	                            for (option in options) {
	                                value = options[option];
	                                if (typeof value === "number") {
	                                    options[option] = value + "";
	                                }
	                            }

	                            params = kendo.stringify(options);
	                        }
	                    }

	                    return params;
	                }
	            }
	        }
	    });

	    extend(true, kendo.data, {
	        schemas: {
	            "odata-v4": {
	                type: "json",
	                data: function(data) {
	                    data = $.extend({}, data);
	                    stripMetadata(data);

	                    if (data.value) {
	                        return data.value;
	                    }
	                    return [data];
	                },
	                total: function(data) {
	                    return data["@odata.count"];
	                }
	            }
	        },
	        transports: {
	            "odata-v4": {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "json"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type) {
	                    var result = kendo.data.transports.odata.parameterMap(options, type, true);
	                    if (type == "read") {
	                        result.$count = true;
	                        delete result.$inlinecount;
	                    }

	                    return result;
	                }
	            }
	        }
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ })

/******/ });

/***/ }),

/***/ 515:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1032);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 993:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1032:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(993) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.xml",
	    name: "XML",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	/*jshint  eqnull: true, boss: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        isArray = $.isArray,
	        isPlainObject = $.isPlainObject,
	        map = $.map,
	        each = $.each,
	        extend = $.extend,
	        getter = kendo.getter,
	        Class = kendo.Class;

	    var XmlDataReader = Class.extend({
	        init: function(options) {
	            var that = this,
	                total = options.total,
	                model = options.model,
	                parse = options.parse,
	                errors = options.errors,
	                serialize = options.serialize,
	                data = options.data;

	            if (model) {
	                if (isPlainObject(model)) {
	                    var base = options.modelBase || kendo.data.Model;

	                    if (model.fields) {
	                        each(model.fields, function(field, value) {
	                            if (isPlainObject(value) && value.field) {
	                                if (!$.isFunction(value.field)) {
	                                    value = extend(value, { field: that.getter(value.field) });
	                                }
	                            } else {
	                                value = { field: that.getter(value) };
	                            }
	                            model.fields[field] = value;
	                        });
	                    }

	                    var id = model.id;
	                    if (id) {
	                        var idField = {};

	                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };
	                        model.fields = extend(idField, model.fields);
	                        model.id = that.xpathToMember(id);
	                    }
	                    model = base.define(model);
	                }

	                that.model = model;
	            }

	            if (total) {
	                if (typeof total == "string") {
	                    total = that.getter(total);
	                    that.total = function(data) {
	                        return parseInt(total(data), 10);
	                    };
	                } else if (typeof total == "function"){
	                    that.total = total;
	                }
	            }

	            if (errors) {
	                if (typeof errors == "string") {
	                    errors = that.getter(errors);
	                    that.errors = function(data) {
	                        return errors(data) || null;
	                    };
	                } else if (typeof errors == "function"){
	                    that.errors = errors;
	                }
	            }

	            if (data) {
	                if (typeof data == "string") {
	                    data = that.xpathToMember(data);
	                    that.data = function(value) {
	                        var result = that.evaluate(value, data),
	                            modelInstance;

	                        result = isArray(result) ? result : [result];

	                        if (that.model && model.fields) {
	                            modelInstance = new that.model();

	                            return map(result, function(value) {
	                                if (value) {
	                                    var record = {}, field;

	                                    for (field in model.fields) {
	                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));
	                                    }

	                                    return record;
	                                }
	                            });
	                        }

	                        return result;
	                    };
	                } else if (typeof data == "function") {
	                    that.data = data;
	                }
	            }

	            if (typeof parse == "function") {
	                var xmlParse = that.parse;

	                that.parse = function(data) {
	                    var xml = parse.call(that, data);
	                    return xmlParse.call(that, xml);
	                };
	            }

	            if (typeof serialize == "function") {
	                that.serialize = serialize;
	            }
	        },
	        total: function(result) {
	            return this.data(result).length;
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        serialize: function(data) {
	            return data;
	        },
	        parseDOM: function(element) {
	            var result = {},
	                parsedNode,
	                node,
	                nodeType,
	                nodeName,
	                member,
	                attribute,
	                attributes = element.attributes,
	                attributeCount = attributes.length,
	                idx;

	            for (idx = 0; idx < attributeCount; idx++) {
	                attribute = attributes[idx];
	                result["@" + attribute.nodeName] = attribute.nodeValue;
	            }

	            for (node = element.firstChild; node; node = node.nextSibling) {
	                nodeType = node.nodeType;

	                if (nodeType === 3 || nodeType === 4) {
	                    // text nodes or CDATA are stored as #text field
	                    result["#text"] = node.nodeValue;
	                } else if (nodeType === 1) {
	                    // elements are stored as fields
	                    parsedNode = this.parseDOM(node);

	                    nodeName = node.nodeName;

	                    member = result[nodeName];

	                    if (isArray(member)) {
	                        // elements of same nodeName are stored as array
	                        member.push(parsedNode);
	                    } else if (member !== undefined) {
	                        member = [member, parsedNode];
	                    } else {
	                        member = parsedNode;
	                    }

	                    result[nodeName] = member;
	                }
	            }
	            return result;
	        },

	        evaluate: function(value, expression) {
	            var members = expression.split("."),
	                member,
	                result,
	                length,
	                intermediateResult,
	                idx;

	            while (member = members.shift()) {
	                value = value[member];

	                if (isArray(value)) {
	                    result = [];
	                    expression = members.join(".");

	                    for (idx = 0, length = value.length; idx < length; idx++) {
	                        intermediateResult = this.evaluate(value[idx], expression);

	                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

	                        result.push.apply(result, intermediateResult);
	                    }

	                    return result;
	                }
	            }

	            return value;
	        },

	        parse: function(xml) {
	            var documentElement,
	                tree,
	                result = {};

	            documentElement = xml.documentElement || $.parseXML(xml).documentElement;

	            tree = this.parseDOM(documentElement);

	            result[documentElement.nodeName] = tree;

	            return result;
	        },

	        xpathToMember: function(member, raw) {
	            if (!member) {
	                return "";
	            }

	            member = member.replace(/^\//, "") // remove the first "/"
	                           .replace(/\//g, "."); // replace all "/" with "."

	            if (member.indexOf("@") >= 0) {
	                // replace @attribute with '["@attribute"]'
	                return member.replace(/\.?(@.*)/, raw? '$1':'["$1"]');
	            }

	            if (member.indexOf("text()") >= 0) {
	                // replace ".text()" with '["#text"]'
	                return member.replace(/(\.?text\(\))/, raw? '#text':'["#text"]');
	            }

	            return member;
	        },
	        getter: function(member) {
	            return getter(this.xpathToMember(member), true);
	        }
	    });

	    $.extend(true, kendo.data, {
	        XmlDataReader: XmlDataReader,
	        readers: {
	            xml: XmlDataReader
	        }
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ })

/******/ });

/***/ }),

/***/ 516:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1481);
	module.exports = __webpack_require__(1481);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 920:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 1481:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(920)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	window.kendo.util = window.kendo.util || {};

	var LRUCache = kendo.Class.extend({
	    init: function(size) {

	        this._size = size;
	        this._length = 0;
	        this._map = {};
	    },

	    put: function(key, value) {
	        var map = this._map;
	        var entry = { key: key, value: value };

	        map[key] = entry;

	        if (!this._head) {
	            this._head = this._tail = entry;
	        } else {
	            this._tail.newer = entry;
	            entry.older = this._tail;
	            this._tail = entry;
	        }

	        if (this._length >= this._size) {
	            map[this._head.key] = null;
	            this._head = this._head.newer;
	            this._head.older = null;
	        } else {
	            this._length++;
	        }
	    },

	    get: function(key) {
	        var entry = this._map[key];

	        if (entry) {
	            if (entry === this._head && entry !== this._tail) {
	                this._head = entry.newer;
	                this._head.older = null;
	            }

	            if (entry !== this._tail) {
	                if (entry.older) {
	                    entry.older.newer = entry.newer;
	                    entry.newer.older = entry.older;
	                }

	                entry.older = this._tail;
	                entry.newer = null;

	                this._tail.newer = entry;
	                this._tail = entry;
	            }

	            return entry.value;
	        }
	    }
	});

	var REPLACE_REGEX = /\r?\n|\r|\t/g;
	var SPACE = ' ';

	function normalizeText(text) {
	    return String(text).replace(REPLACE_REGEX, SPACE);
	}

	function objectKey(object) {
	    var parts = [];
	    for (var key in object) {
	        parts.push(key + object[key]);
	    }

	    return parts.sort().join("");
	}

	// Computes FNV-1 hash
	// See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
	function hashKey(str) {
	    // 32-bit FNV-1 offset basis
	    // See http://isthe.com/chongo/tech/comp/fnv/#FNV-param
	    var hash = 0x811C9DC5;

	    for (var i = 0; i < str.length; ++i) {
	        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
	        hash ^= str.charCodeAt(i);
	    }

	    return hash >>> 0;
	}

	function zeroSize() {
	    return { width: 0, height: 0, baseline: 0 };
	}

	var DEFAULT_OPTIONS = {
	    baselineMarkerSize: 1
	};

	var defaultMeasureBox;

	if (typeof document !== "undefined") {
	    defaultMeasureBox = document.createElement("div");
	    defaultMeasureBox.style.cssText = "position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;" +
	              "padding: 0 !important; margin: 0 !important; border: 0 !important;" +
	              "line-height: normal !important; visibility: hidden !important; white-space: pre!important;";
	}

	var TextMetrics = kendo.Class.extend({
	    init: function(options) {

	        this._cache = new LRUCache(1000);
	        this.options = $.extend({}, DEFAULT_OPTIONS, options);
	    },

	    measure: function(text, style, options) {
	        if (options === void 0) { options = {}; }

	        if (!text) {
	            return zeroSize();
	        }

	        var styleKey = objectKey(style);
	        var cacheKey = hashKey(text + styleKey);
	        var cachedResult = this._cache.get(cacheKey);

	        if (cachedResult) {
	            return cachedResult;
	        }

	        var size = zeroSize();
	        var measureBox = options.box || defaultMeasureBox;
	        var baselineMarker = this._baselineMarker().cloneNode(false);

	        for (var key in style) {
	            var value = style[key];
	            if (typeof value !== "undefined") {
	                measureBox.style[key] = value;
	            }
	        }

	        var textStr = options.normalizeText !== false ? normalizeText(text) : String(text);

	        measureBox.textContent = textStr;
	        measureBox.appendChild(baselineMarker);
	        document.body.appendChild(measureBox);

	        if (textStr.length) {
	            size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
	            size.height = measureBox.offsetHeight;
	            size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
	        }

	        if (size.width > 0 && size.height > 0) {
	            this._cache.put(cacheKey, size);
	        }

	        measureBox.parentNode.removeChild(measureBox);

	        return size;
	    },

	    _baselineMarker: function() {
	        var marker = document.createElement("div");
	        marker.style.cssText = "display: inline-block; vertical-align: baseline;width: " +
	            this.options.baselineMarkerSize + "px; height: " + this.options.baselineMarkerSize + "px;overflow: hidden;";

	        return marker;
	    }
	});

	TextMetrics.current = new TextMetrics();

	function measureText(text, style, measureBox) {
	    return TextMetrics.current.measure(text, style, measureBox);
	}

	kendo.deepExtend(kendo.util, {
	    LRUCache: LRUCache,
	    TextMetrics: TextMetrics,
	    measureText: measureText,
	    objectKey: objectKey,
	    hashKey: hashKey,
	    normalizeText: normalizeText
	});

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ })

/******/ });

/***/ }),

/***/ 517:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(915);
	module.exports = __webpack_require__(915);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 910:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(169);

/***/ }),

/***/ 915:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(910), __webpack_require__(916) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    var kendo = window.kendo;
	    var draw = kendo.drawing;
	    var DrawingSurface = draw.Surface;
	    var Widget = kendo.ui.Widget;
	    var deepExtend = kendo.deepExtend;
	    var proxy = $.proxy;

	    kendo.support.svg = DrawingSurface.support.svg;
	    kendo.support.canvas = DrawingSurface.support.canvas;

	    var Surface = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, {});

	            this.options = deepExtend({}, this.options, options);

	            this._instance = DrawingSurface.create(this.element[0], options);
	            if (this._instance.translate) {
	                this.translate = translate;
	            }

	            this._triggerInstanceHandler = proxy(this._triggerInstanceEvent, this);
	            this._bindHandler("click");
	            this._bindHandler("mouseenter");
	            this._bindHandler("mouseleave");
	            this._bindHandler("mousemove");

	            this._enableTracking();
	        },

	        options: {
	            name: "Surface",
	            tooltip: {}
	        },

	        events: [
	            "click",
	            "mouseenter",
	            "mouseleave",
	            "mousemove",
	            "resize",
	            "tooltipOpen",
	            "tooltipClose"
	        ],

	        _triggerInstanceEvent: function(e) {
	            this.trigger(e.type, e);
	        },

	        _bindHandler: function(event) {
	            this._instance.bind(event, this._triggerInstanceHandler);
	        },

	        draw: function(element) {
	            this._instance.draw(element);
	        },

	        clear: function() {
	            if (this._instance) {
	                this._instance.clear();
	            }
	            this.hideTooltip();
	        },

	        destroy: function() {
	            if (this._instance) {
	                this._instance.destroy();
	                delete this._instance;
	            }

	            if (this._tooltip) {
	                this._tooltip.destroy();
	                delete this._tooltip;
	            }

	            Widget.fn.destroy.call(this);
	        },

	        exportVisual: function() {
	            return this._instance.exportVisual();
	        },

	        eventTarget: function(e) {
	            return this._instance.eventTarget(e);
	        },

	        showTooltip: function(shape, options) {
	            if (this._tooltip) {
	                this._tooltip.show(shape, options);
	            }
	        },

	        hideTooltip: function() {
	            if (this._tooltip) {
	                this._tooltip.hide();
	            }
	        },

	        suspendTracking: function() {
	            this._instance.suspendTracking();
	            this.hideTooltip();
	        },

	        resumeTracking: function() {
	            this._instance.resumeTracking();
	        },

	        getSize: function() {
	            return {
	                width: this.element.width(),
	                height: this.element.height()
	            };
	        },

	        setSize: function(size) {
	            this.element.css({
	                width: size.width,
	                height: size.height
	            });

	            this._size = size;
	            this._instance.currentSize(size);
	            this._resize();
	        },

	        _resize: function() {
	            this._instance.currentSize(this._size);
	            this._instance._resize();
	        },

	        _enableTracking: function() {
	            if (kendo.ui.Popup) {
	                this._tooltip = new draw.SurfaceTooltip(this, this.options.tooltip || {});
	            }
	        }
	    });

	    kendo.ui.plugin(Surface);

	    Surface.create = function(element, options) {
	        return new Surface(element, options);
	    };

	    kendo.drawing.Surface = Surface;

	    function translate(offset) {
	        this._instance.translate(offset);
	    }

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }),

/***/ 916:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(468);

/***/ })

/******/ });

/***/ }),

/***/ 518:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(909);
	module.exports = __webpack_require__(909);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 909:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(910) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {
	    
	    var kendo = window.kendo;
	    var drawing = kendo.drawing;
	    var drawDOM = drawing.drawDOM;

	    drawing.drawDOM = function(element, options) {
	        return drawDOM($(element)[0], options);
	    };

	    drawing.drawDOM.drawText = drawDOM.drawText;
	    drawing.drawDOM.getFontFaces = drawDOM.getFontFaces;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));


/***/ }),

/***/ 910:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(169);

/***/ })

/******/ });

/***/ }),

/***/ 519:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(857);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 857:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(858)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    var dataviz = kendo.dataviz;
	    var services = dataviz.services;
	    var draw = kendo.drawing;

	    dataviz.ExportMixin = {
	        extend: function(proto, skipLegacy) {
	            if (!proto.exportVisual) {
	                throw new Error("Mixin target has no exportVisual method defined.");
	            }

	            proto.exportSVG = this.exportSVG;
	            proto.exportImage = this.exportImage;
	            proto.exportPDF = this.exportPDF;

	            if (!skipLegacy) {
	                proto.svg = this.svg;
	                proto.imageDataURL = this.imageDataURL;
	            }
	        },

	        exportSVG: function(options) {
	            return draw.exportSVG(this.exportVisual(), options);
	        },

	        exportImage: function(options) {
	            return draw.exportImage(this.exportVisual(options), options);
	        },

	        exportPDF: function(options) {
	            return draw.exportPDF(this.exportVisual(), options);
	        },

	        svg: function() {
	            if (draw.svg.Surface) {
	                return draw.svg.exportGroup(this.exportVisual());
	            } else {
	                throw new Error("SVG Export failed. Unable to export instantiate kendo.drawing.svg.Surface");
	            }
	        },

	        imageDataURL: function() {
	            if (!kendo.support.canvas) {
	                return null;
	            }

	            if (draw.canvas.Surface) {
	                var container = $("<div />").css({
	                    display: "none",
	                    width: this.element.width(),
	                    height: this.element.height()
	                }).appendTo(document.body);

	                var surface = new draw.canvas.Surface(container[0]);
	                surface.draw(this.exportVisual());
	                var image = surface._rootElement.toDataURL();

	                surface.destroy();
	                container.remove();

	                return image;
	            } else {
	                throw new Error("Image Export failed. Unable to export instantiate kendo.drawing.canvas.Surface");
	            }
	        }
	    };

	    services.IntlService.register({
	       format: function(format) {
	           return kendo.format.apply(null, [format].concat(Array.prototype.slice.call(arguments, 1)));
	       },
	       toString: kendo.toString,
	       parseDate: kendo.parseDate
	    });

	    services.TemplateService.register({
	       compile: kendo.template
	    });

	    dataviz.Point2D = dataviz.Point;
	    dataviz.Box2D = dataviz.Box;
	    dataviz.mwDelta = function(e) {
	        return dataviz.mousewheelDelta(e.originalEvent);
	    };

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }),

/***/ 858:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(469);

/***/ })

/******/ });

/***/ }),

/***/ 520:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(905);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 850:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(64);

/***/ }),

/***/ 905:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	     !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(850) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	    var cache;

	    function autoTheme(force) {
	        if (!force && cache) {
	            return cache;
	        }

	        var theme = { chart: kendo.dataviz.chartBaseTheme() };
	        var hook = $(
	            '<div style="display: none">' +
	            '  <div class="k-var--accent"></div>' +
	            '  <div class="k-var--accent-contrast"></div>' +
	            '  <div class="k-var--base"></div>' +
	            '  <div class="k-var--background"></div>' +
	            '  <div class="k-var--normal-background"></div>' +
	            '  <div class="k-var--normal-text-color"></div>' +
	            '  <div class="k-var--hover-background"></div>' +
	            '  <div class="k-var--hover-text-color"></div>' +
	            '  <div class="k-var--selected-background"></div>' +
	            '  <div class="k-var--selected-text-color"></div>' +
	            '  <div class="k-var--chart-error-bars-background"></div>' +
	            '  <div class="k-var--chart-notes-background"></div>' +
	            '  <div class="k-var--chart-notes-border"></div>' +
	            '  <div class="k-var--chart-notes-lines"></div>' +
	            '  <div class="k-var--chart-crosshair-background"></div>' +
	            '  <div class="k-var--chart-inactive"></div>' +
	            '  <div class="k-var--chart-major-lines"></div>' +
	            '  <div class="k-var--chart-minor-lines"></div>' +
	            '  <div class="k-var--chart-area-opacity"></div>' +
	            '  <div class="k-widget">' +
	            '      <div class="k-var--chart-font"></div>' +
	            '      <div class="k-var--chart-title-font"></div>' +
	            '      <div class="k-var--chart-label-font"></div>' +
	            '  </div>' +
	            '  <div class="k-var--series">' +
	            '    <div class="k-var--series-a"></div>' +
	            '    <div class="k-var--series-b"></div>' +
	            '    <div class="k-var--series-c"></div>' +
	            '    <div class="k-var--series-d"></div>' +
	            '    <div class="k-var--series-e"></div>' +
	            '    <div class="k-var--series-f"></div>' +
	            '  </div>' +
	            '</div>').appendTo(document.body);

	        function mapColor(key, varName) {
	            set(key, queryStyle(varName, "backgroundColor"));
	        }

	        function queryStyle(varName, prop) {
	            return hook.find(".k-var--" + varName).css(prop);
	        }

	        function set(path, value) {
	            var store = theme;
	            var parts = path.split('.');
	            var key = parts.shift();

	            while (parts.length > 0) {
	                store = store[key] = store[key] || {};
	                key = parts.shift();
	            }

	            store[key] = value;
	        }

	        (function setColors() {
	            mapColor("chart.axisDefaults.crosshair.color", "chart-crosshair-background");
	            mapColor("chart.axisDefaults.labels.color", "normal-text-color");
	            mapColor("chart.axisDefaults.line.color", "chart-major-lines");
	            mapColor("chart.axisDefaults.majorGridLines.color", "chart-major-lines");
	            mapColor("chart.axisDefaults.minorGridLines.color", "chart-minor-lines");
	            mapColor("chart.axisDefaults.notes.icon.background", "chart-notes-background");
	            mapColor("chart.axisDefaults.notes.icon.border.color", "chart-notes-border");
	            mapColor("chart.axisDefaults.notes.line.color", "chart-notes-lines");
	            mapColor("chart.axisDefaults.title.color", "normal-text-color");
	            mapColor('chart.chartArea.background', 'background');
	            mapColor("chart.legend.inactiveItems.labels.color", "chart-inactive");
	            mapColor("chart.legend.inactiveItems.markers.color", "chart-inactive");
	            mapColor("chart.legend.labels.color", "normal-text-color");
	            mapColor("chart.seriesDefaults.boxPlot.downColor", "chart-major-lines");
	            mapColor("chart.seriesDefaults.boxPlot.mean.color", "base");
	            mapColor("chart.seriesDefaults.boxPlot.median.color", "base");
	            mapColor("chart.seriesDefaults.boxPlot.whiskers.color", "accent");
	            mapColor("chart.seriesDefaults.bullet.target.color", "accent");
	            mapColor("chart.seriesDefaults.candlestick.downColor", "normal-text-color");
	            mapColor("chart.seriesDefaults.candlestick.line.color", "normal-text-color");
	            mapColor("chart.seriesDefaults.errorBars.color", "chart-error-bars-background");
	            mapColor("chart.seriesDefaults.horizontalWaterfall.line.color", "chart-major-lines");
	            mapColor("chart.seriesDefaults.icon.border.color", "chart-major-lines");
	            mapColor("chart.seriesDefaults.labels.background", "background");
	            mapColor("chart.seriesDefaults.labels.color", "normal-text-color");
	            mapColor("chart.seriesDefaults.notes.icon.background", "chart-notes-background");
	            mapColor("chart.seriesDefaults.notes.icon.border.color", "chart-notes-border");
	            mapColor("chart.seriesDefaults.notes.line.color", "chart-notes-lines");
	            mapColor("chart.seriesDefaults.verticalBoxPlot.downColor", "chart-major-lines");
	            mapColor("chart.seriesDefaults.verticalBoxPlot.mean.color", "base");
	            mapColor("chart.seriesDefaults.verticalBoxPlot.median.color", "base");
	            mapColor("chart.seriesDefaults.verticalBoxPlot.whiskers.color", "accent");
	            mapColor("chart.seriesDefaults.verticalBullet.target.color", "accent");
	            mapColor("chart.seriesDefaults.waterfall.line.color", "chart-major-lines");
	            mapColor("chart.title.color", "normal-text-color");

	            set("chart.seriesDefaults.labels.opacity", queryStyle("chart-area-opacity", "opacity"));

	            mapColor("diagram.shapeDefaults.fill.color", "accent");
	            mapColor("diagram.shapeDefaults.content.color", "accent-contrast");
	            mapColor("diagram.shapeDefaults.connectorDefaults.fill.color", "normal-text-color");
	            mapColor("diagram.shapeDefaults.connectorDefaults.stroke.color", "accent-contrast");
	            mapColor("diagram.shapeDefaults.connectorDefaults.hover.fill.color", "accent-contrast");
	            mapColor("diagram.shapeDefaults.connectorDefaults.hover.stroke.color", "normal-text-color");
	            mapColor("diagram.editable.resize.handles.stroke.color", "normal-text-color");
	            mapColor("diagram.editable.resize.handles.fill.color", "normal-background");
	            mapColor("diagram.editable.resize.handles.hover.stroke.color", "normal-text-color");
	            mapColor("diagram.editable.resize.handles.hover.fill.color", "normal-text-color");
	            mapColor("diagram.selectable.stroke.color", "normal-text-color");
	            mapColor("diagram.connectionDefaults.stroke.color", "normal-text-color");
	            mapColor("diagram.connectionDefaults.content.color", "normal-text-color");
	            mapColor("diagram.connectionDefaults.selection.handles.fill.color", "accent-contrast");
	            mapColor("diagram.connectionDefaults.selection.handles.stroke.color", "normal-text-color");
	            mapColor("diagram.connectionDefaults.selection.stroke.color", "normal-text-color");
	        })();

	        (function setFonts() {
	            function font(varName) {
	                return queryStyle(varName, "fontSize") + " " +
	                       queryStyle(varName, "fontFamily");
	            }

	            var defaultFont = font("chart-font");
	            var titleFont = font("chart-title-font");
	            var labelFont = font("chart-label-font");

	            set("chart.axisDefaults.labels.font", labelFont);
	            set("chart.axisDefaults.notes.label.font", defaultFont);
	            set("chart.axisDefaults.title.font", defaultFont);
	            set("chart.legend.labels.font", defaultFont);
	            set("chart.seriesDefaults.labels.font", labelFont);
	            set("chart.seriesDefaults.notes.label.font", defaultFont);
	            set("chart.title.font", titleFont);
	        })();

	        (function setSeriesColors() {
	            function letterPos(letter) {
	                return letter.toLowerCase().charCodeAt(0) - "a".charCodeAt(0);
	            }

	            function seriesPos(name) {
	                return letterPos(name.match(/series-([a-z])$/)[1]);
	            }

	            var series = $(".k-var--series div").toArray();
	            var seriesColors = series.reduce(
	              function(arr, el) {
	                var pos = seriesPos(el.className);
	                arr[pos] = $(el).css("backgroundColor");

	                return arr;
	              },
	              [] // Will populate the series colors in this array
	            );

	            set("chart.seriesColors", seriesColors);
	        })();

	        hook.remove();

	        cache = theme;

	        return theme;
	    }

	    kendo.dataviz.autoTheme = autoTheme;

	}, __webpack_require__(3));


/***/ })

/******/ });

/***/ }),

/***/ 521:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(907);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 907:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(908) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    // Imports ================================================================
	    var kendo = window.kendo,
	        ui = kendo.dataviz.ui,
	        deepExtend = kendo.deepExtend;

	    // Constants ==============================================================
	    var BLACK = "#000",
	        SANS = "Arial,Helvetica,sans-serif",
	        SANS12 = "12px " + SANS,
	        WHITE = "#fff";

	    var chartBaseTheme = kendo.dataviz.chartBaseTheme({
	        gradients: true
	    });

	    var gaugeBaseTheme = {
	        scale: {
	            labels: {
	                font: SANS12
	            }
	        }
	    };

	    var diagramBaseTheme = {
	        shapeDefaults: {
	            hover: {
	                opacity: 0.2
	            },
	            stroke: {
	                width: 0
	            }
	        },
	        editable: {
	            resize: {
	                handles: {
	                    width: 7,
	                    height: 7
	                }
	            }
	        },
	        selectable: {
	            stroke: {
	                width: 1,
	                dashType: "dot"
	            }
	        },
	        connectionDefaults: {
	            stroke: {
	                width: 2
	            },
	            selection: {
	                handles: {
	                    width: 8,
	                    height: 8
	                }
	            },
	            editable: {
	                tools: ["edit", "delete"]
	            }
	        }
	    };

	    var themes = ui.themes,
	        registerTheme = ui.registerTheme = function(themeName, options) {
	            var result = {};
	            // Apply base theme
	            result.chart = deepExtend({}, chartBaseTheme, options.chart);
	            result.gauge = deepExtend({}, gaugeBaseTheme, options.gauge);
	            result.diagram = deepExtend({}, diagramBaseTheme, options.diagram);
	            result.treeMap = deepExtend({}, options.treeMap);

	            // Copy the line/area chart settings for their vertical counterparts
	            var defaults = result.chart.seriesDefaults;
	            defaults.verticalLine = deepExtend({}, defaults.line);
	            defaults.verticalArea = deepExtend({}, defaults.area);
	            defaults.rangeArea = deepExtend({}, defaults.area);
	            defaults.verticalRangeArea = deepExtend({}, defaults.rangeArea);
	            defaults.verticalBoxPlot = deepExtend({}, defaults.boxPlot);
	            defaults.polarArea = deepExtend({}, defaults.radarArea);
	            defaults.polarLine = deepExtend({}, defaults.radarLine);

	            themes[themeName] = result;
	        };

	    registerTheme("black", {
	        chart: {
	            title: {
	                color: WHITE
	            },
	            legend: {
	                labels: {
	                    color: WHITE
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#919191"
	                    },
	                    markers: {
	                        color: "#919191"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: WHITE
	                },
	                errorBars: {
	                    color: WHITE
	                },
	                notes: {
	                    icon: {
	                        background: "#3b3b3b",
	                        border: {
	                            color: "#8e8e8e"
	                        }
	                    },
	                    label: {
	                        color: WHITE
	                    },
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                },
	                pie: {
	                    overlay: {
	                        gradient: "sharpBevel"
	                    }
	                },
	                donut: {
	                    overlay: {
	                        gradient: "sharpGlass"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#3d3d3d"
	                    }
	                },
	                scatter: {
	                    markers: {
	                        background: "#3d3d3d"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#3d3d3d"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                },
	                candlestick: {
	                    downColor: "#555",
	                    line: {
	                        color: WHITE
	                    },
	                    border: {
	                        _brightness: 1.5,
	                        opacity: 1
	                    },
	                    highlight: {
	                        border: {
	                            color: WHITE,
	                            opacity: 0.2
	                        }
	                    }
	                },
	                ohlc: {
	                    line: {
	                        color: WHITE
	                    }
	                }
	            },
	            chartArea: {
	                background: "#3d3d3d"
	            },
	            seriesColors: ["#0081da", "#3aafff", "#99c900", "#ffeb3d", "#b20753", "#ff4195"],
	            axisDefaults: {
	                line: {
	                    color: "#8e8e8e"
	                },
	                labels: {
	                    color: WHITE
	                },
	                majorGridLines: {
	                    color: "#545454"
	                },
	                minorGridLines: {
	                    color: "#454545"
	                },
	                title: {
	                    color: WHITE
	                },
	                crosshair: {
	                    color: "#8e8e8e"
	                },
	                notes: {
	                    icon: {
	                        background: "#3b3b3b",
	                        border: {
	                            color: "#8e8e8e"
	                        }
	                    },
	                    label: {
	                        color: WHITE
	                    },
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#0070e4"
	            },
	            scale: {
	                rangePlaceholderColor: "#1d1d1d",
	                labels: {
	                    color: WHITE
	                },
	                minorTicks: {
	                    color: WHITE
	                },
	                majorTicks: {
	                    color: WHITE
	                },
	                line: {
	                    color: WHITE
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#0066cc"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: WHITE
	                    },
	                    stroke: {
	                        color: "#384049"
	                    },
	                    hover: {
	                        fill: {
	                            color: "#3d3d3d"
	                        },
	                        stroke: {
	                            color: "#efefef"
	                        }
	                    }
	                },
	                content: {
	                    color: WHITE
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: "#3d3d3d"
	                        },
	                        stroke: {
	                            color: WHITE
	                        },
	                        hover: {
	                            fill: {
	                                color: WHITE
	                            },
	                            stroke: {
	                                color: WHITE
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: WHITE
	                        },
	                        fill: {
	                            color: WHITE
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: WHITE
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: WHITE
	                },
	                content: {
	                    color: WHITE
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: "#3d3d3d"
	                        },
	                        stroke: {
	                            color: "#efefef"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#0081da", "#314b5c"],
	                ["#3aafff", "#3c5464"],
	                ["#99c900", "#4f5931"],
	                ["#ffeb3d", "#64603d"],
	                ["#b20753", "#543241"],
	                ["#ff4195", "#643e4f"]]
	        }
	    });

	    registerTheme("blueopal", {
	        chart: {
	            title: {
	                color: "#293135"
	            },
	            legend: {
	                labels: {
	                    color: "#293135"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#27A5BA"
	                    },
	                    markers: {
	                        color: "#27A5BA"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: BLACK,
	                    background: WHITE,
	                    opacity: 0.5
	                },
	                errorBars: {
	                    color: "#293135"
	                },
	                candlestick: {
	                    downColor: "#c4d0d5",
	                    line: {
	                        color: "#9aabb2"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#9aabb2"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#9aabb2"
	                    }
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#9aabb2"
	                        }
	                    },
	                    label: {
	                        color: "#293135"
	                    },
	                    line: {
	                        color: "#9aabb2"
	                    }
	                }
	            },
	            seriesColors: ["#0069a5", "#0098ee", "#7bd2f6", "#ffb800", "#ff8517", "#e34a00"],
	            axisDefaults: {
	                line: {
	                    color: "#9aabb2"
	                },
	                labels: {
	                    color: "#293135"
	                },
	                majorGridLines: {
	                    color: "#c4d0d5"
	                },
	                minorGridLines: {
	                    color: "#edf1f2"
	                },
	                title: {
	                    color: "#293135"
	                },
	                crosshair: {
	                    color: "#9aabb2"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#9aabb2"
	                        }
	                    },
	                    label: {
	                        color: "#293135"
	                    },
	                    line: {
	                        color: "#9aabb2"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#005c83"
	            },
	            scale: {
	                rangePlaceholderColor: "#daecf4",

	                labels: {
	                    color: "#293135"
	                },
	                minorTicks: {
	                    color: "#293135"
	                },
	                majorTicks: {
	                    color: "#293135"
	                },
	                line: {
	                    color: "#293135"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#7ec6e3"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#003f59"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#003f59"
	                        }
	                    }
	                },
	                content: {
	                    color: "#293135"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#003f59"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#003f59"
	                            },
	                            stroke: {
	                                color: "#003f59"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#003f59"
	                        },
	                        fill: {
	                            color: "#003f59"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#003f59"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#003f59"
	                },
	                content: {
	                    color: "#293135"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: "#3d3d3d"
	                        },
	                        stroke: {
	                            color: "#efefef"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#0069a5", "#bad7e7"],
	                ["#0098ee", "#b9e0f5"],
	                ["#7bd2f6", "#ceeaf6"],
	                ["#ffb800", "#e6e3c4"],
	                ["#ff8517", "#e4d8c8"],
	                ["#e34a00", "#ddccc2"]
	            ]
	        }
	    });

	    registerTheme("highcontrast", {
	        chart: {
	            title: {
	                color: "#ffffff"
	            },
	            legend: {
	                labels: {
	                    color: "#ffffff"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#66465B"
	                    },
	                    markers: {
	                        color: "#66465B"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#ffffff"
	                },
	                errorBars: {
	                    color: "#ffffff"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#ffffff"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#ffffff"
	                    }
	                },
	                pie: {
	                    overlay: {
	                        gradient: "sharpGlass"
	                    }
	                },
	                donut: {
	                    overlay: {
	                        gradient: "sharpGlass"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#2c232b"
	                    }
	                },
	                scatter: {
	                    markers: {
	                        background: "#2c232b"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#2c232b"
	                    }
	                },
	                area: {
	                    opacity: 0.5
	                },
	                waterfall: {
	                    line: {
	                        color: "#ffffff"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#ffffff"
	                    }
	                },
	                candlestick: {
	                    downColor: "#664e62",
	                    line: {
	                        color: "#ffffff"
	                    },
	                    border: {
	                        _brightness: 1.5,
	                        opacity: 1
	                    },
	                    highlight: {
	                        border: {
	                            color: "#ffffff",
	                            opacity: 1
	                        }
	                    }
	                },
	                ohlc: {
	                    line: {
	                        color: "#ffffff"
	                    }
	                }
	            },
	            chartArea: {
	                background: "#2c232b"
	            },
	            seriesColors: ["#a7008f", "#ffb800", "#3aafff", "#99c900", "#b20753", "#ff4195"],
	            axisDefaults: {
	                line: {
	                    color: "#ffffff"
	                },
	                labels: {
	                    color: "#ffffff"
	                },
	                majorGridLines: {
	                    color: "#664e62"
	                },
	                minorGridLines: {
	                    color: "#4f394b"
	                },
	                title: {
	                    color: "#ffffff"
	                },
	                crosshair: {
	                    color: "#ffffff"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#ffffff"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#ffffff"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#a7008f"
	            },
	            scale: {
	                rangePlaceholderColor: "#2c232b",

	                labels: {
	                    color: "#ffffff"
	                },
	                minorTicks: {
	                    color: "#2c232b"
	                },
	                majorTicks: {
	                    color: "#664e62"
	                },
	                line: {
	                    color: "#ffffff"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#a7018f"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: WHITE
	                    },
	                    stroke: {
	                        color: "#2c232b"
	                    },
	                    hover: {
	                        fill: {
	                            color: "#2c232b"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                },
	                content: {
	                    color: WHITE
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: "#2c232b"
	                        },
	                        stroke: {
	                            color: WHITE
	                        },
	                        hover: {
	                            fill: {
	                                color: WHITE
	                            },
	                            stroke: {
	                                color: WHITE
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: WHITE
	                        },
	                        fill: {
	                            color: WHITE
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: WHITE
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: WHITE
	                },
	                content: {
	                    color: WHITE
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: "#2c232b"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#a7008f", "#451c3f"],
	                ["#ffb800", "#564122"],
	                ["#3aafff", "#2f3f55"],
	                ["#99c900", "#424422"],
	                ["#b20753", "#471d33"],
	                ["#ff4195", "#562940"]
	            ]
	        }
	    });

	    registerTheme("default", {
	        chart: {
	            title: {
	                color: "#8e8e8e"
	            },
	            legend: {
	                labels: {
	                    color: "#232323"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#919191"
	                    },
	                    markers: {
	                        color: "#919191"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: BLACK,
	                    background: WHITE,
	                    opacity: 0.5
	                },
	                errorBars: {
	                    color: "#232323"
	                },
	                candlestick: {
	                    downColor: "#dedede",
	                    line: {
	                        color: "#8d8d8d"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#8e8e8e"
	                        }
	                    },
	                    label: {
	                        color: "#232323"
	                    },
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                }
	            },
	            seriesColors: ["#ff6800", "#a0a700", "#ff8d00", "#678900", "#ffb53c", "#396000"],
	            axisDefaults: {
	                line: {
	                    color: "#8e8e8e"
	                },
	                labels: {
	                    color: "#232323"
	                },
	                minorGridLines: {
	                    color: "#f0f0f0"
	                },
	                majorGridLines: {
	                    color: "#dfdfdf"
	                },
	                title: {
	                    color: "#232323"
	                },
	                crosshair: {
	                    color: "#8e8e8e"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#8e8e8e"
	                        }
	                    },
	                    label: {
	                        color: "#232323"
	                    },
	                    line: {
	                        color: "#8e8e8e"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#ea7001"
	            },
	            scale: {
	                rangePlaceholderColor: "#dedede",

	                labels: {
	                    color: "#2e2e2e"
	                },
	                minorTicks: {
	                    color: "#2e2e2e"
	                },
	                majorTicks: {
	                    color: "#2e2e2e"
	                },
	                line: {
	                    color: "#2e2e2e"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#e15613"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#282828"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#282828"
	                        }
	                    }
	                },
	                content: {
	                    color: "#2e2e2e"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#282828"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#282828"
	                            },
	                            stroke: {
	                                color: "#282828"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#282828"
	                        },
	                        fill: {
	                            color: "#282828"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#a7018f"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#282828"
	                },
	                content: {
	                    color: "#2e2e2e"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#282828"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#ff6800", "#edcfba"],
	                ["#a0a700", "#dadcba"],
	                ["#ff8d00", "#edd7ba"],
	                ["#678900", "#cfd6ba"],
	                ["#ffb53c", "#eddfc6"],
	                ["#396000", "#c6ceba"]
	            ]
	        }
	    });

	    registerTheme("silver", {
	        chart: {
	            title: {
	                color: "#4e5968"
	            },
	            legend: {
	                labels: {
	                    color: "#4e5968"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#B1BCC8"
	                    },
	                    markers: {
	                        color: "#B1BCC8"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#293135",
	                    background: "#eaeaec",
	                    opacity: 0.5
	                },
	                errorBars: {
	                    color: "#4e5968"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#4e5968"
	                        }
	                    },
	                    label: {
	                        color: "#4e5968"
	                    },
	                    line: {
	                        color: "#4e5968"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#eaeaec"
	                    }
	                },
	                scatter: {
	                    markers: {
	                        background: "#eaeaec"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#eaeaec"
	                    }
	                },
	                pie: {
	                    connectors: {
	                        color: "#A6B1C0"
	                    }
	                },
	                donut: {
	                    connectors: {
	                        color: "#A6B1C0"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#a6b1c0"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#a6b1c0"
	                    }
	                },
	                candlestick: {
	                    downColor: "#a6afbe"
	                }
	            },
	            chartArea: {
	                background: "#eaeaec"
	            },
	            seriesColors: ["#007bc3", "#76b800", "#ffae00", "#ef4c00", "#a419b7", "#430B62"],
	            axisDefaults: {
	                line: {
	                    color: "#a6b1c0"
	                },
	                labels: {
	                    color: "#4e5968"
	                },
	                majorGridLines: {
	                    color: "#dcdcdf"
	                },
	                minorGridLines: {
	                    color: "#eeeeef"
	                },
	                title: {
	                    color: "#4e5968"
	                },
	                crosshair: {
	                    color: "#a6b1c0"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#4e5968"
	                        }
	                    },
	                    label: {
	                        color: "#4e5968"
	                    },
	                    line: {
	                        color: "#4e5968"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#0879c0"
	            },
	            scale: {
	                rangePlaceholderColor: "#f3f3f4",

	                labels: {
	                    color: "#515967"
	                },
	                minorTicks: {
	                    color: "#515967"
	                },
	                majorTicks: {
	                    color: "#515967"
	                },
	                line: {
	                    color: "#515967"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#1c82c2"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#515967"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#282828"
	                        }
	                    }
	                },
	                content: {
	                    color: "#515967"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#515967"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#515967"
	                            },
	                            stroke: {
	                                color: "#515967"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#515967"
	                        },
	                        fill: {
	                            color: "#515967"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#515967"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#515967"
	                },
	                content: {
	                    color: "#515967"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#515967"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#007bc3", "#c2dbea"],
	                ["#76b800", "#dae7c3"],
	                ["#ffae00", "#f5e5c3"],
	                ["#ef4c00", "#f2d2c3"],
	                ["#a419b7", "#e3c7e8"],
	                ["#430b62", "#d0c5d7"]
	            ]
	        }
	    });

	    registerTheme("metro", {
	        chart: {
	            title: {
	                color: "#777777"
	            },
	            legend: {
	                labels: {
	                    color: "#777777"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#CBCBCB"
	                    },
	                    markers: {
	                        color: "#CBCBCB"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: BLACK
	                },
	                errorBars: {
	                    color: "#777777"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#777777"
	                        }
	                    },
	                    label: {
	                        color: "#777777"
	                    },
	                    line: {
	                        color: "#777777"
	                    }
	                },
	                candlestick: {
	                    downColor: "#c7c7c7",
	                    line: {
	                        color: "#787878"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#c7c7c7"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#c7c7c7"
	                    }
	                },
	                overlay: {
	                    gradient: "none"
	                },
	                border: {
	                    _brightness: 1
	                }
	            },
	            seriesColors: ["#8ebc00", "#309b46", "#25a0da", "#ff6900", "#e61e26", "#d8e404", "#16aba9", "#7e51a1", "#313131", "#ed1691"],
	            axisDefaults: {
	                line: {
	                    color: "#c7c7c7"
	                },
	                labels: {
	                    color: "#777777"
	                },
	                minorGridLines: {
	                    color: "#c7c7c7"
	                },
	                majorGridLines: {
	                    color: "#c7c7c7"
	                },
	                title: {
	                    color: "#777777"
	                },
	                crosshair: {
	                    color: "#c7c7c7"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#777777"
	                        }
	                    },
	                    label: {
	                        color: "#777777"
	                    },
	                    line: {
	                        color: "#777777"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#8ebc00"
	            },
	            scale: {
	                rangePlaceholderColor: "#e6e6e6",

	                labels: {
	                    color: "#777"
	                },
	                minorTicks: {
	                    color: "#777"
	                },
	                majorTicks: {
	                    color: "#777"
	                },
	                line: {
	                    color: "#777"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#8ebc00"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: BLACK
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: BLACK
	                        }
	                    }
	                },
	                content: {
	                    color: "#777"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#787878"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#787878"
	                            },
	                            stroke: {
	                                color: "#787878"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#787878"
	                        },
	                        fill: {
	                            color: "#787878"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#515967"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#787878"
	                },
	                content: {
	                    color: "#777"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#787878"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#8ebc00", "#e8f2cc"],
	                ["#309b46", "#d6ebda"],
	                ["#25a0da", "#d3ecf8"],
	                ["#ff6900", "#ffe1cc"],
	                ["#e61e26", "#fad2d4"],
	                ["#d8e404", "#f7facd"],
	                ["#16aba9", "#d0eeee"],
	                ["#7e51a1", "#e5dcec"],
	                ["#313131", "#d6d6d6"],
	                ["#ed1691", "#fbd0e9"]
	            ]
	        }
	    });

	    registerTheme("metroblack", {
	        chart: {
	            title: {
	                color: "#ffffff"
	            },
	            legend: {
	                labels: {
	                    color: "#ffffff"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#797979"
	                    },
	                    markers: {
	                        color: "#797979"
	                    }
	                }
	            },
	            seriesDefaults: {
	                border: {
	                    _brightness: 1
	                },
	                labels: {
	                    color: "#ffffff"
	                },
	                errorBars: {
	                    color: "#ffffff"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#cecece"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#cecece"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#0e0e0e"
	                    }
	                },
	                bubble: {
	                    opacity: 0.6
	                },
	                scatter: {
	                    markers: {
	                        background: "#0e0e0e"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#0e0e0e"
	                    }
	                },
	                candlestick: {
	                    downColor: "#828282",
	                    line: {
	                        color: "#ffffff"
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#cecece"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#cecece"
	                    }
	                },
	                overlay: {
	                    gradient: "none"
	                }
	            },
	            chartArea: {
	                background: "#0e0e0e"
	            },
	            seriesColors: ["#00aba9", "#309b46", "#8ebc00", "#ff6900", "#e61e26", "#d8e404", "#25a0da", "#7e51a1", "#313131", "#ed1691"],
	            axisDefaults: {
	                line: {
	                    color: "#cecece"
	                },
	                labels: {
	                    color: "#ffffff"
	                },
	                minorGridLines: {
	                    color: "#2d2d2d"
	                },
	                majorGridLines: {
	                    color: "#333333"
	                },
	                title: {
	                    color: "#ffffff"
	                },
	                crosshair: {
	                    color: "#cecece"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#cecece"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#cecece"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#00aba9"
	            },
	            scale: {
	                rangePlaceholderColor: "#2d2d2d",

	                labels: {
	                    color: "#ffffff"
	                },
	                minorTicks: {
	                    color: "#333333"
	                },
	                majorTicks: {
	                    color: "#cecece"
	                },
	                line: {
	                    color: "#cecece"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#00aba9"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: WHITE
	                    },
	                    stroke: {
	                        color: "#0e0e0e"
	                    },
	                    hover: {
	                        fill: {
	                            color: "#0e0e0e"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                },
	                content: {
	                    color: WHITE
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: "#0e0e0e"
	                        },
	                        stroke: {
	                            color: "#787878"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#787878"
	                            },
	                            stroke: {
	                                color: "#787878"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: WHITE
	                        },
	                        fill: {
	                            color: WHITE
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#787878"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: WHITE
	                },
	                content: {
	                    color: WHITE
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: "#0e0e0e"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#00aba9", "#0b2d2d"],
	                ["#309b46", "#152a19"],
	                ["#8ebc00", "#28310b"],
	                ["#ff6900", "#3e200b"],
	                ["#e61e26", "#391113"],
	                ["#d8e404", "#36390c"],
	                ["#25a0da", "#132b37"],
	                ["#7e51a1", "#241b2b"],
	                ["#313131", "#151515"],
	                ["#ed1691", "#3b1028"]
	            ]
	        }
	    });

	    registerTheme("moonlight", {
	        chart: {
	            title: {
	                color: "#ffffff"
	            },
	            legend: {
	                labels: {
	                    color: "#ffffff"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#A1A7AB"
	                    },
	                    markers: {
	                        color: "#A1A7AB"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#ffffff"
	                },
	                errorBars: {
	                    color: "#ffffff"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#8c909e"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#8c909e"
	                    }
	                },
	                pie: {
	                    overlay: {
	                        gradient: "sharpBevel"
	                    }
	                },
	                donut: {
	                    overlay: {
	                        gradient: "sharpGlass"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#212a33"
	                    }
	                },
	                bubble: {
	                    opacity: 0.6
	                },
	                scatter: {
	                    markers: {
	                        background: "#212a33"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#212a33"
	                    }
	                },
	                area: {
	                    opacity: 0.3
	                },
	                candlestick: {
	                    downColor: "#757d87",
	                    line: {
	                        color: "#ea9d06"
	                    },
	                    border: {
	                        _brightness: 1.5,
	                        opacity: 1
	                    },
	                    highlight: {
	                        border: {
	                            color: WHITE,
	                            opacity: 0.2
	                        }
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#8c909e"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#8c909e"
	                    }
	                },
	                ohlc: {
	                    line: {
	                        color: "#ea9d06"
	                    }
	                }
	            },
	            chartArea: {
	                background: "#212a33"
	            },
	            seriesColors: ["#ffca08", "#ff710f", "#ed2e24", "#ff9f03", "#e13c02", "#a00201"],
	            axisDefaults: {
	                line: {
	                    color: "#8c909e"
	                },
	                minorTicks: {
	                    color: "#8c909e"
	                },
	                majorTicks: {
	                    color: "#8c909e"
	                },
	                labels: {
	                    color: "#ffffff"
	                },
	                majorGridLines: {
	                    color: "#3e424d"
	                },
	                minorGridLines: {
	                    color: "#2f3640"
	                },
	                title: {
	                    color: "#ffffff"
	                },
	                crosshair: {
	                    color: "#8c909e"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#8c909e"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#8c909e"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#f4af03"
	            },
	            scale: {
	                rangePlaceholderColor: "#2f3640",

	                labels: {
	                    color: WHITE
	                },
	                minorTicks: {
	                    color: "#8c909e"
	                },
	                majorTicks: {
	                    color: "#8c909e"
	                },
	                line: {
	                    color: "#8c909e"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#f3ae03"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: WHITE
	                    },
	                    stroke: {
	                        color: "#414550"
	                    },
	                    hover: {
	                        fill: {
	                            color: "#414550"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                },
	                content: {
	                    color: WHITE
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: "#414550"
	                        },
	                        stroke: {
	                            color: WHITE
	                        },
	                        hover: {
	                            fill: {
	                                color: WHITE
	                            },
	                            stroke: {
	                                color: WHITE
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: WHITE
	                        },
	                        fill: {
	                            color: WHITE
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: WHITE
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: WHITE
	                },
	                content: {
	                    color: WHITE
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: "#414550"
	                        },
	                        stroke: {
	                            color: WHITE
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#ffca08", "#4e4b2b"],
	                ["#ff710f", "#4e392d"],
	                ["#ed2e24", "#4b2c31"],
	                ["#ff9f03", "#4e422a"],
	                ["#e13c02", "#482e2a"],
	                ["#a00201", "#3b232a"]
	            ]
	        }
	    });

	    registerTheme("uniform", {
	        chart: {
	            title: {
	                color: "#686868"
	            },
	            legend: {
	                labels: {
	                    color: "#686868"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#B6B6B6"
	                    },
	                    markers: {
	                        color: "#B6B6B6"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#686868"
	                },
	                errorBars: {
	                    color: "#686868"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#9e9e9e"
	                        }
	                    },
	                    label: {
	                        color: "#686868"
	                    },
	                    line: {
	                        color: "#9e9e9e"
	                    }
	                },
	                pie: {
	                    overlay: {
	                        gradient: "sharpBevel"
	                    }
	                },
	                donut: {
	                    overlay: {
	                        gradient: "sharpGlass"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                bubble: {
	                    opacity: 0.6
	                },
	                scatter: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                area: {
	                    opacity: 0.3
	                },
	                candlestick: {
	                    downColor: "#cccccc",
	                    line: {
	                        color: "#cccccc"
	                    },
	                    border: {
	                        _brightness: 1.5,
	                        opacity: 1
	                    },
	                    highlight: {
	                        border: {
	                            color: "#cccccc",
	                            opacity: 0.2
	                        }
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#9e9e9e"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#9e9e9e"
	                    }
	                },
	                ohlc: {
	                    line: {
	                        color: "#cccccc"
	                    }
	                }
	            },
	            chartArea: {
	                background: "#ffffff"
	            },
	            seriesColors: ["#527aa3", "#6f91b3", "#8ca7c2", "#a8bdd1", "#c5d3e0", "#e2e9f0"],
	            axisDefaults: {
	                line: {
	                    color: "#9e9e9e"
	                },
	                minorTicks: {
	                    color: "#aaaaaa"
	                },
	                majorTicks: {
	                    color: "#888888"
	                },
	                labels: {
	                    color: "#686868"
	                },
	                majorGridLines: {
	                    color: "#dadada"
	                },
	                minorGridLines: {
	                    color: "#e7e7e7"
	                },
	                title: {
	                    color: "#686868"
	                },
	                crosshair: {
	                    color: "#9e9e9e"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#9e9e9e"
	                        }
	                    },
	                    label: {
	                        color: "#686868"
	                    },
	                    line: {
	                        color: "#9e9e9e"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#527aa3"
	            },
	            scale: {
	                rangePlaceholderColor: "#e7e7e7",

	                labels: {
	                    color: "#686868"
	                },
	                minorTicks: {
	                    color: "#aaaaaa"
	                },
	                majorTicks: {
	                    color: "#888888"
	                },
	                line: {
	                    color: "#9e9e9e"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#d1d1d1"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#686868"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#686868"
	                        }
	                    }
	                },
	                content: {
	                    color: "#686868"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#686868"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#686868"
	                            },
	                            stroke: {
	                                color: "#686868"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#686868"
	                        },
	                        fill: {
	                            color: "#686868"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#686868"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#686868"
	                },
	                content: {
	                    color: "#686868"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#686868"
	                        }
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#527aa3", "#d0d8e1"],
	                ["#6f91b3", "#d6dde4"],
	                ["#8ca7c2", "#dce1e7"],
	                ["#a8bdd1", "#e2e6ea"],
	                ["#c5d3e0", "#e7eaed"],
	                ["#e2e9f0", "#edeff0"]
	            ]
	        }
	    });

	    registerTheme("bootstrap", {
	        chart: {
	            title: {
	                color: "#333333"
	            },
	            legend: {
	                labels: {
	                    color: "#333333"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#999999"
	                    },
	                    markers: {
	                        color: "#9A9A9A"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#333333"
	                },
	                overlay: {
	                    gradient: "none"
	                },
	                errorBars: {
	                    color: "#343434"
	                },
	                notes: {
	                    icon: {
	                        background: "#000000",
	                        border: {
	                            color: "#000000"
	                        }
	                    },
	                    label: {
	                        color: "#333333"
	                    },
	                    line: {
	                        color: "#000000"
	                    }
	                },
	                pie: {
	                    overlay: {
	                        gradient: "none"
	                    }
	                },
	                donut: {
	                    overlay: {
	                        gradient: "none"
	                    }
	                },
	                line: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                bubble: {
	                    opacity: 0.6
	                },
	                scatter: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                scatterLine: {
	                    markers: {
	                        background: "#ffffff"
	                    }
	                },
	                area: {
	                    opacity: 0.8
	                },
	                candlestick: {
	                    downColor: "#d0d0d0",
	                    line: {
	                        color: "#333333"
	                    },
	                    border: {
	                        _brightness: 1.5,
	                        opacity: 1
	                    },
	                    highlight: {
	                        border: {
	                            color: "#b8b8b8",
	                            opacity: 0.2
	                        }
	                    }
	                },
	                waterfall: {
	                    line: {
	                        color: "#cccccc"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#cccccc"
	                    }
	                },
	                ohlc: {
	                    line: {
	                        color: "#333333"
	                    }
	                }
	            },
	            chartArea: {
	                background: "#ffffff"
	            },
	            seriesColors: ["#428bca", "#5bc0de", "#5cb85c", "#f2b661", "#e67d4a", "#da3b36"],
	            axisDefaults: {
	                line: {
	                    color: "#cccccc"
	                },
	                minorTicks: {
	                    color: "#ebebeb"
	                },
	                majorTicks: {
	                    color: "#cccccc"
	                },
	                labels: {
	                    color: "#333333"
	                },
	                majorGridLines: {
	                    color: "#cccccc"
	                },
	                minorGridLines: {
	                    color: "#ebebeb"
	                },
	                title: {
	                    color: "#333333"
	                },
	                crosshair: {
	                    color: "#000000"
	                },
	                notes: {
	                    icon: {
	                        background: "#000000",
	                        border: {
	                            color: "#000000"
	                        }
	                    },
	                    label: {
	                        color: "#ffffff"
	                    },
	                    line: {
	                        color: "#000000"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#428bca"
	            },
	            scale: {
	                rangePlaceholderColor: "#cccccc",
	                labels: {
	                    color: "#333333"
	                },
	                minorTicks: {
	                    color: "#ebebeb"
	                },
	                majorTicks: {
	                    color: "#cccccc"
	                },
	                line: {
	                    color: "#cccccc"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#428bca"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#333333"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#333333"
	                        }
	                    }
	                },
	                content: {
	                    color: "#333333"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#333333"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#333333"
	                            },
	                            stroke: {
	                                color: "#333333"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#333333"
	                        },
	                        fill: {
	                            color: "#333333"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#333333"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#c4c4c4"
	                },
	                content: {
	                    color: "#333333"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#333333"
	                        }
	                    },
	                    stroke: {
	                        color: "#333333"
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#428bca", "#d1e0ec"],
	                ["#5bc0de", "#d6eaf0"],
	                ["#5cb85c", "#d6e9d6"],
	                ["#5cb85c", "#f4e8d7"],
	                ["#e67d4a", "#f2ddd3"],
	                ["#da3b36", "#f0d0cf"]
	            ]
	        }
	    });

	    registerTheme("flat", {
	            chart: {
	            title: {
	                color: "#4c5356"
	            },
	            legend: {
	                labels: {
	                    color: "#4c5356"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#CBCBCB"
	                    },
	                    markers: {
	                        color: "#CBCBCB"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#4c5356"
	                },
	                errorBars: {
	                    color: "#4c5356"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#cdcdcd"
	                        }
	                    },
	                    label: {
	                        color: "#4c5356"
	                    },
	                    line: {
	                        color: "#cdcdcd"
	                    }
	                },
	                candlestick: {
	                    downColor: "#c7c7c7",
	                    line: {
	                        color: "#787878"
	                    }
	                },
	                area: {
	                    opacity: 0.9
	                },
	                waterfall: {
	                    line: {
	                        color: "#cdcdcd"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#cdcdcd"
	                    }
	                },
	                overlay: {
	                    gradient: "none"
	                },
	                border: {
	                    _brightness: 1
	                }
	            },
	            seriesColors: ["#10c4b2", "#ff7663", "#ffb74f", "#a2df53", "#1c9ec4", "#ff63a5", "#1cc47b"],
	            axisDefaults: {
	                line: {
	                    color: "#cdcdcd"
	                },
	                labels: {
	                    color: "#4c5356"
	                },
	                minorGridLines: {
	                    color: "#cdcdcd"
	                },
	                majorGridLines: {
	                    color: "#cdcdcd"
	                },
	                title: {
	                    color: "#4c5356"
	                },
	                crosshair: {
	                    color: "#cdcdcd"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#cdcdcd"
	                        }
	                    },
	                    label: {
	                        color: "#4c5356"
	                    },
	                    line: {
	                        color: "#cdcdcd"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#10c4b2"
	            },
	            scale: {
	                rangePlaceholderColor: "#cdcdcd",

	                labels: {
	                    color: "#4c5356"
	                },
	                minorTicks: {
	                    color: "#4c5356"
	                },
	                majorTicks: {
	                    color: "#4c5356"
	                },
	                line: {
	                    color: "#4c5356"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#10c4b2"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#363940"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#363940"
	                        }
	                    }
	                },
	                content: {
	                    color: "#4c5356"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#363940"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#363940"
	                            },
	                            stroke: {
	                                color: "#363940"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#363940"
	                        },
	                        fill: {
	                            color: "#363940"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#363940"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#cdcdcd"
	                },
	                content: {
	                    color: "#4c5356"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#363940"
	                        }
	                    },
	                    stroke: {
	                        color: "#363940"
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#10c4b2", "#cff3f0"],
	                ["#ff7663", "#ffe4e0"],
	                ["#ffb74f", "#fff1dc"],
	                ["#a2df53", "#ecf9dd"],
	                ["#1c9ec4", "#d2ecf3"],
	                ["#ff63a5", "#ffe0ed"],
	                ["#1cc47b", "#d2f3e5"]
	            ]
	        }
	    });


	     registerTheme("material", {
	       chart: {
	            title: {
	                color: "#444444"
	            },
	            legend: {
	                labels: {
	                    color: "#444444"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#CBCBCB"
	                    },
	                    markers: {
	                        color: "#CBCBCB"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#444444"
	                },
	                errorBars: {
	                    color: "#444444"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#e5e5e5"
	                        }
	                    },
	                    label: {
	                        color: "#444444"
	                    },
	                    line: {
	                        color: "#e5e5e5"
	                    }
	                },
	                candlestick: {
	                    downColor: "#c7c7c7",
	                    line: {
	                        color: "#787878"
	                    }
	                },
	                area: {
	                    opacity: 0.9
	                },
	                waterfall: {
	                    line: {
	                        color: "#e5e5e5"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#e5e5e5"
	                    }
	                },
	                overlay: {
	                    gradient: "none"
	                },
	                border: {
	                    _brightness: 1
	                }
	            },
	            seriesColors: ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#ff9800", "#ff5722"],
	            axisDefaults: {
	                line: {
	                    color: "#e5e5e5"
	                },
	                labels: {
	                    color: "#444444"
	                },
	                minorGridLines: {
	                    color: "#e5e5e5"
	                },
	                majorGridLines: {
	                    color: "#e5e5e5"
	                },
	                title: {
	                    color: "#444444"
	                },
	                crosshair: {
	                    color: "#7f7f7f"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#e5e5e5"
	                        }
	                    },
	                    label: {
	                        color: "#444444"
	                    },
	                    line: {
	                        color: "#e5e5e5"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#3f51b5"
	            },
	            scale: {
	                rangePlaceholderColor: "#e5e5e5",

	                labels: {
	                    color: "#444444"
	                },
	                minorTicks: {
	                    color: "#444444"
	                },
	                majorTicks: {
	                    color: "#444444"
	                },
	                line: {
	                    color: "#444444"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#3f51b5"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#7f7f7f"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#7f7f7f"
	                        }
	                    }
	                },
	                content: {
	                    color: "#444444"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#444444"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#444444"
	                            },
	                            stroke: {
	                                color: "#444444"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#444444"
	                        },
	                        fill: {
	                            color: "#444444"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#444444"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#7f7f7f"
	                },
	                content: {
	                    color: "#444444"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#444444"
	                        }
	                    },
	                    stroke: {
	                        color: "#444444"
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#3f51b5", "#cff3f0"],
	                ["#03a9f4", "#e5f6fe"],
	                ["#4caf50", "#edf7ed"],
	                ["#f9ce1d", "#fefae8"],
	                ["#ff9800", "#fff4e5"],
	                ["#ff5722", "#ffeee8"]
	            ]
	        }
	    });

	    registerTheme("materialblack", {
	       chart: {
	            title: {
	                color: "#fff"
	            },
	            legend: {
	                labels: {
	                    color: "#fff"
	                },
	                inactiveItems: {
	                    labels: {
	                        color: "#CBCBCB"
	                    },
	                    markers: {
	                        color: "#CBCBCB"
	                    }
	                }
	            },
	            seriesDefaults: {
	                labels: {
	                    color: "#fff"
	                },
	                errorBars: {
	                    color: "#fff"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#e5e5e5"
	                        }
	                    },
	                    label: {
	                        color: "#fff"
	                    },
	                    line: {
	                        color: "#e5e5e5"
	                    }
	                },
	                candlestick: {
	                    downColor: "#c7c7c7",
	                    line: {
	                        color: "#787878"
	                    }
	                },
	                area: {
	                    opacity: 0.9
	                },
	                waterfall: {
	                    line: {
	                        color: "#4d4d4d"
	                    }
	                },
	                horizontalWaterfall: {
	                    line: {
	                        color: "#4d4d4d"
	                    }
	                },
	                overlay: {
	                    gradient: "none"
	                },
	                border: {
	                    _brightness: 1
	                }
	            },
	            chartArea: {
	                background: "#1c1c1c"
	            },
	            seriesColors: ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#ff9800", "#ff5722"],
	            axisDefaults: {
	                line: {
	                    color: "#4d4d4d"
	                },
	                labels: {
	                    color: "#fff"
	                },
	                minorGridLines: {
	                    color: "#4d4d4d"
	                },
	                majorGridLines: {
	                    color: "#4d4d4d"
	                },
	                title: {
	                    color: "#fff"
	                },
	                crosshair: {
	                    color: "#7f7f7f"
	                },
	                notes: {
	                    icon: {
	                        background: "transparent",
	                        border: {
	                            color: "#4d4d4d"
	                        }
	                    },
	                    label: {
	                        color: "#fff"
	                    },
	                    line: {
	                        color: "#4d4d4d"
	                    }
	                }
	            }
	        },
	        gauge: {
	            pointer: {
	                color: "#3f51b5"
	            },
	            scale: {
	                rangePlaceholderColor: "#4d4d4d",

	                labels: {
	                    color: "#fff"
	                },
	                minorTicks: {
	                    color: "#fff"
	                },
	                majorTicks: {
	                    color: "#fff"
	                },
	                line: {
	                    color: "#fff"
	                }
	            }
	        },
	        diagram: {
	            shapeDefaults: {
	                fill: {
	                    color: "#3f51b5"
	                },
	                connectorDefaults: {
	                    fill: {
	                        color: "#7f7f7f"
	                    },
	                    stroke: {
	                        color: WHITE
	                    },
	                    hover: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#7f7f7f"
	                        }
	                    }
	                },
	                content: {
	                    color: "#fff"
	                }
	            },
	            editable: {
	                resize: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#fff"
	                        },
	                        hover: {
	                            fill: {
	                                color: "#fff"
	                            },
	                            stroke: {
	                                color: "#fff"
	                            }
	                        }
	                    }
	                },
	                rotate: {
	                    thumb: {
	                        stroke: {
	                            color: "#fff"
	                        },
	                        fill: {
	                            color: "#fff"
	                        }
	                    }
	                }
	            },
	            selectable: {
	                stroke: {
	                    color: "#fff"
	                }
	            },
	            connectionDefaults: {
	                stroke: {
	                    color: "#7f7f7f"
	                },
	                content: {
	                    color: "#fff"
	                },
	                selection: {
	                    handles: {
	                        fill: {
	                            color: WHITE
	                        },
	                        stroke: {
	                            color: "#fff"
	                        }
	                    },
	                    stroke: {
	                        color: "#fff"
	                    }
	                }
	            }
	        },
	        treeMap: {
	            colors: [
	                ["#3f51b5", "#cff3f0"],
	                ["#03a9f4", "#e5f6fe"],
	                ["#4caf50", "#edf7ed"],
	                ["#f9ce1d", "#fefae8"],
	                ["#ff9800", "#fff4e5"],
	                ["#ff5722", "#ffeee8"]
	            ]
	        }
	    });

	    (function () {
	        var TEXT = "#333333";
	        var INACTIVE = "#7f7f7f";
	        var INACTIVE_SHAPE = "#bdbdbd";
	        var AXIS = "#c8c8c8";
	        var AXIS_MINOR = "#dddddd";
	        var SERIES = ["#008fd3", "#99d101", "#f39b02", "#f05662", "#c03c53", "#acacac"];
	        var SERIES_LIGHT = ["#cbe8f5", "#eaf5cb", "#fceacc", "#fbdcdf", "#f2d7dc", "#eeeeee"];
	        var PRIMARY = SERIES[0];
	        var DIAGRAM_HOVER = WHITE;

	        function noteStyle() {
	            return {
	                icon: {
	                    background: "#007cc0",
	                    border: {
	                        color: "#007cc0"
	                    }
	                },
	                label: {
	                    color: "#ffffff"
	                },
	                line: {
	                    color: AXIS
	                }
	            };
	        }

	        registerTheme("fiori", {
	            chart: {
	                title: {
	                    color: TEXT
	                },
	                legend: {
	                    labels: {
	                        color: TEXT
	                    },
	                    inactiveItems: {
	                        labels: {
	                            color: INACTIVE
	                        },
	                        markers: {
	                            color: INACTIVE
	                        }
	                    }
	                },
	                seriesDefaults: {
	                    labels: {
	                        color: TEXT
	                    },
	                    errorBars: {
	                        color: TEXT
	                    },
	                    notes: noteStyle(),
	                    candlestick: {
	                        downColor: AXIS,
	                        line: {
	                            color: INACTIVE_SHAPE
	                        }
	                    },
	                    area: {
	                        opacity: 0.8
	                    },
	                    waterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    horizontalWaterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    overlay: {
	                        gradient: "none"
	                    },
	                    border: {
	                        _brightness: 1
	                    }
	                },
	                seriesColors: SERIES,
	                axisDefaults: {
	                    line: {
	                        color: AXIS
	                    },
	                    labels: {
	                        color: TEXT
	                    },
	                    minorGridLines: {
	                        color: AXIS_MINOR
	                    },
	                    majorGridLines: {
	                        color: AXIS
	                    },
	                    title: {
	                        color: TEXT
	                    },
	                    crosshair: {
	                        color: INACTIVE
	                    },
	                    notes: noteStyle()
	                }
	            },
	            gauge: {
	                pointer: {
	                    color: PRIMARY
	                },
	                scale: {
	                    rangePlaceholderColor: AXIS,
	                    labels: {
	                        color: TEXT
	                    },
	                    minorTicks: {
	                        color: TEXT
	                    },
	                    majorTicks: {
	                        color: TEXT
	                    },
	                    line: {
	                        color: TEXT
	                    }
	                }
	            },
	            diagram: {
	                shapeDefaults: {
	                    fill: {
	                        color: PRIMARY
	                    },
	                    connectorDefaults: {
	                        fill: {
	                            color: TEXT
	                        },
	                        stroke: {
	                            color: DIAGRAM_HOVER
	                        },
	                        hover: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: TEXT
	                            }
	                        }
	                    },
	                    content: {
	                        color: TEXT
	                    }
	                },
	                editable: {
	                    resize: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            hover: {
	                                fill: {
	                                    color: INACTIVE_SHAPE
	                                },
	                                stroke: {
	                                    color: INACTIVE_SHAPE
	                                }
	                            }
	                        }
	                    },
	                    rotate: {
	                        thumb: {
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            fill: {
	                                color: INACTIVE_SHAPE
	                            }
	                        }
	                    }
	                },
	                selectable: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    }
	                },
	                connectionDefaults: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    },
	                    content: {
	                        color: INACTIVE_SHAPE
	                    },
	                    selection: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            }
	                        },
	                        stroke: {
	                            color: INACTIVE_SHAPE
	                        }
	                    }
	                }
	            },
	            treeMap: {
	                colors: fuse(SERIES, SERIES_LIGHT)
	            }
	        });
	    })();

	    (function() {
	        var TEXT            = "#4e4e4e";
	        var INACTIVE        = "#7f7f7f";
	        var INACTIVE_SHAPE  = "#bdbdbd";
	        var AXIS            = "#c8c8c8";
	        var AXIS_MINOR      = "#e5e5e5";
	        var SERIES          = ["#0072c6", "#5db2ff", "#008a17", "#82ba00", "#ff8f32", "#ac193d"];
	        var SERIES_LIGHT    = ["#cbe2f3", "#deeffe", "#cbe7d0", "#e5f0cb", "#fee8d5", "#eed0d7"];
	        var PRIMARY         = SERIES[0];
	        var DIAGRAM_HOVER   = WHITE;

	        function noteStyle() {
	            return {
	                icon: {
	                    background: "#00b0ff",
	                    border: {
	                        color: "#00b0ff"
	                    }
	                },
	                label: {
	                    color: "#ffffff"
	                },
	                line: {
	                    color: AXIS
	                }
	            };
	        }

	        registerTheme("office365", {
	            chart: {
	                title: {
	                    color: TEXT
	                },
	                legend: {
	                    labels: {
	                        color: TEXT
	                    },
	                    inactiveItems: {
	                        labels: {
	                            color: INACTIVE
	                        },
	                        markers: {
	                            color: INACTIVE
	                        }
	                    }
	                },
	                seriesDefaults: {
	                    labels: {
	                        color: TEXT
	                    },
	                    errorBars: {
	                        color: TEXT
	                    },
	                    notes: noteStyle(),
	                    candlestick: {
	                        downColor: AXIS,
	                        line: {
	                            color: INACTIVE_SHAPE
	                        }
	                    },
	                    area: {
	                        opacity: 0.8
	                    },
	                    waterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    horizontalWaterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    overlay: {
	                        gradient: "none"
	                    },
	                    border: {
	                        _brightness: 1
	                    }
	                },
	                seriesColors: SERIES,
	                axisDefaults: {
	                    line: {
	                        color: AXIS
	                    },
	                    labels: {
	                        color: TEXT
	                    },
	                    minorGridLines: {
	                        color: AXIS_MINOR
	                    },
	                    majorGridLines: {
	                        color: AXIS
	                    },
	                    title: {
	                        color: TEXT
	                    },
	                    crosshair: {
	                        color: INACTIVE
	                    },
	                    notes: noteStyle()
	                }
	            },
	            gauge: {
	                pointer: {
	                    color: PRIMARY
	                },
	                scale: {
	                    rangePlaceholderColor: AXIS,
	                    labels: {
	                        color: TEXT
	                    },
	                    minorTicks: {
	                        color: TEXT
	                    },
	                    majorTicks: {
	                        color: TEXT
	                    },
	                    line: {
	                        color: TEXT
	                    }
	                }
	            },
	            diagram: {
	                shapeDefaults: {
	                    fill: {
	                        color: PRIMARY
	                    },
	                    connectorDefaults: {
	                        fill: {
	                            color: TEXT
	                        },
	                        stroke: {
	                            color: DIAGRAM_HOVER
	                        },
	                        hover: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: TEXT
	                            }
	                        }
	                    },
	                    content: {
	                        color: TEXT
	                    }
	                },
	                editable: {
	                    resize: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            hover: {
	                                fill: {
	                                    color: INACTIVE_SHAPE
	                                },
	                                stroke: {
	                                    color: INACTIVE_SHAPE
	                                }
	                            }
	                        }
	                    },
	                    rotate: {
	                        thumb: {
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            fill: {
	                                color: INACTIVE_SHAPE
	                            }
	                        }
	                    }
	                },
	                selectable: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    }
	                },
	                connectionDefaults: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    },
	                    content: {
	                        color: INACTIVE_SHAPE
	                    },
	                    selection: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            }
	                        },
	                        stroke: {
	                            color: INACTIVE_SHAPE
	                        }
	                    }
	                }
	            },
	            treeMap: {
	                colors: fuse(SERIES, SERIES_LIGHT)
	            }
	        });
	    })();

	        (function () {
	        var TEXT = "#32364c";
	        var INACTIVE = "#7f7f7f";
	        var INACTIVE_SHAPE = "#bdbdbd";
	        var AXIS = "#dfe0e1";
	        var AXIS_MINOR = "#dfe0e1";
	        var SERIES = ["#ff4350", "#ff9ea5", "#00acc1", "#80deea", "#ffbf46", "#ffd78c"];
	        var SERIES_LIGHT = ["#ffd9dc", "#ffeced", "#cceef3", "#e6f8fb", "#fff2da", "#fff7e8"];
	        var PRIMARY = SERIES[0];
	        var DIAGRAM_HOVER = WHITE;

	        function noteStyle() {
	            return {
	                icon: {
	                    background: "#007cc0",
	                    border: {
	                        color: "#007cc0"
	                    }
	                },
	                label: {
	                    color: "#ffffff"
	                },
	                line: {
	                    color: AXIS
	                }
	            };
	        }

	        registerTheme("nova", {
	            chart: {
	                title: {
	                    color: TEXT
	                },
	                legend: {
	                    labels: {
	                        color: TEXT
	                    },
	                    inactiveItems: {
	                        labels: {
	                            color: INACTIVE
	                        },
	                        markers: {
	                            color: INACTIVE
	                        }
	                    }
	                },
	                seriesDefaults: {
	                    labels: {
	                        color: TEXT
	                    },
	                    errorBars: {
	                        color: TEXT
	                    },
	                    notes: noteStyle(),
	                    candlestick: {
	                        downColor: AXIS,
	                        line: {
	                            color: INACTIVE_SHAPE
	                        }
	                    },
	                    area: {
	                        opacity: 0.8
	                    },
	                    waterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    horizontalWaterfall: {
	                        line: {
	                            color: AXIS
	                        }
	                    },
	                    overlay: {
	                        gradient: "none"
	                    },
	                    border: {
	                        _brightness: 1
	                    }
	                },
	                seriesColors: SERIES,
	                axisDefaults: {
	                    line: {
	                        color: AXIS
	                    },
	                    labels: {
	                        color: TEXT
	                    },
	                    minorGridLines: {
	                        color: AXIS_MINOR
	                    },
	                    majorGridLines: {
	                        color: AXIS
	                    },
	                    title: {
	                        color: TEXT
	                    },
	                    crosshair: {
	                        color: TEXT
	                    },
	                    notes: noteStyle()
	                }
	            },
	            gauge: {
	                pointer: {
	                    color: PRIMARY
	                },
	                scale: {
	                    rangePlaceholderColor: AXIS,
	                    labels: {
	                        color: TEXT
	                    },
	                    minorTicks: {
	                        color: TEXT
	                    },
	                    majorTicks: {
	                        color: TEXT
	                    },
	                    line: {
	                        color: TEXT
	                    }
	                }
	            },
	            diagram: {
	                shapeDefaults: {
	                    fill: {
	                        color: PRIMARY
	                    },
	                    connectorDefaults: {
	                        fill: {
	                            color: TEXT
	                        },
	                        stroke: {
	                            color: DIAGRAM_HOVER
	                        },
	                        hover: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: TEXT
	                            }
	                        }
	                    },
	                    content: {
	                        color: TEXT
	                    }
	                },
	                editable: {
	                    resize: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            hover: {
	                                fill: {
	                                    color: INACTIVE_SHAPE
	                                },
	                                stroke: {
	                                    color: INACTIVE_SHAPE
	                                }
	                            }
	                        }
	                    },
	                    rotate: {
	                        thumb: {
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            },
	                            fill: {
	                                color: INACTIVE_SHAPE
	                            }
	                        }
	                    }
	                },
	                selectable: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    }
	                },
	                connectionDefaults: {
	                    stroke: {
	                        color: INACTIVE_SHAPE
	                    },
	                    content: {
	                        color: INACTIVE_SHAPE
	                    },
	                    selection: {
	                        handles: {
	                            fill: {
	                                color: DIAGRAM_HOVER
	                            },
	                            stroke: {
	                                color: INACTIVE_SHAPE
	                            }
	                        },
	                        stroke: {
	                            color: INACTIVE_SHAPE
	                        }
	                    }
	                }
	            },
	            treeMap: {
	                colors: fuse(SERIES, SERIES_LIGHT)
	            }
	        });
	    })();

	    (function () {
	        var TEXT = "#656565";
	        var AXIS = "rgba(0, 0, 0, .04)";
	        var SERIES = ["#ff6358", "#ffd246", "#78d237", "#28b4c8", "#2d73f5", "#aa46be"];
	        var SERIES_LIGHT = ["#ffd9dc", "#ffeced", "#cceef3", "#e6f8fb", "#fff2da", "#fff7e8"];
	        var PRIMARY = SERIES[0];

	        registerTheme("default-v2", {
	            chart: { /* read from DOM */ },
	            gauge: {
	                pointer: {
	                    color: PRIMARY
	                },
	                scale: {
	                    rangePlaceholderColor: AXIS,
	                    labels: {
	                        color: TEXT
	                    },
	                    minorTicks: {
	                        color: TEXT
	                    },
	                    majorTicks: {
	                        color: TEXT
	                    },
	                    line: {
	                        color: TEXT
	                    }
	                }
	            },
	            diagram: { /* read from DOM */ },
	            treeMap: {
	                colors: fuse(SERIES, SERIES_LIGHT)
	            }
	        });

	        themes.sass = themes["default-v2"];
	    })();



	    (function () {
	        var TEXT = "#292b2c";
	        var AXIS = "rgba(0, 0, 0, .04)";
	        var SERIES = ["#0275d8", "#5bc0de", "#5cb85c", "#f0ad4e", "#e67d4a", "#d9534f"];
	        var SERIES_LIGHT = ["#ffd9dc", "#ffeced", "#cceef3", "#e6f8fb", "#fff2da", "#fff7e8"];
	        var PRIMARY = SERIES[0];

	        registerTheme("bootstrap-v4", {
	            chart: { /* read from DOM */ },
	            gauge: {
	                pointer: {
	                    color: PRIMARY
	                },
	                scale: {
	                    rangePlaceholderColor: AXIS,
	                    labels: {
	                        color: TEXT
	                    },
	                    minorTicks: {
	                        color: TEXT
	                    },
	                    majorTicks: {
	                        color: TEXT
	                    },
	                    line: {
	                        color: TEXT
	                    }
	                }
	            },
	            diagram: { /* read from DOM */ },
	            treeMap: {
	                colors: fuse(SERIES, SERIES_LIGHT)
	            }
	        });
	    })();

	    function fuse(arr1, arr2) {
	        return $.map(arr1, function(item, index) {
	            return [
	                [item, arr2[index]]
	            ];
	        });
	    }

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }),

/***/ 908:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(471);

/***/ })

/******/ });

/***/ }),

/***/ 522:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1054);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 1054:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(1055),
	        __webpack_require__(1056)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dataviz.chart",
	    name: "Chart",
	    category: "dataviz",
	    description: "The Chart widget uses modern browser technologies to render high-quality data visualizations in the browser.",
	    depends: [ "data", "userevents", "drawing", "dataviz.core", "dataviz.themes" ],
	    features: [{
	        id: "dataviz.chart-pdf-export",
	        name: "PDF export",
	        description: "Export Chart as PDF",
	        depends: [ "pdf" ]
	    }]
	};

	}, __webpack_require__(3));


/***/ }),

/***/ 1055:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(472);

/***/ }),

/***/ 1056:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(523);

/***/ })

/******/ });

/***/ }),

/***/ 523:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(847);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 847:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(848),
	        __webpack_require__(849),
	        __webpack_require__(850),
	        __webpack_require__(851),
	        __webpack_require__(852),
	        __webpack_require__(853)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($, undefined) {

	    var NS = ".kendoChart";
	    var kendo = window.kendo;
	    var Class = kendo.Class;
	    var outerWidth = kendo._outerWidth;
	    var outerHeight = kendo._outerHeight;
	    var dataviz = kendo.dataviz;
	    var constants = dataviz.constants;
	    var KendoChart = dataviz.Chart;
	    var SeriesBinder = dataviz.SeriesBinder;
	    var Widget = kendo.ui.Widget;
	    var DataSource = kendo.data.DataSource;
	    var deepExtend = kendo.deepExtend;
	    var defined = dataviz.defined;
	    var getField = dataviz.getField;
	    var InstanceObserver = dataviz.InstanceObserver;
	    var inArray = dataviz.inArray;
	    var services = dataviz.services;
	    var proxy = $.proxy;
	    var isArray = $.isArray;
	    var extend = $.extend;
	    var template = kendo.template;

	    var MOUSELEAVE_NS = "mouseleave" + NS;
	    var AXIS_LABEL_CLICK = constants.AXIS_LABEL_CLICK;
	    var LEGEND_ITEM_CLICK = constants.LEGEND_ITEM_CLICK;
	    var LEGEND_ITEM_HOVER = constants.LEGEND_ITEM_HOVER;
	    var SERIES_CLICK = constants.SERIES_CLICK;
	    var SERIES_HOVER = constants.SERIES_HOVER;
	    var PLOT_AREA_CLICK = constants.PLOT_AREA_CLICK;
	    var PLOT_AREA_HOVER = constants.PLOT_AREA_HOVER;
	    var DRAG = constants.DRAG;
	    var DRAG_END = constants.DRAG_END;
	    var DRAG_START = constants.DRAG_START;
	    var ZOOM_START = constants.ZOOM_START;
	    var ZOOM = constants.ZOOM;
	    var ZOOM_END = constants.ZOOM_END;
	    var SELECT_START = constants.SELECT_START;
	    var SELECT = constants.SELECT;
	    var SELECT_END = constants.SELECT_END;
	    var RENDER = constants.RENDER;
	    var NOTE_CLICK = constants.NOTE_CLICK;
	    var NOTE_HOVER = constants.NOTE_HOVER;

	    var CHANGE = "change";
	    var DATABOUND = "dataBound";
	    var LEAVE = "leave";

	    var VALUE = constants.VALUE;
	    var PIE = constants.PIE;
	    var DONUT = constants.DONUT;
	    var FUNNEL = constants.FUNNEL;

	    var Observable = kendo.Observable;
	    var TOOLTIP_ANIMATION_DURATION = 150;
	    var TOOLTIP_SHOW_DELAY = 100;
	    var TOOLTIP_INVERSE = "k-chart-tooltip-inverse";
	    var SHARED_TOOLTIP_CLASS = "k-chart-shared-tooltip";
	    var RTL = "rtl";

	    services.DomEventsBuilder.register({
	        create: function(element, events) {
	             return new kendo.UserEvents(element, deepExtend({
	                 global: true,
	                 multiTouch: true,
	                 fastTap: true
	             }, events));
	        }
	    });

	    var ChartInstanceObserver = InstanceObserver.extend({
	        handlerMap: {
	            showTooltip: '_showTooltip',
	            hideTooltip: '_hideTooltip',
	            legendItemClick: '_onLegendItemClick',
	            render: '_onRender',
	            init: '_onInit'
	        }
	    });

	    var Chart = Widget.extend({
	        init: function(element, userOptions) {
	            var dataSource;

	            kendo.destroy(element);

	            Widget.fn.init.call(this, element);

	            if (userOptions) {
	                dataSource = userOptions.dataSource;
	                delete userOptions.dataSource;
	            }

	            this.options =  deepExtend({}, this.options, userOptions);

	            this.wrapper = this.element;
	            this._attachEvents();

	            if (userOptions) {
	                userOptions.dataSource = dataSource;
	            }

	            this._seriesVisibility = new SeriesVisibilityState();

	            this.bind(this.events, this.options);
	            this._initDataSource(userOptions);

	            kendo.notify(this, dataviz.ui);
	        },

	        events:[
	            DATABOUND,
	            SERIES_CLICK,
	            SERIES_HOVER,
	            AXIS_LABEL_CLICK,
	            LEGEND_ITEM_CLICK,
	            LEGEND_ITEM_HOVER,
	            PLOT_AREA_CLICK,
	            PLOT_AREA_HOVER,
	            DRAG_START,
	            DRAG,
	            DRAG_END,
	            ZOOM_START,
	            ZOOM,
	            ZOOM_END,
	            SELECT_START,
	            SELECT,
	            SELECT_END,
	            NOTE_CLICK,
	            NOTE_HOVER,
	            RENDER
	        ],

	        options: {
	            name: "Chart",
	            renderAs: "",
	            theme: "default",
	            axisDefaults: {},
	            chartArea: {},
	            legend: {},
	            categoryAxis: {},
	            autoBind: true,
	            seriesDefaults: {},
	            series: [],
	            seriesColors: null,
	            tooltip: {},
	            transitions: true,
	            valueAxis: {},
	            plotArea: {},
	            title: {},
	            xAxis: {},
	            yAxis: {},
	            panes: [{}],
	            pannable: false,
	            zoomable: false
	        },

	        items: function() {
	            return $();
	        },

	        refresh: function() {
	            var chart = this;
	            var instance = chart._instance;
	            instance.applyDefaults(chart.options);
	            instance.applySeriesColors();

	            chart._bindSeries();
	            chart._bindCategories();

	            chart.trigger(DATABOUND);
	            chart._redraw();
	        },

	        getSize: function() {
	            return kendo.dimensions(this.element);
	        },

	        redraw: function(paneName) {
	            this._size = null;
	            this._instance.redraw(paneName);
	        },

	        setOptions: function(options) {
	            var chart = this,
	                dataSource = options.dataSource;

	            delete options.dataSource;

	            Widget.fn._setEvents.call(chart, options);

	            this._instance.applyOptions(options, this._getThemeOptions(options));
	            this.options = this._instance.options;
	            this._tooltip.setOptions(this.options.tooltip);
	            this._sourceSeries = null;

	            if (dataSource) {
	                chart.setDataSource(dataSource);
	            }

	            if (chart._hasDataSource) {
	                chart._onDataChanged();
	            } else {
	                chart._bindCategories();
	                chart.redraw();
	            }

	            chart._instance.updateMouseMoveHandler();
	        },

	        setDataSource: function(dataSource) {
	            var chart = this;

	            chart.dataSource.unbind(CHANGE, chart._dataChangeHandler);
	            chart.dataSource = dataSource = DataSource.create(dataSource);
	            chart._hasDataSource = true;
	            chart._hasData = false;

	            dataSource.bind(CHANGE, chart._dataChangeHandler);

	            if (chart.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        destroy: function() {
	            var chart = this,
	                dataSource = chart.dataSource;

	            chart.element.off(NS);

	            if (dataSource) {
	                dataSource.unbind(CHANGE, chart._dataChangeHandler);
	            }

	            if (chart._instance) {
	                chart._instance.destroy();
	                delete this._instance;
	            }

	            if (this._tooltip) {
	                this._tooltip.destroy();
	                delete this._tooltip;
	            }

	            this._destroyCrosshairTooltips();

	            Widget.fn.destroy.call(chart);
	        },

	        findPaneByName: function(name) {
	            var panes = this._plotArea.panes;

	            for (var idx = 0; idx < panes.length; idx++) {
	                if (panes[idx].options.name === name) {
	                    return new ChartPane(this, panes[idx]);
	                }
	            }
	        },

	        findPaneByIndex: function(idx) {
	            var panes = this._plotArea.panes;
	            if (panes[idx]) {
	                return new ChartPane(this, panes[idx]);
	            }
	        },

	        findSeries: function(callback) {
	            var plotArea = this._plotArea;
	            var series = plotArea.srcSeries || plotArea.series;
	            for (var idx = 0; idx < series.length; idx++) {
	                if (callback(series[idx])) {
	                    return new ChartSeries(this, series[idx]);
	                }
	            }
	        },

	        findSeriesByName: function(name) {
	            return this._createSeries({ name: name });
	        },

	        findSeriesByIndex: function(index) {
	            return this._createSeries({ index: index });
	        },

	        _createSeries: function(options) {
	            var seriesOptions = this._seriesOptions(options);
	            if (seriesOptions) {
	                return new ChartSeries(this, seriesOptions);
	            }
	        },

	        _seriesOptions: function(options) {
	            var plotArea = this._plotArea;
	            var series = plotArea.srcSeries || plotArea.series;
	            var seriesOptions;

	            if (defined(options.index)) {
	                seriesOptions = series[options.index];
	            } else if (defined(options.name)) {
	                for (var idx = 0; idx < series.length; idx++) {
	                    if (series[idx].name === options.name) {
	                        seriesOptions = series[idx];
	                        break;
	                    }
	                }
	            }

	            return seriesOptions;
	        },

	        _attachEvents: function() {
	             this.element.on(MOUSELEAVE_NS, proxy(this._mouseleave, this));
	        },

	        _mouseleave: function(e) {
	            var instance = this._instance;
	            var tooltip = this._tooltip;
	            var target = e.relatedTarget;

	            if (!(target && $(target).closest(tooltip.element).length) && instance && !instance.handlingTap) {
	                instance.hideElements();
	            }
	        },

	        _getThemeOptions: function(userOptions) {
	            var themeName = (userOptions || {}).theme;
	            if (themeName === "sass" || themeName === "default-v2" || themeName === "bootstrap-v4") {
	                return dataviz.autoTheme().chart;
	            }

	            if (defined(themeName)) {
	                var themes = dataviz.ui.themes || {};
	                var theme = themes[themeName] || themes[themeName.toLowerCase()] || {};
	                return theme.chart || {};
	            }
	        },

	        _initChart: function() {
	            this._createChart(this.options, this._getThemeOptions(this.options));
	            this.options = this._instance.options;
	        },

	        _createChart: function(options, themeOptions) {
	            this._instance = new KendoChart(this.element[0], options, themeOptions, {
	                observer: new ChartInstanceObserver(this),
	                sender: this,
	                rtl: this._isRtl()
	            });
	        },

	        _onInit: function(e) {
	            this._instance = e.sender;
	        },

	        _initDataSource: function(userOptions) {
	            var chart = this,
	                dataSource = (userOptions || {}).dataSource;

	            chart._dataChangeHandler = proxy(chart._onDataChanged, chart);

	            chart.dataSource = DataSource
	                .create(dataSource)
	                .bind("change", chart._dataChangeHandler);

	            chart._bindCategories();

	            if (dataSource) {
	                chart._hasDataSource = true;
	            }

	            this._initChart();
	            this._initTooltip();

	            if (dataSource) {
	                if (chart.options.autoBind) {
	                    chart.dataSource.fetch();
	                }
	            }
	        },

	        _destroyCrosshairTooltips: function() {
	            var tooltips = this._crosshairTooltips;
	            if (tooltips) {
	                for (var key in tooltips) {
	                    tooltips[key].destroy();
	                }
	            }
	            this._crosshairTooltips = {};
	        },

	        _getCrosshairTooltip: function(name, index) {
	            var tooltips = this._crosshairTooltips = this._crosshairTooltips || {};
	            var key = name + index;
	            var tooltip = tooltips[key];
	            if (!tooltip) {
	                tooltip = tooltips[key] = new CrosshairTooltip(this.element);
	            }
	            return tooltip;
	        },

	        _showTooltip: function(e) {
	            if (e.crosshair) {
	                var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);
	                tooltip.show(e);
	            } else if (this._tooltip) {
	                this._tooltip.show(e);
	            }
	        },

	        _hideTooltip: function(e) {
	            if (e.crosshair) {
	                 var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);
	                 tooltip.hide();
	            } else if (this._tooltip) {
	                this._tooltip.hide(e);
	            }
	        },

	        _onRender: function(e) {
	            this._destroyCrosshairTooltips();
	            this._copyMembers(e.sender);
	            if (!this._hasDataSource || this._hasData || !this.options.autoBind) {
	                this.trigger(RENDER);
	            }
	        },

	        _copyMembers: function(instance) {
	            this.options = instance.options;
	            this._originalOptions = instance._originalOptions;
	            this.surface = instance.surface;
	            this._plotArea = instance._plotArea;
	            this._model = instance._model;
	            this._highlight = instance._highlight;
	            this._selections = instance._selections;
	            this._pannable = instance._pannable;
	            this._zoomSelection = instance._zoomSelection;
	            this._mousewheelZoom = instance._mousewheelZoom;
	        },

	        requiresHandlers: function(names) {
	           var events = this._events;
	           for (var idx = 0; idx < names.length; idx++) {
	               if (defined(events[names[idx]])) {
	                   return true;
	               }
	           }
	        },

	        _initTooltip: function() {
	            this._tooltip = this._createTooltip();

	            this._tooltip.bind(LEAVE, proxy(this._tooltipleave, this));
	        },

	        _onLegendItemClick: function(e) {
	            if (!this.trigger(LEGEND_ITEM_CLICK, e)) {
	                this._legendItemClick(e.seriesIndex, e.pointIndex);
	            }
	        },

	        _legendItemClick: function(seriesIndex, pointIndex) {
	            var chart = this._instance,
	                plotArea = chart._plotArea,
	                currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];

	            if ($.inArray(currentSeries.type, [PIE, DONUT, FUNNEL]) >= 0) {
	                var point = currentSeries.data[pointIndex];
	                if (point && defined(point.visible)) {
	                    point.visible = !point.visible;
	                } else {
	                    var pointVisibility = currentSeries.pointVisibility = currentSeries.pointVisibility || {};
	                    var visible = pointVisibility[pointIndex];
	                    pointVisibility[pointIndex] = defined(visible) ? !visible : false;
	                }
	            } else {
	                currentSeries.visible = !currentSeries.visible;
	                this._seriesVisibility.save(currentSeries);
	            }

	            chart._noTransitionsRedraw();
	        },

	        _createTooltip: function() {
	            return new Tooltip(this.element, extend({}, this.options.tooltip, {
	                rtl: this._isRtl()
	            }));
	        },

	        _tooltipleave: function() {
	            if (this._instance) {
	                this._instance.hideElements();
	            }
	        },

	        _bindData: function(e) {
	            var chart = this,
	                options = chart.options,
	                series = chart._sourceSeries || options.series,
	                seriesIx,
	                seriesLength = series.length,
	                data = chart.dataSource.view(),
	                grouped = (chart.dataSource.group() || []).length > 0,
	                processedSeries = [],
	                seriesVisibility = this._seriesVisibility,
	                currentSeries,
	                groupedSeries;

	            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {
	                currentSeries = series[seriesIx];

	                if (chart._isBindable(currentSeries) && grouped) {
	                    groupedSeries = groupSeries(currentSeries, data);
	                    processedSeries = processedSeries.concat(groupedSeries);

	                    seriesVisibility.applyByGroup(groupedSeries, e);
	                } else {
	                    currentSeries = extend({}, currentSeries);
	                    processedSeries.push(currentSeries);

	                    seriesVisibility.applyByIndex(currentSeries, e);
	                }
	            }

	            chart._sourceSeries = series;
	            options.series = processedSeries;
	            this._instance.applySeriesColors();

	            chart._bindSeries();
	            chart._bindCategories();

	            this._hasData = true;
	        },

	        _onDataChanged: function(e) {
	            this._bindData(e);

	            this.trigger(DATABOUND);
	            this._redraw();
	        },

	        _bindSeries: function() {
	            var chart = this,
	                data = chart.dataSource.view(),
	                series = chart.options.series,
	                seriesIx,
	                seriesLength = series.length,
	                currentSeries,
	                groupIx,
	                seriesData;

	            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {
	                currentSeries = series[seriesIx];

	                if (chart._isBindable(currentSeries)) {
	                    groupIx = currentSeries._groupIx;
	                    seriesData = defined(groupIx) ? (data[groupIx] || {}).items : data;

	                    if (currentSeries.autoBind !== false) {
	                        currentSeries.data = seriesData;
	                    }
	                }
	            }
	        },

	        _bindCategories: function() {
	            var chart = this,
	                data = chart.dataSource.view() || [],
	                grouped = (chart.dataSource.group() || []).length > 0,
	                categoriesData = data,
	                options = chart.options,
	                definitions = [].concat(options.categoryAxis),
	                axisIx,
	                axis;

	            if (grouped) {
	                if (data.length) {
	                    categoriesData = data[0].items;
	                }
	            }

	            for (axisIx = 0; axisIx < definitions.length; axisIx++) {
	                axis = definitions[axisIx];
	                if (axis.autoBind !== false) {
	                    chart._bindCategoryAxis(axis, categoriesData, axisIx);
	                }
	            }
	        },

	        _bindCategoryAxis: function(axis, data, axisIx) {
	            var count = (data || []).length,
	                categoryIx,
	                category,
	                row;

	            if (axis.field) {
	                axis.categories = [];
	                for (categoryIx = 0; categoryIx < count; categoryIx++) {
	                    row = data[categoryIx];

	                    category = getField(axis.field, row);
	                    if (categoryIx === 0) {
	                        axis.categories = [category];
	                        axis.dataItems = [row];
	                    } else {
	                        axis.categories.push(category);
	                        axis.dataItems.push(row);
	                    }
	                }
	            } else if (this._instance) {
	                this._instance.bindCategoryAxisFromSeries(axis, axisIx);
	            }
	        },

	        _isBindable: function(series) {
	            var valueFields = SeriesBinder.current.valueFields(series),
	                result = true,
	                field, i;

	            for (i = 0; i < valueFields.length; i++) {
	                field = valueFields[i];
	                if (field === VALUE) {
	                    field = "field";
	                } else {
	                    field = field + "Field";
	                }

	                if (!defined(series[field])) {
	                    result = false;
	                    break;
	                }
	            }

	            return result;
	        },

	        _isRtl: function() {
	            return kendo.support.isRtl(this.element) && this.element.css("direction") === RTL;
	        }
	    });

	    var proxyMembers = ["getAxis", "findAxisByName", "plotArea", "toggleHighlight", "showTooltip",
	        "hideTooltip", "exportVisual", "_resize", "_redraw", "_noTransitionsRedraw", "_legendItemHover", "_eventCoordinates"];

	    function createProxyMember(name) {
	        Chart.fn[name] = function() {
	            var instance = this._instance;
	            if (instance) {
	                return instance[name].apply(instance, arguments);
	            }
	        };
	    }

	    for (var idx = 0; idx < proxyMembers.length; idx++) {
	        createProxyMember(proxyMembers[idx]);
	    }

	    function groupSeries(series, data) {
	        var result = [],
	            nameTemplate,
	            legacyTemplate = series.groupNameTemplate,
	            groupIx,
	            dataLength = data.length,
	            seriesClone;

	        if (dataLength === 0) {
	            seriesClone = deepExtend({}, series);
	            seriesClone.visibleInLegend = false;
	            return [seriesClone];
	        }

	        if (defined(legacyTemplate)) {
	            kendo.logToConsole(
	                "'groupNameTemplate' is obsolete and will be removed in future versions. " +
	                "Specify the group name template as 'series.name'"
	            );

	            if (legacyTemplate) {
	                nameTemplate = template(legacyTemplate);
	            }
	        } else {
	            nameTemplate = template(series.name || "");
	            if (nameTemplate._slotCount === 0) {
	                nameTemplate = template(defined(series.name) ?
	                    "#= group.value #: #= series.name #" :
	                    "#= group.value #"
	                );
	            }
	        }

	        for (groupIx = 0; groupIx < dataLength; groupIx++) {
	            seriesClone = deepExtend({}, series);

	            if (!kendo.isFunction(seriesClone.color)) {
	                seriesClone.color = undefined;
	            }

	            seriesClone._groupIx = groupIx;
	            seriesClone._groupValue = data[groupIx].value;
	            result.push(seriesClone);

	            if (nameTemplate) {
	                seriesClone.name = nameTemplate({
	                    series: seriesClone, group: data[groupIx]
	                });
	            }
	        }

	        return result;
	    }

	    dataviz.ExportMixin.extend(Chart.fn);

	    if (kendo.PDFMixin) {
	        kendo.PDFMixin.extend(Chart.fn);
	    }

	    dataviz.ui.plugin(Chart);

	    var SeriesVisibilityState = Class.extend({
	        init: function() {
	            this.groups = {};
	            this.index = {};
	        },

	        applyByGroup: function(series, e) {
	            if (e && e.action) {
	                for (var idx = 0; idx < series.length; idx++) {
	                    if (this.groups[series[idx]._groupValue] === false) {
	                        series[idx].visible = false;
	                    }
	                }
	            } else {
	                this.groups = {};
	            }
	        },

	        applyByIndex: function(series, e) {
	            if (e && e.action) {
	                if (this.index[series.index] === false) {
	                    series.visible = false;
	                }
	            } else {
	                this.index = {};
	            }
	        },

	        save: function(series) {
	            if (!series) {
	                return;
	            }

	            if (defined(series._groupValue)) {
	                this.groups[series._groupValue] = series.visible;
	            } else {
	                this.index[series.index] = series.visible;
	            }
	        }
	    });

	    var geom = kendo.geometry;

	    function normalizeStyle(style) {
	        for (var field in style) {
	            if (style[field] === undefined) {
	                style[field] = '';
	            }
	        }

	        return style;
	    }

	    var Tooltip = Observable.extend({
	        init: function(chartElement, options) {
	            var tooltip = this;

	            Observable.fn.init.call(tooltip);

	            this.setOptions(options);

	            tooltip.chartElement = chartElement;

	            tooltip.template = Tooltip.template;
	            if (!tooltip.template) {
	                tooltip.template = Tooltip.template = kendo.template(
	                    "<div class='k-tooltip k-chart-tooltip#= d.rtl ? \" k-rtl\" : \"\"#' " +
	                    "style='display:none; position: absolute; font: #= d.font #;" +
	                    "#if (d.border) {# border: #= d.border.width #px solid; #}#" +
	                    "opacity: #= d.opacity #; filter: alpha(opacity=#= d.opacity * 100 #);'>" +
	                    "</div>", { useWithBlock: false, paramName: "d" });
	            }

	            tooltip.element = $(tooltip.template(tooltip.options));

	            tooltip.move = proxy(tooltip.move, tooltip);
	            tooltip._mouseleave = proxy(tooltip._mouseleave, tooltip);

	            var mobileScrollerSelector = kendo.format("[{0}='content'],[{0}='scroller']", kendo.attr("role"));
	            tooltip._mobileScroller = chartElement.closest(mobileScrollerSelector).data("kendoMobileScroller");
	        },

	        destroy: function() {
	            this._clearShowTimeout();

	            if (this.element) {
	                this.element.off(MOUSELEAVE_NS).remove();
	                this.element = null;
	            }
	        },

	        setOptions: function(options) {
	            this.options = deepExtend({}, this.options, options);
	        },

	        options: {
	            opacity: 1,
	            animation: {
	                duration: TOOLTIP_ANIMATION_DURATION
	            },
	            sharedTemplate:
	                "<table>" +
	                "<th colspan='#= colspan #'>#= categoryText #</th>" +
	                "# for(var i = 0; i < points.length; i++) { #" +
	                "# var point = points[i]; #" +
	                "<tr>" +
	                    "# if(colorMarker) { # " +
	                        "<td><span class='k-chart-shared-tooltip-marker' style='background-color:#:point.series.color#'></span></td>" +
	                    "# } #" +
	                    "# if(nameColumn) { # " +
	                        "<td> #if (point.series.name) {# #: point.series.name #: #} else {# &nbsp; #}#</td>" +
	                    "# } #" +
	                    "<td>#= content(point) #</td>" +
	                "</tr>" +
	                "# } #" +
	                "</table>",
	            categoryFormat: "{0:d}"
	        },

	        move: function() {
	            var tooltip = this,
	                options = tooltip.options,
	                element = tooltip.element,
	                offset;

	            if (!tooltip.anchor || !tooltip.element) {
	                return;
	            }

	            offset = tooltip._offset();
	            if (!tooltip.visible) {
	                element.css({ top: offset.top, left: offset.left });
	            }

	            tooltip.visible = true;
	            tooltip._ensureElement(document.body);
	            element
	                .stop(true, true)
	                .show()
	                .animate({
	                    left: offset.left,
	                    top: offset.top
	                }, options.animation.duration);
	        },

	        _clearShowTimeout: function() {
	            if (this.showTimeout) {
	                clearTimeout(this.showTimeout);
	                this.showTimeout = null;
	            }
	        },

	        getAnchor: function(size) {
	            var anchor = this.anchor;
	            var point = anchor.point;
	            var align = anchor.align;
	            var x = point.left;
	            var y = point.top;
	            if (align.horizontal === "center") {
	                x -= size.width / 2;
	            } else if (align.horizontal === "right") {
	                x -= size.width;
	            }

	            if (align.vertical === "center") {
	                y -= size.height / 2;
	            } else if (align.vertical === "bottom") {
	                y -= size.height;
	            }

	            return {
	                x: x,
	                y: y
	            };
	        },

	        _offset: function() {
	            var tooltip = this,
	                size = tooltip._measure(),
	                anchor = tooltip.getAnchor(size),
	                top = anchor.y,
	                left = anchor.x,
	                zoomLevel = kendo.support.zoomLevel(),
	                viewport = $(window),
	                scrollTop = window.pageYOffset || document.documentElement.scrollTop || 0,
	                scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || 0,
	                movable = (this._mobileScroller || {}).movable;

	            if (!movable || movable.scale === 1) {
	                top += tooltip._fit(top - scrollTop, size.height, outerHeight(viewport) / zoomLevel);
	                left += tooltip._fit(left - scrollLeft, size.width, outerWidth(viewport) / zoomLevel);
	            } else {
	                var transform = geom.transform().scale(movable.scale, movable.scale, [movable.x, movable.y]);
	                var point = new geom.Point(left, top).transform(transform);
	                left = point.x;
	                top = point.y;
	            }

	            return {
	                top: top,
	                left: left
	            };
	        },

	        show: function(e) {
	            this.anchor = e.anchor;
	            this.element.css(normalizeStyle(e.style));
	            this.element.toggleClass(TOOLTIP_INVERSE, !!e.className);
	            this.element.toggleClass(SHARED_TOOLTIP_CLASS, !!e.shared);

	            var content = e.shared ? this._sharedContent(e) : this._pointContent(e.point);
	            this.element.html(content);

	            this._clearShowTimeout();
	            this.showTimeout = setTimeout(this.move, TOOLTIP_SHOW_DELAY);
	        },

	        hide: function() {
	            var tooltip = this;

	            clearTimeout(tooltip.showTimeout);
	            tooltip._hideElement();

	            if (tooltip.visible) {
	                tooltip.point = null;
	                tooltip.visible = false;
	                tooltip.index = null;
	            }
	        },

	        _sharedContent: function(e) {
	            var points = e.points;
	            var nameColumn = dataviz.grep(points, function(point) {
	                return defined(point.series.name);
	            }).length;

	            var colorMarker = e.series.length > 1;
	            var colspan = 1;
	            if (nameColumn) {
	                colspan++;
	            }
	            if (colorMarker) {
	                colspan++;
	            }

	            var template = kendo.template(this.options.sharedTemplate);
	            var content = template({
	                points: points,
	                category: e.category,
	                categoryText: e.categoryText,
	                content: this._pointContent,
	                colorMarker: colorMarker,
	                nameColumn: nameColumn,
	                colspan: colspan
	            });

	            return content;
	        },

	        _measure: function() {
	            this._ensureElement();

	            var size = {
	                width: outerWidth(this.element),
	                height: outerHeight(this.element)
	            };

	            return size;
	        },

	        _ensureElement: function() {
	            if (this.element) {
	                this.element
	                    .appendTo(document.body)
	                    .on(MOUSELEAVE_NS, this._mouseleave);
	            }
	        },

	        _mouseleave: function(e) {
	            var target = e.relatedTarget;
	            var chart = this.chartElement[0];
	            if (target && target !== chart && !$.contains(chart, target)) {
	                this.trigger(LEAVE);
	            }
	        },

	        _hideElement: function() {
	            var tooltip = this;
	            var element = this.element;
	            if (element) {
	                element.fadeOut({
	                    always: function(){
	                        if (!tooltip.visible) {
	                            element.off(MOUSELEAVE_NS).remove();
	                        }
	                    }
	                });
	            }
	        },

	        _pointContent: function(point) {
	            var tooltip = this,
	                options = deepExtend({}, tooltip.options, point.options.tooltip),
	                content, tooltipTemplate;

	            if (defined(point.value)) {
	                content = point.value.toString();
	            }

	            if (options.template) {
	                tooltipTemplate = template(options.template);
	                content = tooltipTemplate({
	                    value: point.value,
	                    category: point.category,
	                    series: point.series,
	                    dataItem: point.dataItem,
	                    percentage: point.percentage,
	                    runningTotal: point.runningTotal,
	                    total: point.total,
	                    low: point.low,
	                    high: point.high,
	                    xLow: point.xLow,
	                    xHigh: point.xHigh,
	                    yLow: point.yLow,
	                    yHigh: point.yHigh
	                });
	            } else if (options.format) {
	                content = point.formatValue(options.format);
	            }

	            return content;
	        },

	        _fit: function(offset, size, viewPortSize) {
	            var output = 0;

	            if (offset + size > viewPortSize) {
	                output = viewPortSize - (offset + size);
	            }

	            if (offset < 0) {
	                output = -offset;
	            }

	            return output;
	        }
	    });

	    var CrosshairTooltip = Tooltip.extend({
	        init: function(chartElement, options) {
	            Tooltip.fn.init.call(this, chartElement, options);
	            this.element.addClass("k-chart-crosshair-tooltip");
	        },

	        show: function(e) {
	            var element = this.element;

	            if (element) {
	                this.anchor = e.anchor;
	                this.element.css(e.style);
	                this.element.html(this.content(e));

	                this.move();
	            }
	        },

	        move: function() {
	            var tooltip = this,
	                element = tooltip.element,
	                offset = tooltip._offset();

	            tooltip._ensureElement();
	            element.css({ top: offset.top, left: offset.left }).show();
	        },

	        content: function(e) {
	            var content = e.value,
	                options = e.crosshair.options.tooltip;

	            if (options.template) {
	                content = template(options.template)({
	                    value: content
	                });
	            }

	            return content;
	        },

	        hide: function() {
	            this.element.hide();
	        }
	    });

	    var ChartPane = Class.extend({
	        init: function(chart, pane) {
	            this._chart = chart;
	            this._pane = pane;
	            this.visual = pane.visual;
	            this.chartsVisual = pane.chartContainer.visual;
	            this.name = pane.options.name;
	        },

	        series: function() {
	            var chart = this._chart;
	            var seriesByPane = chart._plotArea.groupSeriesByPane();
	            var series = seriesByPane[this.name || "default"];

	            var result = [];
	            if (series) {
	                for (var idx = 0; idx < series.length; idx++) {
	                    result.push(new ChartSeries(chart, series[idx]));
	                }
	            }

	            return result;
	        }
	    });

	    var ChartSeries = Class.extend({
	        init: function(chart, options) {
	            this._chart = chart;
	            this._options = options;
	        },

	        points: function(filter) {
	            var points = this._points;
	            if (!points) {
	                var series = this._seriesOptions();
	                var plotArea = this._chart._plotArea;
	                this._points = points = plotArea.pointsBySeriesIndex(series.index);
	            }
	            if (kendo.isFunction(filter)) {
	                points = this._filterPoints(points, filter);
	            }


	            return points;
	        },

	        data: function(data) {
	            var series = this._seriesOptions();
	            if (data) {
	                var chart = this._chart;
	                var plotArea = chart._plotArea;

	                series.data = data;

	                if (series.categoryField) {
	                    var axis = plotArea.seriesCategoryAxis(series);
	                    var options = [].concat(chart.options.categoryAxis);

	                    chart._instance.bindCategoryAxisFromSeries(options[axis.axisIndex], axis.axisIndex);
	                }

	                chart._noTransitionsRedraw();
	                this._clearFields();
	            }

	            return series.data;
	        },

	        findPoint: function(filter) {
	            var points = this.points();
	            for (var idx = 0; idx < points.length; idx++) {
	                if (filter(points[idx])) {
	                    return points[idx];
	                }
	            }
	        },

	        toggleHighlight: function(show, elements) {
	            if (!elements) {
	                elements = this.points();
	            } else if (kendo.isFunction(elements)) {
	                elements = this.points(elements);
	            } else {
	                elements = isArray(elements) ? elements : [elements];
	            }

	            this._chart._instance.togglePointsHighlight(show, elements);
	        },

	        toggleVisibility: function(visible, filter) {
	            var chart = this._chart;
	            var seriesOptions = this._seriesOptions();
	            var hasFilter = kendo.isFunction(filter);
	            if (!hasFilter) {
	                seriesOptions.visible = visible;
	                chart._seriesVisibility.save(seriesOptions);
	            } else {
	                if (inArray(seriesOptions.type, [PIE, DONUT, FUNNEL])) {
	                    var data = this._filterData(filter);
	                    for (var idx = 0; idx < data.length; idx++) {
	                        data[idx].visible = visible;
	                    }
	                } else {
	                    seriesOptions.visible = function(data) {
	                        return filter(data.dataItem) ? visible : true;
	                    };
	                }
	            }

	            chart._noTransitionsRedraw();

	            this._clearFields();
	        },

	        _filterData: function(filter) {
	            var data = this._seriesOptions().data;
	            var length = data.length;
	            var result = [];

	            for (var idx = 0; idx < length; idx++) {
	                if (filter(data[idx])) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        _filterPoints: function(points, filter) {
	            var result = [];
	            var length = points.length;
	            for (var idx = 0; idx < length; idx++) {
	                if (filter(points[idx])) {
	                    result.push(points[idx]);
	                }
	            }
	            return result;
	        },

	        _seriesOptions: function() {
	            var series = this._series;
	            if (!series) {
	                series = this._series = this._chart._seriesOptions(this._options);
	            }
	            return series;
	        },

	        _clearFields: function() {
	            delete this._points;
	            delete this._series;
	        }
	    });

	    dataviz.Tooltip = Tooltip;
	    dataviz.CrosshairTooltip = CrosshairTooltip;
	    dataviz.ChartInstanceObserver = ChartInstanceObserver;
	    dataviz.ChartPane = ChartPane;
	    dataviz.ChartSeries = ChartSeries;

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }),

/***/ 848:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(472);

/***/ }),

/***/ 849:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(464);

/***/ }),

/***/ 850:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(64);

/***/ }),

/***/ 851:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(470);

/***/ }),

/***/ 852:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(168);

/***/ }),

/***/ 853:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(465);

/***/ })

/******/ });

/***/ }),

/***/ 64:
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1057);


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 1057:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(1058),
	        __webpack_require__(1059)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dataviz.core",
	    name: "Core",
	    description: "The DataViz core functions",
	    category: "dataviz",
	    depends: [ "core", "drawing" ],
	    hidden: true
	};

	}, __webpack_require__(3));

/***/ }),

/***/ 1058:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(469);

/***/ }),

/***/ 1059:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(519);

/***/ })

/******/ });

/***/ })

/******/ });
//# sourceMappingURL=avl-xy-chart.js.map